/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp_name_"];
/******/ 	window["webpackJsonp_name_"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		5:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"0":"admin","1":"juht","2":"kasutaja","3":"main","4":"raama"}[chunkId]||chunkId) + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';var createEmptyFilterData=__webpack_require__(3);function DocContext(){var _this=this;this.filter={},this.libs={},this.menu=[],this.pictures=[],this.keel='EST',this.userData={},this.initFilter=function(docTypeId){/**
	         * метод создаст пустой фильтр по переданной конфигурации
	         */if(!docTypeId){docTypeId=_this.docTypeId;// проверим наличие конфигураций. если нет, то вернем пустой массив
	if(!DocContext.gridConfig||!DocContext.gridConfig[docTypeId].length){DocContext.filter[docTypeId]=[];}else{DocContext.filter[docTypeId]=createEmptyFilterData(DocContext.gridConfig[docTypeId],[],docTypeId);}}};};module.export=DocContext;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";module.exports=function(module){if(!module.webpackPolyfill){module.deprecate=function(){};module.paths=[];// module.parent = undefined by default
	module.children=[];module.webpackPolyfill=1;}return module;};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var DocContext=__webpack_require__(1);/**
	 * создаст массив для создания фильтра
	 */function createEmptyFilterData(gridConfig,filterData,docTypeId){filterData=gridConfig.map(function(row){// props.data пустое, создаем
	var value=row.value?row.value:null;if(row.default){var defaultValue=getDefaultDates(row.default);value=defaultValue.start;if(row.interval){row.start=defaultValue.start;row[row.id+'_start']=defaultValue.start;row.end=defaultValue.end;row[row.id+'_end']=defaultValue.end;}}if(!row.type){row.type='text';}row.value=value;return row;});DocContext.filter[docTypeId]=filterData;return filterData;}module.exports=createEmptyFilterData;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = ReactDOM;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";if(process.env.NODE_ENV==="production"){module.exports=__webpack_require__(7);}else{module.exports=__webpack_require__(38);}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	'use strict';// shim for using process in browser
	var process=module.exports={};// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations
	return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
	if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
	return cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	return cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
	return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
	if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
	return cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	return cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	// Some versions of I.E. have different rules for clearTimeout vs setTimeout
	return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects
	function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues
	process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _interopDefault(e){return e&&"object"==(typeof e==="undefined"?"undefined":_typeof(e))&&"default"in e?e.default:e;}Object.defineProperty(exports,"__esModule",{value:!0});var reactRouter=__webpack_require__(8),React=_interopDefault(__webpack_require__(10)),history=__webpack_require__(20);__webpack_require__(11),__webpack_require__(28);var invariant=_interopDefault(__webpack_require__(29));function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r){Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);}}return e;}).apply(this,arguments);}function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),_setPrototypeOf(e.prototype.constructor=e,t);}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e;})(e,t);}function _objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++){r=a[o],0<=t.indexOf(r)||(n[r]=e[r]);}return n;}var BrowserRouter=function(n){function e(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++){r[o]=arguments[o];}return(e=n.call.apply(n,[this].concat(r))||this).history=history.createBrowserHistory(e.props),e;}return _inheritsLoose(e,n),e.prototype.render=function(){return React.createElement(reactRouter.Router,{history:this.history,children:this.props.children});},e;}(React.Component),HashRouter=function(n){function e(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++){r[o]=arguments[o];}return(e=n.call.apply(n,[this].concat(r))||this).history=history.createHashHistory(e.props),e;}return _inheritsLoose(e,n),e.prototype.render=function(){return React.createElement(reactRouter.Router,{history:this.history,children:this.props.children});},e;}(React.Component),resolveToLocation=function resolveToLocation(e,t){return"function"==typeof e?e(t):e;},normalizeToLocation=function normalizeToLocation(e,t){return"string"==typeof e?history.createLocation(e,null,null,t):e;},forwardRefShim=function forwardRefShim(e){return e;},forwardRef=React.forwardRef;function isModifiedEvent(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey);}void 0===forwardRef&&(forwardRef=forwardRefShim);var LinkAnchor=forwardRef(function(e,t){var r=e.innerRef,o=e.navigate,n=e.onClick,a=_objectWithoutPropertiesLoose(e,["innerRef","navigate","onClick"]),i=a.target,c=_extends({},a,{onClick:function onClick(t){try{n&&n(t);}catch(e){throw t.preventDefault(),e;}t.defaultPrevented||0!==t.button||i&&"_self"!==i||isModifiedEvent(t)||(t.preventDefault(),o());}});return c.ref=forwardRefShim!==forwardRef&&t||r,React.createElement("a",c);}),Link=forwardRef(function(e,a){var t=e.component,i=void 0===t?LinkAnchor:t,c=e.replace,u=e.to,f=e.innerRef,s=_objectWithoutPropertiesLoose(e,["component","replace","to","innerRef"]);return React.createElement(reactRouter.__RouterContext.Consumer,null,function(r){r||invariant(!1);var o=r.history,e=normalizeToLocation(resolveToLocation(u,r.location),r.location),t=e?o.createHref(e):"",n=_extends({},s,{href:t,navigate:function navigate(){var e=resolveToLocation(u,r.location),t=history.createPath(r.location)===history.createPath(normalizeToLocation(e));(c||t?o.replace:o.push)(e);}});return forwardRefShim!==forwardRef?n.ref=a||f:n.innerRef=f,React.createElement(i,n);});}),forwardRefShim$1=function forwardRefShim$1(e){return e;},forwardRef$1=React.forwardRef;function joinClassnames(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++){t[r]=arguments[r];}return t.filter(function(e){return e;}).join(" ");}void 0===forwardRef$1&&(forwardRef$1=forwardRefShim$1);var NavLink=forwardRef$1(function(e,s){var t=e["aria-current"],l=void 0===t?"page":t,r=e.activeClassName,p=void 0===r?"active":r,R=e.activeStyle,h=e.className,y=e.exact,d=e.isActive,m=e.location,v=e.sensitive,b=e.strict,P=e.style,w=e.to,x=e.innerRef,g=_objectWithoutPropertiesLoose(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return React.createElement(reactRouter.__RouterContext.Consumer,null,function(e){e||invariant(!1);var t=m||e.location,r=normalizeToLocation(resolveToLocation(w,t),t),o=r.pathname,n=o&&o.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),a=n?reactRouter.matchPath(t.pathname,{path:n,exact:y,sensitive:v,strict:b}):null,i=!!(d?d(a,t):a),c="function"==typeof h?h(i):h,u="function"==typeof P?P(i):P;i&&(c=joinClassnames(c,p),u=_extends({},u,R));var f=_extends({"aria-current":i&&l||null,className:c,style:u,to:r},g);return forwardRefShim$1!==forwardRef$1?f.ref=s||x:f.innerRef=x,React.createElement(Link,f);});});Object.defineProperty(exports,"MemoryRouter",{enumerable:!0,get:function get(){return reactRouter.MemoryRouter;}}),Object.defineProperty(exports,"Prompt",{enumerable:!0,get:function get(){return reactRouter.Prompt;}}),Object.defineProperty(exports,"Redirect",{enumerable:!0,get:function get(){return reactRouter.Redirect;}}),Object.defineProperty(exports,"Route",{enumerable:!0,get:function get(){return reactRouter.Route;}}),Object.defineProperty(exports,"Router",{enumerable:!0,get:function get(){return reactRouter.Router;}}),Object.defineProperty(exports,"StaticRouter",{enumerable:!0,get:function get(){return reactRouter.StaticRouter;}}),Object.defineProperty(exports,"Switch",{enumerable:!0,get:function get(){return reactRouter.Switch;}}),Object.defineProperty(exports,"generatePath",{enumerable:!0,get:function get(){return reactRouter.generatePath;}}),Object.defineProperty(exports,"matchPath",{enumerable:!0,get:function get(){return reactRouter.matchPath;}}),Object.defineProperty(exports,"useHistory",{enumerable:!0,get:function get(){return reactRouter.useHistory;}}),Object.defineProperty(exports,"useLocation",{enumerable:!0,get:function get(){return reactRouter.useLocation;}}),Object.defineProperty(exports,"useParams",{enumerable:!0,get:function get(){return reactRouter.useParams;}}),Object.defineProperty(exports,"useRouteMatch",{enumerable:!0,get:function get(){return reactRouter.useRouteMatch;}}),Object.defineProperty(exports,"withRouter",{enumerable:!0,get:function get(){return reactRouter.withRouter;}}),exports.BrowserRouter=BrowserRouter,exports.HashRouter=HashRouter,exports.Link=Link,exports.NavLink=NavLink;//# sourceMappingURL=react-router-dom.min.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";if(process.env.NODE_ENV==="production"){module.exports=__webpack_require__(9);}else{module.exports=__webpack_require__(37);}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _interopDefault(t){return t&&"object"==(typeof t==="undefined"?"undefined":_typeof(t))&&"default"in t?t.default:t;}Object.defineProperty(exports,"__esModule",{value:!0});var React=_interopDefault(__webpack_require__(10));__webpack_require__(11);var history=__webpack_require__(20);__webpack_require__(28);var createContext=_interopDefault(__webpack_require__(31)),invariant=_interopDefault(__webpack_require__(29)),pathToRegexp=_interopDefault(__webpack_require__(34));__webpack_require__(12);var hoistStatics=_interopDefault(__webpack_require__(36));function _extends(){return(_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n){Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);}}return t;}).apply(this,arguments);}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),_setPrototypeOf(t.prototype.constructor=t,e);}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t;})(t,e);}function _objectWithoutPropertiesLoose(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++){n=a[o],0<=e.indexOf(n)||(r[n]=t[n]);}return r;}var createNamedContext=function createNamedContext(t){var e=createContext();return e.displayName=t,e;},historyContext=createNamedContext("Router-History"),context=createNamedContext("Router"),Router=function(n){function t(t){var e;return(e=n.call(this,t)||this).state={location:t.history.location},e._isMounted=!1,e._pendingLocation=null,t.staticContext||(e.unlisten=t.history.listen(function(t){e._isMounted?e.setState({location:t}):e._pendingLocation=t;})),e;}_inheritsLoose(t,n),t.computeRootMatch=function(t){return{path:"/",url:"/",params:{},isExact:"/"===t};};var e=t.prototype;return e.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation});},e.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null);},e.render=function(){return React.createElement(context.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},React.createElement(historyContext.Provider,{children:this.props.children||null,value:this.props.history}));},t;}(React.Component),MemoryRouter=function(r){function t(){for(var t,e=arguments.length,n=new Array(e),o=0;o<e;o++){n[o]=arguments[o];}return(t=r.call.apply(r,[this].concat(n))||this).history=history.createMemoryHistory(t.props),t;}return _inheritsLoose(t,r),t.prototype.render=function(){return React.createElement(Router,{history:this.history,children:this.props.children});},t;}(React.Component),Lifecycle=function(t){function e(){return t.apply(this,arguments)||this;}_inheritsLoose(e,t);var n=e.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this);},n.componentDidUpdate=function(t){this.props.onUpdate&&this.props.onUpdate.call(this,this,t);},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this);},n.render=function(){return null;},e;}(React.Component);function Prompt(t){var o=t.message,e=t.when,r=void 0===e||e;return React.createElement(context.Consumer,null,function(t){if(t||invariant(!1),!r||t.staticContext)return null;var n=t.history.block;return React.createElement(Lifecycle,{onMount:function onMount(t){t.release=n(o);},onUpdate:function onUpdate(t,e){e.message!==o&&(t.release(),t.release=n(o));},onUnmount:function onUnmount(t){t.release();},message:o});});}var cache={},cacheLimit=1e4,cacheCount=0;function compilePath(t){if(cache[t])return cache[t];var e=pathToRegexp.compile(t);return cacheCount<cacheLimit&&(cache[t]=e,cacheCount++),e;}function generatePath(t,e){return void 0===t&&(t="/"),void 0===e&&(e={}),"/"===t?t:compilePath(t)(e,{pretty:!0});}function Redirect(t){var a=t.computedMatch,i=t.to,e=t.push,c=void 0!==e&&e;return React.createElement(context.Consumer,null,function(t){t||invariant(!1);var e=t.history,n=t.staticContext,o=c?e.push:e.replace,r=history.createLocation(a?"string"==typeof i?generatePath(i,a.params):_extends({},i,{pathname:generatePath(i.pathname,a.params)}):i);return n?(o(r),null):React.createElement(Lifecycle,{onMount:function onMount(){o(r);},onUpdate:function onUpdate(t,e){var n=history.createLocation(e.to);history.locationsAreEqual(n,_extends({},r,{key:n.key}))||o(r);},to:i});});}var cache$1={},cacheLimit$1=1e4,cacheCount$1=0;function compilePath$1(t,e){var n=""+e.end+e.strict+e.sensitive,o=cache$1[n]||(cache$1[n]={});if(o[t])return o[t];var r=[],a={regexp:pathToRegexp(t,r,e),keys:r};return cacheCount$1<cacheLimit$1&&(o[t]=a,cacheCount$1++),a;}function matchPath(u,t){void 0===t&&(t={}),"string"!=typeof t&&!Array.isArray(t)||(t={path:t});var e=t,n=e.path,o=e.exact,p=void 0!==o&&o,r=e.strict,h=void 0!==r&&r,a=e.sensitive,l=void 0!==a&&a;return[].concat(n).reduce(function(t,e){if(!e&&""!==e)return null;if(t)return t;var n=compilePath$1(e,{end:p,strict:h,sensitive:l}),o=n.regexp,r=n.keys,a=o.exec(u);if(!a)return null;var i=a[0],c=a.slice(1),s=u===i;return p&&!s?null:{path:e,url:"/"===e&&""===i?"/":i,isExact:s,params:r.reduce(function(t,e,n){return t[e.name]=c[n],t;},{})};},null);}function isEmptyChildren(t){return 0===React.Children.count(t);}var Route=function(t){function e(){return t.apply(this,arguments)||this;}return _inheritsLoose(e,t),e.prototype.render=function(){var c=this;return React.createElement(context.Consumer,null,function(t){t||invariant(!1);var e=c.props.location||t.location,n=_extends({},t,{location:e,match:c.props.computedMatch?c.props.computedMatch:c.props.path?matchPath(e.pathname,c.props):t.match}),o=c.props,r=o.children,a=o.component,i=o.render;return Array.isArray(r)&&isEmptyChildren(r)&&(r=null),React.createElement(context.Provider,{value:n},n.match?r?"function"==typeof r?r(n):r:a?React.createElement(a,n):i?i(n):null:"function"==typeof r?r(n):null);});},e;}(React.Component);function addLeadingSlash(t){return"/"===t.charAt(0)?t:"/"+t;}function addBasename(t,e){return t?_extends({},e,{pathname:addLeadingSlash(t)+e.pathname}):e;}function stripBasename(t,e){if(!t)return e;var n=addLeadingSlash(t);return 0!==e.pathname.indexOf(n)?e:_extends({},e,{pathname:e.pathname.substr(n.length)});}function createURL(t){return"string"==typeof t?t:history.createPath(t);}function staticHandler(t){return function(){invariant(!1);};}function noop(){}var StaticRouter=function(r){function t(){for(var e,t=arguments.length,n=new Array(t),o=0;o<t;o++){n[o]=arguments[o];}return(e=r.call.apply(r,[this].concat(n))||this).handlePush=function(t){return e.navigateTo(t,"PUSH");},e.handleReplace=function(t){return e.navigateTo(t,"REPLACE");},e.handleListen=function(){return noop;},e.handleBlock=function(){return noop;},e;}_inheritsLoose(t,r);var e=t.prototype;return e.navigateTo=function(t,e){var n=this.props,o=n.basename,r=void 0===o?"":o,a=n.context,i=void 0===a?{}:a;i.action=e,i.location=addBasename(r,history.createLocation(t)),i.url=createURL(i.location);},e.render=function(){var t=this.props,e=t.basename,n=void 0===e?"":e,o=t.context,r=void 0===o?{}:o,a=t.location,i=void 0===a?"/":a,c=_objectWithoutPropertiesLoose(t,["basename","context","location"]),s={createHref:function createHref(t){return addLeadingSlash(n+createURL(t));},action:"POP",location:stripBasename(n,history.createLocation(i)),push:this.handlePush,replace:this.handleReplace,go:staticHandler(),goBack:staticHandler(),goForward:staticHandler(),listen:this.handleListen,block:this.handleBlock};return React.createElement(Router,_extends({},c,{history:s,staticContext:r}));},t;}(React.Component),Switch=function(t){function e(){return t.apply(this,arguments)||this;}return _inheritsLoose(e,t),e.prototype.render=function(){var t=this;return React.createElement(context.Consumer,null,function(n){n||invariant(!1);var o,r,a=t.props.location||n.location;return React.Children.forEach(t.props.children,function(t){if(null==r&&React.isValidElement(t)){var e=(o=t).props.path||t.props.from;r=e?matchPath(a.pathname,_extends({},t.props,{path:e})):n.match;}}),r?React.cloneElement(o,{location:a,computedMatch:r}):null;});},e;}(React.Component);function withRouter(o){function t(t){var e=t.wrappedComponentRef,n=_objectWithoutPropertiesLoose(t,["wrappedComponentRef"]);return React.createElement(context.Consumer,null,function(t){return t||invariant(!1),React.createElement(o,_extends({},n,t,{ref:e}));});}var e="withRouter("+(o.displayName||o.name)+")";return t.displayName=e,t.WrappedComponent=o,hoistStatics(t,o);}var useContext=React.useContext;function useHistory(){return useContext(historyContext);}function useLocation(){return useContext(context).location;}function useParams(){var t=useContext(context).match;return t?t.params:{};}function useRouteMatch(t){var e=useLocation(),n=useContext(context).match;return t?matchPath(e.pathname,t):n;}exports.MemoryRouter=MemoryRouter,exports.Prompt=Prompt,exports.Redirect=Redirect,exports.Route=Route,exports.Router=Router,exports.StaticRouter=StaticRouter,exports.Switch=Switch,exports.__HistoryContext=historyContext,exports.__RouterContext=context,exports.generatePath=generatePath,exports.matchPath=matchPath,exports.useHistory=useHistory,exports.useLocation=useLocation,exports.useParams=useParams,exports.useRouteMatch=useRouteMatch,exports.withRouter=withRouter;//# sourceMappingURL=react-router.min.js.map

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	module.exports = React;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */if(process.env.NODE_ENV!=='production'){var ReactIs=__webpack_require__(12);// By explicitly using `prop-types` you are opting into new development behavior.
	// http://fb.me/prop-types-in-prod
	var throwOnDirectAccess=true;module.exports=__webpack_require__(15)(ReactIs.isElement,throwOnDirectAccess);}else{// By explicitly using `prop-types` you are opting into new production behavior.
	// http://fb.me/prop-types-in-prod
	module.exports=__webpack_require__(19)();}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';if(process.env.NODE_ENV==='production'){module.exports=__webpack_require__(13);}else{module.exports=__webpack_require__(14);}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;function z(a){if("object"===(typeof a==="undefined"?"undefined":_typeof(a))&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u;}}case d:return u;}}}function A(a){return z(a)===m;}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l;};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k;};exports.isContextProvider=function(a){return z(a)===h;};exports.isElement=function(a){return"object"===(typeof a==="undefined"?"undefined":_typeof(a))&&null!==a&&a.$$typeof===c;};exports.isForwardRef=function(a){return z(a)===n;};exports.isFragment=function(a){return z(a)===e;};exports.isLazy=function(a){return z(a)===t;};exports.isMemo=function(a){return z(a)===r;};exports.isPortal=function(a){return z(a)===d;};exports.isProfiler=function(a){return z(a)===g;};exports.isStrictMode=function(a){return z(a)===f;};exports.isSuspense=function(a){return z(a)===p;};exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===(typeof a==="undefined"?"undefined":_typeof(a))&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v);};exports.typeOf=z;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};if(process.env.NODE_ENV!=="production"){(function(){'use strict';// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol=typeof Symbol==='function'&&Symbol.for;var REACT_ELEMENT_TYPE=hasSymbol?Symbol.for('react.element'):0xeac7;var REACT_PORTAL_TYPE=hasSymbol?Symbol.for('react.portal'):0xeaca;var REACT_FRAGMENT_TYPE=hasSymbol?Symbol.for('react.fragment'):0xeacb;var REACT_STRICT_MODE_TYPE=hasSymbol?Symbol.for('react.strict_mode'):0xeacc;var REACT_PROFILER_TYPE=hasSymbol?Symbol.for('react.profiler'):0xead2;var REACT_PROVIDER_TYPE=hasSymbol?Symbol.for('react.provider'):0xeacd;var REACT_CONTEXT_TYPE=hasSymbol?Symbol.for('react.context'):0xeace;// TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?
	var REACT_ASYNC_MODE_TYPE=hasSymbol?Symbol.for('react.async_mode'):0xeacf;var REACT_CONCURRENT_MODE_TYPE=hasSymbol?Symbol.for('react.concurrent_mode'):0xeacf;var REACT_FORWARD_REF_TYPE=hasSymbol?Symbol.for('react.forward_ref'):0xead0;var REACT_SUSPENSE_TYPE=hasSymbol?Symbol.for('react.suspense'):0xead1;var REACT_SUSPENSE_LIST_TYPE=hasSymbol?Symbol.for('react.suspense_list'):0xead8;var REACT_MEMO_TYPE=hasSymbol?Symbol.for('react.memo'):0xead3;var REACT_LAZY_TYPE=hasSymbol?Symbol.for('react.lazy'):0xead4;var REACT_BLOCK_TYPE=hasSymbol?Symbol.for('react.block'):0xead9;var REACT_FUNDAMENTAL_TYPE=hasSymbol?Symbol.for('react.fundamental'):0xead5;var REACT_RESPONDER_TYPE=hasSymbol?Symbol.for('react.responder'):0xead6;var REACT_SCOPE_TYPE=hasSymbol?Symbol.for('react.scope'):0xead7;function isValidElementType(type){return typeof type==='string'||typeof type==='function'||// Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	type===REACT_FRAGMENT_TYPE||type===REACT_CONCURRENT_MODE_TYPE||type===REACT_PROFILER_TYPE||type===REACT_STRICT_MODE_TYPE||type===REACT_SUSPENSE_TYPE||type===REACT_SUSPENSE_LIST_TYPE||(typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type!==null&&(type.$$typeof===REACT_LAZY_TYPE||type.$$typeof===REACT_MEMO_TYPE||type.$$typeof===REACT_PROVIDER_TYPE||type.$$typeof===REACT_CONTEXT_TYPE||type.$$typeof===REACT_FORWARD_REF_TYPE||type.$$typeof===REACT_FUNDAMENTAL_TYPE||type.$$typeof===REACT_RESPONDER_TYPE||type.$$typeof===REACT_SCOPE_TYPE||type.$$typeof===REACT_BLOCK_TYPE);}function typeOf(object){if((typeof object==='undefined'?'undefined':_typeof(object))==='object'&&object!==null){var $$typeof=object.$$typeof;switch($$typeof){case REACT_ELEMENT_TYPE:var type=object.type;switch(type){case REACT_ASYNC_MODE_TYPE:case REACT_CONCURRENT_MODE_TYPE:case REACT_FRAGMENT_TYPE:case REACT_PROFILER_TYPE:case REACT_STRICT_MODE_TYPE:case REACT_SUSPENSE_TYPE:return type;default:var $$typeofType=type&&type.$$typeof;switch($$typeofType){case REACT_CONTEXT_TYPE:case REACT_FORWARD_REF_TYPE:case REACT_LAZY_TYPE:case REACT_MEMO_TYPE:case REACT_PROVIDER_TYPE:return $$typeofType;default:return $$typeof;}}case REACT_PORTAL_TYPE:return $$typeof;}}return undefined;}// AsyncMode is deprecated along with isAsyncMode
	var AsyncMode=REACT_ASYNC_MODE_TYPE;var ConcurrentMode=REACT_CONCURRENT_MODE_TYPE;var ContextConsumer=REACT_CONTEXT_TYPE;var ContextProvider=REACT_PROVIDER_TYPE;var Element=REACT_ELEMENT_TYPE;var ForwardRef=REACT_FORWARD_REF_TYPE;var Fragment=REACT_FRAGMENT_TYPE;var Lazy=REACT_LAZY_TYPE;var Memo=REACT_MEMO_TYPE;var Portal=REACT_PORTAL_TYPE;var Profiler=REACT_PROFILER_TYPE;var StrictMode=REACT_STRICT_MODE_TYPE;var Suspense=REACT_SUSPENSE_TYPE;var hasWarnedAboutDeprecatedIsAsyncMode=false;// AsyncMode should be deprecated
	function isAsyncMode(object){{if(!hasWarnedAboutDeprecatedIsAsyncMode){hasWarnedAboutDeprecatedIsAsyncMode=true;// Using console['warn'] to evade Babel and ESLint
	console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, '+'and will be removed in React 17+. Update your code to use '+'ReactIs.isConcurrentMode() instead. It has the exact same API.');}}return isConcurrentMode(object)||typeOf(object)===REACT_ASYNC_MODE_TYPE;}function isConcurrentMode(object){return typeOf(object)===REACT_CONCURRENT_MODE_TYPE;}function isContextConsumer(object){return typeOf(object)===REACT_CONTEXT_TYPE;}function isContextProvider(object){return typeOf(object)===REACT_PROVIDER_TYPE;}function isElement(object){return(typeof object==='undefined'?'undefined':_typeof(object))==='object'&&object!==null&&object.$$typeof===REACT_ELEMENT_TYPE;}function isForwardRef(object){return typeOf(object)===REACT_FORWARD_REF_TYPE;}function isFragment(object){return typeOf(object)===REACT_FRAGMENT_TYPE;}function isLazy(object){return typeOf(object)===REACT_LAZY_TYPE;}function isMemo(object){return typeOf(object)===REACT_MEMO_TYPE;}function isPortal(object){return typeOf(object)===REACT_PORTAL_TYPE;}function isProfiler(object){return typeOf(object)===REACT_PROFILER_TYPE;}function isStrictMode(object){return typeOf(object)===REACT_STRICT_MODE_TYPE;}function isSuspense(object){return typeOf(object)===REACT_SUSPENSE_TYPE;}exports.AsyncMode=AsyncMode;exports.ConcurrentMode=ConcurrentMode;exports.ContextConsumer=ContextConsumer;exports.ContextProvider=ContextProvider;exports.Element=Element;exports.ForwardRef=ForwardRef;exports.Fragment=Fragment;exports.Lazy=Lazy;exports.Memo=Memo;exports.Portal=Portal;exports.Profiler=Profiler;exports.StrictMode=StrictMode;exports.Suspense=Suspense;exports.isAsyncMode=isAsyncMode;exports.isConcurrentMode=isConcurrentMode;exports.isContextConsumer=isContextConsumer;exports.isContextProvider=isContextProvider;exports.isElement=isElement;exports.isForwardRef=isForwardRef;exports.isFragment=isFragment;exports.isLazy=isLazy;exports.isMemo=isMemo;exports.isPortal=isPortal;exports.isProfiler=isProfiler;exports.isStrictMode=isStrictMode;exports.isSuspense=isSuspense;exports.isValidElementType=isValidElementType;exports.typeOf=typeOf;})();}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var ReactIs=__webpack_require__(12);var assign=__webpack_require__(16);var ReactPropTypesSecret=__webpack_require__(17);var checkPropTypes=__webpack_require__(18);var has=Function.call.bind(Object.prototype.hasOwnProperty);var printWarning=function printWarning(){};if(process.env.NODE_ENV!=='production'){printWarning=function printWarning(text){var message='Warning: '+text;if(typeof console!=='undefined'){console.error(message);}try{// --- Welcome to debugging React ---
	// This error was thrown as a convenience so that you can use this stack
	// to find the callsite that caused this warning to fire.
	throw new Error(message);}catch(x){}};}function emptyFunctionThatReturnsNull(){return null;}module.exports=function(isValidElement,throwOnDirectAccess){/* global Symbol */var ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';// Before Symbol spec.
	/**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */function getIteratorFn(maybeIterable){var iteratorFn=maybeIterable&&(ITERATOR_SYMBOL&&maybeIterable[ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL]);if(typeof iteratorFn==='function'){return iteratorFn;}}/**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */var ANONYMOUS='<<anonymous>>';// Important!
	// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	var ReactPropTypes={array:createPrimitiveTypeChecker('array'),bool:createPrimitiveTypeChecker('boolean'),func:createPrimitiveTypeChecker('function'),number:createPrimitiveTypeChecker('number'),object:createPrimitiveTypeChecker('object'),string:createPrimitiveTypeChecker('string'),symbol:createPrimitiveTypeChecker('symbol'),any:createAnyTypeChecker(),arrayOf:createArrayOfTypeChecker,element:createElementTypeChecker(),elementType:createElementTypeTypeChecker(),instanceOf:createInstanceTypeChecker,node:createNodeChecker(),objectOf:createObjectOfTypeChecker,oneOf:createEnumTypeChecker,oneOfType:createUnionTypeChecker,shape:createShapeTypeChecker,exact:createStrictShapeTypeChecker};/**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   *//*eslint-disable no-self-compare*/function is(x,y){// SameValue algorithm
	if(x===y){// Steps 1-5, 7-10
	// Steps 6.b-6.e: +0 != -0
	return x!==0||1/x===1/y;}else{// Step 6.a: NaN == NaN
	return x!==x&&y!==y;}}/*eslint-enable no-self-compare*//**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */function PropTypeError(message){this.message=message;this.stack='';}// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype=Error.prototype;function createChainableTypeChecker(validate){if(process.env.NODE_ENV!=='production'){var manualPropTypeCallCache={};var manualPropTypeWarningCount=0;}function checkType(isRequired,props,propName,componentName,location,propFullName,secret){componentName=componentName||ANONYMOUS;propFullName=propFullName||propName;if(secret!==ReactPropTypesSecret){if(throwOnDirectAccess){// New behavior only for users of `prop-types` package
	var err=new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. '+'Use `PropTypes.checkPropTypes()` to call them. '+'Read more at http://fb.me/use-check-prop-types');err.name='Invariant Violation';throw err;}else if(process.env.NODE_ENV!=='production'&&typeof console!=='undefined'){// Old behavior for people using React.PropTypes
	var cacheKey=componentName+':'+propName;if(!manualPropTypeCallCache[cacheKey]&&// Avoid spamming the console because they are often not actionable except for lib authors
	manualPropTypeWarningCount<3){printWarning('You are manually calling a React.PropTypes validation '+'function for the `'+propFullName+'` prop on `'+componentName+'`. This is deprecated '+'and will throw in the standalone `prop-types` package. '+'You may be seeing this warning due to a third-party PropTypes '+'library. See https://fb.me/react-warning-dont-call-proptypes '+'for details.');manualPropTypeCallCache[cacheKey]=true;manualPropTypeWarningCount++;}}}if(props[propName]==null){if(isRequired){if(props[propName]===null){return new PropTypeError('The '+location+' `'+propFullName+'` is marked as required '+('in `'+componentName+'`, but its value is `null`.'));}return new PropTypeError('The '+location+' `'+propFullName+'` is marked as required in '+('`'+componentName+'`, but its value is `undefined`.'));}return null;}else{return validate(props,propName,componentName,location,propFullName);}}var chainedCheckType=checkType.bind(null,false);chainedCheckType.isRequired=checkType.bind(null,true);return chainedCheckType;}function createPrimitiveTypeChecker(expectedType){function validate(props,propName,componentName,location,propFullName,secret){var propValue=props[propName];var propType=getPropType(propValue);if(propType!==expectedType){// `propValue` being instance of, say, date/regexp, pass the 'object'
	// check, but we can offer a more precise error message here rather than
	// 'of type `object`'.
	var preciseType=getPreciseType(propValue);return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type '+('`'+preciseType+'` supplied to `'+componentName+'`, expected ')+('`'+expectedType+'`.'));}return null;}return createChainableTypeChecker(validate);}function createAnyTypeChecker(){return createChainableTypeChecker(emptyFunctionThatReturnsNull);}function createArrayOfTypeChecker(typeChecker){function validate(props,propName,componentName,location,propFullName){if(typeof typeChecker!=='function'){return new PropTypeError('Property `'+propFullName+'` of component `'+componentName+'` has invalid PropType notation inside arrayOf.');}var propValue=props[propName];if(!Array.isArray(propValue)){var propType=getPropType(propValue);return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type '+('`'+propType+'` supplied to `'+componentName+'`, expected an array.'));}for(var i=0;i<propValue.length;i++){var error=typeChecker(propValue,i,componentName,location,propFullName+'['+i+']',ReactPropTypesSecret);if(error instanceof Error){return error;}}return null;}return createChainableTypeChecker(validate);}function createElementTypeChecker(){function validate(props,propName,componentName,location,propFullName){var propValue=props[propName];if(!isValidElement(propValue)){var propType=getPropType(propValue);return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type '+('`'+propType+'` supplied to `'+componentName+'`, expected a single ReactElement.'));}return null;}return createChainableTypeChecker(validate);}function createElementTypeTypeChecker(){function validate(props,propName,componentName,location,propFullName){var propValue=props[propName];if(!ReactIs.isValidElementType(propValue)){var propType=getPropType(propValue);return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type '+('`'+propType+'` supplied to `'+componentName+'`, expected a single ReactElement type.'));}return null;}return createChainableTypeChecker(validate);}function createInstanceTypeChecker(expectedClass){function validate(props,propName,componentName,location,propFullName){if(!(props[propName]instanceof expectedClass)){var expectedClassName=expectedClass.name||ANONYMOUS;var actualClassName=getClassName(props[propName]);return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type '+('`'+actualClassName+'` supplied to `'+componentName+'`, expected ')+('instance of `'+expectedClassName+'`.'));}return null;}return createChainableTypeChecker(validate);}function createEnumTypeChecker(expectedValues){if(!Array.isArray(expectedValues)){if(process.env.NODE_ENV!=='production'){if(arguments.length>1){printWarning('Invalid arguments supplied to oneOf, expected an array, got '+arguments.length+' arguments. '+'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');}else{printWarning('Invalid argument supplied to oneOf, expected an array.');}}return emptyFunctionThatReturnsNull;}function validate(props,propName,componentName,location,propFullName){var propValue=props[propName];for(var i=0;i<expectedValues.length;i++){if(is(propValue,expectedValues[i])){return null;}}var valuesString=JSON.stringify(expectedValues,function replacer(key,value){var type=getPreciseType(value);if(type==='symbol'){return String(value);}return value;});return new PropTypeError('Invalid '+location+' `'+propFullName+'` of value `'+String(propValue)+'` '+('supplied to `'+componentName+'`, expected one of '+valuesString+'.'));}return createChainableTypeChecker(validate);}function createObjectOfTypeChecker(typeChecker){function validate(props,propName,componentName,location,propFullName){if(typeof typeChecker!=='function'){return new PropTypeError('Property `'+propFullName+'` of component `'+componentName+'` has invalid PropType notation inside objectOf.');}var propValue=props[propName];var propType=getPropType(propValue);if(propType!=='object'){return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type '+('`'+propType+'` supplied to `'+componentName+'`, expected an object.'));}for(var key in propValue){if(has(propValue,key)){var error=typeChecker(propValue,key,componentName,location,propFullName+'.'+key,ReactPropTypesSecret);if(error instanceof Error){return error;}}}return null;}return createChainableTypeChecker(validate);}function createUnionTypeChecker(arrayOfTypeCheckers){if(!Array.isArray(arrayOfTypeCheckers)){process.env.NODE_ENV!=='production'?printWarning('Invalid argument supplied to oneOfType, expected an instance of array.'):void 0;return emptyFunctionThatReturnsNull;}for(var i=0;i<arrayOfTypeCheckers.length;i++){var checker=arrayOfTypeCheckers[i];if(typeof checker!=='function'){printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but '+'received '+getPostfixForTypeWarning(checker)+' at index '+i+'.');return emptyFunctionThatReturnsNull;}}function validate(props,propName,componentName,location,propFullName){for(var i=0;i<arrayOfTypeCheckers.length;i++){var checker=arrayOfTypeCheckers[i];if(checker(props,propName,componentName,location,propFullName,ReactPropTypesSecret)==null){return null;}}return new PropTypeError('Invalid '+location+' `'+propFullName+'` supplied to '+('`'+componentName+'`.'));}return createChainableTypeChecker(validate);}function createNodeChecker(){function validate(props,propName,componentName,location,propFullName){if(!isNode(props[propName])){return new PropTypeError('Invalid '+location+' `'+propFullName+'` supplied to '+('`'+componentName+'`, expected a ReactNode.'));}return null;}return createChainableTypeChecker(validate);}function createShapeTypeChecker(shapeTypes){function validate(props,propName,componentName,location,propFullName){var propValue=props[propName];var propType=getPropType(propValue);if(propType!=='object'){return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type `'+propType+'` '+('supplied to `'+componentName+'`, expected `object`.'));}for(var key in shapeTypes){var checker=shapeTypes[key];if(!checker){continue;}var error=checker(propValue,key,componentName,location,propFullName+'.'+key,ReactPropTypesSecret);if(error){return error;}}return null;}return createChainableTypeChecker(validate);}function createStrictShapeTypeChecker(shapeTypes){function validate(props,propName,componentName,location,propFullName){var propValue=props[propName];var propType=getPropType(propValue);if(propType!=='object'){return new PropTypeError('Invalid '+location+' `'+propFullName+'` of type `'+propType+'` '+('supplied to `'+componentName+'`, expected `object`.'));}// We need to check all keys in case some are required but missing from
	// props.
	var allKeys=assign({},props[propName],shapeTypes);for(var key in allKeys){var checker=shapeTypes[key];if(!checker){return new PropTypeError('Invalid '+location+' `'+propFullName+'` key `'+key+'` supplied to `'+componentName+'`.'+'\nBad object: '+JSON.stringify(props[propName],null,'  ')+'\nValid keys: '+JSON.stringify(Object.keys(shapeTypes),null,'  '));}var error=checker(propValue,key,componentName,location,propFullName+'.'+key,ReactPropTypesSecret);if(error){return error;}}return null;}return createChainableTypeChecker(validate);}function isNode(propValue){switch(typeof propValue==='undefined'?'undefined':_typeof(propValue)){case'number':case'string':case'undefined':return true;case'boolean':return!propValue;case'object':if(Array.isArray(propValue)){return propValue.every(isNode);}if(propValue===null||isValidElement(propValue)){return true;}var iteratorFn=getIteratorFn(propValue);if(iteratorFn){var iterator=iteratorFn.call(propValue);var step;if(iteratorFn!==propValue.entries){while(!(step=iterator.next()).done){if(!isNode(step.value)){return false;}}}else{// Iterator will provide entry [k,v] tuples rather than values.
	while(!(step=iterator.next()).done){var entry=step.value;if(entry){if(!isNode(entry[1])){return false;}}}}}else{return false;}return true;default:return false;}}function isSymbol(propType,propValue){// Native Symbol.
	if(propType==='symbol'){return true;}// falsy value can't be a Symbol
	if(!propValue){return false;}// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	if(propValue['@@toStringTag']==='Symbol'){return true;}// Fallback for non-spec compliant Symbols which are polyfilled.
	if(typeof Symbol==='function'&&propValue instanceof Symbol){return true;}return false;}// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue){var propType=typeof propValue==='undefined'?'undefined':_typeof(propValue);if(Array.isArray(propValue)){return'array';}if(propValue instanceof RegExp){// Old webkits (at least until Android 4.0) return 'function' rather than
	// 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	// passes PropTypes.object.
	return'object';}if(isSymbol(propType,propValue)){return'symbol';}return propType;}// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue){if(typeof propValue==='undefined'||propValue===null){return''+propValue;}var propType=getPropType(propValue);if(propType==='object'){if(propValue instanceof Date){return'date';}else if(propValue instanceof RegExp){return'regexp';}}return propType;}// Returns a string that is postfixed to a warning about an invalid type.
	// For example, "undefined" or "of type array"
	function getPostfixForTypeWarning(value){var type=getPreciseType(value);switch(type){case'array':case'object':return'an '+type;case'boolean':case'date':case'regexp':return'a '+type;default:return type;}}// Returns class name of the object, if any.
	function getClassName(propValue){if(!propValue.constructor||!propValue.constructor.name){return ANONYMOUS;}return propValue.constructor.name;}ReactPropTypes.checkPropTypes=checkPropTypes;ReactPropTypes.resetWarningCache=checkPropTypes.resetWarningCache;ReactPropTypes.PropTypes=ReactPropTypes;return ReactPropTypes;};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/'use strict';/* eslint-disable no-unused-vars */var getOwnPropertySymbols=Object.getOwnPropertySymbols;var hasOwnProperty=Object.prototype.hasOwnProperty;var propIsEnumerable=Object.prototype.propertyIsEnumerable;function toObject(val){if(val===null||val===undefined){throw new TypeError('Object.assign cannot be called with null or undefined');}return Object(val);}function shouldUseNative(){try{if(!Object.assign){return false;}// Detect buggy property enumeration order in older V8 versions.
	// https://bugs.chromium.org/p/v8/issues/detail?id=4118
	var test1=new String('abc');// eslint-disable-line no-new-wrappers
	test1[5]='de';if(Object.getOwnPropertyNames(test1)[0]==='5'){return false;}// https://bugs.chromium.org/p/v8/issues/detail?id=3056
	var test2={};for(var i=0;i<10;i++){test2['_'+String.fromCharCode(i)]=i;}var order2=Object.getOwnPropertyNames(test2).map(function(n){return test2[n];});if(order2.join('')!=='0123456789'){return false;}// https://bugs.chromium.org/p/v8/issues/detail?id=3056
	var test3={};'abcdefghijklmnopqrst'.split('').forEach(function(letter){test3[letter]=letter;});if(Object.keys(Object.assign({},test3)).join('')!=='abcdefghijklmnopqrst'){return false;}return true;}catch(err){// We don't expect any of the above to throw, but better to be safe.
	return false;}}module.exports=shouldUseNative()?Object.assign:function(target,source){var from;var to=toObject(target);var symbols;for(var s=1;s<arguments.length;s++){from=Object(arguments[s]);for(var key in from){if(hasOwnProperty.call(from,key)){to[key]=from[key];}}if(getOwnPropertySymbols){symbols=getOwnPropertySymbols(from);for(var i=0;i<symbols.length;i++){if(propIsEnumerable.call(from,symbols[i])){to[symbols[i]]=from[symbols[i]];}}}}return to;};

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */'use strict';var ReactPropTypesSecret='SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';module.exports=ReactPropTypesSecret;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var printWarning=function printWarning(){};if(process.env.NODE_ENV!=='production'){var ReactPropTypesSecret=__webpack_require__(17);var loggedTypeFailures={};var has=Function.call.bind(Object.prototype.hasOwnProperty);printWarning=function printWarning(text){var message='Warning: '+text;if(typeof console!=='undefined'){console.error(message);}try{// --- Welcome to debugging React ---
	// This error was thrown as a convenience so that you can use this stack
	// to find the callsite that caused this warning to fire.
	throw new Error(message);}catch(x){}};}/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */function checkPropTypes(typeSpecs,values,location,componentName,getStack){if(process.env.NODE_ENV!=='production'){for(var typeSpecName in typeSpecs){if(has(typeSpecs,typeSpecName)){var error;// Prop type validation may throw. In case they do, we don't want to
	// fail the render phase where it didn't fail before. So we log it.
	// After these have been cleaned up, we'll let them throw.
	try{// This is intentionally an invariant that gets caught. It's the same
	// behavior as without this statement except with a better message.
	if(typeof typeSpecs[typeSpecName]!=='function'){var err=Error((componentName||'React class')+': '+location+' type `'+typeSpecName+'` is invalid; '+'it must be a function, usually from the `prop-types` package, but received `'+_typeof(typeSpecs[typeSpecName])+'`.');err.name='Invariant Violation';throw err;}error=typeSpecs[typeSpecName](values,typeSpecName,componentName,location,null,ReactPropTypesSecret);}catch(ex){error=ex;}if(error&&!(error instanceof Error)){printWarning((componentName||'React class')+': type specification of '+location+' `'+typeSpecName+'` is invalid; the type checker '+'function must return `null` or an `Error` but returned a '+(typeof error==='undefined'?'undefined':_typeof(error))+'. '+'You may have forgotten to pass an argument to the type checker '+'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and '+'shape all require an argument).');}if(error instanceof Error&&!(error.message in loggedTypeFailures)){// Only monitor this failure once because there tends to be a lot of the
	// same error.
	loggedTypeFailures[error.message]=true;var stack=getStack?getStack():'';printWarning('Failed '+location+' type: '+error.message+(stack!=null?stack:''));}}}}}/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */checkPropTypes.resetWarningCache=function(){if(process.env.NODE_ENV!=='production'){loggedTypeFailures={};}};module.exports=checkPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */'use strict';var ReactPropTypesSecret=__webpack_require__(17);function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction;module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){if(secret===ReactPropTypesSecret){// It is still safe when called from React.
	return;}var err=new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. '+'Use PropTypes.checkPropTypes() to call them. '+'Read more at http://fb.me/use-check-prop-types');err.name='Invariant Violation';throw err;};shim.isRequired=shim;function getShim(){return shim;};// Important!
	// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,elementType:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};ReactPropTypes.PropTypes=ReactPropTypes;return ReactPropTypes;};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';if(process.env.NODE_ENV==='production'){module.exports=__webpack_require__(21);}else{module.exports=__webpack_require__(30);}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _interopDefault(t){return t&&"object"==(typeof t==="undefined"?"undefined":_typeof(t))&&"default"in t?t.default:t;}Object.defineProperty(exports,"__esModule",{value:!0});var resolvePathname=_interopDefault(__webpack_require__(22)),valueEqual=_interopDefault(__webpack_require__(25));__webpack_require__(28);var invariant=_interopDefault(__webpack_require__(29));function _extends(){return(_extends=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var a in e){Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);}}return t;}).apply(this,arguments);}function addLeadingSlash(t){return"/"===t.charAt(0)?t:"/"+t;}function stripLeadingSlash(t){return"/"===t.charAt(0)?t.substr(1):t;}function hasBasename(t,n){return 0===t.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(t.charAt(n.length));}function stripBasename(t,n){return hasBasename(t,n)?t.substr(n.length):t;}function stripTrailingSlash(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t;}function parsePath(t){var n=t||"/",e="",a="",r=n.indexOf("#");-1!==r&&(a=n.substr(r),n=n.substr(0,r));var o=n.indexOf("?");return-1!==o&&(e=n.substr(o),n=n.substr(0,o)),{pathname:n,search:"?"===e?"":e,hash:"#"===a?"":a};}function createPath(t){var n=t.pathname,e=t.search,a=t.hash,r=n||"/";return e&&"?"!==e&&(r+="?"===e.charAt(0)?e:"?"+e),a&&"#"!==a&&(r+="#"===a.charAt(0)?a:"#"+a),r;}function createLocation(t,n,e,a){var r;"string"==typeof t?(r=parsePath(t)).state=n:(void 0===(r=_extends({},t)).pathname&&(r.pathname=""),r.search?"?"!==r.search.charAt(0)&&(r.search="?"+r.search):r.search="",r.hash?"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash):r.hash="",void 0!==n&&void 0===r.state&&(r.state=n));try{r.pathname=decodeURI(r.pathname);}catch(t){throw t instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t;}return e&&(r.key=e),a?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=resolvePathname(r.pathname,a.pathname)):r.pathname=a.pathname:r.pathname||(r.pathname="/"),r;}function locationsAreEqual(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&valueEqual(t.state,n.state);}function createTransitionManager(){var o=null;var a=[];return{setPrompt:function setPrompt(t){return o=t,function(){o===t&&(o=null);};},confirmTransitionTo:function confirmTransitionTo(t,n,e,a){if(null!=o){var r="function"==typeof o?o(t,n):o;"string"==typeof r?"function"==typeof e?e(r,a):a(!0):a(!1!==r);}else a(!0);},appendListener:function appendListener(t){var n=!0;function e(){n&&t.apply(void 0,arguments);}return a.push(e),function(){n=!1,a=a.filter(function(t){return t!==e;});};},notifyListeners:function notifyListeners(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++){n[e]=arguments[e];}a.forEach(function(t){return t.apply(void 0,n);});}};}var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);function getConfirmation(t,n){n(window.confirm(t));}function supportsHistory(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history;}function supportsPopStateOnHashChange(){return-1===window.navigator.userAgent.indexOf("Trident");}function supportsGoWithoutReloadUsingHash(){return-1===window.navigator.userAgent.indexOf("Firefox");}function isExtraneousPopstateEvent(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS");}var PopStateEvent="popstate",HashChangeEvent="hashchange";function getHistoryState(){try{return window.history.state||{};}catch(t){return{};}}function createBrowserHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var s=window.history,c=supportsHistory(),n=!supportsPopStateOnHashChange(),e=t,a=e.forceRefresh,h=void 0!==a&&a,r=e.getUserConfirmation,u=void 0===r?getConfirmation:r,o=e.keyLength,i=void 0===o?6:o,f=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):"";function l(t){var n=t||{},e=n.key,a=n.state,r=window.location,o=r.pathname+r.search+r.hash;return f&&(o=stripBasename(o,f)),createLocation(o,a,e);}function d(){return Math.random().toString(36).substr(2,i);}var v=createTransitionManager();function p(t){_extends(T,t),T.length=s.length,v.notifyListeners(T.location,T.action);}function g(t){isExtraneousPopstateEvent(t)||w(l(t.state));}function P(){w(l(getHistoryState()));}var m=!1;function w(n){if(m)m=!1,p();else{v.confirmTransitionTo(n,"POP",u,function(t){t?p({action:"POP",location:n}):function(t){var n=T.location,e=H.indexOf(n.key);-1===e&&(e=0);var a=H.indexOf(t.key);-1===a&&(a=0);var r=e-a;r&&(m=!0,L(r));}(n);});}}var y=l(getHistoryState()),H=[y.key];function x(t){return f+createPath(t);}function L(t){s.go(t);}var O=0;function E(t){1===(O+=t)&&1===t?(window.addEventListener(PopStateEvent,g),n&&window.addEventListener(HashChangeEvent,P)):0===O&&(window.removeEventListener(PopStateEvent,g),n&&window.removeEventListener(HashChangeEvent,P));}var S=!1;var T={length:s.length,action:"POP",location:y,createHref:x,push:function push(t,n){var i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,"PUSH",u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c){if(s.pushState({key:e,state:a},null,n),h)window.location.href=n;else{var r=H.indexOf(T.location.key),o=H.slice(0,r+1);o.push(i.key),H=o,p({action:"PUSH",location:i});}}else window.location.href=n;}});},replace:function replace(t,n){var o="REPLACE",i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,o,u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c){if(s.replaceState({key:e,state:a},null,n),h)window.location.replace(n);else{var r=H.indexOf(T.location.key);-1!==r&&(H[r]=i.key),p({action:o,location:i});}}else window.location.replace(n);}});},go:L,goBack:function goBack(){L(-1);},goForward:function goForward(){L(1);},block:function block(t){void 0===t&&(t=!1);var n=v.setPrompt(t);return S||(E(1),S=!0),function(){return S&&(S=!1,E(-1)),n();};},listen:function listen(t){var n=v.appendListener(t);return E(1),function(){E(-1),n();};}};return T;}var HashChangeEvent$1="hashchange",HashPathCoders={hashbang:{encodePath:function encodePath(t){return"!"===t.charAt(0)?t:"!/"+stripLeadingSlash(t);},decodePath:function decodePath(t){return"!"===t.charAt(0)?t.substr(1):t;}},noslash:{encodePath:stripLeadingSlash,decodePath:addLeadingSlash},slash:{encodePath:addLeadingSlash,decodePath:addLeadingSlash}};function stripHash(t){var n=t.indexOf("#");return-1===n?t:t.slice(0,n);}function getHashPath(){var t=window.location.href,n=t.indexOf("#");return-1===n?"":t.substring(n+1);}function pushHashPath(t){window.location.hash=t;}function replaceHashPath(t){window.location.replace(stripHash(window.location.href)+"#"+t);}function createHashHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var n=window.history,e=(supportsGoWithoutReloadUsingHash(),t),a=e.getUserConfirmation,i=void 0===a?getConfirmation:a,r=e.hashType,o=void 0===r?"slash":r,s=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):"",c=HashPathCoders[o],h=c.encodePath,u=c.decodePath;function f(){var t=u(getHashPath());return s&&(t=stripBasename(t,s)),createLocation(t);}var l=createTransitionManager();function d(t){_extends(E,t),E.length=n.length,l.notifyListeners(E.location,E.action);}var v=!1,p=null;function g(){var t=getHashPath(),n=h(t);if(t!==n)replaceHashPath(n);else{var e=f(),a=E.location;if(!v&&function(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash;}(a,e))return;if(p===createPath(e))return;p=null,function(n){if(v)v=!1,d();else{l.confirmTransitionTo(n,"POP",i,function(t){t?d({action:"POP",location:n}):function(t){var n=E.location,e=y.lastIndexOf(createPath(n));-1===e&&(e=0);var a=y.lastIndexOf(createPath(t));-1===a&&(a=0);var r=e-a;r&&(v=!0,H(r));}(n);});}}(e);}}var P=getHashPath(),m=h(P);P!==m&&replaceHashPath(m);var w=f(),y=[createPath(w)];function H(t){n.go(t);}var x=0;function L(t){1===(x+=t)&&1===t?window.addEventListener(HashChangeEvent$1,g):0===x&&window.removeEventListener(HashChangeEvent$1,g);}var O=!1;var E={length:n.length,action:"POP",location:w,createHref:function createHref(t){var n=document.querySelector("base"),e="";return n&&n.getAttribute("href")&&(e=stripHash(window.location.href)),e+"#"+h(s+createPath(t));},push:function push(t,n){var o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,"PUSH",i,function(t){if(t){var n=createPath(o),e=h(s+n);if(getHashPath()!==e){p=n,pushHashPath(e);var a=y.lastIndexOf(createPath(E.location)),r=y.slice(0,a+1);r.push(n),y=r,d({action:"PUSH",location:o});}else d();}});},replace:function replace(t,n){var r="REPLACE",o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,r,i,function(t){if(t){var n=createPath(o),e=h(s+n);getHashPath()!==e&&(p=n,replaceHashPath(e));var a=y.indexOf(createPath(E.location));-1!==a&&(y[a]=n),d({action:r,location:o});}});},go:H,goBack:function goBack(){H(-1);},goForward:function goForward(){H(1);},block:function block(t){void 0===t&&(t=!1);var n=l.setPrompt(t);return O||(L(1),O=!0),function(){return O&&(O=!1,L(-1)),n();};},listen:function listen(t){var n=l.appendListener(t);return L(1),function(){L(-1),n();};}};return E;}function clamp(t,n,e){return Math.min(Math.max(t,n),e);}function createMemoryHistory(t){void 0===t&&(t={});var n=t,r=n.getUserConfirmation,e=n.initialEntries,a=void 0===e?["/"]:e,o=n.initialIndex,i=void 0===o?0:o,s=n.keyLength,c=void 0===s?6:s,h=createTransitionManager();function u(t){_extends(g,t),g.length=g.entries.length,h.notifyListeners(g.location,g.action);}function f(){return Math.random().toString(36).substr(2,c);}var l=clamp(i,0,a.length-1),d=a.map(function(t){return createLocation(t,void 0,"string"==typeof t?f():t.key||f());}),v=createPath;function p(t){var n=clamp(g.index+t,0,g.entries.length-1),e=g.entries[n];h.confirmTransitionTo(e,"POP",r,function(t){t?u({action:"POP",location:e,index:n}):u();});}var g={length:d.length,action:"POP",location:d[l],index:l,entries:d,createHref:v,push:function push(t,n){var a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,"PUSH",r,function(t){if(t){var n=g.index+1,e=g.entries.slice(0);e.length>n?e.splice(n,e.length-n,a):e.push(a),u({action:"PUSH",location:a,index:n,entries:e});}});},replace:function replace(t,n){var e="REPLACE",a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,e,r,function(t){t&&(g.entries[g.index]=a,u({action:e,location:a}));});},go:p,goBack:function goBack(){p(-1);},goForward:function goForward(){p(1);},canGo:function canGo(t){var n=g.index+t;return 0<=n&&n<g.entries.length;},block:function block(t){return void 0===t&&(t=!1),h.setPrompt(t);},listen:function listen(t){return h.appendListener(t);}};return g;}exports.createBrowserHistory=createBrowserHistory,exports.createHashHistory=createHashHistory,exports.createMemoryHistory=createMemoryHistory,exports.createLocation=createLocation,exports.locationsAreEqual=locationsAreEqual,exports.parsePath=parsePath,exports.createPath=createPath;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';if(process.env.NODE_ENV==='production'){module.exports=__webpack_require__(23);}else{module.exports=__webpack_require__(24);}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	"use strict";function isAbsolute(e){return"/"===e.charAt(0);}function spliceOne(e,t){for(var s=t,n=s+1,i=e.length;n<i;s+=1,n+=1){e[s]=e[n];}e.pop();}function resolvePathname(e,t){void 0===t&&(t="");var s,n=e&&e.split("/")||[],i=t&&t.split("/")||[],l=e&&isAbsolute(e),r=t&&isAbsolute(t),o=l||r;if(e&&isAbsolute(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";if(i.length){var u=i[i.length-1];s="."===u||".."===u||""===u;}else s=!1;for(var a=0,c=i.length;0<=c;c--){var f=i[c];"."===f?spliceOne(i,c):".."===f?(spliceOne(i,c),a++):a&&(spliceOne(i,c),a--);}if(!o)for(;a--;a){i.unshift("..");}!o||""===i[0]||i[0]&&isAbsolute(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h;}module.exports=resolvePathname;

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	'use strict';function isAbsolute(pathname){return pathname.charAt(0)==='/';}// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list,index){for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1){list[i]=list[k];}list.pop();}// This implementation is based heavily on node's url.parse
	function resolvePathname(to,from){if(from===undefined)from='';var toParts=to&&to.split('/')||[];var fromParts=from&&from.split('/')||[];var isToAbs=to&&isAbsolute(to);var isFromAbs=from&&isAbsolute(from);var mustEndAbs=isToAbs||isFromAbs;if(to&&isAbsolute(to)){// to is absolute
	fromParts=toParts;}else if(toParts.length){// to is relative, drop the filename
	fromParts.pop();fromParts=fromParts.concat(toParts);}if(!fromParts.length)return'/';var hasTrailingSlash;if(fromParts.length){var last=fromParts[fromParts.length-1];hasTrailingSlash=last==='.'||last==='..'||last==='';}else{hasTrailingSlash=false;}var up=0;for(var i=fromParts.length;i>=0;i--){var part=fromParts[i];if(part==='.'){spliceOne(fromParts,i);}else if(part==='..'){spliceOne(fromParts,i);up++;}else if(up){spliceOne(fromParts,i);up--;}}if(!mustEndAbs)for(;up--;up){fromParts.unshift('..');}if(mustEndAbs&&fromParts[0]!==''&&(!fromParts[0]||!isAbsolute(fromParts[0])))fromParts.unshift('');var result=fromParts.join('/');if(hasTrailingSlash&&result.substr(-1)!=='/')result+='/';return result;}module.exports=resolvePathname;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';if(process.env.NODE_ENV==='production'){module.exports=__webpack_require__(26);}else{module.exports=__webpack_require__(27);}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function valueOf(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e);}function valueEqual(u,r){if(u===r)return!0;if(null==u||null==r)return!1;if(Array.isArray(u))return Array.isArray(r)&&u.length===r.length&&u.every(function(e,u){return valueEqual(e,r[u]);});if("object"!=(typeof u==="undefined"?"undefined":_typeof(u))&&"object"!=(typeof r==="undefined"?"undefined":_typeof(r)))return!1;var e=valueOf(u),t=valueOf(r);return e!==u||t!==r?valueEqual(e,t):Object.keys(Object.assign({},u,r)).every(function(e){return valueEqual(u[e],r[e]);});}module.exports=valueEqual;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function valueOf(obj){return obj.valueOf?obj.valueOf():Object.prototype.valueOf.call(obj);}function valueEqual(a,b){// Test for strict equality first.
	if(a===b)return true;// Otherwise, if either of them == null they are not equal.
	if(a==null||b==null)return false;if(Array.isArray(a)){return Array.isArray(b)&&a.length===b.length&&a.every(function(item,index){return valueEqual(item,b[index]);});}if((typeof a==='undefined'?'undefined':_typeof(a))==='object'||(typeof b==='undefined'?'undefined':_typeof(b))==='object'){var aValue=valueOf(a);var bValue=valueOf(b);if(aValue!==a||bValue!==b)return valueEqual(aValue,bValue);return Object.keys(Object.assign({},a,b)).every(function(key){return valueEqual(a[key],b[key]);});}return false;}module.exports=valueEqual;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var isProduction=process.env.NODE_ENV==='production';function warning(condition,message){if(!isProduction){if(condition){return;}var text="Warning: "+message;if(typeof console!=='undefined'){console.warn(text);}try{throw Error(text);}catch(x){}}}module.exports=warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';Object.defineProperty(exports,"__esModule",{value:true});var isProduction=process.env.NODE_ENV==='production';var prefix='Invariant failed';function invariant(condition,message){if(condition){return;}if(isProduction){throw new Error(prefix);}throw new Error(prefix+": "+(message||''));}exports.default=invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,'__esModule',{value:true});function _interopDefault(ex){return ex&&(typeof ex==='undefined'?'undefined':_typeof(ex))==='object'&&'default'in ex?ex['default']:ex;}var resolvePathname=_interopDefault(__webpack_require__(22));var valueEqual=_interopDefault(__webpack_require__(25));var warning=_interopDefault(__webpack_require__(28));var invariant=_interopDefault(__webpack_require__(29));function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function addLeadingSlash(path){return path.charAt(0)==='/'?path:'/'+path;}function stripLeadingSlash(path){return path.charAt(0)==='/'?path.substr(1):path;}function hasBasename(path,prefix){return path.toLowerCase().indexOf(prefix.toLowerCase())===0&&'/?#'.indexOf(path.charAt(prefix.length))!==-1;}function stripBasename(path,prefix){return hasBasename(path,prefix)?path.substr(prefix.length):path;}function stripTrailingSlash(path){return path.charAt(path.length-1)==='/'?path.slice(0,-1):path;}function parsePath(path){var pathname=path||'/';var search='';var hash='';var hashIndex=pathname.indexOf('#');if(hashIndex!==-1){hash=pathname.substr(hashIndex);pathname=pathname.substr(0,hashIndex);}var searchIndex=pathname.indexOf('?');if(searchIndex!==-1){search=pathname.substr(searchIndex);pathname=pathname.substr(0,searchIndex);}return{pathname:pathname,search:search==='?'?'':search,hash:hash==='#'?'':hash};}function createPath(location){var pathname=location.pathname,search=location.search,hash=location.hash;var path=pathname||'/';if(search&&search!=='?')path+=search.charAt(0)==='?'?search:"?"+search;if(hash&&hash!=='#')path+=hash.charAt(0)==='#'?hash:"#"+hash;return path;}function createLocation(path,state,key,currentLocation){var location;if(typeof path==='string'){// Two-arg form: push(path, state)
	location=parsePath(path);location.state=state;}else{// One-arg form: push(location)
	location=_extends({},path);if(location.pathname===undefined)location.pathname='';if(location.search){if(location.search.charAt(0)!=='?')location.search='?'+location.search;}else{location.search='';}if(location.hash){if(location.hash.charAt(0)!=='#')location.hash='#'+location.hash;}else{location.hash='';}if(state!==undefined&&location.state===undefined)location.state=state;}try{location.pathname=decodeURI(location.pathname);}catch(e){if(e instanceof URIError){throw new URIError('Pathname "'+location.pathname+'" could not be decoded. '+'This is likely caused by an invalid percent-encoding.');}else{throw e;}}if(key)location.key=key;if(currentLocation){// Resolve incomplete/relative pathname relative to current location.
	if(!location.pathname){location.pathname=currentLocation.pathname;}else if(location.pathname.charAt(0)!=='/'){location.pathname=resolvePathname(location.pathname,currentLocation.pathname);}}else{// When there is no prior location and pathname is empty, set it to /
	if(!location.pathname){location.pathname='/';}}return location;}function locationsAreEqual(a,b){return a.pathname===b.pathname&&a.search===b.search&&a.hash===b.hash&&a.key===b.key&&valueEqual(a.state,b.state);}function createTransitionManager(){var prompt=null;function setPrompt(nextPrompt){warning(prompt==null,'A history supports only one prompt at a time');prompt=nextPrompt;return function(){if(prompt===nextPrompt)prompt=null;};}function confirmTransitionTo(location,action,getUserConfirmation,callback){// TODO: If another transition starts while we're still confirming
	// the previous one, we may end up in a weird state. Figure out the
	// best way to handle this.
	if(prompt!=null){var result=typeof prompt==='function'?prompt(location,action):prompt;if(typeof result==='string'){if(typeof getUserConfirmation==='function'){getUserConfirmation(result,callback);}else{warning(false,'A history needs a getUserConfirmation function in order to use a prompt message');callback(true);}}else{// Return false from a transition hook to cancel the transition.
	callback(result!==false);}}else{callback(true);}}var listeners=[];function appendListener(fn){var isActive=true;function listener(){if(isActive)fn.apply(void 0,arguments);}listeners.push(listener);return function(){isActive=false;listeners=listeners.filter(function(item){return item!==listener;});};}function notifyListeners(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}listeners.forEach(function(listener){return listener.apply(void 0,args);});}return{setPrompt:setPrompt,confirmTransitionTo:confirmTransitionTo,appendListener:appendListener,notifyListeners:notifyListeners};}var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);function getConfirmation(message,callback){callback(window.confirm(message));// eslint-disable-line no-alert
	}/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */function supportsHistory(){var ua=window.navigator.userAgent;if((ua.indexOf('Android 2.')!==-1||ua.indexOf('Android 4.0')!==-1)&&ua.indexOf('Mobile Safari')!==-1&&ua.indexOf('Chrome')===-1&&ua.indexOf('Windows Phone')===-1)return false;return window.history&&'pushState'in window.history;}/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */function supportsPopStateOnHashChange(){return window.navigator.userAgent.indexOf('Trident')===-1;}/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */function supportsGoWithoutReloadUsingHash(){return window.navigator.userAgent.indexOf('Firefox')===-1;}/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */function isExtraneousPopstateEvent(event){return event.state===undefined&&navigator.userAgent.indexOf('CriOS')===-1;}var PopStateEvent='popstate';var HashChangeEvent='hashchange';function getHistoryState(){try{return window.history.state||{};}catch(e){// IE 11 sometimes throws when accessing window.history.state
	// See https://github.com/ReactTraining/history/pull/289
	return{};}}/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */function createBrowserHistory(props){if(props===void 0){props={};}!canUseDOM?invariant(false,'Browser history needs a DOM'):void 0;var globalHistory=window.history;var canUseHistory=supportsHistory();var needsHashChangeListener=!supportsPopStateOnHashChange();var _props=props,_props$forceRefresh=_props.forceRefresh,forceRefresh=_props$forceRefresh===void 0?false:_props$forceRefresh,_props$getUserConfirm=_props.getUserConfirmation,getUserConfirmation=_props$getUserConfirm===void 0?getConfirmation:_props$getUserConfirm,_props$keyLength=_props.keyLength,keyLength=_props$keyLength===void 0?6:_props$keyLength;var basename=props.basename?stripTrailingSlash(addLeadingSlash(props.basename)):'';function getDOMLocation(historyState){var _ref=historyState||{},key=_ref.key,state=_ref.state;var _window$location=window.location,pathname=_window$location.pathname,search=_window$location.search,hash=_window$location.hash;var path=pathname+search+hash;warning(!basename||hasBasename(path,basename),'You are attempting to use a basename on a page whose URL path does not begin '+'with the basename. Expected path "'+path+'" to begin with "'+basename+'".');if(basename)path=stripBasename(path,basename);return createLocation(path,state,key);}function createKey(){return Math.random().toString(36).substr(2,keyLength);}var transitionManager=createTransitionManager();function setState(nextState){_extends(history,nextState);history.length=globalHistory.length;transitionManager.notifyListeners(history.location,history.action);}function handlePopState(event){// Ignore extraneous popstate events in WebKit.
	if(isExtraneousPopstateEvent(event))return;handlePop(getDOMLocation(event.state));}function handleHashChange(){handlePop(getDOMLocation(getHistoryState()));}var forceNextPop=false;function handlePop(location){if(forceNextPop){forceNextPop=false;setState();}else{var action='POP';transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(ok){setState({action:action,location:location});}else{revertPop(location);}});}}function revertPop(fromLocation){var toLocation=history.location;// TODO: We could probably make this more reliable by
	// keeping a list of keys we've seen in sessionStorage.
	// Instead, we just default to 0 for keys we don't know.
	var toIndex=allKeys.indexOf(toLocation.key);if(toIndex===-1)toIndex=0;var fromIndex=allKeys.indexOf(fromLocation.key);if(fromIndex===-1)fromIndex=0;var delta=toIndex-fromIndex;if(delta){forceNextPop=true;go(delta);}}var initialLocation=getDOMLocation(getHistoryState());var allKeys=[initialLocation.key];// Public interface
	function createHref(location){return basename+createPath(location);}function push(path,state){warning(!((typeof path==='undefined'?'undefined':_typeof(path))==='object'&&path.state!==undefined&&state!==undefined),'You should avoid providing a 2nd state argument to push when the 1st '+'argument is a location-like object that already has state; it is ignored');var action='PUSH';var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(!ok)return;var href=createHref(location);var key=location.key,state=location.state;if(canUseHistory){globalHistory.pushState({key:key,state:state},null,href);if(forceRefresh){window.location.href=href;}else{var prevIndex=allKeys.indexOf(history.location.key);var nextKeys=allKeys.slice(0,prevIndex+1);nextKeys.push(location.key);allKeys=nextKeys;setState({action:action,location:location});}}else{warning(state===undefined,'Browser history cannot push state in browsers that do not support HTML5 history');window.location.href=href;}});}function replace(path,state){warning(!((typeof path==='undefined'?'undefined':_typeof(path))==='object'&&path.state!==undefined&&state!==undefined),'You should avoid providing a 2nd state argument to replace when the 1st '+'argument is a location-like object that already has state; it is ignored');var action='REPLACE';var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(!ok)return;var href=createHref(location);var key=location.key,state=location.state;if(canUseHistory){globalHistory.replaceState({key:key,state:state},null,href);if(forceRefresh){window.location.replace(href);}else{var prevIndex=allKeys.indexOf(history.location.key);if(prevIndex!==-1)allKeys[prevIndex]=location.key;setState({action:action,location:location});}}else{warning(state===undefined,'Browser history cannot replace state in browsers that do not support HTML5 history');window.location.replace(href);}});}function go(n){globalHistory.go(n);}function goBack(){go(-1);}function goForward(){go(1);}var listenerCount=0;function checkDOMListeners(delta){listenerCount+=delta;if(listenerCount===1&&delta===1){window.addEventListener(PopStateEvent,handlePopState);if(needsHashChangeListener)window.addEventListener(HashChangeEvent,handleHashChange);}else if(listenerCount===0){window.removeEventListener(PopStateEvent,handlePopState);if(needsHashChangeListener)window.removeEventListener(HashChangeEvent,handleHashChange);}}var isBlocked=false;function block(prompt){if(prompt===void 0){prompt=false;}var unblock=transitionManager.setPrompt(prompt);if(!isBlocked){checkDOMListeners(1);isBlocked=true;}return function(){if(isBlocked){isBlocked=false;checkDOMListeners(-1);}return unblock();};}function listen(listener){var unlisten=transitionManager.appendListener(listener);checkDOMListeners(1);return function(){checkDOMListeners(-1);unlisten();};}var history={length:globalHistory.length,action:'POP',location:initialLocation,createHref:createHref,push:push,replace:replace,go:go,goBack:goBack,goForward:goForward,block:block,listen:listen};return history;}var HashChangeEvent$1='hashchange';var HashPathCoders={hashbang:{encodePath:function encodePath(path){return path.charAt(0)==='!'?path:'!/'+stripLeadingSlash(path);},decodePath:function decodePath(path){return path.charAt(0)==='!'?path.substr(1):path;}},noslash:{encodePath:stripLeadingSlash,decodePath:addLeadingSlash},slash:{encodePath:addLeadingSlash,decodePath:addLeadingSlash}};function stripHash(url){var hashIndex=url.indexOf('#');return hashIndex===-1?url:url.slice(0,hashIndex);}function getHashPath(){// We can't use window.location.hash here because it's not
	// consistent across browsers - Firefox will pre-decode it!
	var href=window.location.href;var hashIndex=href.indexOf('#');return hashIndex===-1?'':href.substring(hashIndex+1);}function pushHashPath(path){window.location.hash=path;}function replaceHashPath(path){window.location.replace(stripHash(window.location.href)+'#'+path);}function createHashHistory(props){if(props===void 0){props={};}!canUseDOM?invariant(false,'Hash history needs a DOM'):void 0;var globalHistory=window.history;var canGoWithoutReload=supportsGoWithoutReloadUsingHash();var _props=props,_props$getUserConfirm=_props.getUserConfirmation,getUserConfirmation=_props$getUserConfirm===void 0?getConfirmation:_props$getUserConfirm,_props$hashType=_props.hashType,hashType=_props$hashType===void 0?'slash':_props$hashType;var basename=props.basename?stripTrailingSlash(addLeadingSlash(props.basename)):'';var _HashPathCoders$hashT=HashPathCoders[hashType],encodePath=_HashPathCoders$hashT.encodePath,decodePath=_HashPathCoders$hashT.decodePath;function getDOMLocation(){var path=decodePath(getHashPath());warning(!basename||hasBasename(path,basename),'You are attempting to use a basename on a page whose URL path does not begin '+'with the basename. Expected path "'+path+'" to begin with "'+basename+'".');if(basename)path=stripBasename(path,basename);return createLocation(path);}var transitionManager=createTransitionManager();function setState(nextState){_extends(history,nextState);history.length=globalHistory.length;transitionManager.notifyListeners(history.location,history.action);}var forceNextPop=false;var ignorePath=null;function locationsAreEqual$$1(a,b){return a.pathname===b.pathname&&a.search===b.search&&a.hash===b.hash;}function handleHashChange(){var path=getHashPath();var encodedPath=encodePath(path);if(path!==encodedPath){// Ensure we always have a properly-encoded hash.
	replaceHashPath(encodedPath);}else{var location=getDOMLocation();var prevLocation=history.location;if(!forceNextPop&&locationsAreEqual$$1(prevLocation,location))return;// A hashchange doesn't always == location change.
	if(ignorePath===createPath(location))return;// Ignore this change; we already setState in push/replace.
	ignorePath=null;handlePop(location);}}function handlePop(location){if(forceNextPop){forceNextPop=false;setState();}else{var action='POP';transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(ok){setState({action:action,location:location});}else{revertPop(location);}});}}function revertPop(fromLocation){var toLocation=history.location;// TODO: We could probably make this more reliable by
	// keeping a list of paths we've seen in sessionStorage.
	// Instead, we just default to 0 for paths we don't know.
	var toIndex=allPaths.lastIndexOf(createPath(toLocation));if(toIndex===-1)toIndex=0;var fromIndex=allPaths.lastIndexOf(createPath(fromLocation));if(fromIndex===-1)fromIndex=0;var delta=toIndex-fromIndex;if(delta){forceNextPop=true;go(delta);}}// Ensure the hash is encoded properly before doing anything else.
	var path=getHashPath();var encodedPath=encodePath(path);if(path!==encodedPath)replaceHashPath(encodedPath);var initialLocation=getDOMLocation();var allPaths=[createPath(initialLocation)];// Public interface
	function createHref(location){var baseTag=document.querySelector('base');var href='';if(baseTag&&baseTag.getAttribute('href')){href=stripHash(window.location.href);}return href+'#'+encodePath(basename+createPath(location));}function push(path,state){warning(state===undefined,'Hash history cannot push state; it is ignored');var action='PUSH';var location=createLocation(path,undefined,undefined,history.location);transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(!ok)return;var path=createPath(location);var encodedPath=encodePath(basename+path);var hashChanged=getHashPath()!==encodedPath;if(hashChanged){// We cannot tell if a hashchange was caused by a PUSH, so we'd
	// rather setState here and ignore the hashchange. The caveat here
	// is that other hash histories in the page will consider it a POP.
	ignorePath=path;pushHashPath(encodedPath);var prevIndex=allPaths.lastIndexOf(createPath(history.location));var nextPaths=allPaths.slice(0,prevIndex+1);nextPaths.push(path);allPaths=nextPaths;setState({action:action,location:location});}else{warning(false,'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');setState();}});}function replace(path,state){warning(state===undefined,'Hash history cannot replace state; it is ignored');var action='REPLACE';var location=createLocation(path,undefined,undefined,history.location);transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(!ok)return;var path=createPath(location);var encodedPath=encodePath(basename+path);var hashChanged=getHashPath()!==encodedPath;if(hashChanged){// We cannot tell if a hashchange was caused by a REPLACE, so we'd
	// rather setState here and ignore the hashchange. The caveat here
	// is that other hash histories in the page will consider it a POP.
	ignorePath=path;replaceHashPath(encodedPath);}var prevIndex=allPaths.indexOf(createPath(history.location));if(prevIndex!==-1)allPaths[prevIndex]=path;setState({action:action,location:location});});}function go(n){warning(canGoWithoutReload,'Hash history go(n) causes a full page reload in this browser');globalHistory.go(n);}function goBack(){go(-1);}function goForward(){go(1);}var listenerCount=0;function checkDOMListeners(delta){listenerCount+=delta;if(listenerCount===1&&delta===1){window.addEventListener(HashChangeEvent$1,handleHashChange);}else if(listenerCount===0){window.removeEventListener(HashChangeEvent$1,handleHashChange);}}var isBlocked=false;function block(prompt){if(prompt===void 0){prompt=false;}var unblock=transitionManager.setPrompt(prompt);if(!isBlocked){checkDOMListeners(1);isBlocked=true;}return function(){if(isBlocked){isBlocked=false;checkDOMListeners(-1);}return unblock();};}function listen(listener){var unlisten=transitionManager.appendListener(listener);checkDOMListeners(1);return function(){checkDOMListeners(-1);unlisten();};}var history={length:globalHistory.length,action:'POP',location:initialLocation,createHref:createHref,push:push,replace:replace,go:go,goBack:goBack,goForward:goForward,block:block,listen:listen};return history;}function clamp(n,lowerBound,upperBound){return Math.min(Math.max(n,lowerBound),upperBound);}/**
	 * Creates a history object that stores locations in memory.
	 */function createMemoryHistory(props){if(props===void 0){props={};}var _props=props,getUserConfirmation=_props.getUserConfirmation,_props$initialEntries=_props.initialEntries,initialEntries=_props$initialEntries===void 0?['/']:_props$initialEntries,_props$initialIndex=_props.initialIndex,initialIndex=_props$initialIndex===void 0?0:_props$initialIndex,_props$keyLength=_props.keyLength,keyLength=_props$keyLength===void 0?6:_props$keyLength;var transitionManager=createTransitionManager();function setState(nextState){_extends(history,nextState);history.length=history.entries.length;transitionManager.notifyListeners(history.location,history.action);}function createKey(){return Math.random().toString(36).substr(2,keyLength);}var index=clamp(initialIndex,0,initialEntries.length-1);var entries=initialEntries.map(function(entry){return typeof entry==='string'?createLocation(entry,undefined,createKey()):createLocation(entry,undefined,entry.key||createKey());});// Public interface
	var createHref=createPath;function push(path,state){warning(!((typeof path==='undefined'?'undefined':_typeof(path))==='object'&&path.state!==undefined&&state!==undefined),'You should avoid providing a 2nd state argument to push when the 1st '+'argument is a location-like object that already has state; it is ignored');var action='PUSH';var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(!ok)return;var prevIndex=history.index;var nextIndex=prevIndex+1;var nextEntries=history.entries.slice(0);if(nextEntries.length>nextIndex){nextEntries.splice(nextIndex,nextEntries.length-nextIndex,location);}else{nextEntries.push(location);}setState({action:action,location:location,index:nextIndex,entries:nextEntries});});}function replace(path,state){warning(!((typeof path==='undefined'?'undefined':_typeof(path))==='object'&&path.state!==undefined&&state!==undefined),'You should avoid providing a 2nd state argument to replace when the 1st '+'argument is a location-like object that already has state; it is ignored');var action='REPLACE';var location=createLocation(path,state,createKey(),history.location);transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(!ok)return;history.entries[history.index]=location;setState({action:action,location:location});});}function go(n){var nextIndex=clamp(history.index+n,0,history.entries.length-1);var action='POP';var location=history.entries[nextIndex];transitionManager.confirmTransitionTo(location,action,getUserConfirmation,function(ok){if(ok){setState({action:action,location:location,index:nextIndex});}else{// Mimic the behavior of DOM histories by
	// causing a render after a cancelled POP.
	setState();}});}function goBack(){go(-1);}function goForward(){go(1);}function canGo(n){var nextIndex=history.index+n;return nextIndex>=0&&nextIndex<history.entries.length;}function block(prompt){if(prompt===void 0){prompt=false;}return transitionManager.setPrompt(prompt);}function listen(listener){return transitionManager.appendListener(listener);}var history={length:entries.length,action:'POP',location:entries[index],index:index,entries:entries,createHref:createHref,push:push,replace:replace,go:go,goBack:goBack,goForward:goForward,canGo:canGo,block:block,listen:listen};return history;}exports.createBrowserHistory=createBrowserHistory;exports.createHashHistory=createHashHistory;exports.createMemoryHistory=createMemoryHistory;exports.createLocation=createLocation;exports.locationsAreEqual=locationsAreEqual;exports.parsePath=parsePath;exports.createPath=createPath;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var React=__webpack_require__(10),_inheritsLoose=__webpack_require__(32),PropTypes=__webpack_require__(11),warning=__webpack_require__(28);function _interopDefaultLegacy(e){return e&&(typeof e==='undefined'?'undefined':_typeof(e))==='object'&&'default'in e?e:{'default':e};}var React__default=/*#__PURE__*/_interopDefaultLegacy(React);var _inheritsLoose__default=/*#__PURE__*/_interopDefaultLegacy(_inheritsLoose);var PropTypes__default=/*#__PURE__*/_interopDefaultLegacy(PropTypes);var warning__default=/*#__PURE__*/_interopDefaultLegacy(warning);var MAX_SIGNED_31_BIT_INT=1073741823;var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:{};function getUniqueId(){var key='__global_unique_id__';return commonjsGlobal[key]=(commonjsGlobal[key]||0)+1;}function objectIs(x,y){if(x===y){return x!==0||1/x===1/y;}else{return x!==x&&y!==y;}}function createEventEmitter(value){var handlers=[];return{on:function on(handler){handlers.push(handler);},off:function off(handler){handlers=handlers.filter(function(h){return h!==handler;});},get:function get(){return value;},set:function set(newValue,changedBits){value=newValue;handlers.forEach(function(handler){return handler(value,changedBits);});}};}function onlyChild(children){return Array.isArray(children)?children[0]:children;}function createReactContext(defaultValue,calculateChangedBits){var _Provider$childContex,_Consumer$contextType;var contextProp='__create-react-context-'+getUniqueId()+'__';var Provider=/*#__PURE__*/function(_Component){_inheritsLoose__default['default'](Provider,_Component);function Provider(){var _this;_this=_Component.apply(this,arguments)||this;_this.emitter=createEventEmitter(_this.props.value);return _this;}var _proto=Provider.prototype;_proto.getChildContext=function getChildContext(){var _ref;return _ref={},_ref[contextProp]=this.emitter,_ref;};_proto.componentWillReceiveProps=function componentWillReceiveProps(nextProps){if(this.props.value!==nextProps.value){var oldValue=this.props.value;var newValue=nextProps.value;var changedBits;if(objectIs(oldValue,newValue)){changedBits=0;}else{changedBits=typeof calculateChangedBits==='function'?calculateChangedBits(oldValue,newValue):MAX_SIGNED_31_BIT_INT;if(process.env.NODE_ENV!=='production'){warning__default['default']((changedBits&MAX_SIGNED_31_BIT_INT)===changedBits,'calculateChangedBits: Expected the return value to be a '+'31-bit integer. Instead received: '+changedBits);}changedBits|=0;if(changedBits!==0){this.emitter.set(nextProps.value,changedBits);}}}};_proto.render=function render(){return this.props.children;};return Provider;}(React.Component);Provider.childContextTypes=(_Provider$childContex={},_Provider$childContex[contextProp]=PropTypes__default['default'].object.isRequired,_Provider$childContex);var Consumer=/*#__PURE__*/function(_Component2){_inheritsLoose__default['default'](Consumer,_Component2);function Consumer(){var _this2;_this2=_Component2.apply(this,arguments)||this;_this2.state={value:_this2.getValue()};_this2.onUpdate=function(newValue,changedBits){var observedBits=_this2.observedBits|0;if((observedBits&changedBits)!==0){_this2.setState({value:_this2.getValue()});}};return _this2;}var _proto2=Consumer.prototype;_proto2.componentWillReceiveProps=function componentWillReceiveProps(nextProps){var observedBits=nextProps.observedBits;this.observedBits=observedBits===undefined||observedBits===null?MAX_SIGNED_31_BIT_INT:observedBits;};_proto2.componentDidMount=function componentDidMount(){if(this.context[contextProp]){this.context[contextProp].on(this.onUpdate);}var observedBits=this.props.observedBits;this.observedBits=observedBits===undefined||observedBits===null?MAX_SIGNED_31_BIT_INT:observedBits;};_proto2.componentWillUnmount=function componentWillUnmount(){if(this.context[contextProp]){this.context[contextProp].off(this.onUpdate);}};_proto2.getValue=function getValue(){if(this.context[contextProp]){return this.context[contextProp].get();}else{return defaultValue;}};_proto2.render=function render(){return onlyChild(this.props.children)(this.state.value);};return Consumer;}(React.Component);Consumer.contextTypes=(_Consumer$contextType={},_Consumer$contextType[contextProp]=PropTypes__default['default'].object,_Consumer$contextType);return{Provider:Provider,Consumer:Consumer};}var index=React__default['default'].createContext||createReactContext;module.exports=index;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(6)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";var setPrototypeOf=__webpack_require__(33);function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;setPrototypeOf(subClass,superClass);}module.exports=_inheritsLoose;module.exports["default"]=module.exports,module.exports.__esModule=true;

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	"use strict";function _setPrototypeOf(o,p){module.exports=_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};module.exports["default"]=module.exports,module.exports.__esModule=true;return _setPrototypeOf(o,p);}module.exports=_setPrototypeOf;module.exports["default"]=module.exports,module.exports.__esModule=true;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var isarray=__webpack_require__(35);/**
	 * Expose `pathToRegexp`.
	 */module.exports=pathToRegexp;module.exports.parse=parse;module.exports.compile=compile;module.exports.tokensToFunction=tokensToFunction;module.exports.tokensToRegExp=tokensToRegExp;/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */var PATH_REGEXP=new RegExp([// Match escaped characters that would otherwise appear in future matches.
	// This allows the user to escape special characters that won't transform.
	'(\\\\.)',// Match Express-style parameters and un-named parameters with a prefix
	// and optional suffixes. Matches appear as:
	//
	// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'),'g');/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */function parse(str,options){var tokens=[];var key=0;var index=0;var path='';var defaultDelimiter=options&&options.delimiter||'/';var res;while((res=PATH_REGEXP.exec(str))!=null){var m=res[0];var escaped=res[1];var offset=res.index;path+=str.slice(index,offset);index=offset+m.length;// Ignore already escaped sequences.
	if(escaped){path+=escaped[1];continue;}var next=str[index];var prefix=res[2];var name=res[3];var capture=res[4];var group=res[5];var modifier=res[6];var asterisk=res[7];// Push the current path onto the tokens.
	if(path){tokens.push(path);path='';}var partial=prefix!=null&&next!=null&&next!==prefix;var repeat=modifier==='+'||modifier==='*';var optional=modifier==='?'||modifier==='*';var delimiter=res[2]||defaultDelimiter;var pattern=capture||group;tokens.push({name:name||key++,prefix:prefix||'',delimiter:delimiter,optional:optional,repeat:repeat,partial:partial,asterisk:!!asterisk,pattern:pattern?escapeGroup(pattern):asterisk?'.*':'[^'+escapeString(delimiter)+']+?'});}// Match any characters still remaining.
	if(index<str.length){path+=str.substr(index);}// If the path exists, push it onto the end.
	if(path){tokens.push(path);}return tokens;}/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */function compile(str,options){return tokensToFunction(parse(str,options),options);}/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */function encodeURIComponentPretty(str){return encodeURI(str).replace(/[\/?#]/g,function(c){return'%'+c.charCodeAt(0).toString(16).toUpperCase();});}/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */function encodeAsterisk(str){return encodeURI(str).replace(/[?#]/g,function(c){return'%'+c.charCodeAt(0).toString(16).toUpperCase();});}/**
	 * Expose a method for transforming tokens into the path function.
	 */function tokensToFunction(tokens,options){// Compile all the tokens into regexps.
	var matches=new Array(tokens.length);// Compile all the patterns before compilation.
	for(var i=0;i<tokens.length;i++){if(_typeof(tokens[i])==='object'){matches[i]=new RegExp('^(?:'+tokens[i].pattern+')$',flags(options));}}return function(obj,opts){var path='';var data=obj||{};var options=opts||{};var encode=options.pretty?encodeURIComponentPretty:encodeURIComponent;for(var i=0;i<tokens.length;i++){var token=tokens[i];if(typeof token==='string'){path+=token;continue;}var value=data[token.name];var segment;if(value==null){if(token.optional){// Prepend partial segment prefixes.
	if(token.partial){path+=token.prefix;}continue;}else{throw new TypeError('Expected "'+token.name+'" to be defined');}}if(isarray(value)){if(!token.repeat){throw new TypeError('Expected "'+token.name+'" to not repeat, but received `'+JSON.stringify(value)+'`');}if(value.length===0){if(token.optional){continue;}else{throw new TypeError('Expected "'+token.name+'" to not be empty');}}for(var j=0;j<value.length;j++){segment=encode(value[j]);if(!matches[i].test(segment)){throw new TypeError('Expected all "'+token.name+'" to match "'+token.pattern+'", but received `'+JSON.stringify(segment)+'`');}path+=(j===0?token.prefix:token.delimiter)+segment;}continue;}segment=token.asterisk?encodeAsterisk(value):encode(value);if(!matches[i].test(segment)){throw new TypeError('Expected "'+token.name+'" to match "'+token.pattern+'", but received "'+segment+'"');}path+=token.prefix+segment;}return path;};}/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */function escapeString(str){return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g,'\\$1');}/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */function escapeGroup(group){return group.replace(/([=!:$\/()])/g,'\\$1');}/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */function attachKeys(re,keys){re.keys=keys;return re;}/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */function flags(options){return options&&options.sensitive?'':'i';}/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */function regexpToRegexp(path,keys){// Use a negative lookahead to match only capturing groups.
	var groups=path.source.match(/\((?!\?)/g);if(groups){for(var i=0;i<groups.length;i++){keys.push({name:i,prefix:null,delimiter:null,optional:false,repeat:false,partial:false,asterisk:false,pattern:null});}}return attachKeys(path,keys);}/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */function arrayToRegexp(path,keys,options){var parts=[];for(var i=0;i<path.length;i++){parts.push(pathToRegexp(path[i],keys,options).source);}var regexp=new RegExp('(?:'+parts.join('|')+')',flags(options));return attachKeys(regexp,keys);}/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */function stringToRegexp(path,keys,options){return tokensToRegExp(parse(path,options),keys,options);}/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */function tokensToRegExp(tokens,keys,options){if(!isarray(keys)){options=/** @type {!Object} */keys||options;keys=[];}options=options||{};var strict=options.strict;var end=options.end!==false;var route='';// Iterate over the tokens and create our regexp string.
	for(var i=0;i<tokens.length;i++){var token=tokens[i];if(typeof token==='string'){route+=escapeString(token);}else{var prefix=escapeString(token.prefix);var capture='(?:'+token.pattern+')';keys.push(token);if(token.repeat){capture+='(?:'+prefix+capture+')*';}if(token.optional){if(!token.partial){capture='(?:'+prefix+'('+capture+'))?';}else{capture=prefix+'('+capture+')?';}}else{capture=prefix+'('+capture+')';}route+=capture;}}var delimiter=escapeString(options.delimiter||'/');var endsWithDelimiter=route.slice(-delimiter.length)===delimiter;// In non-strict mode we allow a slash at the end of match. If the path to
	// match already ends with a slash, we remove it for consistency. The slash
	// is valid at the end of a path match, not in the middle. This is important
	// in non-ending mode, where "/test/" shouldn't match "/test//route".
	if(!strict){route=(endsWithDelimiter?route.slice(0,-delimiter.length):route)+'(?:'+delimiter+'(?=$))?';}if(end){route+='$';}else{// In non-ending mode, we need the capturing groups to match as much as
	// possible by using a positive lookahead to the end or next path segment.
	route+=strict&&endsWithDelimiter?'':'(?='+delimiter+'|$)';}return attachKeys(new RegExp('^'+route,flags(options)),keys);}/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */function pathToRegexp(path,keys,options){if(!isarray(keys)){options=/** @type {!Object} */keys||options;keys=[];}options=options||{};if(path instanceof RegExp){return regexpToRegexp(path,/** @type {!Array} */keys);}if(isarray(path)){return arrayToRegexp(/** @type {!Array} */path,/** @type {!Array} */keys,options);}return stringToRegexp(/** @type {string} */path,/** @type {!Array} */keys,options);}

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=='[object Array]';};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */var ReactIs=__webpack_require__(12);var REACT_STATICS={childContextTypes:true,contextType:true,contextTypes:true,defaultProps:true,displayName:true,getDefaultProps:true,getDerivedStateFromError:true,getDerivedStateFromProps:true,mixins:true,propTypes:true,type:true};var KNOWN_STATICS={name:true,length:true,prototype:true,caller:true,callee:true,arguments:true,arity:true};var FORWARD_REF_STATICS={'$$typeof':true,render:true,defaultProps:true,displayName:true,propTypes:true};var MEMO_STATICS={'$$typeof':true,compare:true,defaultProps:true,displayName:true,propTypes:true,type:true};var TYPE_STATICS={};TYPE_STATICS[ReactIs.ForwardRef]=FORWARD_REF_STATICS;function getStatics(component){if(ReactIs.isMemo(component)){return MEMO_STATICS;}return TYPE_STATICS[component['$$typeof']]||REACT_STATICS;}var defineProperty=Object.defineProperty;var getOwnPropertyNames=Object.getOwnPropertyNames;var getOwnPropertySymbols=Object.getOwnPropertySymbols;var getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor;var getPrototypeOf=Object.getPrototypeOf;var objectPrototype=Object.prototype;function hoistNonReactStatics(targetComponent,sourceComponent,blacklist){if(typeof sourceComponent!=='string'){// don't hoist over string (html) components
	if(objectPrototype){var inheritedComponent=getPrototypeOf(sourceComponent);if(inheritedComponent&&inheritedComponent!==objectPrototype){hoistNonReactStatics(targetComponent,inheritedComponent,blacklist);}}var keys=getOwnPropertyNames(sourceComponent);if(getOwnPropertySymbols){keys=keys.concat(getOwnPropertySymbols(sourceComponent));}var targetStatics=getStatics(targetComponent);var sourceStatics=getStatics(sourceComponent);for(var i=0;i<keys.length;++i){var key=keys[i];if(!KNOWN_STATICS[key]&&!(blacklist&&blacklist[key])&&!(sourceStatics&&sourceStatics[key])&&!(targetStatics&&targetStatics[key])){var descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{// Avoid failures from read-only properties
	defineProperty(targetComponent,key,descriptor);}catch(e){}}}return targetComponent;}return targetComponent;}module.exports=hoistNonReactStatics;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _interopDefault(ex){return ex&&(typeof ex==='undefined'?'undefined':_typeof(ex))==='object'&&'default'in ex?ex['default']:ex;}var React=_interopDefault(__webpack_require__(10));var PropTypes=_interopDefault(__webpack_require__(11));var history=__webpack_require__(20);var warning=_interopDefault(__webpack_require__(28));var createContext=_interopDefault(__webpack_require__(31));var invariant=_interopDefault(__webpack_require__(29));var pathToRegexp=_interopDefault(__webpack_require__(34));var reactIs=__webpack_require__(12);var hoistStatics=_interopDefault(__webpack_require__(36));function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}// TODO: Replace with React.createContext once we can assume React 16+
	var createNamedContext=function createNamedContext(name){var context=createContext();context.displayName=name;return context;};var historyContext=/*#__PURE__*/createNamedContext("Router-History");var context=/*#__PURE__*/createNamedContext("Router");/**
	 * The public API for putting history on context.
	 */var Router=/*#__PURE__*/function(_React$Component){_inheritsLoose(Router,_React$Component);Router.computeRootMatch=function computeRootMatch(pathname){return{path:"/",url:"/",params:{},isExact:pathname==="/"};};function Router(props){var _this;_this=_React$Component.call(this,props)||this;_this.state={location:props.history.location};// This is a bit of a hack. We have to start listening for location
	// changes here in the constructor in case there are any <Redirect>s
	// on the initial render. If there are, they will replace/push when
	// they mount and since cDM fires in children before parents, we may
	// get a new location before the <Router> is mounted.
	_this._isMounted=false;_this._pendingLocation=null;if(!props.staticContext){_this.unlisten=props.history.listen(function(location){if(_this._isMounted){_this.setState({location:location});}else{_this._pendingLocation=location;}});}return _this;}var _proto=Router.prototype;_proto.componentDidMount=function componentDidMount(){this._isMounted=true;if(this._pendingLocation){this.setState({location:this._pendingLocation});}};_proto.componentWillUnmount=function componentWillUnmount(){if(this.unlisten){this.unlisten();this._isMounted=false;this._pendingLocation=null;}};_proto.render=function render(){return(/*#__PURE__*/React.createElement(context.Provider,{value:{history:this.props.history,location:this.state.location,match:Router.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},/*#__PURE__*/React.createElement(historyContext.Provider,{children:this.props.children||null,value:this.props.history})));};return Router;}(React.Component);{Router.propTypes={children:PropTypes.node,history:PropTypes.object.isRequired,staticContext:PropTypes.object};Router.prototype.componentDidUpdate=function(prevProps){warning(prevProps.history===this.props.history,"You cannot change <Router history>");};}/**
	 * The public API for a <Router> that stores location in memory.
	 */var MemoryRouter=/*#__PURE__*/function(_React$Component){_inheritsLoose(MemoryRouter,_React$Component);function MemoryRouter(){var _this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this;_this.history=history.createMemoryHistory(_this.props);return _this;}var _proto=MemoryRouter.prototype;_proto.render=function render(){return(/*#__PURE__*/React.createElement(Router,{history:this.history,children:this.props.children}));};return MemoryRouter;}(React.Component);{MemoryRouter.propTypes={initialEntries:PropTypes.array,initialIndex:PropTypes.number,getUserConfirmation:PropTypes.func,keyLength:PropTypes.number,children:PropTypes.node};MemoryRouter.prototype.componentDidMount=function(){warning(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, "+"use `import { Router }` instead of `import { MemoryRouter as Router }`.");};}var Lifecycle=/*#__PURE__*/function(_React$Component){_inheritsLoose(Lifecycle,_React$Component);function Lifecycle(){return _React$Component.apply(this,arguments)||this;}var _proto=Lifecycle.prototype;_proto.componentDidMount=function componentDidMount(){if(this.props.onMount)this.props.onMount.call(this,this);};_proto.componentDidUpdate=function componentDidUpdate(prevProps){if(this.props.onUpdate)this.props.onUpdate.call(this,this,prevProps);};_proto.componentWillUnmount=function componentWillUnmount(){if(this.props.onUnmount)this.props.onUnmount.call(this,this);};_proto.render=function render(){return null;};return Lifecycle;}(React.Component);/**
	 * The public API for prompting the user before navigating away from a screen.
	 */function Prompt(_ref){var message=_ref.message,_ref$when=_ref.when,when=_ref$when===void 0?true:_ref$when;return(/*#__PURE__*/React.createElement(context.Consumer,null,function(context){!context?invariant(false,"You should not use <Prompt> outside a <Router>"):void 0;if(!when||context.staticContext)return null;var method=context.history.block;return(/*#__PURE__*/React.createElement(Lifecycle,{onMount:function onMount(self){self.release=method(message);},onUpdate:function onUpdate(self,prevProps){if(prevProps.message!==message){self.release();self.release=method(message);}},onUnmount:function onUnmount(self){self.release();},message:message}));}));}{var messageType=PropTypes.oneOfType([PropTypes.func,PropTypes.string]);Prompt.propTypes={when:PropTypes.bool,message:messageType.isRequired};}var cache={};var cacheLimit=10000;var cacheCount=0;function compilePath(path){if(cache[path])return cache[path];var generator=pathToRegexp.compile(path);if(cacheCount<cacheLimit){cache[path]=generator;cacheCount++;}return generator;}/**
	 * Public API for generating a URL pathname from a path and parameters.
	 */function generatePath(path,params){if(path===void 0){path="/";}if(params===void 0){params={};}return path==="/"?path:compilePath(path)(params,{pretty:true});}/**
	 * The public API for navigating programmatically with a component.
	 */function Redirect(_ref){var computedMatch=_ref.computedMatch,to=_ref.to,_ref$push=_ref.push,push=_ref$push===void 0?false:_ref$push;return(/*#__PURE__*/React.createElement(context.Consumer,null,function(context){!context?invariant(false,"You should not use <Redirect> outside a <Router>"):void 0;var history$1=context.history,staticContext=context.staticContext;var method=push?history$1.push:history$1.replace;var location=history.createLocation(computedMatch?typeof to==="string"?generatePath(to,computedMatch.params):_extends({},to,{pathname:generatePath(to.pathname,computedMatch.params)}):to);// When rendering in a static context,
	// set the new location immediately.
	if(staticContext){method(location);return null;}return(/*#__PURE__*/React.createElement(Lifecycle,{onMount:function onMount(){method(location);},onUpdate:function onUpdate(self,prevProps){var prevLocation=history.createLocation(prevProps.to);if(!history.locationsAreEqual(prevLocation,_extends({},location,{key:prevLocation.key}))){method(location);}},to:to}));}));}{Redirect.propTypes={push:PropTypes.bool,from:PropTypes.string,to:PropTypes.oneOfType([PropTypes.string,PropTypes.object]).isRequired};}var cache$1={};var cacheLimit$1=10000;var cacheCount$1=0;function compilePath$1(path,options){var cacheKey=""+options.end+options.strict+options.sensitive;var pathCache=cache$1[cacheKey]||(cache$1[cacheKey]={});if(pathCache[path])return pathCache[path];var keys=[];var regexp=pathToRegexp(path,keys,options);var result={regexp:regexp,keys:keys};if(cacheCount$1<cacheLimit$1){pathCache[path]=result;cacheCount$1++;}return result;}/**
	 * Public API for matching a URL pathname to a path.
	 */function matchPath(pathname,options){if(options===void 0){options={};}if(typeof options==="string"||Array.isArray(options)){options={path:options};}var _options=options,path=_options.path,_options$exact=_options.exact,exact=_options$exact===void 0?false:_options$exact,_options$strict=_options.strict,strict=_options$strict===void 0?false:_options$strict,_options$sensitive=_options.sensitive,sensitive=_options$sensitive===void 0?false:_options$sensitive;var paths=[].concat(path);return paths.reduce(function(matched,path){if(!path&&path!=="")return null;if(matched)return matched;var _compilePath=compilePath$1(path,{end:exact,strict:strict,sensitive:sensitive}),regexp=_compilePath.regexp,keys=_compilePath.keys;var match=regexp.exec(pathname);if(!match)return null;var url=match[0],values=match.slice(1);var isExact=pathname===url;if(exact&&!isExact)return null;return{path:path,// the path used to match
	url:path==="/"&&url===""?"/":url,// the matched portion of the URL
	isExact:isExact,// whether or not we matched exactly
	params:keys.reduce(function(memo,key,index){memo[key.name]=values[index];return memo;},{})};},null);}function isEmptyChildren(children){return React.Children.count(children)===0;}function evalChildrenDev(children,props,path){var value=children(props);warning(value!==undefined,"You returned `undefined` from the `children` function of "+("<Route"+(path?" path=\""+path+"\"":"")+">, but you ")+"should have returned a React element or `null`");return value||null;}/**
	 * The public API for matching a single path and rendering.
	 */var Route=/*#__PURE__*/function(_React$Component){_inheritsLoose(Route,_React$Component);function Route(){return _React$Component.apply(this,arguments)||this;}var _proto=Route.prototype;_proto.render=function render(){var _this=this;return(/*#__PURE__*/React.createElement(context.Consumer,null,function(context$1){!context$1?invariant(false,"You should not use <Route> outside a <Router>"):void 0;var location=_this.props.location||context$1.location;var match=_this.props.computedMatch?_this.props.computedMatch// <Switch> already computed the match for us
	:_this.props.path?matchPath(location.pathname,_this.props):context$1.match;var props=_extends({},context$1,{location:location,match:match});var _this$props=_this.props,children=_this$props.children,component=_this$props.component,render=_this$props.render;// Preact uses an empty array as children by
	// default, so use null if that's the case.
	if(Array.isArray(children)&&isEmptyChildren(children)){children=null;}return(/*#__PURE__*/React.createElement(context.Provider,{value:props},props.match?children?typeof children==="function"?evalChildrenDev(children,props,_this.props.path):children:component?/*#__PURE__*/React.createElement(component,props):render?render(props):null:typeof children==="function"?evalChildrenDev(children,props,_this.props.path):null));}));};return Route;}(React.Component);{Route.propTypes={children:PropTypes.oneOfType([PropTypes.func,PropTypes.node]),component:function component(props,propName){if(props[propName]&&!reactIs.isValidElementType(props[propName])){return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");}},exact:PropTypes.bool,location:PropTypes.object,path:PropTypes.oneOfType([PropTypes.string,PropTypes.arrayOf(PropTypes.string)]),render:PropTypes.func,sensitive:PropTypes.bool,strict:PropTypes.bool};Route.prototype.componentDidMount=function(){warning(!(this.props.children&&!isEmptyChildren(this.props.children)&&this.props.component),"You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");warning(!(this.props.children&&!isEmptyChildren(this.props.children)&&this.props.render),"You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");warning(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");};Route.prototype.componentDidUpdate=function(prevProps){warning(!(this.props.location&&!prevProps.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');warning(!(!this.props.location&&prevProps.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');};}function addLeadingSlash(path){return path.charAt(0)==="/"?path:"/"+path;}function addBasename(basename,location){if(!basename)return location;return _extends({},location,{pathname:addLeadingSlash(basename)+location.pathname});}function stripBasename(basename,location){if(!basename)return location;var base=addLeadingSlash(basename);if(location.pathname.indexOf(base)!==0)return location;return _extends({},location,{pathname:location.pathname.substr(base.length)});}function createURL(location){return typeof location==="string"?location:history.createPath(location);}function staticHandler(methodName){return function(){invariant(false,"You cannot %s with <StaticRouter>",methodName);};}function noop(){}/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */var StaticRouter=/*#__PURE__*/function(_React$Component){_inheritsLoose(StaticRouter,_React$Component);function StaticRouter(){var _this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this;_this.handlePush=function(location){return _this.navigateTo(location,"PUSH");};_this.handleReplace=function(location){return _this.navigateTo(location,"REPLACE");};_this.handleListen=function(){return noop;};_this.handleBlock=function(){return noop;};return _this;}var _proto=StaticRouter.prototype;_proto.navigateTo=function navigateTo(location,action){var _this$props=this.props,_this$props$basename=_this$props.basename,basename=_this$props$basename===void 0?"":_this$props$basename,_this$props$context=_this$props.context,context=_this$props$context===void 0?{}:_this$props$context;context.action=action;context.location=addBasename(basename,history.createLocation(location));context.url=createURL(context.location);};_proto.render=function render(){var _this$props2=this.props,_this$props2$basename=_this$props2.basename,basename=_this$props2$basename===void 0?"":_this$props2$basename,_this$props2$context=_this$props2.context,context=_this$props2$context===void 0?{}:_this$props2$context,_this$props2$location=_this$props2.location,location=_this$props2$location===void 0?"/":_this$props2$location,rest=_objectWithoutPropertiesLoose(_this$props2,["basename","context","location"]);var history$1={createHref:function createHref(path){return addLeadingSlash(basename+createURL(path));},action:"POP",location:stripBasename(basename,history.createLocation(location)),push:this.handlePush,replace:this.handleReplace,go:staticHandler("go"),goBack:staticHandler("goBack"),goForward:staticHandler("goForward"),listen:this.handleListen,block:this.handleBlock};return(/*#__PURE__*/React.createElement(Router,_extends({},rest,{history:history$1,staticContext:context})));};return StaticRouter;}(React.Component);{StaticRouter.propTypes={basename:PropTypes.string,context:PropTypes.object,location:PropTypes.oneOfType([PropTypes.string,PropTypes.object])};StaticRouter.prototype.componentDidMount=function(){warning(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, "+"use `import { Router }` instead of `import { StaticRouter as Router }`.");};}/**
	 * The public API for rendering the first <Route> that matches.
	 */var Switch=/*#__PURE__*/function(_React$Component){_inheritsLoose(Switch,_React$Component);function Switch(){return _React$Component.apply(this,arguments)||this;}var _proto=Switch.prototype;_proto.render=function render(){var _this=this;return(/*#__PURE__*/React.createElement(context.Consumer,null,function(context){!context?invariant(false,"You should not use <Switch> outside a <Router>"):void 0;var location=_this.props.location||context.location;var element,match;// We use React.Children.forEach instead of React.Children.toArray().find()
	// here because toArray adds keys to all child elements and we do not want
	// to trigger an unmount/remount for two <Route>s that render the same
	// component at different URLs.
	React.Children.forEach(_this.props.children,function(child){if(match==null&&/*#__PURE__*/React.isValidElement(child)){element=child;var path=child.props.path||child.props.from;match=path?matchPath(location.pathname,_extends({},child.props,{path:path})):context.match;}});return match?/*#__PURE__*/React.cloneElement(element,{location:location,computedMatch:match}):null;}));};return Switch;}(React.Component);{Switch.propTypes={children:PropTypes.node,location:PropTypes.object};Switch.prototype.componentDidUpdate=function(prevProps){warning(!(this.props.location&&!prevProps.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');warning(!(!this.props.location&&prevProps.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');};}/**
	 * A public higher-order component to access the imperative API
	 */function withRouter(Component){var displayName="withRouter("+(Component.displayName||Component.name)+")";var C=function C(props){var wrappedComponentRef=props.wrappedComponentRef,remainingProps=_objectWithoutPropertiesLoose(props,["wrappedComponentRef"]);return(/*#__PURE__*/React.createElement(context.Consumer,null,function(context){!context?invariant(false,"You should not use <"+displayName+" /> outside a <Router>"):void 0;return(/*#__PURE__*/React.createElement(Component,_extends({},remainingProps,context,{ref:wrappedComponentRef})));}));};C.displayName=displayName;C.WrappedComponent=Component;{C.propTypes={wrappedComponentRef:PropTypes.oneOfType([PropTypes.string,PropTypes.func,PropTypes.object])};}return hoistStatics(C,Component);}var useContext=React.useContext;function useHistory(){{!(typeof useContext==="function")?invariant(false,"You must use React >= 16.8 in order to use useHistory()"):void 0;}return useContext(historyContext);}function useLocation(){{!(typeof useContext==="function")?invariant(false,"You must use React >= 16.8 in order to use useLocation()"):void 0;}return useContext(context).location;}function useParams(){{!(typeof useContext==="function")?invariant(false,"You must use React >= 16.8 in order to use useParams()"):void 0;}var match=useContext(context).match;return match?match.params:{};}function useRouteMatch(path){{!(typeof useContext==="function")?invariant(false,"You must use React >= 16.8 in order to use useRouteMatch()"):void 0;}var location=useLocation();var match=useContext(context).match;return path?matchPath(location.pathname,path):match;}{if(typeof window!=="undefined"){var global=window;var key="__react_router_build__";var buildNames={cjs:"CommonJS",esm:"ES modules",umd:"UMD"};if(global[key]&&global[key]!=="cjs"){var initialBuildName=buildNames[global[key]];var secondaryBuildName=buildNames["cjs"];// TODO: Add link to article that explains in detail how to avoid
	// loading 2 different builds.
	throw new Error("You are loading the "+secondaryBuildName+" build of React Router "+("on a page that is already running the "+initialBuildName+" ")+"build, so things won't work right.");}global[key]="cjs";}}exports.MemoryRouter=MemoryRouter;exports.Prompt=Prompt;exports.Redirect=Redirect;exports.Route=Route;exports.Router=Router;exports.StaticRouter=StaticRouter;exports.Switch=Switch;exports.__HistoryContext=historyContext;exports.__RouterContext=context;exports.generatePath=generatePath;exports.matchPath=matchPath;exports.useHistory=useHistory;exports.useLocation=useLocation;exports.useParams=useParams;exports.useRouteMatch=useRouteMatch;exports.withRouter=withRouter;//# sourceMappingURL=react-router.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _interopDefault(ex){return ex&&(typeof ex==='undefined'?'undefined':_typeof(ex))==='object'&&'default'in ex?ex['default']:ex;}var reactRouter=__webpack_require__(8);var React=_interopDefault(__webpack_require__(10));var history=__webpack_require__(20);var PropTypes=_interopDefault(__webpack_require__(11));var warning=_interopDefault(__webpack_require__(28));var invariant=_interopDefault(__webpack_require__(29));function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}/**
	 * The public API for a <Router> that uses HTML5 history.
	 */var BrowserRouter=/*#__PURE__*/function(_React$Component){_inheritsLoose(BrowserRouter,_React$Component);function BrowserRouter(){var _this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this;_this.history=history.createBrowserHistory(_this.props);return _this;}var _proto=BrowserRouter.prototype;_proto.render=function render(){return(/*#__PURE__*/React.createElement(reactRouter.Router,{history:this.history,children:this.props.children}));};return BrowserRouter;}(React.Component);{BrowserRouter.propTypes={basename:PropTypes.string,children:PropTypes.node,forceRefresh:PropTypes.bool,getUserConfirmation:PropTypes.func,keyLength:PropTypes.number};BrowserRouter.prototype.componentDidMount=function(){warning(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, "+"use `import { Router }` instead of `import { BrowserRouter as Router }`.");};}/**
	 * The public API for a <Router> that uses window.location.hash.
	 */var HashRouter=/*#__PURE__*/function(_React$Component){_inheritsLoose(HashRouter,_React$Component);function HashRouter(){var _this;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_React$Component.call.apply(_React$Component,[this].concat(args))||this;_this.history=history.createHashHistory(_this.props);return _this;}var _proto=HashRouter.prototype;_proto.render=function render(){return(/*#__PURE__*/React.createElement(reactRouter.Router,{history:this.history,children:this.props.children}));};return HashRouter;}(React.Component);{HashRouter.propTypes={basename:PropTypes.string,children:PropTypes.node,getUserConfirmation:PropTypes.func,hashType:PropTypes.oneOf(["hashbang","noslash","slash"])};HashRouter.prototype.componentDidMount=function(){warning(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, "+"use `import { Router }` instead of `import { HashRouter as Router }`.");};}var resolveToLocation=function resolveToLocation(to,currentLocation){return typeof to==="function"?to(currentLocation):to;};var normalizeToLocation=function normalizeToLocation(to,currentLocation){return typeof to==="string"?history.createLocation(to,null,null,currentLocation):to;};var forwardRefShim=function forwardRefShim(C){return C;};var forwardRef=React.forwardRef;if(typeof forwardRef==="undefined"){forwardRef=forwardRefShim;}function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey);}var LinkAnchor=forwardRef(function(_ref,forwardedRef){var innerRef=_ref.innerRef,navigate=_ref.navigate,_onClick=_ref.onClick,rest=_objectWithoutPropertiesLoose(_ref,["innerRef","navigate","onClick"]);var target=rest.target;var props=_extends({},rest,{onClick:function onClick(event){try{if(_onClick)_onClick(event);}catch(ex){event.preventDefault();throw ex;}if(!event.defaultPrevented&&// onClick prevented default
	event.button===0&&(// ignore everything but left clicks
	!target||target==="_self")&&// let browser handle "target=_blank" etc.
	!isModifiedEvent(event)// ignore clicks with modifier keys
	){event.preventDefault();navigate();}}});// React 15 compat
	if(forwardRefShim!==forwardRef){props.ref=forwardedRef||innerRef;}else{props.ref=innerRef;}/* eslint-disable-next-line jsx-a11y/anchor-has-content */return(/*#__PURE__*/React.createElement("a",props));});{LinkAnchor.displayName="LinkAnchor";}/**
	 * The public API for rendering a history-aware <a>.
	 */var Link=forwardRef(function(_ref2,forwardedRef){var _ref2$component=_ref2.component,component=_ref2$component===void 0?LinkAnchor:_ref2$component,replace=_ref2.replace,to=_ref2.to,innerRef=_ref2.innerRef,rest=_objectWithoutPropertiesLoose(_ref2,["component","replace","to","innerRef"]);return(/*#__PURE__*/React.createElement(reactRouter.__RouterContext.Consumer,null,function(context){!context?invariant(false,"You should not use <Link> outside a <Router>"):void 0;var history$1=context.history;var location=normalizeToLocation(resolveToLocation(to,context.location),context.location);var href=location?history$1.createHref(location):"";var props=_extends({},rest,{href:href,navigate:function navigate(){var location=resolveToLocation(to,context.location);var isDuplicateNavigation=history.createPath(context.location)===history.createPath(normalizeToLocation(location));var method=replace||isDuplicateNavigation?history$1.replace:history$1.push;method(location);}});// React 15 compat
	if(forwardRefShim!==forwardRef){props.ref=forwardedRef||innerRef;}else{props.innerRef=innerRef;}return(/*#__PURE__*/React.createElement(component,props));}));});{var toType=PropTypes.oneOfType([PropTypes.string,PropTypes.object,PropTypes.func]);var refType=PropTypes.oneOfType([PropTypes.string,PropTypes.func,PropTypes.shape({current:PropTypes.any})]);Link.displayName="Link";Link.propTypes={innerRef:refType,onClick:PropTypes.func,replace:PropTypes.bool,target:PropTypes.string,to:toType.isRequired};}var forwardRefShim$1=function forwardRefShim(C){return C;};var forwardRef$1=React.forwardRef;if(typeof forwardRef$1==="undefined"){forwardRef$1=forwardRefShim$1;}function joinClassnames(){for(var _len=arguments.length,classnames=new Array(_len),_key=0;_key<_len;_key++){classnames[_key]=arguments[_key];}return classnames.filter(function(i){return i;}).join(" ");}/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */var NavLink=forwardRef$1(function(_ref,forwardedRef){var _ref$ariaCurrent=_ref["aria-current"],ariaCurrent=_ref$ariaCurrent===void 0?"page":_ref$ariaCurrent,_ref$activeClassName=_ref.activeClassName,activeClassName=_ref$activeClassName===void 0?"active":_ref$activeClassName,activeStyle=_ref.activeStyle,classNameProp=_ref.className,exact=_ref.exact,isActiveProp=_ref.isActive,locationProp=_ref.location,sensitive=_ref.sensitive,strict=_ref.strict,styleProp=_ref.style,to=_ref.to,innerRef=_ref.innerRef,rest=_objectWithoutPropertiesLoose(_ref,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return(/*#__PURE__*/React.createElement(reactRouter.__RouterContext.Consumer,null,function(context){!context?invariant(false,"You should not use <NavLink> outside a <Router>"):void 0;var currentLocation=locationProp||context.location;var toLocation=normalizeToLocation(resolveToLocation(to,currentLocation),currentLocation);var path=toLocation.pathname;// Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
	var escapedPath=path&&path.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");var match=escapedPath?reactRouter.matchPath(currentLocation.pathname,{path:escapedPath,exact:exact,sensitive:sensitive,strict:strict}):null;var isActive=!!(isActiveProp?isActiveProp(match,currentLocation):match);var className=typeof classNameProp==="function"?classNameProp(isActive):classNameProp;var style=typeof styleProp==="function"?styleProp(isActive):styleProp;if(isActive){className=joinClassnames(className,activeClassName);style=_extends({},style,activeStyle);}var props=_extends({"aria-current":isActive&&ariaCurrent||null,className:className,style:style,to:toLocation},rest);// React 15 compat
	if(forwardRefShim$1!==forwardRef$1){props.ref=forwardedRef||innerRef;}else{props.innerRef=innerRef;}return(/*#__PURE__*/React.createElement(Link,props));}));});{NavLink.displayName="NavLink";var ariaCurrentType=PropTypes.oneOf(["page","step","location","date","time","true","false"]);NavLink.propTypes=_extends({},Link.propTypes,{"aria-current":ariaCurrentType,activeClassName:PropTypes.string,activeStyle:PropTypes.object,className:PropTypes.oneOfType([PropTypes.string,PropTypes.func]),exact:PropTypes.bool,isActive:PropTypes.func,location:PropTypes.object,sensitive:PropTypes.bool,strict:PropTypes.bool,style:PropTypes.oneOfType([PropTypes.object,PropTypes.func])});}Object.defineProperty(exports,'MemoryRouter',{enumerable:true,get:function get(){return reactRouter.MemoryRouter;}});Object.defineProperty(exports,'Prompt',{enumerable:true,get:function get(){return reactRouter.Prompt;}});Object.defineProperty(exports,'Redirect',{enumerable:true,get:function get(){return reactRouter.Redirect;}});Object.defineProperty(exports,'Route',{enumerable:true,get:function get(){return reactRouter.Route;}});Object.defineProperty(exports,'Router',{enumerable:true,get:function get(){return reactRouter.Router;}});Object.defineProperty(exports,'StaticRouter',{enumerable:true,get:function get(){return reactRouter.StaticRouter;}});Object.defineProperty(exports,'Switch',{enumerable:true,get:function get(){return reactRouter.Switch;}});Object.defineProperty(exports,'generatePath',{enumerable:true,get:function get(){return reactRouter.generatePath;}});Object.defineProperty(exports,'matchPath',{enumerable:true,get:function get(){return reactRouter.matchPath;}});Object.defineProperty(exports,'useHistory',{enumerable:true,get:function get(){return reactRouter.useHistory;}});Object.defineProperty(exports,'useLocation',{enumerable:true,get:function get(){return reactRouter.useLocation;}});Object.defineProperty(exports,'useParams',{enumerable:true,get:function get(){return reactRouter.useParams;}});Object.defineProperty(exports,'useRouteMatch',{enumerable:true,get:function get(){return reactRouter.useRouteMatch;}});Object.defineProperty(exports,'withRouter',{enumerable:true,get:function get(){return reactRouter.withRouter;}});exports.BrowserRouter=BrowserRouter;exports.HashRouter=HashRouter;exports.Link=Link;exports.NavLink=NavLink;//# sourceMappingURL=react-router-dom.js.map

/***/ }),
/* 39 */,
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var _require = __webpack_require__(5),
	    withRouter = _require.withRouter;

	var fetchData = __webpack_require__(41);

	var React = __webpack_require__(10),
	    ToolbarContainer = __webpack_require__(71),
	    BtnStart = __webpack_require__(73),
	    BtnAdd = __webpack_require__(78),
	    BtnLogin = __webpack_require__(79),
	    BtnEdit = __webpack_require__(80),
	    BtnInfo = __webpack_require__(81),
	    StartMenu = __webpack_require__(82),
	    SelectRekv = __webpack_require__(87),
	    Select = __webpack_require__(164),
	    BtnAccount = __webpack_require__(166);
	var Login = __webpack_require__(167);
	var SearchText = __webpack_require__(173);

	var style = __webpack_require__(175);
	var DocRights = __webpack_require__(176);
	var checkRights = __webpack_require__(177);

	var MenuToolBar = function (_React$Component) {
	    _inherits(MenuToolBar, _React$Component);

	    function MenuToolBar(props) {
	        _classCallCheck(this, MenuToolBar);

	        var _this = _possibleConstructorReturn(this, (MenuToolBar.__proto__ || Object.getPrototypeOf(MenuToolBar)).call(this, props));

	        _this.state = {
	            logedIn: false,
	            showLogin: false,
	            startMenuValue: 'parentid',
	            showStartMenu: false,
	            isOpenRekvPage: false,
	            rekvId: props.rekvId ? props.rekvId : 1,
	            keel: 'EST',
	            user: {
	                id: 0,
	                kasutaja: null,
	                ametnik: null
	            }
	        };

	        _this.btnStartClick = _this.btnStartClick.bind(_this);
	        _this.btnAddClick = _this.btnAddClick.bind(_this);
	        _this.btnLoginClick = _this.btnLoginClick.bind(_this);
	        _this.renderStartMenu = _this.renderStartMenu.bind(_this);
	        _this.startMenuClickHandler = _this.startMenuClickHandler.bind(_this);
	        _this.handleChangeSelect = _this.handleChangeSelect.bind(_this);
	        _this.btnAccountClick = _this.btnAccountClick.bind(_this);
	        _this.btnEditRekvClick = _this.btnEditRekvClick.bind(_this);
	        _this.renderLoginComponent = _this.renderLoginComponent.bind(_this);
	        //        this.handleLoginClickEvent = this.handleLoginClickEvent.bind(this);

	        //подписываемся на изменения в сторе
	        var store = _this.props.store;
	        if (store) {
	            store.subscribe(function () {
	                // When state will be updated(in our case, when items will be fetched),
	                // we will update local component state and force component to rerender
	                // with new data.

	                var user = store.getState().statuses.user;
	                _this.setState({
	                    user: user,
	                    logedIn: user.id ? !!user.id : false
	                });
	            });
	        }
	        return _this;
	    }

	    _createClass(MenuToolBar, [{
	        key: 'render',
	        value: function render() {
	            var isEditMode = this.props.edited,
	                toolbarParams = {
	                btnStart: {
	                    show: this.props.params['btnStart'].show || false,
	                    disabled: isEditMode
	                },
	                btnAdd: {
	                    show: true,
	                    disabled: isEditMode
	                },
	                btnLogin: {
	                    show: true,
	                    disabled: false
	                },
	                btnAccount: {
	                    show: this.state.logedIn || false,
	                    disabled: false
	                },
	                btnInfo: {
	                    show: true,
	                    disabled: false
	                }
	            };

	            return React.createElement(
	                'div',
	                { style: style['container'] },
	                React.createElement(
	                    ToolbarContainer,
	                    {
	                        ref: 'menuToolbarContainer',
	                        position: 'left' },
	                    React.createElement(BtnStart, { ref: 'btnStart',
	                        store: this.props.store,
	                        onClick: this.btnStartClick,
	                        show: toolbarParams['btnStart'].show,
	                        disabled: toolbarParams['btnStart'].disabled
	                    }),
	                    this.state.logedIn ? React.createElement(BtnAdd, { onClick: this.btnAddClick,
	                        show: toolbarParams['btnAdd'].show,
	                        disable: toolbarParams['btnAdd'].disabled }) : null,
	                    this.state.logedIn ? React.createElement(BtnAccount, { ref: 'btnAccount',
	                        value: this.state.user.ametnik ? this.state.user.ametnik : '',
	                        onClick: this.btnAccountClick,
	                        show: toolbarParams['btnAccount'].show,
	                        disabled: toolbarParams['btnAccount'].disabled }) : null,
	                    React.createElement(BtnLogin, { ref: 'btnLogin',
	                        value: this.state.logedIn ? 'Välju' : 'Sisse',
	                        onClick: this.btnLoginClick,
	                        show: toolbarParams['btnLogin'].show,
	                        disabled: toolbarParams['btnLogin'].disabled }),
	                    React.createElement(SearchText, {
	                        store: this.props.store
	                    }),
	                    React.createElement(
	                        'select',
	                        { ref: 'select',
	                            style: style['selectKeel'],
	                            value: this.state.keel || 'Est',
	                            id: 'keel',
	                            onChange: this.handleChangeSelect },
	                        React.createElement(
	                            'option',
	                            { value: 'Est', key: 'est',
	                                ref: 'Est' },
	                            ' ',
	                            'EST',
	                            ' '
	                        ),
	                        React.createElement(
	                            'option',
	                            { value: 'RU', key: 'RU',
	                                ref: 'RU' },
	                            ' ',
	                            'RU',
	                            ' '
	                        ),
	                        React.createElement(
	                            'option',
	                            { value: 'ING', key: 'ING',
	                                ref: 'ING' },
	                            ' ',
	                            'ING',
	                            ' '
	                        )
	                    )
	                ),
	                this.renderStartMenu(),
	                this.state.showLogin ? this.renderLoginComponent() : null
	            );
	        }

	        /**
	         * отрисует конмпонент редактирования картины
	         * @returns {*}
	         */

	    }, {
	        key: 'renderLoginComponent',
	        value: function renderLoginComponent() {
	            return React.createElement(
	                Login,
	                { show: true,
	                    id: 0,
	                    store: this.props.store,
	                    loginClickEvent: this.handleLoginClickEvent },
	                'Login'
	            );
	        }
	    }, {
	        key: 'handleChangeSelect',
	        value: function handleChangeSelect(e) {
	            var _this2 = this;

	            var fieldValue = e.target.value;

	            this.setState({ keel: fieldValue });
	            var current = window.location.pathname;
	            this.props.history.replace('/reload');
	            setTimeout(function () {
	                _this2.props.history.replace(current);
	            });
	        }
	    }, {
	        key: 'renderStartMenu',
	        value: function renderStartMenu() {
	            var component = null;
	            var data = [];
	            var user = {};
	            if (this.props.store) {
	                user = this.props.store.getState().statuses.user;
	                data = this.props.store.getState().menu.menu;

	                if (!user || !user.is_admin) {
	                    data = data.filter(function (row) {
	                        // если нет пользователя, или он не адми, грузим только доступные
	                        if (!row.props || !row.props.is_admin) {
	                            return row;
	                        } else {
	                            return null;
	                        }
	                    });
	                }
	            }

	            if (this.state.showStartMenu) {
	                component = React.createElement(StartMenu, { ref: 'startMenu',
	                    store: this.props.store,
	                    value: this.state.startMenuValue,
	                    data: data,
	                    clickHandler: this.startMenuClickHandler });
	            }
	            return component;
	        }
	    }, {
	        key: 'btnStartClick',
	        value: function btnStartClick() {
	            // обработчик для кнопки Start

	            this.setState({ showStartMenu: !this.state.showStartMenu });
	        }
	    }, {
	        key: 'btnAddClick',
	        value: function btnAddClick() {
	            // обработчик для кнопки Start

	            //this.setState({showPicture: !this.state.showPicture});
	            // сигнал не перегрузку основного окна
	            if (this.props.btnClickEventHandler) {
	                this.props.btnClickEventHandler('btnAdd');
	            }
	        }

	        /**
	         * получит от стартого меню данные, спрячет меню
	         */

	    }, {
	        key: 'startMenuClickHandler',
	        value: function startMenuClickHandler(value) {
	            this.setState({ showStartMenu: false });

	            if (this.props.store) {
	                // new action
	                var store = this.props.store;
	                if (value == 'RAAMA') {
	                    window.open('/RAAMA/login');
	                } else {
	                    store.dispatch({ type: 'activePageComponent', activePageComponent: value });
	                }
	            } else {
	                var docType = DocContext['menu'].find(function (row) {
	                    return row.kood === value;
	                });
	                if (docType) {
	                    DocContext.pageName = docType.name;
	                }

	                if (this.props.history) {
	                    return this.props.history.push({
	                        pathname: '/' + DocContext.module + '/' + value,
	                        state: { module: DocContext.module }

	                    });
	                } else {
	                    document.location.href = '/' + DocContext.module + '/' + value;
	                }
	            }
	        }
	    }, {
	        key: 'btnLoginClick',
	        value: function btnLoginClick() {
	            if (!this.state.logedIn) {
	                this.setState({ showLogin: !this.state.showLogin });
	            } else {
	                // удалим из стора пользователя
	                var store = this.props.store;
	                store.dispatch({ type: 'user', user: {} });
	                this.setState({ logedIn: false });
	            }
	        }
	    }, {
	        key: 'btnAccountClick',
	        value: function btnAccountClick() {
	            /*
	                    return this.props.history.push({
	                        pathname: `/${DocContext.module}/userid/${DocContext.userData.userId}`,
	                        state: {module: DocContext.module}
	                    });
	            */
	        }
	    }, {
	        key: 'btnEditRekvClick',
	        value: function btnEditRekvClick() {
	            /*
	                    return this.props.history.push({
	                        pathname: `/${DocContext.module}/rekv/${DocContext.userData.asutusId}`,
	                        state: {module: DocContext.module}
	                    });
	            */

	        }
	    }]);

	    return MenuToolBar;
	}(React.Component);

	/*
	MenuToolBar
	    .propTypes = {
	    edited: PropTypes.bool,
	    params: PropTypes.object.isRequired,
	    logedIn: PropTypes.bool
	};


	MenuToolBar
	    .defaultProps = {
	    edited: false,
	    logedIn: false,
	    params: {
	        btnStart: {
	            show: true
	        }
	    }
	};
	*/

	module.exports = withRouter(MenuToolBar);

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var axios=__webpack_require__(42);var isOk=false;axios.defaults.baseURL='/';module.exports={fetchDataGet:function fetchDataGet(url){return axios.get(url).then(function(res){return res;}).catch(function(error){console.error('fetchData status, error',error.response.status,error);return{result:'error',status:error.response.status};});},fetchDataPost:function fetchDataPost(url,params,fileType){var headers={'Content-Type':'multipart/form-data'};console.log('fetch',url,params);return axios.post(url,params,headers).then(function(res,err){console.log('fetch lib res',res,err);return res;}).catch(function(error){console.error('fetchData error',error.response.status,error);return{result:'error',status:error.response.status};});},fetchDataPut:function fetchDataPut(url,params){return axios.put(url,params,headers).catch(function(error){console.error('fetchData error',error.response.status,error);return{result:'error',status:error.response.status};});}};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';module.exports=__webpack_require__(43);

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);var bind=__webpack_require__(45);var Axios=__webpack_require__(46);var mergeConfig=__webpack_require__(65);var defaults=__webpack_require__(51);/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */function createInstance(defaultConfig){var context=new Axios(defaultConfig);var instance=bind(Axios.prototype.request,context);// Copy axios.prototype to instance
	utils.extend(instance,Axios.prototype,context);// Copy context to instance
	utils.extend(instance,context);// Factory for creating new instances
	instance.create=function create(instanceConfig){return createInstance(mergeConfig(defaultConfig,instanceConfig));};return instance;}// Create the default instance to be exported
	var axios=createInstance(defaults);// Expose Axios class to allow class inheritance
	axios.Axios=Axios;// Expose Cancel & CancelToken
	axios.Cancel=__webpack_require__(63);axios.CancelToken=__webpack_require__(68);axios.isCancel=__webpack_require__(64);axios.VERSION=__webpack_require__(67).version;// Expose all/spread
	axios.all=function all(promises){return Promise.all(promises);};axios.spread=__webpack_require__(69);// Expose isAxiosError
	axios.isAxiosError=__webpack_require__(70);module.exports=axios;// Allow use of default import syntax in TypeScript
	module.exports.default=axios;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var bind=__webpack_require__(45);// utils is a library of generic helper functions non-specific to axios
	var toString=Object.prototype.toString;/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */function isArray(val){return toString.call(val)==='[object Array]';}/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */function isUndefined(val){return typeof val==='undefined';}/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */function isBuffer(val){return val!==null&&!isUndefined(val)&&val.constructor!==null&&!isUndefined(val.constructor)&&typeof val.constructor.isBuffer==='function'&&val.constructor.isBuffer(val);}/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */function isArrayBuffer(val){return toString.call(val)==='[object ArrayBuffer]';}/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */function isFormData(val){return typeof FormData!=='undefined'&&val instanceof FormData;}/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */function isArrayBufferView(val){var result;if(typeof ArrayBuffer!=='undefined'&&ArrayBuffer.isView){result=ArrayBuffer.isView(val);}else{result=val&&val.buffer&&val.buffer instanceof ArrayBuffer;}return result;}/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */function isString(val){return typeof val==='string';}/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */function isNumber(val){return typeof val==='number';}/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */function isObject(val){return val!==null&&(typeof val==='undefined'?'undefined':_typeof(val))==='object';}/**
	 * Determine if a value is a plain Object
	 *
	 * @param {Object} val The value to test
	 * @return {boolean} True if value is a plain Object, otherwise false
	 */function isPlainObject(val){if(toString.call(val)!=='[object Object]'){return false;}var prototype=Object.getPrototypeOf(val);return prototype===null||prototype===Object.prototype;}/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */function isDate(val){return toString.call(val)==='[object Date]';}/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */function isFile(val){return toString.call(val)==='[object File]';}/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */function isBlob(val){return toString.call(val)==='[object Blob]';}/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */function isFunction(val){return toString.call(val)==='[object Function]';}/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */function isStream(val){return isObject(val)&&isFunction(val.pipe);}/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */function isURLSearchParams(val){return typeof URLSearchParams!=='undefined'&&val instanceof URLSearchParams;}/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */function trim(str){return str.trim?str.trim():str.replace(/^\s+|\s+$/g,'');}/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */function isStandardBrowserEnv(){if(typeof navigator!=='undefined'&&(navigator.product==='ReactNative'||navigator.product==='NativeScript'||navigator.product==='NS')){return false;}return typeof window!=='undefined'&&typeof document!=='undefined';}/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */function forEach(obj,fn){// Don't bother if no value provided
	if(obj===null||typeof obj==='undefined'){return;}// Force an array if not already something iterable
	if((typeof obj==='undefined'?'undefined':_typeof(obj))!=='object'){/*eslint no-param-reassign:0*/obj=[obj];}if(isArray(obj)){// Iterate over array values
	for(var i=0,l=obj.length;i<l;i++){fn.call(null,obj[i],i,obj);}}else{// Iterate over object keys
	for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){fn.call(null,obj[key],key,obj);}}}}/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */function merge()/* obj1, obj2, obj3, ... */{var result={};function assignValue(val,key){if(isPlainObject(result[key])&&isPlainObject(val)){result[key]=merge(result[key],val);}else if(isPlainObject(val)){result[key]=merge({},val);}else if(isArray(val)){result[key]=val.slice();}else{result[key]=val;}}for(var i=0,l=arguments.length;i<l;i++){forEach(arguments[i],assignValue);}return result;}/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */function extend(a,b,thisArg){forEach(b,function assignValue(val,key){if(thisArg&&typeof val==='function'){a[key]=bind(val,thisArg);}else{a[key]=val;}});return a;}/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 * @return {string} content value without BOM
	 */function stripBOM(content){if(content.charCodeAt(0)===0xFEFF){content=content.slice(1);}return content;}module.exports={isArray:isArray,isArrayBuffer:isArrayBuffer,isBuffer:isBuffer,isFormData:isFormData,isArrayBufferView:isArrayBufferView,isString:isString,isNumber:isNumber,isObject:isObject,isPlainObject:isPlainObject,isUndefined:isUndefined,isDate:isDate,isFile:isFile,isBlob:isBlob,isFunction:isFunction,isStream:isStream,isURLSearchParams:isURLSearchParams,isStandardBrowserEnv:isStandardBrowserEnv,forEach:forEach,merge:merge,extend:extend,trim:trim,stripBOM:stripBOM};

/***/ }),
/* 45 */
/***/ (function(module, exports) {

	'use strict';module.exports=function bind(fn,thisArg){return function wrap(){var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}return fn.apply(thisArg,args);};};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);var buildURL=__webpack_require__(47);var InterceptorManager=__webpack_require__(48);var dispatchRequest=__webpack_require__(49);var mergeConfig=__webpack_require__(65);var validator=__webpack_require__(66);var validators=validator.validators;/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */function Axios(instanceConfig){this.defaults=instanceConfig;this.interceptors={request:new InterceptorManager(),response:new InterceptorManager()};}/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */Axios.prototype.request=function request(config){/*eslint no-param-reassign:0*/// Allow for axios('example/url'[, config]) a la fetch API
	if(typeof config==='string'){config=arguments[1]||{};config.url=arguments[0];}else{config=config||{};}config=mergeConfig(this.defaults,config);// Set config.method
	if(config.method){config.method=config.method.toLowerCase();}else if(this.defaults.method){config.method=this.defaults.method.toLowerCase();}else{config.method='get';}var transitional=config.transitional;if(transitional!==undefined){validator.assertOptions(transitional,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},false);}// filter out skipped interceptors
	var requestInterceptorChain=[];var synchronousRequestInterceptors=true;this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor){if(typeof interceptor.runWhen==='function'&&interceptor.runWhen(config)===false){return;}synchronousRequestInterceptors=synchronousRequestInterceptors&&interceptor.synchronous;requestInterceptorChain.unshift(interceptor.fulfilled,interceptor.rejected);});var responseInterceptorChain=[];this.interceptors.response.forEach(function pushResponseInterceptors(interceptor){responseInterceptorChain.push(interceptor.fulfilled,interceptor.rejected);});var promise;if(!synchronousRequestInterceptors){var chain=[dispatchRequest,undefined];Array.prototype.unshift.apply(chain,requestInterceptorChain);chain=chain.concat(responseInterceptorChain);promise=Promise.resolve(config);while(chain.length){promise=promise.then(chain.shift(),chain.shift());}return promise;}var newConfig=config;while(requestInterceptorChain.length){var onFulfilled=requestInterceptorChain.shift();var onRejected=requestInterceptorChain.shift();try{newConfig=onFulfilled(newConfig);}catch(error){onRejected(error);break;}}try{promise=dispatchRequest(newConfig);}catch(error){return Promise.reject(error);}while(responseInterceptorChain.length){promise=promise.then(responseInterceptorChain.shift(),responseInterceptorChain.shift());}return promise;};Axios.prototype.getUri=function getUri(config){config=mergeConfig(this.defaults,config);return buildURL(config.url,config.params,config.paramsSerializer).replace(/^\?/,'');};// Provide aliases for supported request methods
	utils.forEach(['delete','get','head','options'],function forEachMethodNoData(method){/*eslint func-names:0*/Axios.prototype[method]=function(url,config){return this.request(mergeConfig(config||{},{method:method,url:url,data:(config||{}).data}));};});utils.forEach(['post','put','patch'],function forEachMethodWithData(method){/*eslint func-names:0*/Axios.prototype[method]=function(url,data,config){return this.request(mergeConfig(config||{},{method:method,url:url,data:data}));};});module.exports=Axios;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);function encode(val){return encodeURIComponent(val).replace(/%3A/gi,':').replace(/%24/g,'$').replace(/%2C/gi,',').replace(/%20/g,'+').replace(/%5B/gi,'[').replace(/%5D/gi,']');}/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */module.exports=function buildURL(url,params,paramsSerializer){/*eslint no-param-reassign:0*/if(!params){return url;}var serializedParams;if(paramsSerializer){serializedParams=paramsSerializer(params);}else if(utils.isURLSearchParams(params)){serializedParams=params.toString();}else{var parts=[];utils.forEach(params,function serialize(val,key){if(val===null||typeof val==='undefined'){return;}if(utils.isArray(val)){key=key+'[]';}else{val=[val];}utils.forEach(val,function parseValue(v){if(utils.isDate(v)){v=v.toISOString();}else if(utils.isObject(v)){v=JSON.stringify(v);}parts.push(encode(key)+'='+encode(v));});});serializedParams=parts.join('&');}if(serializedParams){var hashmarkIndex=url.indexOf('#');if(hashmarkIndex!==-1){url=url.slice(0,hashmarkIndex);}url+=(url.indexOf('?')===-1?'?':'&')+serializedParams;}return url;};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);function InterceptorManager(){this.handlers=[];}/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */InterceptorManager.prototype.use=function use(fulfilled,rejected,options){this.handlers.push({fulfilled:fulfilled,rejected:rejected,synchronous:options?options.synchronous:false,runWhen:options?options.runWhen:null});return this.handlers.length-1;};/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */InterceptorManager.prototype.eject=function eject(id){if(this.handlers[id]){this.handlers[id]=null;}};/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */InterceptorManager.prototype.forEach=function forEach(fn){utils.forEach(this.handlers,function forEachHandler(h){if(h!==null){fn(h);}});};module.exports=InterceptorManager;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);var transformData=__webpack_require__(50);var isCancel=__webpack_require__(64);var defaults=__webpack_require__(51);var Cancel=__webpack_require__(63);/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */function throwIfCancellationRequested(config){if(config.cancelToken){config.cancelToken.throwIfRequested();}if(config.signal&&config.signal.aborted){throw new Cancel('canceled');}}/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */module.exports=function dispatchRequest(config){throwIfCancellationRequested(config);// Ensure headers exist
	config.headers=config.headers||{};// Transform request data
	config.data=transformData.call(config,config.data,config.headers,config.transformRequest);// Flatten headers
	config.headers=utils.merge(config.headers.common||{},config.headers[config.method]||{},config.headers);utils.forEach(['delete','get','head','post','put','patch','common'],function cleanHeaderConfig(method){delete config.headers[method];});var adapter=config.adapter||defaults.adapter;return adapter(config).then(function onAdapterResolution(response){throwIfCancellationRequested(config);// Transform response data
	response.data=transformData.call(config,response.data,response.headers,config.transformResponse);return response;},function onAdapterRejection(reason){if(!isCancel(reason)){throwIfCancellationRequested(config);// Transform response data
	if(reason&&reason.response){reason.response.data=transformData.call(config,reason.response.data,reason.response.headers,config.transformResponse);}}return Promise.reject(reason);});};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);var defaults=__webpack_require__(51);/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */module.exports=function transformData(data,headers,fns){var context=this||defaults;/*eslint no-param-reassign:0*/utils.forEach(fns,function transform(fn){data=fn.call(context,data,headers);});return data;};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var utils=__webpack_require__(44);var normalizeHeaderName=__webpack_require__(52);var enhanceError=__webpack_require__(53);var DEFAULT_CONTENT_TYPE={'Content-Type':'application/x-www-form-urlencoded'};function setContentTypeIfUnset(headers,value){if(!utils.isUndefined(headers)&&utils.isUndefined(headers['Content-Type'])){headers['Content-Type']=value;}}function getDefaultAdapter(){var adapter;if(typeof XMLHttpRequest!=='undefined'){// For browsers use XHR adapter
	adapter=__webpack_require__(54);}else if(typeof process!=='undefined'&&Object.prototype.toString.call(process)==='[object process]'){// For node use HTTP adapter
	adapter=__webpack_require__(54);}return adapter;}function stringifySafely(rawValue,parser,encoder){if(utils.isString(rawValue)){try{(parser||JSON.parse)(rawValue);return utils.trim(rawValue);}catch(e){if(e.name!=='SyntaxError'){throw e;}}}return(encoder||JSON.stringify)(rawValue);}var defaults={transitional:{silentJSONParsing:true,forcedJSONParsing:true,clarifyTimeoutError:false},adapter:getDefaultAdapter(),transformRequest:[function transformRequest(data,headers){normalizeHeaderName(headers,'Accept');normalizeHeaderName(headers,'Content-Type');if(utils.isFormData(data)||utils.isArrayBuffer(data)||utils.isBuffer(data)||utils.isStream(data)||utils.isFile(data)||utils.isBlob(data)){return data;}if(utils.isArrayBufferView(data)){return data.buffer;}if(utils.isURLSearchParams(data)){setContentTypeIfUnset(headers,'application/x-www-form-urlencoded;charset=utf-8');return data.toString();}if(utils.isObject(data)||headers&&headers['Content-Type']==='application/json'){setContentTypeIfUnset(headers,'application/json');return stringifySafely(data);}return data;}],transformResponse:[function transformResponse(data){var transitional=this.transitional||defaults.transitional;var silentJSONParsing=transitional&&transitional.silentJSONParsing;var forcedJSONParsing=transitional&&transitional.forcedJSONParsing;var strictJSONParsing=!silentJSONParsing&&this.responseType==='json';if(strictJSONParsing||forcedJSONParsing&&utils.isString(data)&&data.length){try{return JSON.parse(data);}catch(e){if(strictJSONParsing){if(e.name==='SyntaxError'){throw enhanceError(e,this,'E_JSON_PARSE');}throw e;}}}return data;}],/**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */timeout:0,xsrfCookieName:'XSRF-TOKEN',xsrfHeaderName:'X-XSRF-TOKEN',maxContentLength:-1,maxBodyLength:-1,validateStatus:function validateStatus(status){return status>=200&&status<300;},headers:{common:{'Accept':'application/json, text/plain, */*'}}};utils.forEach(['delete','get','head'],function forEachMethodNoData(method){defaults.headers[method]={};});utils.forEach(['post','put','patch'],function forEachMethodWithData(method){defaults.headers[method]=utils.merge(DEFAULT_CONTENT_TYPE);});module.exports=defaults;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);module.exports=function normalizeHeaderName(headers,normalizedName){utils.forEach(headers,function processHeader(value,name){if(name!==normalizedName&&name.toUpperCase()===normalizedName.toUpperCase()){headers[normalizedName]=value;delete headers[name];}});};

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	'use strict';/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */module.exports=function enhanceError(error,config,code,request,response){error.config=config;if(code){error.code=code;}error.request=request;error.response=response;error.isAxiosError=true;error.toJSON=function toJSON(){return{// Standard
	message:this.message,name:this.name,// Microsoft
	description:this.description,number:this.number,// Mozilla
	fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,// Axios
	config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null};};return error;};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);var settle=__webpack_require__(55);var cookies=__webpack_require__(57);var buildURL=__webpack_require__(47);var buildFullPath=__webpack_require__(58);var parseHeaders=__webpack_require__(61);var isURLSameOrigin=__webpack_require__(62);var createError=__webpack_require__(56);var defaults=__webpack_require__(51);var Cancel=__webpack_require__(63);module.exports=function xhrAdapter(config){return new Promise(function dispatchXhrRequest(resolve,reject){var requestData=config.data;var requestHeaders=config.headers;var responseType=config.responseType;var onCanceled;function done(){if(config.cancelToken){config.cancelToken.unsubscribe(onCanceled);}if(config.signal){config.signal.removeEventListener('abort',onCanceled);}}if(utils.isFormData(requestData)){delete requestHeaders['Content-Type'];// Let the browser set it
	}var request=new XMLHttpRequest();// HTTP basic authentication
	if(config.auth){var username=config.auth.username||'';var password=config.auth.password?unescape(encodeURIComponent(config.auth.password)):'';requestHeaders.Authorization='Basic '+btoa(username+':'+password);}var fullPath=buildFullPath(config.baseURL,config.url);request.open(config.method.toUpperCase(),buildURL(fullPath,config.params,config.paramsSerializer),true);// Set the request timeout in MS
	request.timeout=config.timeout;function onloadend(){if(!request){return;}// Prepare the response
	var responseHeaders='getAllResponseHeaders'in request?parseHeaders(request.getAllResponseHeaders()):null;var responseData=!responseType||responseType==='text'||responseType==='json'?request.responseText:request.response;var response={data:responseData,status:request.status,statusText:request.statusText,headers:responseHeaders,config:config,request:request};settle(function _resolve(value){resolve(value);done();},function _reject(err){reject(err);done();},response);// Clean up request
	request=null;}if('onloadend'in request){// Use onloadend if available
	request.onloadend=onloadend;}else{// Listen for ready state to emulate onloadend
	request.onreadystatechange=function handleLoad(){if(!request||request.readyState!==4){return;}// The request errored out and we didn't get a response, this will be
	// handled by onerror instead
	// With one exception: request that using file: protocol, most browsers
	// will return status as 0 even though it's a successful request
	if(request.status===0&&!(request.responseURL&&request.responseURL.indexOf('file:')===0)){return;}// readystate handler is calling before onerror or ontimeout handlers,
	// so we should call onloadend on the next 'tick'
	setTimeout(onloadend);};}// Handle browser request cancellation (as opposed to a manual cancellation)
	request.onabort=function handleAbort(){if(!request){return;}reject(createError('Request aborted',config,'ECONNABORTED',request));// Clean up request
	request=null;};// Handle low level network errors
	request.onerror=function handleError(){// Real errors are hidden from us by the browser
	// onerror should only fire if it's a network error
	reject(createError('Network Error',config,null,request));// Clean up request
	request=null;};// Handle timeout
	request.ontimeout=function handleTimeout(){var timeoutErrorMessage=config.timeout?'timeout of '+config.timeout+'ms exceeded':'timeout exceeded';var transitional=config.transitional||defaults.transitional;if(config.timeoutErrorMessage){timeoutErrorMessage=config.timeoutErrorMessage;}reject(createError(timeoutErrorMessage,config,transitional.clarifyTimeoutError?'ETIMEDOUT':'ECONNABORTED',request));// Clean up request
	request=null;};// Add xsrf header
	// This is only done if running in a standard browser environment.
	// Specifically not if we're in a web worker, or react-native.
	if(utils.isStandardBrowserEnv()){// Add xsrf header
	var xsrfValue=(config.withCredentials||isURLSameOrigin(fullPath))&&config.xsrfCookieName?cookies.read(config.xsrfCookieName):undefined;if(xsrfValue){requestHeaders[config.xsrfHeaderName]=xsrfValue;}}// Add headers to the request
	if('setRequestHeader'in request){utils.forEach(requestHeaders,function setRequestHeader(val,key){if(typeof requestData==='undefined'&&key.toLowerCase()==='content-type'){// Remove Content-Type if data is undefined
	delete requestHeaders[key];}else{// Otherwise add header to the request
	request.setRequestHeader(key,val);}});}// Add withCredentials to request if needed
	if(!utils.isUndefined(config.withCredentials)){request.withCredentials=!!config.withCredentials;}// Add responseType to request if needed
	if(responseType&&responseType!=='json'){request.responseType=config.responseType;}// Handle progress if needed
	if(typeof config.onDownloadProgress==='function'){request.addEventListener('progress',config.onDownloadProgress);}// Not all browsers support upload events
	if(typeof config.onUploadProgress==='function'&&request.upload){request.upload.addEventListener('progress',config.onUploadProgress);}if(config.cancelToken||config.signal){// Handle cancellation
	// eslint-disable-next-line func-names
	onCanceled=function onCanceled(cancel){if(!request){return;}reject(!cancel||cancel&&cancel.type?new Cancel('canceled'):cancel);request.abort();request=null;};config.cancelToken&&config.cancelToken.subscribe(onCanceled);if(config.signal){config.signal.aborted?onCanceled():config.signal.addEventListener('abort',onCanceled);}}if(!requestData){requestData=null;}// Send the request
	request.send(requestData);});};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var createError=__webpack_require__(56);/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */module.exports=function settle(resolve,reject,response){var validateStatus=response.config.validateStatus;if(!response.status||!validateStatus||validateStatus(response.status)){resolve(response);}else{reject(createError('Request failed with status code '+response.status,response.config,null,response.request,response));}};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var enhanceError=__webpack_require__(53);/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */module.exports=function createError(message,config,code,request,response){var error=new Error(message);return enhanceError(error,config,code,request,response);};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);module.exports=utils.isStandardBrowserEnv()?// Standard browser envs support document.cookie
	function standardBrowserEnv(){return{write:function write(name,value,expires,path,domain,secure){var cookie=[];cookie.push(name+'='+encodeURIComponent(value));if(utils.isNumber(expires)){cookie.push('expires='+new Date(expires).toGMTString());}if(utils.isString(path)){cookie.push('path='+path);}if(utils.isString(domain)){cookie.push('domain='+domain);}if(secure===true){cookie.push('secure');}document.cookie=cookie.join('; ');},read:function read(name){var match=document.cookie.match(new RegExp('(^|;\\s*)('+name+')=([^;]*)'));return match?decodeURIComponent(match[3]):null;},remove:function remove(name){this.write(name,'',Date.now()-86400000);}};}():// Non standard browser env (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv(){return{write:function write(){},read:function read(){return null;},remove:function remove(){}};}();

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var isAbsoluteURL=__webpack_require__(59);var combineURLs=__webpack_require__(60);/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */module.exports=function buildFullPath(baseURL,requestedURL){if(baseURL&&!isAbsoluteURL(requestedURL)){return combineURLs(baseURL,requestedURL);}return requestedURL;};

/***/ }),
/* 59 */
/***/ (function(module, exports) {

	'use strict';/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */module.exports=function isAbsoluteURL(url){// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	// by any combination of letters, digits, plus, period, or hyphen.
	return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);};

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	'use strict';/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */module.exports=function combineURLs(baseURL,relativeURL){return relativeURL?baseURL.replace(/\/+$/,'')+'/'+relativeURL.replace(/^\/+/,''):baseURL;};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf=['age','authorization','content-length','content-type','etag','expires','from','host','if-modified-since','if-unmodified-since','last-modified','location','max-forwards','proxy-authorization','referer','retry-after','user-agent'];/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */module.exports=function parseHeaders(headers){var parsed={};var key;var val;var i;if(!headers){return parsed;}utils.forEach(headers.split('\n'),function parser(line){i=line.indexOf(':');key=utils.trim(line.substr(0,i)).toLowerCase();val=utils.trim(line.substr(i+1));if(key){if(parsed[key]&&ignoreDuplicateOf.indexOf(key)>=0){return;}if(key==='set-cookie'){parsed[key]=(parsed[key]?parsed[key]:[]).concat([val]);}else{parsed[key]=parsed[key]?parsed[key]+', '+val:val;}}});return parsed;};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);module.exports=utils.isStandardBrowserEnv()?// Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	function standardBrowserEnv(){var msie=/(msie|trident)/i.test(navigator.userAgent);var urlParsingNode=document.createElement('a');var originURL;/**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */function resolveURL(url){var href=url;if(msie){// IE needs attribute set twice to normalize properties
	urlParsingNode.setAttribute('href',href);href=urlParsingNode.href;}urlParsingNode.setAttribute('href',href);// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	return{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,''):'',host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,''):'',hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,''):'',hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:urlParsingNode.pathname.charAt(0)==='/'?urlParsingNode.pathname:'/'+urlParsingNode.pathname};}originURL=resolveURL(window.location.href);/**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */return function isURLSameOrigin(requestURL){var parsed=utils.isString(requestURL)?resolveURL(requestURL):requestURL;return parsed.protocol===originURL.protocol&&parsed.host===originURL.host;};}():// Non standard browser envs (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv(){return function isURLSameOrigin(){return true;};}();

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	'use strict';/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */function Cancel(message){this.message=message;}Cancel.prototype.toString=function toString(){return'Cancel'+(this.message?': '+this.message:'');};Cancel.prototype.__CANCEL__=true;module.exports=Cancel;

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	'use strict';module.exports=function isCancel(value){return!!(value&&value.__CANCEL__);};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var utils=__webpack_require__(44);/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */module.exports=function mergeConfig(config1,config2){// eslint-disable-next-line no-param-reassign
	config2=config2||{};var config={};function getMergedValue(target,source){if(utils.isPlainObject(target)&&utils.isPlainObject(source)){return utils.merge(target,source);}else if(utils.isPlainObject(source)){return utils.merge({},source);}else if(utils.isArray(source)){return source.slice();}return source;}// eslint-disable-next-line consistent-return
	function mergeDeepProperties(prop){if(!utils.isUndefined(config2[prop])){return getMergedValue(config1[prop],config2[prop]);}else if(!utils.isUndefined(config1[prop])){return getMergedValue(undefined,config1[prop]);}}// eslint-disable-next-line consistent-return
	function valueFromConfig2(prop){if(!utils.isUndefined(config2[prop])){return getMergedValue(undefined,config2[prop]);}}// eslint-disable-next-line consistent-return
	function defaultToConfig2(prop){if(!utils.isUndefined(config2[prop])){return getMergedValue(undefined,config2[prop]);}else if(!utils.isUndefined(config1[prop])){return getMergedValue(undefined,config1[prop]);}}// eslint-disable-next-line consistent-return
	function mergeDirectKeys(prop){if(prop in config2){return getMergedValue(config1[prop],config2[prop]);}else if(prop in config1){return getMergedValue(undefined,config1[prop]);}}var mergeMap={'url':valueFromConfig2,'method':valueFromConfig2,'data':valueFromConfig2,'baseURL':defaultToConfig2,'transformRequest':defaultToConfig2,'transformResponse':defaultToConfig2,'paramsSerializer':defaultToConfig2,'timeout':defaultToConfig2,'timeoutMessage':defaultToConfig2,'withCredentials':defaultToConfig2,'adapter':defaultToConfig2,'responseType':defaultToConfig2,'xsrfCookieName':defaultToConfig2,'xsrfHeaderName':defaultToConfig2,'onUploadProgress':defaultToConfig2,'onDownloadProgress':defaultToConfig2,'decompress':defaultToConfig2,'maxContentLength':defaultToConfig2,'maxBodyLength':defaultToConfig2,'transport':defaultToConfig2,'httpAgent':defaultToConfig2,'httpsAgent':defaultToConfig2,'cancelToken':defaultToConfig2,'socketPath':defaultToConfig2,'responseEncoding':defaultToConfig2,'validateStatus':mergeDirectKeys};utils.forEach(Object.keys(config1).concat(Object.keys(config2)),function computeConfigValue(prop){var merge=mergeMap[prop]||mergeDeepProperties;var configValue=merge(prop);utils.isUndefined(configValue)&&merge!==mergeDirectKeys||(config[prop]=configValue);});return config;};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var VERSION=__webpack_require__(67).version;var validators={};// eslint-disable-next-line func-names
	['object','boolean','number','function','string','symbol'].forEach(function(type,i){validators[type]=function validator(thing){return(typeof thing==='undefined'?'undefined':_typeof(thing))===type||'a'+(i<1?'n ':' ')+type;};});var deprecatedWarnings={};/**
	 * Transitional option validator
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 * @returns {function}
	 */validators.transitional=function transitional(validator,version,message){function formatMessage(opt,desc){return'[Axios v'+VERSION+'] Transitional option \''+opt+'\''+desc+(message?'. '+message:'');}// eslint-disable-next-line func-names
	return function(value,opt,opts){if(validator===false){throw new Error(formatMessage(opt,' has been removed'+(version?' in '+version:'')));}if(version&&!deprecatedWarnings[opt]){deprecatedWarnings[opt]=true;// eslint-disable-next-line no-console
	console.warn(formatMessage(opt,' has been deprecated since v'+version+' and will be removed in the near future'));}return validator?validator(value,opt,opts):true;};};/**
	 * Assert object's properties type
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 */function assertOptions(options,schema,allowUnknown){if((typeof options==='undefined'?'undefined':_typeof(options))!=='object'){throw new TypeError('options must be an object');}var keys=Object.keys(options);var i=keys.length;while(i-->0){var opt=keys[i];var validator=schema[opt];if(validator){var value=options[opt];var result=value===undefined||validator(value,opt,options);if(result!==true){throw new TypeError('option '+opt+' must be '+result);}continue;}if(allowUnknown!==true){throw Error('Unknown option '+opt);}}}module.exports={assertOptions:assertOptions,validators:validators};

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	"use strict";module.exports={"version":"0.23.0"};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var Cancel=__webpack_require__(63);/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */function CancelToken(executor){if(typeof executor!=='function'){throw new TypeError('executor must be a function.');}var resolvePromise;this.promise=new Promise(function promiseExecutor(resolve){resolvePromise=resolve;});var token=this;// eslint-disable-next-line func-names
	this.promise.then(function(cancel){if(!token._listeners)return;var i;var l=token._listeners.length;for(i=0;i<l;i++){token._listeners[i](cancel);}token._listeners=null;});// eslint-disable-next-line func-names
	this.promise.then=function(onfulfilled){var _resolve;// eslint-disable-next-line func-names
	var promise=new Promise(function(resolve){token.subscribe(resolve);_resolve=resolve;}).then(onfulfilled);promise.cancel=function reject(){token.unsubscribe(_resolve);};return promise;};executor(function cancel(message){if(token.reason){// Cancellation has already been requested
	return;}token.reason=new Cancel(message);resolvePromise(token.reason);});}/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */CancelToken.prototype.throwIfRequested=function throwIfRequested(){if(this.reason){throw this.reason;}};/**
	 * Subscribe to the cancel signal
	 */CancelToken.prototype.subscribe=function subscribe(listener){if(this.reason){listener(this.reason);return;}if(this._listeners){this._listeners.push(listener);}else{this._listeners=[listener];}};/**
	 * Unsubscribe from the cancel signal
	 */CancelToken.prototype.unsubscribe=function unsubscribe(listener){if(!this._listeners){return;}var index=this._listeners.indexOf(listener);if(index!==-1){this._listeners.splice(index,1);}};/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */CancelToken.source=function source(){var cancel;var token=new CancelToken(function executor(c){cancel=c;});return{token:token,cancel:cancel};};module.exports=CancelToken;

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	'use strict';/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */module.exports=function spread(callback){return function wrap(arr){return callback.apply(null,arr);};};

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	'use strict';/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};module.exports=function isAxiosError(payload){return(typeof payload==='undefined'?'undefined':_typeof(payload))==='object'&&payload.isAxiosError===true;};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var styles = __webpack_require__(72),
	    React = __webpack_require__(10);

	var ToolBarContainer = function (_React$Component) {
	    _inherits(ToolBarContainer, _React$Component);

	    function ToolBarContainer(props) {
	        _classCallCheck(this, ToolBarContainer);

	        return _possibleConstructorReturn(this, (ToolBarContainer.__proto__ || Object.getPrototypeOf(ToolBarContainer)).call(this, props));
	    }

	    _createClass(ToolBarContainer, [{
	        key: 'render',
	        value: function render() {
	            var style = Object.assign({}, styles.toolBarContainerStyle, styles[this.props.position], styles[this.props.container]);
	            return React.createElement(
	                'div',
	                { id: 'toolBarContainer',
	                    ref: 'toolBarContainer',
	                    style: style },
	                this.props.children
	            );
	        }
	    }]);

	    return ToolBarContainer;
	}(React.Component);

	ToolBarContainer.propTypes = {
	    position: PropTypes.string
	};

	ToolBarContainer.defaultProps = {
	    position: 'right',
	    container: {}
	};

	module.exports = ToolBarContainer;

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	'use strict';module.exports={toolBarContainerStyle:{display:'flex',width:'100%',height:'Auto',marginBottom:'5px',marginHeight:'5px',borderRadius:'5px'},right:{justifyContent:'flex-end'},left:{justifyContent:'flex-start'}};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'start';

	var ButtonRegisterStart = function (_React$PureComponent) {
	    _inherits(ButtonRegisterStart, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterStart(props) {
	        _classCallCheck(this, ButtonRegisterStart);

	        return _possibleConstructorReturn(this, (ButtonRegisterStart.__proto__ || Object.getPrototypeOf(ButtonRegisterStart)).call(this, props));
	    }

	    _createClass(ButtonRegisterStart, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick('start');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    value: '',
	                    ref: 'btnStart',
	                    style: styles.button,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterStart;
	}(React.PureComponent);

	ButtonRegisterStart.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonRegisterStart;

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	'use strict';module.exports={button:{background:'white',margin:'5px 2px',borderRadius:'5px',height:'30px',display:'flex',border:'1px solid gray'},buttonAccount:{width:'50%'},buttonLogin:{width:'100px'},buttonEdit:{display:'flex'},icons:{add:'/images/icons/add.png',edit:'/images/icons/edit.png',delete:'/images/icons/delete.png',filter:'/images/icons/filter.png',print:'/images/icons/print.png',ok:'/images/icons/ok.png',cancel:'/images/icons/cancel.png',save:'/images/icons/save.png',execute:'/images/icons/execute.png',start:'/images/icons/start.png',login:'/images/icons/login.png',account:'/images/icons/account.png',rekv:'/images/icons/rekv.png',info:'/images/icons/info.png',settings:'/images/icons/settings.png',mail:'/images/icons/mail.png',select:'/images/icons/select.png',refresh:'/images/icons/refresh.png',attachment:'/images/icons/attachment.png'}};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var styles = __webpack_require__(74);
	var getTextValue = __webpack_require__(76);

	var Button = function (_React$PureComponent) {
	    _inherits(Button, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function Button(props) {
	        _classCallCheck(this, Button);

	        var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

	        _this.handleClick = _this.handleClick.bind(_this);
	        _this.state = {
	            disabled: _this.props.disabled
	        };
	        return _this;
	    }

	    // will update state if props changed


	    _createClass(Button, [{
	        key: 'handleClick',
	        value: function handleClick(event) {
	            switch (event.type) {
	                case 'click':
	                    this.props.onClick(this.props.value);
	                    break;
	                case 'dblclick':
	                    this.props.onClick(this.props.value);
	                    break;
	                default:
	                    console.log('unhandled', event.type);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // visibility
	            var visibility = this.props.show ? 'initial' : 'hidden';

	            var propStyle = 'style' in this.props ? this.props.style : {},
	                style = Object.assign({}, styles.button, propStyle, { visibility: visibility });

	            return React.createElement(
	                'button',
	                {
	                    disabled: this.state.disabled,
	                    ref: 'button',
	                    style: style,
	                    onDoubleClick: this.handleClick,
	                    onClick: this.handleClick },
	                this.props.children,
	                getTextValue(this.props.value)
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.disabled !== prevState.disabled) {
	                return { disabled: nextProps.disabled };
	            } else return null;
	        }
	    }]);

	    return Button;
	}(React.PureComponent);

	Button.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    value: PropTypes.string.isRequired,
	    style: PropTypes.object
	};

	Button.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = Button;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';// will calculate sum of some field
	var langFile=__webpack_require__(77);var DocContext=__webpack_require__(1);var getTextValue=function getTextValue(value,lang){if(!DocContext.keel){DocContext.keel='EST';}var keel=DocContext.keel.toUpperCase()==='EST'?1:DocContext.keel.toUpperCase()==='RU'?2:0;lang=lang?lang:keel;return langFile[value]?langFile[value][lang]:value;};module.exports=getTextValue;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	'use strict';var _module$exports;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}module.exports=(_module$exports={"Lisa andmed":['Add data','Lisa andmed','Добавить показания'],"Lisa":["Add","Lisa","Добавить"],"Muuda":["Edit","Muuda","Редактировать"],"Kustuta":["Delete","Kustuta","Удалить"],"Trükk":["Print","Trükk","Печать"],"Filter":["Filter","Filter","Фильтр"],"Uuenda":["Refresh","Uuenda","Обновить"],"Save":["Save","Salvesta","Сохранить"],"Cancel":["Cancel","Katkesta","Отмена"],"Limiit:":["Limit:","Limiit:","Лимит:"],"Välju":["Exit","Välju","Выход"],"Sisse":["Login","Sisse","Вход"],"Juhend":["Help","Juhend","Помощь"],"Dokument":["Document","Dokument","Документ"],"Kuupäev":["Date","Kuupäev","Дата"],"Korr.konto":["Correspondent account","Korr.konto","Кор.счет"],"Tunnus":["Indentificator","Tunnus","Признак"],"Tunnus:":["Indentificator:","Tunnus:","Признак:"],"Üksus:":["Indentificator:","Tunnus:","Признак:"],"Projekt":["Project","Projekt","Проект"],"Projekt:":["Project:","Projekt:","Проект:"],"Objekt":["Object","Objekt","Обьект"],"Korteriomanik":["Owner","Korteriomanik","Владелец"],"raama":["Accounting","raama","Бух.учет"],"Aruanned":["Reports","Aruanned","Отчеты"],"Käibearuanne":["Turnover report","Käibearuanne","Оборотная ведомость"],"Arved koodi järgi":["Bills","Arved koodi järgi","Счета в разрезе услуг"],"Dokumendid":["Documents","Dokumendid","Документы"],"Lepingud":["Contracts","Lepingud","Договора"],"Mõõdukiri andmed":["Data","Andmed","Показания"],"Mõõdu andmed":["Data","Andmed","Показания"],"Sissemakse korraldused":["Income orders","Sissemakse korraldused","Входящие платежные поручения"],"Väljamakse korraldused":["Outcome orders","Väljamakse korraldused","Исходящие платежные поручения"],"Sissemakse kassaorder":["Income cash orders","Sissemakse kassaorder","Приходные кассовые ордера"],"Väljamakse kassaorder":["Outcome cash orders","Väljamakse kassaorder","Расходные кассовые ордера"],"Arved":["Bills register","Arved","Реестр счетов"],"Püsiandmed":["Library","Püsiandmed","Справочники"],"Kliendid":["Clients",'Kliendid',"Клиенты"],"Teenused":["Services","Teenused","Справочник услуг"],"Objektid":["Objects","Objektid","Обьекты"],"Häälestamine":["Properties","Häälestamine","Настройки"],"Oma asutuse andmed":["Base data","Oma asutuse andmed","Данные учреждения"],"Konfiguratsioon":["Config","Konfiguratsioon","Конфигурация"],"Saatja":["Sender","Saatja","Отправитель"],"Staatus":["Status","Staatus","Статус"],"Number":["Number","Number","Номер"],"Asutus":["Client","Asutus","Клиент"],"Selgitus":["Description","Selgitus","Описание"],"Tähtaeg":["Deadline","Tähtaeg","Срок"],"Hind":["Price","Hind","Цена"],"Hind:":["Price:","Hind:","Цена:"],"Raha saaja":["Beneficiary","Raha saaja","Получатель"],"Kassa":["Cash account","Kassa","Касса"],"Arve nr":["Bill nr.","Arve nr.","Счет ном."],"Valitud":["Selected","Valitud","Выбрано"],"Valida":["Select","Valitud","Выбрать"],"Koosta arved":["Create bill","Koosta arved","Создать счет"],"Täitmine":["Execute","Täitmine","Выполнить"],"Leping Nr.":["Contract Nr.","Leping Nr.","Договор номер"],"Andmed":["Data","Andmed","Показания"],"Märkused":["Description","Märkused","Примечания"],"Märkused:":["Description:","Märkused:","Примечания:"],"Korteeriomanik":["Owner","Korteeriomanik","Владелец"],"kogus":["Quantity","Kogus","Количество"],"Kogus:":["Quantity:","Kogus:","Количество:"],"Arveldusarve":["Banc account","Arveldusarve","Расч. счет"]},_defineProperty(_module$exports,'M\xF5\xF5du andmed',["Data","Mõõdu andmed","Показания"]),_defineProperty(_module$exports,"Kasutaja objektid",["User objects","Kasutaja objektid","Обьекты пользователя"]),_defineProperty(_module$exports,"Kasutaja andmed",["User data","Kasutaja andmed","Данные пользователя"]),_defineProperty(_module$exports,"Eelmise kogus",["Previous quantity","Eelmise kogus","Предыдущее кол-во"]),_defineProperty(_module$exports,"Loggid",["Logs","Loggid","Логи"]),_defineProperty(_module$exports,"Maksja",["Payer","Maksja","Плательщик"]),_defineProperty(_module$exports,"Arveldus arve",["Account nr.","Arveldus arve","Расчетный счет"]),_defineProperty(_module$exports,"Viite number",["Referance","Viite number","Ссылка"]),_defineProperty(_module$exports,"Maksepäev",["Payment day","Maksepäev","Дата платежа"]),_defineProperty(_module$exports,"Käibemaks",["Tax","Käibemaks","Налог с оборота"]),_defineProperty(_module$exports,"Summa",["Summa","Summa","Сумма"]),_defineProperty(_module$exports,"Summa:",["Summa:","Summa:","Сумма:"]),_defineProperty(_module$exports,"Koosta tagasimakse",["Create return payment","Koosta tagasimakse","Сделать возврат"]),_defineProperty(_module$exports,"Panga VV logid",["Bank statement","Panga VV logid","Выписка из банка"]),_defineProperty(_module$exports,"Saama XML (SEPA) kõik valitud maksed",["Get XML (SEPA) all selected docs","Saama XML (SEPA) kõik valitud maksed","Получить XML (SEPA) всех выделенных платежей"]),_defineProperty(_module$exports,"Nimi",["Name","Nimi","Имя"]),_defineProperty(_module$exports,"Kontakt",["Сontaсt","Kontakt","Контакт"]),_defineProperty(_module$exports,"Isikukood",["Reg.code","Isikukood","Личный код"]),_defineProperty(_module$exports,"Nimetus",["Name","Nimetus","Наименование"]),_defineProperty(_module$exports,"Aadress",["Address","Aadress","Адрес"]),_defineProperty(_module$exports,"Alus",["Base","Alus","Основание"]),_defineProperty(_module$exports,"Kood",["Code","Kood","Код"]),_defineProperty(_module$exports,"Laadimine...",["Loading...","Laadimine...","Загружаю..."]),_defineProperty(_module$exports,"Omanik",["Owner","Omanik","Собственник"]),_defineProperty(_module$exports,"Om.vorm",["Ownership","Om.vorm","Форма собственности"]),_defineProperty(_module$exports,"Telefon",["Phone","Telefon","Телефон"]),_defineProperty(_module$exports,"Tasud",["Payed","Tasud","Оплачен"]),_defineProperty(_module$exports,"Jääk",["Saldo","Jääk","Сальдо"]),_defineProperty(_module$exports,"Trükk kõik valitud arved",["Print all selected bills","Trükk kõik valitud arved","Печать всех выбранных счетов"]),_defineProperty(_module$exports,"Email kõik valitud arved",["Email all selected bills","Email kõik valitud arved","Отправить эл. почтой выбранные счета"]),_defineProperty(_module$exports,"Saada E-Arved (Omniva) kõik valitud arved",["Send to Omniva all selected bills","Saada E-Arved (Omniva) kõik valitud arved","Отправить в Омнива все выбранные счета"]),_defineProperty(_module$exports,"Saama XML e-arved kõik valitud arved",["get XMl e-arve file","Saama XML e-arved kõik valitud arved","Получить XML файл e-arve"]),_defineProperty(_module$exports,"Saama XML e-arved (SEB) kõik valitud arved",["get XML file for SEB","Saama XML e-arved (SEB) kõik valitud arved","Получить XML для банка SEB"]),_defineProperty(_module$exports,"Saama XML e-arved (SWED) kõik valitud arved",["get XML file for SWED","Saama XML e-arved (SWED) kõik valitud arved","Получить XML для банка SEB"]),_defineProperty(_module$exports,"Read kokku:",["Rows total:","Read kokku:","Всего строк:"]),_defineProperty(_module$exports,"Summa kokku:",["Summa total:","Summa kokku:","Сумма всего:"]),_defineProperty(_module$exports,"Jääk kokku:",["Saldo total:","Jääk kokku:","Долг всего:"]),_defineProperty(_module$exports,"Kokku:",["Total:","Kokku:","Всего:"]),_defineProperty(_module$exports,"Määramata summa:",["Undefined summa:","Määramata summa:","Нераспределенная оплата:"]),_defineProperty(_module$exports,'Arved',["Bills","Arved","Счета"]),_defineProperty(_module$exports,"Viitenumber",["Reference","Viitenumber","Ссылка"]),_defineProperty(_module$exports,"Töötan",["Working","Töötan","Работаю"]),_defineProperty(_module$exports,"Tekkis viga",["Got error","Tekkis viga","Ошибка"]),_defineProperty(_module$exports,"Kas koosta SMK",["Create payment order?","Kas koosta SMK?","Создать платежное поручение?"]),_defineProperty(_module$exports,"Edukalt",["Ok","Edukalt","Ок"]),_defineProperty(_module$exports,"Tekkis viga: kustutamine ebaõnnestus",["Error, delete not success","Tekkis viga: kustutamine ebaõnnestus","Ошибка, удаление не прошло"]),_defineProperty(_module$exports,"SISALDAB",["CONTAINS","SISALDAB","СОДЕРЖИТ"]),_defineProperty(_module$exports,"EI SISALDA",["DO NOT CONTAIN","EI SISALDA","НЕ СОДЕРЖИТ"]),_defineProperty(_module$exports,"Reg.kood/ Isikukood",["Reg.code/ Private code","Reg.kood/Isikukood","Рег.код/Личн.код "]),_defineProperty(_module$exports,"Klient",["Client","Klient","Клиент"]),_defineProperty(_module$exports,"Kasutaja tunnus",["Login","Kasutaja tunnus","Признак пользователя"]),_defineProperty(_module$exports,"Kasutaja nimi",["User name","Kasutaja nimi","Имя пользователя"]),_defineProperty(_module$exports,"Nimi:",["Name:","Nimi:","Имя:"]),_defineProperty(_module$exports,"Muud",["Additional","Muud","Прочее"]),_defineProperty(_module$exports,"Email:",["Email:","Email:","Эл. почта:"]),_defineProperty(_module$exports,"Email",["Email","Email","Эл. почта"]),_defineProperty(_module$exports,"Arvelduste arved",["Banc account","Arvelduste arved","Расч. счета"]),_defineProperty(_module$exports,"Smtp:",["Smtp:","Smtp:","данные почтового сервера"]),_defineProperty(_module$exports,"Port:",["Port:","Port:","Порт почтового сервера"]),_defineProperty(_module$exports,"Email kasutaja:",["Email login:","Email kasutaja:","Имя пользователя почтового сервера"]),_defineProperty(_module$exports,"Email parool:",["Email password:","Email parool:","Пароль  почтового сервера"]),_defineProperty(_module$exports,"Kas kasutaja",["Is user?","Kas kasutaja?","Пользователь"]),_defineProperty(_module$exports,"Kas juhataja",["Is manager?","Kas juhataja?","Руководитель?"]),_defineProperty(_module$exports,"Kas administraator",["Is administrator?","Kas administraator?","Администратор?"]),_defineProperty(_module$exports,"Kas raamatupidaja",["Is accounter?","Kas raamatupidaja?","Бухгалтер?"]),_defineProperty(_module$exports,"Teenus:",["Item:","Teenus:","Услуга:"]),_defineProperty(_module$exports,"Soodustus:",["Bonus:","Soodustus:","Льгота:"]),_defineProperty(_module$exports,"Kbm-ta:",["Without tax:","Kbm-ta:","Без налога:"]),_defineProperty(_module$exports,"Kbm:",["Tax:","Kbm:","Налог:"]),_defineProperty(_module$exports,"Rea lisamine / parandamine",["Row append / update","Rea lisamine / parandamine","Добавить / редактировать строку"]),_module$exports);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'add';

	var ButtonRegisterAdd = function (_React$PureComponent) {
	    _inherits(ButtonRegisterAdd, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterAdd(props) {
	        _classCallCheck(this, ButtonRegisterAdd);

	        return _possibleConstructorReturn(this, (ButtonRegisterAdd.__proto__ || Object.getPrototypeOf(ButtonRegisterAdd)).call(this, props));
	    }

	    _createClass(ButtonRegisterAdd, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick('add');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    value: 'Lisa',
	                    ref: 'btnAdd',
	                    style: styles.button,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterAdd;
	}(React.PureComponent);

	/*
	ButtonRegisterAdd.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonRegisterAdd.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonRegisterAdd;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);
	var getTextValue = __webpack_require__(76);

	var styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'login';

	var ButtonLogin = function (_React$PureComponent) {
	    _inherits(ButtonLogin, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonLogin(props) {
	        _classCallCheck(this, ButtonLogin);

	        var _this = _possibleConstructorReturn(this, (ButtonLogin.__proto__ || Object.getPrototypeOf(ButtonLogin)).call(this, props));

	        _this.state = {
	            value: props.value || 'Sisse'
	        };

	        return _this;
	    }

	    // will update state if props changed


	    _createClass(ButtonLogin, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick('login');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var value = getTextValue(this.state.value);
	            var buttonStyle = Object.assign({}, styles.button, styles.buttonLogin);

	            return React.createElement(
	                Button,
	                {
	                    value: value,
	                    ref: 'btnLogin',
	                    style: buttonStyle,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value) {
	                return { value: nextProps.value };
	            } else return null;
	        }
	    }]);

	    return ButtonLogin;
	}(React.PureComponent);

	ButtonLogin.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    value: PropTypes.string
	};

	ButtonLogin.defaultProps = {
	    disabled: false,
	    show: true,
	    value: 'Välju'
	};

	module.exports = ButtonLogin;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'edit';

	var ButtonRegisterEdit = function (_React$PureComponent) {
	    _inherits(ButtonRegisterEdit, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterEdit(props) {
	        _classCallCheck(this, ButtonRegisterEdit);

	        var _this = _possibleConstructorReturn(this, (ButtonRegisterEdit.__proto__ || Object.getPrototypeOf(ButtonRegisterEdit)).call(this, props));

	        _this.state = {
	            disabled: _this.props.disabled
	        };
	        _this.handleClick = _this.handleClick.bind(_this);
	        return _this;
	    }

	    _createClass(ButtonRegisterEdit, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick(this.props.value);
	        }

	        // will update state if props changed

	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var btnStyle = Object.assign({}, styles.buttonEdit, this.props.style ? this.props.style : {});

	            return React.createElement(
	                Button,
	                {
	                    value: this.props.value,
	                    ref: 'btnEdit',
	                    style: btnStyle,
	                    show: this.props.show,
	                    disabled: this.state.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.disabled !== prevState.disabled) {
	                return { disabled: nextProps.disabled };
	            } else return null;
	        }
	    }]);

	    return ButtonRegisterEdit;
	}(React.PureComponent);

	/*
	ButtonRegisterEdit.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    disabled: PropTypes.bool
	}
	*/

	ButtonRegisterEdit.defaultProps = {
	    disabled: false,
	    show: true,
	    value: 'Edit'
	};

	module.exports = ButtonRegisterEdit;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'info';
	var getTextValue = __webpack_require__(76);

	var DocContext = __webpack_require__(1);

	var ButtonInfo = function (_React$Component) {
	    _inherits(ButtonInfo, _React$Component);

	    // кнопка создания документа в регистрах
	    function ButtonInfo(props) {
	        _classCallCheck(this, ButtonInfo);

	        var _this = _possibleConstructorReturn(this, (ButtonInfo.__proto__ || Object.getPrototypeOf(ButtonInfo)).call(this, props));

	        _this.handleClick = _this.handleClick.bind(_this);
	        return _this;
	    }

	    /**
	     * обработчик события клик, откроет модальное окно
	     * @param e
	     */


	    _createClass(ButtonInfo, [{
	        key: 'handleClick',
	        value: function handleClick() {
	            var docTypeId = this.props.docTypeId ? this.props.docTypeId : DocContext.docTypeId;
	            var url = '/help/' + docTypeId;
	            window.open('' + url);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    Button,
	                    {
	                        ref: 'btnInfo',
	                        value: getTextValue(this.props.value),
	                        show: this.props.show,
	                        disabled: this.props.disabled,
	                        onClick: this.handleClick },
	                    React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	                )
	            );
	        }
	    }]);

	    return ButtonInfo;
	}(React.Component);

	/*
	ButtonRegisterPrint.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonInfo.defaultProps = {
	    disabled: false,
	    show: true,
	    value: ''
	};

	module.exports = ButtonInfo;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10);

	var styles = __webpack_require__(83),
	    _fetchData = __webpack_require__(41),
	    TreeList = __webpack_require__(84);

	var DocContext = __webpack_require__(1);

	var URL = __webpack_require__(86).START_MENU.URL;

	var StartMenu = function (_React$PureComponent) {
	    _inherits(StartMenu, _React$PureComponent);

	    function StartMenu(props) {
	        _classCallCheck(this, StartMenu);

	        var _this = _possibleConstructorReturn(this, (StartMenu.__proto__ || Object.getPrototypeOf(StartMenu)).call(this, props));

	        _this.state = {
	            value: props.value,
	            data: props.data
	        };

	        _this.treeData = props.data;
	        _this.clickHandler = _this.clickHandler.bind(_this);
	        _this.fetchData = _this.fetchData.bind(_this);
	        return _this;
	    }

	    /**
	     * пишем делаем запрос по итогу загрузки
	     */


	    _createClass(StartMenu, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.props.store) {
	                var data = this.props.store.getState().menu.menu;
	                var user = this.props.store.getState().statuses.user;
	                if (!user || !user.is_admin) {
	                    data = data.filter(function (row) {
	                        // если нет пользователя, или он не адми, грузим только доступные
	                        if (!row.props || !row.props.is_admin) {
	                            return row;
	                        } else {
	                            return null;
	                        }
	                    });
	                }

	                this.treeData = data;
	                this.setState({ data: data });
	                DocContext['menu'] = data;
	            } else {
	                if (!this.treeData.length) {
	                    //делаем запрос на получение данных
	                    this.fetchData(this.props);
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement(
	                'div',
	                { style: styles.container },
	                React.createElement(TreeList, { ref: 'treeList',
	                    style: styles.ul,
	                    data: this.treeData,
	                    bindDataField: 'kood',
	                    value: this.state.value,
	                    onClickAction: this.clickHandler
	                })
	            );
	        }
	    }, {
	        key: 'clickHandler',
	        value: function clickHandler(action, value) {
	            if (this.props.clickHandler) {
	                return this.props.clickHandler(value);
	            }
	        }

	        /**
	         * Выполнит запросы
	         */

	    }, {
	        key: 'fetchData',
	        value: function fetchData(props) {
	            var _this2 = this;

	            console.log('statr fetch');
	            var module = DocContext.module ? DocContext.module : 'main';
	            var url = URL + ('/' + module);
	            var params = {};

	            if (this.props.store) {
	                // берем данные из стора
	                var user = this.props.store.getState().statuses.user;
	                params = { userId: user.id, uuid: '' };
	            } else {
	                params = { userId: DocContext.userData.userId, uuid: DocContext.userData.uuid };
	            }
	            console.log('menu', url, params);

	            try {
	                // will check in cache
	                if (!DocContext['menu'] || DocContext['menu'].length === 0) {
	                    _fetchData.fetchDataPost(url, params).then(function (response) {
	                        if (response.status && response.status == 401) {
	                            console.error('Error 401, redirect');
	                            document.location = '/login';
	                        }
	                        if (response) {

	                            _this2.treeData = response.data.data;
	                            // запомним содержимое
	                            DocContext.menu = _this2.treeData;
	                            _this2.forceUpdate();
	                        }
	                    }).catch(function (error) {
	                        console.error('received error-> ', error);
	                        if (error) {
	                            document.location = '/login';
	                        }
	                    });
	                } else {
	                    this.treeData = DocContext['menu'];
	                    this.forceUpdate();
	                }
	            } catch (e) {
	                console.error(e);
	            }
	        }
	    }]);

	    return StartMenu;
	}(React.PureComponent);

	StartMenu.propTypes = {
	    data: PropTypes.array
	};

	StartMenu.defaultProps = {
	    data: []
	};

	module.exports = StartMenu;

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	'use strict';module.exports={container:{width:'auto',minHeight:'350px',position:'absolute',left:'20px',top:'50px',overflow:'auto',zIndex:'999999'},ul:{overflow:'auto'}};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(85);
	var DocContext = __webpack_require__(1);
	var getTextValue = __webpack_require__(76);

	var Tree = function (_React$PureComponent) {
	    _inherits(Tree, _React$PureComponent);

	    function Tree(props) {
	        _classCallCheck(this, Tree);

	        var _this = _possibleConstructorReturn(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).call(this, props));

	        _this.state = {
	            index: _this.getIndex(props.value),
	            value: props.value,
	            hover: false,
	            parentId: 'main'
	        };
	        _this.handleLiClick = _this.handleLiClick.bind(_this);
	        _this.toggleHover = _this.toggleHover.bind(_this);
	        _this.getTree = _this.getTree.bind(_this);
	        return _this;
	    }

	    _createClass(Tree, [{
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(nextProps) {
	            this.getIndex(nextProps.value);
	            this.setState({ index: this.getIndex(nextProps.value), value: nextProps.value });
	        }
	    }, {
	        key: 'render',
	        value: function render() {

	            if (!this.props.data.length) {
	                return null;
	            }
	            return React.createElement(
	                'div',
	                { ref: 'tree' },
	                this.getTree('0')
	            );
	        }

	        /**
	         * Обработчик для клика
	         * @param selectedIndex
	         * @param selectedId
	         * @param isNode
	         */

	    }, {
	        key: 'handleLiClick',
	        value: function handleLiClick(selectedIndex, selectedId, isNode) {
	            if (!isNode) {
	                if (!isNaN(selectedId)) {
	                    // не нода, а документ
	                    var data = this.props.data && this.props.data.filter ? this.props.data.filter(function (row) {
	                        if (row.id === selectedId) {
	                            return row;
	                        }
	                    }) : [],
	                        value = data[0][this.props.bindDataField];

	                    this.setState({
	                        index: selectedIndex,
	                        value: value
	                    });

	                    if (this.props.onClickAction) {
	                        this.props.onClickAction(this.props.name + 'Change', value);
	                    }
	                } else {
	                    // проект bors
	                    this.setState({ activeComponent: selectedId });
	                    if (this.props.onClickAction) {
	                        this.props.onClickAction(this.props.name + 'Change', selectedId);
	                    }
	                }
	            } else {
	                //isNode
	                if (selectedId !== '0' && selectedId !== DocContext.module) {
	                    this.setState({ parentId: selectedId });
	                }
	            }
	        }

	        /**
	         * вернет данные для ноды = parentId
	         * @param parentId
	         */

	    }, {
	        key: 'getChildren',
	        value: function getChildren(parentId) {
	            return this.props.data.filter(function (row) {
	                if (row.parentid == parentId) {
	                    return row;
	                }
	            });
	        }

	        /**
	         * Построет дерево для ноды = parentId
	         * @param parentId
	         * @returns {XML}
	         */

	    }, {
	        key: 'getTree',
	        value: function getTree(parentId) {
	            var _this2 = this;

	            var data = this.getChildren(parentId),
	                value = this.state.value;

	            var linkStyle = void 0;
	            if (this.state.hover) {
	                linkStyle = { backgroundColor: 'red' };
	            } else {
	                linkStyle = { backgroundColor: 'blue' };
	            }

	            var style = Object.assign({}, styles.ul, this.props.style ? this.props.style : {});
	            return React.createElement(
	                'ul',
	                {
	                    style: style,
	                    ref: 'tree-ul' },
	                data.map(function (subRow, index) {
	                    var style = Object.assign({}, styles.li, value === subRow[_this2.props.bindDataField] && !subRow.is_node ? styles.focused : {}),
	                        refId = 'li-' + index + Math.random();

	                    var is_hidden = false;

	                    if (!subRow.is_node && _this2.state.parentId !== subRow.parentid) {
	                        is_hidden = true;
	                    }

	                    var name = getTextValue(subRow.name);
	                    return React.createElement(
	                        'li',
	                        {
	                            className: subRow.is_node ? 'node' : 'menu',
	                            style: style,
	                            onClick: _this2.handleLiClick.bind(_this2, index, subRow.id, subRow.is_node),
	                            key: refId,
	                            value: subRow.id,
	                            hidden: is_hidden,
	                            ref: refId },
	                        subRow.is_node ? _this2.state.parentId == subRow.id ? '-' : '+' : null,
	                        React.createElement('img', { ref: 'image', src: styles.icons[subRow.kood.toLowerCase()] }),
	                        name,
	                        _this2.getTree(subRow.id)
	                    );
	                })
	            );
	        }
	    }, {
	        key: 'toggleHover',
	        value: function toggleHover() {
	            this.setState({ hover: !this.state.hover });
	        }

	        /**
	         * Вернет индекс строки где заданное поле имеет значение value
	         * @param value
	         * @returns {number}
	         */

	    }, {
	        key: 'getIndex',
	        value: function getIndex(value) {
	            var treeIndex = 0;
	            // we got value, we should find index and initilize idx field
	            for (var i = 0; i++; i < this.props.data[0].length) {
	                if (this.props.data[0].data[i][this.props.bindDataField] === value) {
	                    // found
	                    return i;
	                }
	            }
	            return treeIndex;
	        }
	    }]);

	    return Tree;
	}(React.PureComponent);

	Tree.propTypes = {
	    value: PropTypes.string,
	    data: PropTypes.array,
	    bindDataField: PropTypes.string.isRequired
	};

	Tree.defaultProps = {
	    data: [{
	        id: 0,
	        parentId: 0,
	        name: '',
	        kood: '',
	        selected: false
	    }],
	    value: null,
	    bindDataField: 'id'
	};

	module.exports = Tree;

/***/ }),
/* 85 */
/***/ (function(module, exports) {

	'use strict';module.exports={ul:{backgroundColor:'white',//        marginRight: '20px',
	paddingLeft:'15px',display:'table-row-group',width:'auto'},li:{//        backgroundColor: 'white',
	marginRight:'20px',margin:'10px 10px'},icons:{_laps:'/images/icons/laps.png',_vanem:'/images/icons/vanem.png',settings:'/images/icons/settings.png',_rekv:'/images/icons/rekv.png',aruanne:'/images/icons/reports.png',_lapse_kaart:'/images/icons/services.png',library:'/images/icons/libraries.png',_asutused:'/images/icons/contacts.png',_nomenclature:'/images/icons/nomenclature.png',_lapse_grupp:'/images/icons/groups.png',_lapse_taabel:'/images/icons/journal.png',_tunnus:'/images/icons/atribute.png',document:'/images/icons/documents.png',_arv:'/images/icons/bill.png',_sorder:'/images/icons/sorder.png',_smk:'/images/icons/smk.png'}};

/***/ }),
/* 86 */
/***/ (function(module, exports) {

	"use strict";module.exports={RECORDS_LIMIT:1000,// таски
	// логи
	logs:{gridConfig:[{id:"kasutaja",name:"Kasutaja",width:"20%",show:true},{id:"koostatud",name:"Koostatud",width:"15%"},{id:"muudatud",name:"Muudatud",width:"15%"},{id:"prinditud",name:"Prinditud",width:"15%"},{id:"email",name:"Meilitud",width:"15%"},{id:"earve",name:"e-Arve",width:"15%"},{id:"kustutatud",name:"Kustutatud",width:"15%"}]},// отчет об исполнении
	tulemused:{gridConfig:[{id:"id",name:"id",width:"5%",show:false},{id:'kas_vigane',name:'Staatus',width:'5%',show:true,yesBackgroundColor:'red',noBackgroundColor:'green'},{id:"result",name:"Tulemused",width:"10%",show:false},{id:"error_message",name:"Teatis",width:"70%",show:true},{id:"viitenr",name:"Viitenumber",width:"15%",show:true}]},START_MENU:{URL:'/newApi/startMenu'},REKL:{LIB_OBJS:[{id:'asutused',filter:""}],URL:'/newApi/startMenu'},TEATIS:{toolbarProps:{btnAdd:{show:false,disabled:false}}},VORDER:{LIB_OBJS:[{id:'kassa',filter:''},{id:'asutused',filter:"where id in (select asutusid from lapsed.vanemad)"},{id:'nomenclature',filter:"where dok in ('VORDER')"}]},// счета
	LEPING:{LIB_OBJS:[{id:'nomenclature',filter:"where dok = 'ARV'"},{id:'asutused',filter:""},{id:'objekt',filter:""}]},ANDMED:{LIB_OBJS:[{id:'nomenclature',filter:"where dok = 'ARV'"},{id:'leping',filter:""}]},// sorder
	SORDER:{LIB_OBJS:[{id:'nomenclature',filter:"where dok = 'SORDER'"},{id:'asutused',filter:""},{id:'kassa',filter:""},{id:'arv',filter:""}]},// счета
	ARV:{LIB_OBJS:[{id:'nomenclature',filter:"where dok = 'ARV'"},{id:'asutused',filter:""}],EVENTS:[{name:'Häälestamine',method:null,docTypeId:null},{name:'Trükk kõik valitud arved',method:null,docTypeId:null},{name:'Email kõik valitud arved',method:null,docTypeId:null},{name:'Saada E-Arved (Omniva) kõik valitud arved',method:null,docTypeId:null},{name:'Saama XML e-arved kõik valitud arved',method:null,docTypeId:null},{name:'Saama XML e-arved (SEB) kõik valitud arved',method:null,docTypeId:null},{name:'Saama XML e-arved (SWED) kõik valitud arved',method:null,docTypeId:null}]},NOMENCLATURE:{LIBRARIES:[],TAXIES:[{id:2,kood:'0',name:'0%'},{id:3,kood:'5',name:'5%'},{id:4,kood:'10',name:'10%'},{id:6,kood:'20',name:'20%'}],UHIK:[{id:1,kood:'muud',name:'Muud'},{id:2,kood:'tk',name:'Tükk'},{id:3,kood:'päev',name:'Päev'},{id:4,kood:'kuu',name:'Kuu'},{id:5,kood:'aasta',name:'Aasta'},{id:6,kood:'m3',name:'M3'}],ALGORITMID:[{id:1,kood:'päev',name:'Päev'},{id:2,kood:'konstantne',name:'Konstantne'},{id:3,kood:'külastamine',name:'Külastamine'}],TYYP:[{id:2,kood:'SOODUSTUS',name:' '}]},REKV:{LIB_OBJS:[{id:'kontod',filter:""},{id:'asutuse_liik',filter:''}]},// нода для справочников
	LIBS:{POST_LOAD_LIBS_URL:'/newApi/loadLibs'},// нода для документов
	DOCS:{POST_LOAD_DOCS_URL:'/newApi/document'}};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var radium = __webpack_require__(88);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(163);

	var Index = function (_React$PureComponent) {
	    _inherits(Index, _React$PureComponent);

	    function Index(props) {
	        _classCallCheck(this, Index);

	        var _this = _possibleConstructorReturn(this, (Index.__proto__ || Object.getPrototypeOf(Index)).call(this, props));

	        _this.state = {
	            value: props.value ? props.value : 0 /* здесь по значению ИД */
	            , readOnly: props.readOnly,
	            disabled: props.disabled,
	            fieldValue: props.defaultValue ? props.defaultValue : '' /*здесь по значени поля collId */
	            , btnDelete: props.btnDelete /* если истину, то рисуем рядом кнопку для очистки значения*/
	        };

	        _this.onChange = _this.onChange.bind(_this);

	        return _this;
	    }

	    /**
	     * привяжет к значеню поля
	     * @param data - коллекция
	     * @param collId - поле
	     * @param value - значение
	     */


	    _createClass(Index, [{
	        key: 'findFieldValue',
	        value: function findFieldValue(data, collId, value) {
	            var _this2 = this;

	            // надо привязать данные
	            data.forEach(function (row) {
	                if (row[collId] == value) {
	                    _this2.setState({ value: row[collId], fieldValue: row[collId] });
	                }
	            }, this);
	        }

	        /**
	         *
	         * @param collId
	         * @param rowId
	         * @returns {*}
	         */

	    }, {
	        key: 'getValueById',
	        value: function getValueById(collId, rowId) {
	            var _this3 = this;

	            // вернет значения поля по выбранному ИД

	            var fieldValue = void 0,
	                data = this.props.data;

	            data.forEach(function (row) {
	                if (row[collId] == rowId) {
	                    fieldValue = row[collId];
	                    _this3.setState({ fieldValue: fieldValue });
	                }
	            }, this);

	            return fieldValue;
	        }

	        // will update state if props changed

	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.props.collId && this.props.collId !== 'id') {
	                // ищем ИД по значению поля
	                this.findFieldValue(this.props.data, this.props.collId, this.props.value);
	            }
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var fieldValue = e.target.value;

	            if (fieldValue == '') {
	                fieldValue = null;
	            }

	            if (this.props.collId) {
	                // найдем по ид значение поля в collId
	                fieldValue = this.getValueById(this.props.collId, fieldValue);
	            }
	            // сохраним ид как value
	            this.setState({ value: e.target.value, fieldValue: fieldValue });

	            if (this.props.onChange) {
	                // смотрим к чему привязан селект и отдаим его наверх
	                this.props.onChange(this.props.name, fieldValue); // в случае если задан обработчик на верхнем уровне, отдадим обработку туда
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var inputReadOnly = this.state.readOnly || false,
	                inputDefaultValue = this.props.defaultValue ? this.props.defaultValue : this.props.value || ''; // Дадим дефолтное значение для виджета, чтоб покать его сразу, до подгрузки библиотеки

	            if (!this.state.value) {
	                // добавим пустую строку в массив

	                // проверим наличие пустой строки в массиве
	                var emptyObj = this.props.data.filter(function (obj) {
	                    if (obj.id === 0) {
	                        return obj;
	                    }
	                });
	            }

	            var selectStyle = Object.assign({}, styles.select, inputReadOnly ? styles.hide : {}, inputReadOnly ? styles.readOnly : {});

	            return React.createElement(
	                'select',
	                { ref: 'select',
	                    style: selectStyle,
	                    value: this.state.value || 0,
	                    id: this.props.name,
	                    onChange: this.onChange },
	                this.prepaireDataOptions()
	            );
	        }

	        /**
	         * Подготовит датасет для селекта
	         * @returns {*}
	         */

	    }, {
	        key: 'prepaireDataOptions',
	        value: function prepaireDataOptions() {
	            var _this4 = this;

	            var options = void 0;
	            var data = this.props.data.length ? this.props.data : [];

	            //        data.unshift({id:0, kood:'', name:''});
	            if (data.length) {

	                options = data.map(function (item, index) {
	                    var key = 'option-' + index;
	                    var separator = ' ';
	                    var rowValue = (item.kood ? item.kood : '') + ' ' + separator + ' ' + item.name;
	                    return React.createElement(
	                        'option',
	                        {
	                            value: _this4.props.data.length ? item[_this4.props.collId] : 0,
	                            key: key,
	                            ref: key },
	                        ' ',
	                        rowValue
	                    );
	                }, this);
	            } else {
	                options = React.createElement('option', { value: 0, key: Math.random() });
	            }
	            return options;
	        }

	        /**
	         * установит фокус на элементы
	         */

	    }, {
	        key: 'focus',
	        value: function focus() {
	            this.refs['select'].focus();
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {

	            if (nextProps.value !== prevState.value) {
	                return { value: nextProps.value };
	            } else return null;
	        }
	    }]);

	    return Index;
	}(React.PureComponent);

	Index.propTypes = {
	    data: PropTypes.arrayOf(PropTypes.shape({
	        id: PropTypes.number,
	        kood: PropTypes.string,
	        nimetus: PropTypes.string
	    })),
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    btnDelete: PropTypes.bool,
	    libs: PropTypes.string,
	    collId: PropTypes.string.isRequired,
	    title: PropTypes.string,
	    placeholder: PropTypes.string,
	    defaultValue: PropTypes.string
	};

	Index.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    btnDelete: false,
	    collId: 'id',
	    title: '',
	    defaultValue: '',
	    data: [{ id: 0, kood: '', nimetus: '' }]
	};

	module.exports = radium(Index);

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';module.exports=__webpack_require__(89).default;module.exports.default=module.exports;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"Plugins",{enumerable:true,get:function get(){return _plugins["default"];}});Object.defineProperty(exports,"Style",{enumerable:true,get:function get(){return _style["default"];}});Object.defineProperty(exports,"StyleRoot",{enumerable:true,get:function get(){return _styleRoot["default"];}});Object.defineProperty(exports,"getState",{enumerable:true,get:function get(){return _getState["default"];}});Object.defineProperty(exports,"keyframes",{enumerable:true,get:function get(){return _keyframes["default"];}});exports["default"]=void 0;var _enhancer=_interopRequireDefault(__webpack_require__(90));var _plugins=_interopRequireDefault(__webpack_require__(147));var _style=_interopRequireDefault(__webpack_require__(159));var _styleRoot=_interopRequireDefault(__webpack_require__(160));var _getState=_interopRequireDefault(__webpack_require__(141));var _keyframes=_interopRequireDefault(__webpack_require__(162));var _resolveStyles=_interopRequireDefault(__webpack_require__(91));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function Radium(ComposedComponent){return(0,_enhancer["default"])(ComposedComponent);}// Legacy object support.
	//
	// Normally it would be disfavored to attach these to the `Radium` object
	// because it defeats tree-shaking, using instead the ESM exports. But,
	// the `Radium` `Enhancer` uses **all** of these, so there's no extra "cost"
	// to them being explicitly on the `Radium` object.
	Radium.Plugins=_plugins["default"];Radium.Style=_style["default"];Radium.StyleRoot=_styleRoot["default"];Radium.getState=_getState["default"];Radium.keyframes=_keyframes["default"];if(process.env.NODE_ENV!=='production'){Radium.TestMode={clearState:_resolveStyles["default"].__clearStateForTests,disable:_resolveStyles["default"].__setTestMode.bind(null,false),enable:_resolveStyles["default"].__setTestMode.bind(null,true)};}var _default=Radium;// ESM re-exports
	exports["default"]=_default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=enhanceWithRadium;var _react=_interopRequireWildcard(__webpack_require__(10));var _propTypes=_interopRequireDefault(__webpack_require__(11));var _hoistNonReactStatics=_interopRequireDefault(__webpack_require__(36));var _resolveStyles2=_interopRequireDefault(__webpack_require__(91));var _getRadiumStyleState=_interopRequireDefault(__webpack_require__(144));var _context=__webpack_require__(158);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}}newObj["default"]=obj;return newObj;}}function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _get(target,property,receiver){if(typeof Reflect!=="undefined"&&Reflect.get){_get=Reflect.get;}else{_get=function _get(target,property,receiver){var base=_superPropBase(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(receiver);}return desc.value;};}return _get(target,property,receiver||target);}function _superPropBase(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf(object);if(object===null)break;}return object;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance");}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return _typeof(key)==="symbol"?key:String(key);}function _toPrimitive(input,hint){if(_typeof(input)!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(_typeof(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}var KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES=['arguments','callee','caller','length','name','prototype','type'];var RADIUM_PROTO;var RADIUM_METHODS;function copyProperties(source,target){Object.getOwnPropertyNames(source).forEach(function(key){if(KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES.indexOf(key)<0&&!target.hasOwnProperty(key)){var descriptor=Object.getOwnPropertyDescriptor(source,key);descriptor&&Object.defineProperty(target,key,descriptor);}});}// Handle scenarios of:
	// - Inherit from `React.Component` in any fashion
	//   See: https://github.com/FormidableLabs/radium/issues/738
	// - There's an explicit `render` field defined
	function isStateless(component){var proto=component.prototype||{};return!component.isReactComponent&&!proto.isReactComponent&&!component.render&&!proto.render;}// Check if value is a real ES class in Native / Node code.
	// See: https://stackoverflow.com/a/30760236
	function isNativeClass(component){return typeof component==='function'&&/^\s*class\s+/.test(component.toString());}// Handle es7 arrow functions on React class method names by detecting
	// and transfering the instance method to original class prototype.
	// (Using a copy of the class).
	// See: https://github.com/FormidableLabs/radium/issues/738
	function copyArrowFuncs(enhancedSelf,ComposedComponent){RADIUM_METHODS.forEach(function(name){var thisDesc=Object.getOwnPropertyDescriptor(enhancedSelf,name);var thisMethod=(thisDesc||{}).value;// Only care if have instance method.
	if(!thisMethod){return;}var radiumDesc=Object.getOwnPropertyDescriptor(RADIUM_PROTO,name);var radiumProtoMethod=(radiumDesc||{}).value;var superProtoMethod=ComposedComponent.prototype[name];// Allow transfer when:
	// 1. have an instance method
	// 2. the super class prototype doesn't have any method
	// 3. it is not already the radium prototype's
	if(!superProtoMethod&&thisMethod!==radiumProtoMethod){// Transfer dynamic render component to Component prototype (copy).
	thisDesc&&Object.defineProperty(ComposedComponent.prototype,name,thisDesc);// Remove instance property, leaving us to have a contrived
	// inheritance chain of (1) radium, (2) superclass.
	delete enhancedSelf[name];}});}function trimRadiumState(enhancer){if(enhancer._extraRadiumStateKeys&&enhancer._extraRadiumStateKeys.length>0){var trimmedRadiumState=enhancer._extraRadiumStateKeys.reduce(function(state,key){// eslint-disable-next-line no-unused-vars
	var extraStateKey=state[key],remainingState=_objectWithoutProperties(state,[key].map(_toPropertyKey));return remainingState;},(0,_getRadiumStyleState["default"])(enhancer));enhancer._lastRadiumState=trimmedRadiumState;enhancer.setState({_radiumStyleState:trimmedRadiumState});}}function cleanUpEnhancer(enhancer){var _radiumMouseUpListener=enhancer._radiumMouseUpListener,_radiumMediaQueryListenersByQuery=enhancer._radiumMediaQueryListenersByQuery;enhancer._radiumIsMounted=false;if(_radiumMouseUpListener){_radiumMouseUpListener.remove();}if(_radiumMediaQueryListenersByQuery){Object.keys(_radiumMediaQueryListenersByQuery).forEach(function(query){_radiumMediaQueryListenersByQuery[query].remove();},enhancer);}}function resolveConfig(propConfig,contextConfig,hocConfig){var config=propConfig||contextConfig||hocConfig;if(hocConfig&&config!==hocConfig){config=_objectSpread({},hocConfig,config);}return config;}function renderRadiumComponent(enhancer,renderedElement,resolvedConfig,propConfig){var _resolveStyles=(0,_resolveStyles2["default"])(enhancer,renderedElement,resolvedConfig),extraStateKeyMap=_resolveStyles.extraStateKeyMap,element=_resolveStyles.element;enhancer._extraRadiumStateKeys=Object.keys(extraStateKeyMap);if(propConfig){return _react["default"].createElement(_context.RadiumConfigContext.Provider,{value:propConfig},element);}return element;}function createEnhancedFunctionComponent(origComponent,config){var RadiumEnhancer=_react["default"].forwardRef(function(props,ref){var radiumConfig=props.radiumConfig,otherProps=_objectWithoutProperties(props,["radiumConfig"]);var radiumConfigContext=(0,_react.useContext)(_context.RadiumConfigContext);var styleKeeperContext=(0,_react.useContext)(_context.StyleKeeperContext);var _useState=(0,_react.useState)({_radiumStyleState:{}}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var enhancerApi=(0,_react.useRef)({state:state,setState:setState,_radiumMediaQueryListenersByQuery:undefined,_radiumMouseUpListener:undefined,_radiumIsMounted:true,_lastRadiumState:undefined,_extraRadiumStateKeys:undefined,_radiumStyleKeeper:styleKeeperContext}).current;// result of useRef is never recreated and is designed to be mutable
	// we need to make sure the latest state is attached to it
	enhancerApi.state=state;(0,_react.useEffect)(function(){return function(){cleanUpEnhancer(enhancerApi);};},[enhancerApi]);var hasExtraStateKeys=enhancerApi._extraRadiumStateKeys&&enhancerApi._extraRadiumStateKeys.length>0;(0,_react.useEffect)(function(){trimRadiumState(enhancerApi);},[hasExtraStateKeys,enhancerApi]);var renderedElement=origComponent(otherProps,ref);var currentConfig=resolveConfig(radiumConfig,radiumConfigContext,config);return renderRadiumComponent(enhancerApi,renderedElement,currentConfig,radiumConfig);});RadiumEnhancer._isRadiumEnhanced=true;RadiumEnhancer.defaultProps=origComponent.defaultProps;return(0,_hoistNonReactStatics["default"])(RadiumEnhancer,origComponent);}function createEnhancedClassComponent(origComponent,ComposedComponent,config){var RadiumEnhancer=/*#__PURE__*/function(_ComposedComponent){_inherits(RadiumEnhancer,_ComposedComponent);// need to attempt to assign to this.state in case
	// super component is setting state on construction,
	// otherwise class properties reinitialize to undefined
	// need to assign the following methods to this.xxx as
	// tests attempt to set this on the original component
	function RadiumEnhancer(){var _this;_classCallCheck(this,RadiumEnhancer);_this=_possibleConstructorReturn(this,_getPrototypeOf(RadiumEnhancer).apply(this,arguments));_this.state=_this.state||{};_this._radiumStyleKeeper=_this.props.styleKeeperContext;_this._radiumMediaQueryListenersByQuery=_this._radiumMediaQueryListenersByQuery;_this._radiumMouseUpListener=_this._radiumMouseUpListener;_this._radiumIsMounted=true;_this._lastRadiumState=void 0;_this._extraRadiumStateKeys=void 0;_this.state._radiumStyleState={};var self=_assertThisInitialized(_this);// Handle es7 arrow functions on React class method
	copyArrowFuncs(self,ComposedComponent);return _this;}_createClass(RadiumEnhancer,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState,snapshot){if(_get(_getPrototypeOf(RadiumEnhancer.prototype),"componentDidUpdate",this)){_get(_getPrototypeOf(RadiumEnhancer.prototype),"componentDidUpdate",this).call(this,prevProps,prevState,snapshot);}trimRadiumState(this);}},{key:"componentWillUnmount",value:function componentWillUnmount(){if(_get(_getPrototypeOf(RadiumEnhancer.prototype),"componentWillUnmount",this)){_get(_getPrototypeOf(RadiumEnhancer.prototype),"componentWillUnmount",this).call(this);}cleanUpEnhancer(this);}},{key:"render",value:function render(){var renderedElement=_get(_getPrototypeOf(RadiumEnhancer.prototype),"render",this).call(this);var currentConfig=resolveConfig(this.props.radiumConfig,this.props.radiumConfigContext,config);return renderRadiumComponent(this,renderedElement,currentConfig,this.props.radiumConfig);}}]);return RadiumEnhancer;}(ComposedComponent);// Lazy infer the method names of the Enhancer.
	RadiumEnhancer._isRadiumEnhanced=true;RADIUM_PROTO=RadiumEnhancer.prototype;RADIUM_METHODS=Object.getOwnPropertyNames(RADIUM_PROTO).filter(function(n){return n!=='constructor'&&typeof RADIUM_PROTO[n]==='function';});// Class inheritance uses Object.create and because of __proto__ issues
	// with IE <10 any static properties of the superclass aren't inherited and
	// so need to be manually populated.
	// See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-
	copyProperties(origComponent,RadiumEnhancer);if(process.env.NODE_ENV!=='production'){// This also fixes React Hot Loader by exposing the original components top
	// level prototype methods on the Radium enhanced prototype as discussed in
	// https://github.com/FormidableLabs/radium/issues/219.
	copyProperties(ComposedComponent.prototype,RadiumEnhancer.prototype);}// add Radium propTypes to enhanced component's propTypes
	if(RadiumEnhancer.propTypes&&RadiumEnhancer.propTypes.style){RadiumEnhancer.propTypes=_objectSpread({},RadiumEnhancer.propTypes,{style:_propTypes["default"].oneOfType([_propTypes["default"].array,_propTypes["default"].object])});}// copy display name to enhanced component
	RadiumEnhancer.displayName=origComponent.displayName||origComponent.name||'Component';return(0,_context.withRadiumContexts)(RadiumEnhancer);}function createComposedFromNativeClass(ComposedComponent){ComposedComponent=function(OrigComponent){function NewComponent(){// Use Reflect.construct to simulate 'new'
	var obj=Reflect.construct(OrigComponent,arguments,this.constructor);return obj;}// $FlowFixMe
	Reflect.setPrototypeOf(NewComponent.prototype,OrigComponent.prototype);// $FlowFixMe
	Reflect.setPrototypeOf(NewComponent,OrigComponent);return NewComponent;}(ComposedComponent);return ComposedComponent;}var ReactForwardRefSymbol=(0,_react.forwardRef)(function(){return null;}).$$typeof;function enhanceWithRadium(configOrComposedComponent){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(ReactForwardRefSymbol&&configOrComposedComponent.$$typeof===ReactForwardRefSymbol){return createEnhancedFunctionComponent(configOrComposedComponent.render,config);}if(typeof configOrComposedComponent!=='function'){return createFactoryFromConfig(config,configOrComposedComponent);}var origComponent=configOrComposedComponent;// Handle stateless components
	if(isStateless(origComponent)){return createEnhancedFunctionComponent(origComponent,config);}var _ComposedComponent2=origComponent;// Radium is transpiled in npm, so it isn't really using es6 classes at
	// runtime.  However, the user of Radium might be.  In this case we have
	// to maintain forward compatibility with native es classes.
	if(isNativeClass(_ComposedComponent2)){_ComposedComponent2=createComposedFromNativeClass(_ComposedComponent2);}// Shallow copy composed if still original (we may mutate later).
	if(_ComposedComponent2===origComponent){_ComposedComponent2=/*#__PURE__*/function(_ComposedComponent3){_inherits(ComposedComponent,_ComposedComponent3);function ComposedComponent(){_classCallCheck(this,ComposedComponent);return _possibleConstructorReturn(this,_getPrototypeOf(ComposedComponent).apply(this,arguments));}return ComposedComponent;}(_ComposedComponent2);}return createEnhancedClassComponent(origComponent,_ComposedComponent2,config);}function createFactoryFromConfig(config,configOrComposedComponent){var newConfig=_objectSpread({},config,configOrComposedComponent);return function(configOrComponent){return enhanceWithRadium(configOrComponent,newConfig);};}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _appendImportantToEachValue=_interopRequireDefault(__webpack_require__(92));var _cssRuleSetToString=_interopRequireDefault(__webpack_require__(95));var _getState=_interopRequireDefault(__webpack_require__(141));var _getStateKey=_interopRequireDefault(__webpack_require__(143));var _cleanStateKey=_interopRequireDefault(__webpack_require__(142));var _getRadiumStyleState=_interopRequireDefault(__webpack_require__(144));var _hash=_interopRequireDefault(__webpack_require__(145));var _mergeStyles=__webpack_require__(146);var _plugins=_interopRequireDefault(__webpack_require__(147));var _exenv=_interopRequireDefault(__webpack_require__(109));var _react=_interopRequireDefault(__webpack_require__(10));var _styleKeeper=_interopRequireDefault(__webpack_require__(157));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}var DEFAULT_CONFIG={plugins:[_plugins["default"].mergeStyleArray,_plugins["default"].checkProps,_plugins["default"].resolveMediaQueries,_plugins["default"].resolveInteractionStyles,_plugins["default"].keyframes,_plugins["default"].visited,_plugins["default"].removeNestedStyles,_plugins["default"].prefix,_plugins["default"].checkProps]};// Gross
	var globalState={};// Only for use by tests
	var __isTestModeEnabled=false;// Declare early for recursive helpers.
	var _resolveStyles5=null;var _shouldResolveStyles=function _shouldResolveStyles(component){return component.type&&!component.type._isRadiumEnhanced;};var _resolveChildren=function _resolveChildren(_ref){var children=_ref.children,component=_ref.component,config=_ref.config,existingKeyMap=_ref.existingKeyMap,extraStateKeyMap=_ref.extraStateKeyMap;if(!children){return children;}var childrenType=_typeof(children);if(childrenType==='string'||childrenType==='number'){// Don't do anything with a single primitive child
	return children;}if(childrenType==='function'){// Wrap the function, resolving styles on the result
	return function(){var result=children.apply(this,arguments);if(_react["default"].isValidElement(result)){var _key=(0,_getStateKey["default"])(result);delete extraStateKeyMap[_key];var _resolveStyles=_resolveStyles5(component,result,config,existingKeyMap,true,extraStateKeyMap),element=_resolveStyles.element;return element;}return result;};}if(_react["default"].Children.count(children)===1&&children.type){// If a React Element is an only child, don't wrap it in an array for
	// React.Children.map() for React.Children.only() compatibility.
	var onlyChild=_react["default"].Children.only(children);var _key2=(0,_getStateKey["default"])(onlyChild);delete extraStateKeyMap[_key2];var _resolveStyles2=_resolveStyles5(component,onlyChild,config,existingKeyMap,true,extraStateKeyMap),element=_resolveStyles2.element;return element;}return _react["default"].Children.map(children,function(child){if(_react["default"].isValidElement(child)){var _key3=(0,_getStateKey["default"])(child);delete extraStateKeyMap[_key3];var _resolveStyles3=_resolveStyles5(component,child,config,existingKeyMap,true,extraStateKeyMap),_element=_resolveStyles3.element;return _element;}return child;});};// Recurse over props, just like children
	var _resolveProps=function _resolveProps(_ref2){var component=_ref2.component,config=_ref2.config,existingKeyMap=_ref2.existingKeyMap,props=_ref2.props,extraStateKeyMap=_ref2.extraStateKeyMap;var newProps=props;Object.keys(props).forEach(function(prop){// We already recurse over children above
	if(prop==='children'){return;}var propValue=props[prop];if(_react["default"].isValidElement(propValue)){var _key4=(0,_getStateKey["default"])(propValue);delete extraStateKeyMap[_key4];newProps=_objectSpread({},newProps);var _resolveStyles4=_resolveStyles5(component,propValue,config,existingKeyMap,true,extraStateKeyMap),element=_resolveStyles4.element;newProps[prop]=element;}});return newProps;};var _buildGetKey=function _buildGetKey(_ref3){var componentName=_ref3.componentName,existingKeyMap=_ref3.existingKeyMap,renderedElement=_ref3.renderedElement;// We need a unique key to correlate state changes due to user interaction
	// with the rendered element, so we know to apply the proper interactive
	// styles.
	var originalKey=(0,_getStateKey["default"])(renderedElement);var key=(0,_cleanStateKey["default"])(originalKey);var alreadyGotKey=false;var getKey=function getKey(){if(alreadyGotKey){return key;}alreadyGotKey=true;if(existingKeyMap[key]){var elementName;if(typeof renderedElement.type==='string'){elementName=renderedElement.type;}else if(renderedElement.type.constructor){elementName=renderedElement.type.constructor.displayName||renderedElement.type.constructor.name;}throw new Error('Radium requires each element with interactive styles to have a unique '+'key, set using either the ref or key prop. '+(originalKey?'Key "'+originalKey+'" is a duplicate.':'Multiple elements have no key specified.')+' '+'Component: "'+componentName+'". '+(elementName?'Element: "'+elementName+'".':''));}existingKeyMap[key]=true;return key;};return getKey;};var _setStyleState=function _setStyleState(component,key,stateKey,value){if(!component._radiumIsMounted){return;}var existing=(0,_getRadiumStyleState["default"])(component);var state={_radiumStyleState:_objectSpread({},existing)};state._radiumStyleState[key]=_objectSpread({},state._radiumStyleState[key]);state._radiumStyleState[key][stateKey]=value;component._lastRadiumState=state._radiumStyleState;component.setState(state);};var _runPlugins=function _runPlugins(_ref4){var component=_ref4.component,config=_ref4.config,existingKeyMap=_ref4.existingKeyMap,props=_ref4.props,renderedElement=_ref4.renderedElement;// Don't run plugins if renderedElement is not a simple ReactDOMElement or has
	// no style.
	if(!_react["default"].isValidElement(renderedElement)||typeof renderedElement.type!=='string'||!props.style){return props;}var newProps=props;var plugins=config.plugins||DEFAULT_CONFIG.plugins;var componentName=component.constructor.displayName||component.constructor.name;var getKey=_buildGetKey({renderedElement:renderedElement,existingKeyMap:existingKeyMap,componentName:componentName});var getComponentField=function getComponentField(key){return component[key];};var getGlobalState=function getGlobalState(key){return globalState[key];};var componentGetState=function componentGetState(stateKey,elementKey){return(0,_getState["default"])(component.state,elementKey||getKey(),stateKey);};var setState=function setState(stateKey,value,elementKey){return _setStyleState(component,elementKey||getKey(),stateKey,value);};var addCSS=function addCSS(css){var styleKeeper=component._radiumStyleKeeper;if(!styleKeeper){if(__isTestModeEnabled){return{remove:function remove(){}};}throw new Error('To use plugins requiring `addCSS` (e.g. keyframes, media queries), '+'please wrap your application in the StyleRoot component. Component '+'name: `'+componentName+'`.');}return styleKeeper.addCSS(css);};var newStyle=props.style;plugins.forEach(function(plugin){var result=plugin({ExecutionEnvironment:_exenv["default"],addCSS:addCSS,appendImportantToEachValue:_appendImportantToEachValue["default"],componentName:componentName,config:config,cssRuleSetToString:_cssRuleSetToString["default"],getComponentField:getComponentField,getGlobalState:getGlobalState,getState:componentGetState,hash:_hash["default"],mergeStyles:_mergeStyles.mergeStyles,props:newProps,setState:setState,isNestedStyle:_mergeStyles.isNestedStyle,style:newStyle})||{};newStyle=result.style||newStyle;newProps=result.props&&Object.keys(result.props).length?_objectSpread({},newProps,result.props):newProps;var newComponentFields=result.componentFields||{};Object.keys(newComponentFields).forEach(function(fieldName){component[fieldName]=newComponentFields[fieldName];});var newGlobalState=result.globalState||{};Object.keys(newGlobalState).forEach(function(key){globalState[key]=newGlobalState[key];});});if(newStyle!==props.style){newProps=_objectSpread({},newProps,{style:newStyle});}return newProps;};// Wrapper around React.cloneElement. To avoid processing the same element
	// twice, whenever we clone an element add a special prop to make sure we don't
	// process this element again.
	var _cloneElement=function _cloneElement(renderedElement,newProps,newChildren){// Only add flag if this is a normal DOM element
	if(typeof renderedElement.type==='string'){newProps=_objectSpread({},newProps,{'data-radium':true});}return _react["default"].cloneElement(renderedElement,newProps,newChildren);};//
	// The nucleus of Radium. resolveStyles is called on the rendered elements
	// before they are returned in render. It iterates over the elements and
	// children, rewriting props to add event handlers required to capture user
	// interactions (e.g. mouse over). It also replaces the style prop because it
	// adds in the various interaction styles (e.g. :hover).
	//
	/* eslint-disable max-params */_resolveStyles5=function resolveStyles(component,renderedElement){var config=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_CONFIG;var existingKeyMap=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var shouldCheckBeforeResolve=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var extraStateKeyMap=arguments.length>5?arguments[5]:undefined;// The extraStateKeyMap is for determining which keys should be erased from
	// the state (i.e. which child components are unmounted and should no longer
	// have a style state).
	if(!extraStateKeyMap){var state=(0,_getRadiumStyleState["default"])(component);extraStateKeyMap=Object.keys(state).reduce(function(acc,key){// 'main' is the auto-generated key when there is only one element with
	// interactive styles and if a custom key is not assigned. Because of
	// this, it is impossible to know which child is 'main', so we won't
	// count this key when generating our extraStateKeyMap.
	if(key!=='main'){acc[key]=true;}return acc;},{});}if(Array.isArray(renderedElement)&&!renderedElement.props){var elements=renderedElement.map(function(element){// element is in-use, so remove from the extraStateKeyMap
	if(extraStateKeyMap){var _key5=(0,_getStateKey["default"])(element);delete extraStateKeyMap[_key5];}// this element is an array of elements,
	// so return an array of elements with resolved styles
	return _resolveStyles5(component,element,config,existingKeyMap,shouldCheckBeforeResolve,extraStateKeyMap).element;});return{extraStateKeyMap:extraStateKeyMap,element:elements};}// ReactElement
	if(!renderedElement||// Bail if we've already processed this element. This ensures that only the
	// owner of an element processes that element, since the owner's render
	// function will be called first (which will always be the case, since you
	// can't know what else to render until you render the parent component).
	renderedElement.props&&renderedElement.props['data-radium']||// Bail if this element is a radium enhanced element, because if it is,
	// then it will take care of resolving its own styles.
	shouldCheckBeforeResolve&&!_shouldResolveStyles(renderedElement)){return{extraStateKeyMap:extraStateKeyMap,element:renderedElement};}var children=renderedElement.props.children;var newChildren=_resolveChildren({children:children,component:component,config:config,existingKeyMap:existingKeyMap,extraStateKeyMap:extraStateKeyMap});var newProps=_resolveProps({component:component,config:config,existingKeyMap:existingKeyMap,extraStateKeyMap:extraStateKeyMap,props:renderedElement.props});newProps=_runPlugins({component:component,config:config,existingKeyMap:existingKeyMap,props:newProps,renderedElement:renderedElement});// If nothing changed, don't bother cloning the element. Might be a bit
	// wasteful, as we add the sentinel to stop double-processing when we clone.
	// Assume benign double-processing is better than unneeded cloning.
	if(newChildren===children&&newProps===renderedElement.props){return{extraStateKeyMap:extraStateKeyMap,element:renderedElement};}var element=_cloneElement(renderedElement,newProps!==renderedElement.props?newProps:{},newChildren);return{extraStateKeyMap:extraStateKeyMap,element:element};};/* eslint-enable max-params */// Only for use by tests
	if(process.env.NODE_ENV!=='production'){_resolveStyles5.__clearStateForTests=function(){globalState={};};_resolveStyles5.__setTestMode=function(isEnabled){__isTestModeEnabled=isEnabled;};}var _default=_resolveStyles5;exports["default"]=_default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=appendImportantToEachValue;var _appendPxIfNeeded=_interopRequireDefault(__webpack_require__(93));var _mapObject=_interopRequireDefault(__webpack_require__(94));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function appendImportantToEachValue(style){return(0,_mapObject["default"])(style,function(result,key){return(0,_appendPxIfNeeded["default"])(key,style[key])+' !important';});}

/***/ }),
/* 93 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=appendPxIfNeeded;// Copied from https://github.com/facebook/react/blob/
	// b87aabdfe1b7461e7331abb3601d9e6bb27544bc/
	// packages/react-dom/src/shared/CSSProperty.js
	var isUnitlessNumber={animationIterationCount:true,borderImageOutset:true,borderImageSlice:true,borderImageWidth:true,boxFlex:true,boxFlexGroup:true,boxOrdinalGroup:true,columnCount:true,columns:true,flex:true,flexGrow:true,flexPositive:true,flexShrink:true,flexNegative:true,flexOrder:true,gridArea:true,gridRow:true,gridRowEnd:true,gridRowSpan:true,gridRowStart:true,gridColumn:true,gridColumnEnd:true,gridColumnSpan:true,gridColumnStart:true,fontWeight:true,lineClamp:true,lineHeight:true,opacity:true,order:true,orphans:true,tabSize:true,widows:true,zIndex:true,zoom:true,// SVG-related properties
	fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeDasharray:true,strokeDashoffset:true,strokeMiterlimit:true,strokeOpacity:true,strokeWidth:true};function appendPxIfNeeded(propertyName,value){var needsPxSuffix=!isUnitlessNumber[propertyName]&&typeof value==='number'&&value!==0;return needsPxSuffix?value+'px':value;}

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=mapObject;function mapObject(object,mapper){return Object.keys(object).reduce(function(result,key){result[key]=mapper(object[key],key);return result;},{});}

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=cssRuleSetToString;var _appendPxIfNeeded=_interopRequireDefault(__webpack_require__(93));var _camelCasePropsToDashCase=_interopRequireDefault(__webpack_require__(96));var _mapObject=_interopRequireDefault(__webpack_require__(94));var _prefixer=__webpack_require__(97);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function createMarkupForStyles(style){return Object.keys(style).map(function(property){return property+': '+style[property]+';';}).join('\n');}function cssRuleSetToString(selector,rules,userAgent){if(!rules){return'';}var rulesWithPx=(0,_mapObject["default"])(rules,function(value,key){return(0,_appendPxIfNeeded["default"])(key,value);});var prefixedRules=(0,_prefixer.getPrefixedStyle)(rulesWithPx,userAgent);var cssPrefixedRules=(0,_camelCasePropsToDashCase["default"])(prefixedRules);var serializedRules=createMarkupForStyles(cssPrefixedRules);return selector+'{'+serializedRules+'}';}

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.camelCaseToDashCase=void 0;var _camelCaseRegex=/([a-z])?([A-Z])/g;var _camelCaseReplacer=function _camelCaseReplacer(match,p1,p2){return(p1||'')+'-'+p2.toLowerCase();};var camelCaseToDashCase=function camelCaseToDashCase(s){return s.replace(_camelCaseRegex,_camelCaseReplacer);};exports.camelCaseToDashCase=camelCaseToDashCase;var camelCasePropsToDashCase=function camelCasePropsToDashCase(prefixedStyle){// Since prefix is expected to work on inline style objects, we must
	// translate the keys to dash case for rendering to CSS.
	return Object.keys(prefixedStyle).reduce(function(result,key){var dashCaseKey=camelCaseToDashCase(key);// Fix IE vendor prefix
	if(/^ms-/.test(dashCaseKey)){dashCaseKey="-".concat(dashCaseKey);}result[dashCaseKey]=prefixedStyle[key];return result;},{});};var _default=camelCasePropsToDashCase;exports["default"]=_default;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports.getPrefixedKeyframes=getPrefixedKeyframes;exports.getPrefixedStyle=getPrefixedStyle;var _createPrefixer=_interopRequireDefault(__webpack_require__(98));var _createPrefixer2=_interopRequireDefault(__webpack_require__(104));var _exenv=_interopRequireDefault(__webpack_require__(109));var _static=_interopRequireDefault(__webpack_require__(111));var _dynamic=_interopRequireDefault(__webpack_require__(127));var _camelCasePropsToDashCase=__webpack_require__(96);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}var prefixAll=(0,_createPrefixer["default"])(_static["default"]);var InlineStylePrefixer=(0,_createPrefixer2["default"])(_dynamic["default"],prefixAll);function transformValues(style){return Object.keys(style).reduce(function(newStyle,key){var value=style[key];if(Array.isArray(value)){value=value.join(';'+key+':');}else if(value&&_typeof(value)==='object'&&typeof value.toString==='function'){value=value.toString();}newStyle[key]=value;return newStyle;},{});}// Flatten prefixed values that are arrays to strings.
	//
	// We get prefixed styles back in the form of:
	// - `display: "flex"` OR
	// - `display: "-webkit-flex"` OR
	// - `display: [/* ... */, "-webkit-flex", "flex"]
	//
	// The last form is problematic for eventual use in the browser and server
	// render. More confusingly, we have to do **different** things on the
	// browser and server (noted inline below).
	//
	// https://github.com/FormidableLabs/radium/issues/958
	function flattenStyleValues(style){return Object.keys(style).reduce(function(newStyle,key){var val=style[key];if(Array.isArray(val)){if(_exenv["default"].canUseDOM){// For the **browser**, when faced with multiple values, we just take
	// the **last** one, which is the original passed in value before
	// prefixing. This _should_ work, because `inline-style-prefixer`
	// we're just passing through what would happen without ISP.
	val=val[val.length-1].toString();}else{// For the **server**, we just concatenate things together and convert
	// the style object values into a hacked-up string of like `display:
	// "-webkit-flex;display:flex"` that will SSR render correctly to like
	// `"display:-webkit-flex;display:flex"` but would otherwise be
	// totally invalid values.
	// We convert keys to dash-case only for the serialize values and
	// leave the real key camel-cased so it's as expected to React and
	// other parts of the processing chain.
	val=val.join(";".concat((0,_camelCasePropsToDashCase.camelCaseToDashCase)(key),":"));}}newStyle[key]=val;return newStyle;},{});}var _hasWarnedAboutUserAgent=false;var _lastUserAgent;var _cachedPrefixer;function getPrefixer(userAgent){var actualUserAgent=userAgent||global&&global.navigator&&global.navigator.userAgent;if(process.env.NODE_ENV!=='production'){if(!actualUserAgent&&!_hasWarnedAboutUserAgent){/* eslint-disable no-console */console.warn('Radium: userAgent should be supplied for server-side rendering. See '+'https://github.com/FormidableLabs/radium/tree/master/docs/api#radium '+'for more information.');/* eslint-enable no-console */_hasWarnedAboutUserAgent=true;}}if(process.env.NODE_ENV==='test'||!_cachedPrefixer||actualUserAgent!==_lastUserAgent){if(actualUserAgent==='all'){_cachedPrefixer={prefix:prefixAll,prefixedKeyframes:'keyframes'};}else{_cachedPrefixer=new InlineStylePrefixer({userAgent:actualUserAgent});}_lastUserAgent=actualUserAgent;}return _cachedPrefixer;}function getPrefixedKeyframes(userAgent){return getPrefixer(userAgent).prefixedKeyframes||'keyframes';}// Returns a new style object with vendor prefixes added to property names and
	// values.
	function getPrefixedStyle(style,userAgent){var styleWithFallbacks=transformValues(style);var prefixer=getPrefixer(userAgent);var prefixedStyle=prefixer.prefix(styleWithFallbacks);var flattenedStyle=flattenStyleValues(prefixedStyle);return flattenedStyle;}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(6)))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=createPrefixer;var _prefixProperty=__webpack_require__(99);var _prefixProperty2=_interopRequireDefault(_prefixProperty);var _prefixValue=__webpack_require__(101);var _prefixValue2=_interopRequireDefault(_prefixValue);var _addNewValuesOnly=__webpack_require__(102);var _addNewValuesOnly2=_interopRequireDefault(_addNewValuesOnly);var _isObject=__webpack_require__(103);var _isObject2=_interopRequireDefault(_isObject);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function createPrefixer(_ref){var prefixMap=_ref.prefixMap,plugins=_ref.plugins;function prefixAll(style){for(var property in style){var value=style[property];// handle nested objects
	if((0,_isObject2.default)(value)){style[property]=prefixAll(value);// handle array values
	}else if(Array.isArray(value)){var combinedValue=[];for(var i=0,len=value.length;i<len;++i){var processedValue=(0,_prefixValue2.default)(plugins,property,value[i],style,prefixMap);(0,_addNewValuesOnly2.default)(combinedValue,processedValue||value[i]);}// only modify the value if it was touched
	// by any plugin to prevent unnecessary mutations
	if(combinedValue.length>0){style[property]=combinedValue;}}else{var _processedValue=(0,_prefixValue2.default)(plugins,property,value,style,prefixMap);// only modify the value if it was touched
	// by any plugin to prevent unnecessary mutations
	if(_processedValue){style[property]=_processedValue;}style=(0,_prefixProperty2.default)(prefixMap,property,style);}}return style;}return prefixAll;}module.exports=exports['default'];

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=prefixProperty;var _capitalizeString=__webpack_require__(100);var _capitalizeString2=_interopRequireDefault(_capitalizeString);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function prefixProperty(prefixProperties,property,style){if(prefixProperties.hasOwnProperty(property)){var newStyle={};var requiredPrefixes=prefixProperties[property];var capitalizedProperty=(0,_capitalizeString2.default)(property);var keys=Object.keys(style);for(var i=0;i<keys.length;i++){var styleProperty=keys[i];if(styleProperty===property){for(var j=0;j<requiredPrefixes.length;j++){newStyle[requiredPrefixes[j]+capitalizedProperty]=style[property];}}newStyle[styleProperty]=style[styleProperty];}return newStyle;}return style;}module.exports=exports['default'];

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=capitalizeString;function capitalizeString(str){return str.charAt(0).toUpperCase()+str.slice(1);}module.exports=exports["default"];

/***/ }),
/* 101 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=prefixValue;function prefixValue(plugins,property,value,style,metaData){for(var i=0,len=plugins.length;i<len;++i){var processedValue=plugins[i](property,value,style,metaData);// we can stop processing if a value is returned
	// as all plugin criteria are unique
	if(processedValue){return processedValue;}}}module.exports=exports["default"];

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=addNewValuesOnly;function addIfNew(list,value){if(list.indexOf(value)===-1){list.push(value);}}function addNewValuesOnly(list,values){if(Array.isArray(values)){for(var i=0,len=values.length;i<len;++i){addIfNew(list,values[i]);}}else{addIfNew(list,values);}}module.exports=exports["default"];

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=isObject;function isObject(value){return value instanceof Object&&!Array.isArray(value);}module.exports=exports["default"];

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();exports.default=createPrefixer;var _getBrowserInformation=__webpack_require__(105);var _getBrowserInformation2=_interopRequireDefault(_getBrowserInformation);var _getPrefixedKeyframes=__webpack_require__(108);var _getPrefixedKeyframes2=_interopRequireDefault(_getPrefixedKeyframes);var _capitalizeString=__webpack_require__(100);var _capitalizeString2=_interopRequireDefault(_capitalizeString);var _addNewValuesOnly=__webpack_require__(102);var _addNewValuesOnly2=_interopRequireDefault(_addNewValuesOnly);var _isObject=__webpack_require__(103);var _isObject2=_interopRequireDefault(_isObject);var _prefixValue=__webpack_require__(101);var _prefixValue2=_interopRequireDefault(_prefixValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function createPrefixer(_ref){var prefixMap=_ref.prefixMap,plugins=_ref.plugins;var fallback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(style){return style;};return function(){/**
	     * Instantiante a new prefixer
	     * @param {string} userAgent - userAgent to gather prefix information according to caniuse.com
	     * @param {string} keepUnprefixed - keeps unprefixed properties and values
	     */function Prefixer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Prefixer);var defaultUserAgent=typeof navigator!=='undefined'?navigator.userAgent:undefined;this._userAgent=options.userAgent||defaultUserAgent;this._keepUnprefixed=options.keepUnprefixed||false;if(this._userAgent){this._browserInfo=(0,_getBrowserInformation2.default)(this._userAgent);}// Checks if the userAgent was resolved correctly
	if(this._browserInfo&&this._browserInfo.cssPrefix){this.prefixedKeyframes=(0,_getPrefixedKeyframes2.default)(this._browserInfo.browserName,this._browserInfo.browserVersion,this._browserInfo.cssPrefix);}else{this._useFallback=true;return false;}var prefixData=this._browserInfo.browserName&&prefixMap[this._browserInfo.browserName];if(prefixData){this._requiresPrefix={};for(var property in prefixData){if(prefixData[property]>=this._browserInfo.browserVersion){this._requiresPrefix[property]=true;}}this._hasPropsRequiringPrefix=Object.keys(this._requiresPrefix).length>0;}else{this._useFallback=true;}this._metaData={browserVersion:this._browserInfo.browserVersion,browserName:this._browserInfo.browserName,cssPrefix:this._browserInfo.cssPrefix,jsPrefix:this._browserInfo.jsPrefix,keepUnprefixed:this._keepUnprefixed,requiresPrefix:this._requiresPrefix};}_createClass(Prefixer,[{key:'prefix',value:function prefix(style){// use static prefixer as fallback if userAgent can not be resolved
	if(this._useFallback){return fallback(style);}// only add prefixes if needed
	if(!this._hasPropsRequiringPrefix){return style;}return this._prefixStyle(style);}},{key:'_prefixStyle',value:function _prefixStyle(style){for(var property in style){var value=style[property];// handle nested objects
	if((0,_isObject2.default)(value)){style[property]=this.prefix(value);// handle array values
	}else if(Array.isArray(value)){var combinedValue=[];for(var i=0,len=value.length;i<len;++i){var processedValue=(0,_prefixValue2.default)(plugins,property,value[i],style,this._metaData);(0,_addNewValuesOnly2.default)(combinedValue,processedValue||value[i]);}// only modify the value if it was touched
	// by any plugin to prevent unnecessary mutations
	if(combinedValue.length>0){style[property]=combinedValue;}}else{var _processedValue=(0,_prefixValue2.default)(plugins,property,value,style,this._metaData);// only modify the value if it was touched
	// by any plugin to prevent unnecessary mutations
	if(_processedValue){style[property]=_processedValue;}// add prefixes to properties
	if(this._requiresPrefix.hasOwnProperty(property)){style[this._browserInfo.jsPrefix+(0,_capitalizeString2.default)(property)]=value;if(!this._keepUnprefixed){delete style[property];}}}}return style;}/**
	       * Returns a prefixed version of the style object using all vendor prefixes
	       * @param {Object} styles - Style object that gets prefixed properties added
	       * @returns {Object} - Style object with prefixed properties and values
	       */}],[{key:'prefixAll',value:function prefixAll(styles){return fallback(styles);}}]);return Prefixer;}();}module.exports=exports['default'];

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=getBrowserInformation;var _bowser=__webpack_require__(106);var _bowser2=_interopRequireDefault(_bowser);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var prefixByBrowser={chrome:'Webkit',safari:'Webkit',ios:'Webkit',android:'Webkit',phantom:'Webkit',opera:'Webkit',webos:'Webkit',blackberry:'Webkit',bada:'Webkit',tizen:'Webkit',chromium:'Webkit',vivaldi:'Webkit',firefox:'Moz',seamoney:'Moz',sailfish:'Moz',msie:'ms',msedge:'ms'};var browserByCanIuseAlias={chrome:'chrome',chromium:'chrome',safari:'safari',firfox:'firefox',msedge:'edge',opera:'opera',vivaldi:'opera',msie:'ie'};function getBrowserName(browserInfo){if(browserInfo.firefox){return'firefox';}if(browserInfo.mobile||browserInfo.tablet){if(browserInfo.ios){return'ios_saf';}else if(browserInfo.android){return'android';}else if(browserInfo.opera){return'op_mini';}}for(var browser in browserByCanIuseAlias){if(browserInfo.hasOwnProperty(browser)){return browserByCanIuseAlias[browser];}}}/**
	 * Uses bowser to get default browser browserInformation such as version and name
	 * Evaluates bowser browserInfo and adds vendorPrefix browserInformation
	 * @param {string} userAgent - userAgent that gets evaluated
	 */function getBrowserInformation(userAgent){var browserInfo=_bowser2.default._detect(userAgent);if(browserInfo.yandexbrowser){browserInfo=_bowser2.default._detect(userAgent.replace(/YaBrowser\/[0-9.]*/,''));}for(var browser in prefixByBrowser){if(browserInfo.hasOwnProperty(browser)){var prefix=prefixByBrowser[browser];browserInfo.jsPrefix=prefix;browserInfo.cssPrefix='-'+prefix.toLowerCase()+'-';break;}}browserInfo.browserName=getBrowserName(browserInfo);// For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
	if(browserInfo.version){browserInfo.browserVersion=parseFloat(browserInfo.version);}else{browserInfo.browserVersion=parseInt(parseFloat(browserInfo.osversion),10);}browserInfo.osVersion=parseFloat(browserInfo.osversion);// iOS forces all browsers to use Safari under the hood
	// as the Safari version seems to match the iOS version
	// we just explicitely use the osversion instead
	// https://github.com/rofrischmann/inline-style-prefixer/issues/72
	if(browserInfo.browserName==='ios_saf'&&browserInfo.browserVersion>browserInfo.osVersion){browserInfo.browserVersion=browserInfo.osVersion;}// seperate native android chrome
	// https://github.com/rofrischmann/inline-style-prefixer/issues/45
	if(browserInfo.browserName==='android'&&browserInfo.chrome&&browserInfo.browserVersion>37){browserInfo.browserName='and_chr';}// For android < 4.4 we want to check the osversion
	// not the chrome version, see issue #26
	// https://github.com/rofrischmann/inline-style-prefixer/issues/26
	if(browserInfo.browserName==='android'&&browserInfo.osVersion<5){browserInfo.browserVersion=browserInfo.osVersion;}// Samsung browser are basically build on Chrome > 44
	// https://github.com/rofrischmann/inline-style-prefixer/issues/102
	if(browserInfo.browserName==='android'&&browserInfo.samsungBrowser){browserInfo.browserName='and_chr';browserInfo.browserVersion=44;}return browserInfo;}module.exports=exports['default'];

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';/*!
	 * Bowser - a browser detector
	 * https://github.com/ded/bowser
	 * MIT License | (c) Dustin Diaz 2015
	 */!function(root,name,definition){if(typeof module!='undefined'&&module.exports)module.exports=definition();else if(true)__webpack_require__(107)(name,definition);else root[name]=definition();}(undefined,'bowser',function(){/**
	    * See useragents.js for examples of navigator.userAgent
	    */var t=true;function detect(ua){function getFirstMatch(regex){var match=ua.match(regex);return match&&match.length>1&&match[1]||'';}function getSecondMatch(regex){var match=ua.match(regex);return match&&match.length>1&&match[2]||'';}var iosdevice=getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),likeAndroid=/like android/i.test(ua),android=!likeAndroid&&/android/i.test(ua),nexusMobile=/nexus\s*[0-6]\s*/i.test(ua),nexusTablet=!nexusMobile&&/nexus\s*[0-9]+/i.test(ua),chromeos=/CrOS/.test(ua),silk=/silk/i.test(ua),sailfish=/sailfish/i.test(ua),tizen=/tizen/i.test(ua),webos=/(web|hpw)(o|0)s/i.test(ua),windowsphone=/windows phone/i.test(ua),samsungBrowser=/SamsungBrowser/i.test(ua),windows=!windowsphone&&/windows/i.test(ua),mac=!iosdevice&&!silk&&/macintosh/i.test(ua),linux=!android&&!sailfish&&!tizen&&!webos&&/linux/i.test(ua),edgeVersion=getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),versionIdentifier=getFirstMatch(/version\/(\d+(\.\d+)?)/i),tablet=/tablet/i.test(ua)&&!/tablet pc/i.test(ua),mobile=!tablet&&/[^-]mobi/i.test(ua),xbox=/xbox/i.test(ua),result;if(/opera/i.test(ua)){//  an old Opera
	result={name:'Opera',opera:t,version:versionIdentifier||getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)};}else if(/opr\/|opios/i.test(ua)){// a new Opera
	result={name:'Opera',opera:t,version:getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i)||versionIdentifier};}else if(/SamsungBrowser/i.test(ua)){result={name:'Samsung Internet for Android',samsungBrowser:t,version:versionIdentifier||getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)};}else if(/Whale/i.test(ua)){result={name:'NAVER Whale browser',whale:t,version:getFirstMatch(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/MZBrowser/i.test(ua)){result={name:'MZ Browser',mzbrowser:t,version:getFirstMatch(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/coast/i.test(ua)){result={name:'Opera Coast',coast:t,version:versionIdentifier||getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)};}else if(/focus/i.test(ua)){result={name:'Focus',focus:t,version:getFirstMatch(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/yabrowser/i.test(ua)){result={name:'Yandex Browser',yandexbrowser:t,version:versionIdentifier||getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)};}else if(/ucbrowser/i.test(ua)){result={name:'UC Browser',ucbrowser:t,version:getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/mxios/i.test(ua)){result={name:'Maxthon',maxthon:t,version:getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/epiphany/i.test(ua)){result={name:'Epiphany',epiphany:t,version:getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/puffin/i.test(ua)){result={name:'Puffin',puffin:t,version:getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)};}else if(/sleipnir/i.test(ua)){result={name:'Sleipnir',sleipnir:t,version:getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)};}else if(/k-meleon/i.test(ua)){result={name:'K-Meleon',kMeleon:t,version:getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)};}else if(windowsphone){result={name:'Windows Phone',osname:'Windows Phone',windowsphone:t};if(edgeVersion){result.msedge=t;result.version=edgeVersion;}else{result.msie=t;result.version=getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);}}else if(/msie|trident/i.test(ua)){result={name:'Internet Explorer',msie:t,version:getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)};}else if(chromeos){result={name:'Chrome',osname:'Chrome OS',chromeos:t,chromeBook:t,chrome:t,version:getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)};}else if(/edg([ea]|ios)/i.test(ua)){result={name:'Microsoft Edge',msedge:t,version:edgeVersion};}else if(/vivaldi/i.test(ua)){result={name:'Vivaldi',vivaldi:t,version:getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i)||versionIdentifier};}else if(sailfish){result={name:'Sailfish',osname:'Sailfish OS',sailfish:t,version:getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)};}else if(/seamonkey\//i.test(ua)){result={name:'SeaMonkey',seamonkey:t,version:getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)};}else if(/firefox|iceweasel|fxios/i.test(ua)){result={name:'Firefox',firefox:t,version:getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)};if(/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)){result.firefoxos=t;result.osname='Firefox OS';}}else if(silk){result={name:'Amazon Silk',silk:t,version:getFirstMatch(/silk\/(\d+(\.\d+)?)/i)};}else if(/phantom/i.test(ua)){result={name:'PhantomJS',phantom:t,version:getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)};}else if(/slimerjs/i.test(ua)){result={name:'SlimerJS',slimer:t,version:getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)};}else if(/blackberry|\bbb\d+/i.test(ua)||/rim\stablet/i.test(ua)){result={name:'BlackBerry',osname:'BlackBerry OS',blackberry:t,version:versionIdentifier||getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)};}else if(webos){result={name:'WebOS',osname:'WebOS',webos:t,version:versionIdentifier||getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)};/touchpad\//i.test(ua)&&(result.touchpad=t);}else if(/bada/i.test(ua)){result={name:'Bada',osname:'Bada',bada:t,version:getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)};}else if(tizen){result={name:'Tizen',osname:'Tizen',tizen:t,version:getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i)||versionIdentifier};}else if(/qupzilla/i.test(ua)){result={name:'QupZilla',qupzilla:t,version:getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i)||versionIdentifier};}else if(/chromium/i.test(ua)){result={name:'Chromium',chromium:t,version:getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i)||versionIdentifier};}else if(/chrome|crios|crmo/i.test(ua)){result={name:'Chrome',chrome:t,version:getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)};}else if(android){result={name:'Android',version:versionIdentifier};}else if(/safari|applewebkit/i.test(ua)){result={name:'Safari',safari:t};if(versionIdentifier){result.version=versionIdentifier;}}else if(iosdevice){result={name:iosdevice=='iphone'?'iPhone':iosdevice=='ipad'?'iPad':'iPod'// WTF: version is not part of user agent in web apps
	};if(versionIdentifier){result.version=versionIdentifier;}}else if(/googlebot/i.test(ua)){result={name:'Googlebot',googlebot:t,version:getFirstMatch(/googlebot\/(\d+(\.\d+))/i)||versionIdentifier};}else{result={name:getFirstMatch(/^(.*)\/(.*) /),version:getSecondMatch(/^(.*)\/(.*) /)};}// set webkit or gecko flag for browsers based on these engines
	if(!result.msedge&&/(apple)?webkit/i.test(ua)){if(/(apple)?webkit\/537\.36/i.test(ua)){result.name=result.name||"Blink";result.blink=t;}else{result.name=result.name||"Webkit";result.webkit=t;}if(!result.version&&versionIdentifier){result.version=versionIdentifier;}}else if(!result.opera&&/gecko\//i.test(ua)){result.name=result.name||"Gecko";result.gecko=t;result.version=result.version||getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);}// set OS flags for platforms that have multiple browsers
	if(!result.windowsphone&&(android||result.silk)){result.android=t;result.osname='Android';}else if(!result.windowsphone&&iosdevice){result[iosdevice]=t;result.ios=t;result.osname='iOS';}else if(mac){result.mac=t;result.osname='macOS';}else if(xbox){result.xbox=t;result.osname='Xbox';}else if(windows){result.windows=t;result.osname='Windows';}else if(linux){result.linux=t;result.osname='Linux';}function getWindowsVersion(s){switch(s){case'NT':return'NT';case'XP':return'XP';case'NT 5.0':return'2000';case'NT 5.1':return'XP';case'NT 5.2':return'2003';case'NT 6.0':return'Vista';case'NT 6.1':return'7';case'NT 6.2':return'8';case'NT 6.3':return'8.1';case'NT 10.0':return'10';default:return undefined;}}// OS version extraction
	var osVersion='';if(result.windows){osVersion=getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i));}else if(result.windowsphone){osVersion=getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);}else if(result.mac){osVersion=getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);osVersion=osVersion.replace(/[_\s]/g,'.');}else if(iosdevice){osVersion=getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);osVersion=osVersion.replace(/[_\s]/g,'.');}else if(android){osVersion=getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);}else if(result.webos){osVersion=getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);}else if(result.blackberry){osVersion=getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);}else if(result.bada){osVersion=getFirstMatch(/bada\/(\d+(\.\d+)*)/i);}else if(result.tizen){osVersion=getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);}if(osVersion){result.osversion=osVersion;}// device type extraction
	var osMajorVersion=!result.windows&&osVersion.split('.')[0];if(tablet||nexusTablet||iosdevice=='ipad'||android&&(osMajorVersion==3||osMajorVersion>=4&&!mobile)||result.silk){result.tablet=t;}else if(mobile||iosdevice=='iphone'||iosdevice=='ipod'||android||nexusMobile||result.blackberry||result.webos||result.bada){result.mobile=t;}// Graded Browser Support
	// http://developer.yahoo.com/yui/articles/gbs
	if(result.msedge||result.msie&&result.version>=10||result.yandexbrowser&&result.version>=15||result.vivaldi&&result.version>=1.0||result.chrome&&result.version>=20||result.samsungBrowser&&result.version>=4||result.whale&&compareVersions([result.version,'1.0'])===1||result.mzbrowser&&compareVersions([result.version,'6.0'])===1||result.focus&&compareVersions([result.version,'1.0'])===1||result.firefox&&result.version>=20.0||result.safari&&result.version>=6||result.opera&&result.version>=10.0||result.ios&&result.osversion&&result.osversion.split(".")[0]>=6||result.blackberry&&result.version>=10.1||result.chromium&&result.version>=20){result.a=t;}else if(result.msie&&result.version<10||result.chrome&&result.version<20||result.firefox&&result.version<20.0||result.safari&&result.version<6||result.opera&&result.version<10.0||result.ios&&result.osversion&&result.osversion.split(".")[0]<6||result.chromium&&result.version<20){result.c=t;}else result.x=t;return result;}var bowser=detect(typeof navigator!=='undefined'?navigator.userAgent||'':'');bowser.test=function(browserList){for(var i=0;i<browserList.length;++i){var browserItem=browserList[i];if(typeof browserItem==='string'){if(browserItem in bowser){return true;}}}return false;};/**
	   * Get version precisions count
	   *
	   * @example
	   *   getVersionPrecision("1.10.3") // 3
	   *
	   * @param  {string} version
	   * @return {number}
	   */function getVersionPrecision(version){return version.split(".").length;}/**
	   * Array::map polyfill
	   *
	   * @param  {Array} arr
	   * @param  {Function} iterator
	   * @return {Array}
	   */function map(arr,iterator){var result=[],i;if(Array.prototype.map){return Array.prototype.map.call(arr,iterator);}for(i=0;i<arr.length;i++){result.push(iterator(arr[i]));}return result;}/**
	   * Calculate browser version weight
	   *
	   * @example
	   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
	   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
	   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
	   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
	   *
	   * @param  {Array<String>} versions versions to compare
	   * @return {Number} comparison result
	   */function compareVersions(versions){// 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
	var precision=Math.max(getVersionPrecision(versions[0]),getVersionPrecision(versions[1]));var chunks=map(versions,function(version){var delta=precision-getVersionPrecision(version);// 2) "9" -> "9.0" (for precision = 2)
	version=version+new Array(delta+1).join(".0");// 3) "9.0" -> ["000000000"", "000000009"]
	return map(version.split("."),function(chunk){return new Array(20-chunk.length).join("0")+chunk;}).reverse();});// iterate in reverse order by reversed chunks array
	while(--precision>=0){// 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
	if(chunks[0][precision]>chunks[1][precision]){return 1;}else if(chunks[0][precision]===chunks[1][precision]){if(precision===0){// all version chunks are same
	return 0;}}else{return-1;}}}/**
	   * Check if browser is unsupported
	   *
	   * @example
	   *   bowser.isUnsupportedBrowser({
	   *     msie: "10",
	   *     firefox: "23",
	   *     chrome: "29",
	   *     safari: "5.1",
	   *     opera: "16",
	   *     phantom: "534"
	   *   });
	   *
	   * @param  {Object}  minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */function isUnsupportedBrowser(minVersions,strictMode,ua){var _bowser=bowser;// make strictMode param optional with ua param usage
	if(typeof strictMode==='string'){ua=strictMode;strictMode=void 0;}if(strictMode===void 0){strictMode=false;}if(ua){_bowser=detect(ua);}var version=""+_bowser.version;for(var browser in minVersions){if(minVersions.hasOwnProperty(browser)){if(_bowser[browser]){if(typeof minVersions[browser]!=='string'){throw new Error('Browser version in the minVersion map should be a string: '+browser+': '+String(minVersions));}// browser version and min supported version.
	return compareVersions([version,minVersions[browser]])<0;}}}return strictMode;// not found
	}/**
	   * Check if browser is supported
	   *
	   * @param  {Object} minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */function check(minVersions,strictMode,ua){return!isUnsupportedBrowser(minVersions,strictMode,ua);}bowser.isUnsupportedBrowser=isUnsupportedBrowser;bowser.compareVersions=compareVersions;bowser.check=check;/*
	   * Set our detect method to the main bowser object so we can
	   * reuse it to test other user agents.
	   * This is needed to implement future tests.
	   */bowser._detect=detect;/*
	   * Set our detect public method to the main bowser object
	   * This is needed to implement bowser in server side
	   */bowser.detect=detect;return bowser;});

/***/ }),
/* 107 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=getPrefixedKeyframes;function getPrefixedKeyframes(browserName,browserVersion,cssPrefix){var prefixedKeyframes='keyframes';if(browserName==='chrome'&&browserVersion<43||(browserName==='safari'||browserName==='ios_saf')&&browserVersion<9||browserName==='opera'&&browserVersion<30||browserName==='android'&&browserVersion<=4.4||browserName==='and_uc'){return cssPrefix+prefixedKeyframes;}return prefixedKeyframes;}module.exports=exports['default'];

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*//* global define */(function(){'use strict';var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);var ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:typeof Worker!=='undefined',canUseEventListeners:canUseDOM&&!!(window.addEventListener||window.attachEvent),canUseViewport:canUseDOM&&!!window.screen};if("function"==='function'&&_typeof(__webpack_require__(110))==='object'&&__webpack_require__(110)){!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return ExecutionEnvironment;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if(typeof module!=='undefined'&&module.exports){module.exports=ExecutionEnvironment;}else{window.ExecutionEnvironment=ExecutionEnvironment;}})();

/***/ }),
/* 110 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _calc=_interopRequireDefault(__webpack_require__(112));var _crossFade=_interopRequireDefault(__webpack_require__(114));var _cursor=_interopRequireDefault(__webpack_require__(115));var _filter=_interopRequireDefault(__webpack_require__(116));var _flex=_interopRequireDefault(__webpack_require__(117));var _flexboxIE=_interopRequireDefault(__webpack_require__(118));var _flexboxOld=_interopRequireDefault(__webpack_require__(119));var _gradient=_interopRequireDefault(__webpack_require__(120));var _imageSet=_interopRequireDefault(__webpack_require__(121));var _position=_interopRequireDefault(__webpack_require__(122));var _sizing=_interopRequireDefault(__webpack_require__(123));var _transition=_interopRequireDefault(__webpack_require__(124));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}var w=['Webkit'];var m=['Moz'];var ms=['ms'];var wm=['Webkit','Moz'];var wms=['Webkit','ms'];var wmms=['Webkit','Moz','ms'];var _default={plugins:[_calc["default"],_crossFade["default"],_cursor["default"],_filter["default"],_flex["default"],_flexboxIE["default"],_flexboxOld["default"],_gradient["default"],_imageSet["default"],_position["default"],_sizing["default"],_transition["default"]],prefixMap:{transform:wms,transformOrigin:wms,transformOriginX:wms,transformOriginY:wms,backfaceVisibility:w,perspective:w,perspectiveOrigin:w,transformStyle:w,transformOriginZ:w,animation:w,animationDelay:w,animationDirection:w,animationFillMode:w,animationDuration:w,animationIterationCount:w,animationName:w,animationPlayState:w,animationTimingFunction:w,appearance:wm,userSelect:wmms,fontKerning:w,textEmphasisPosition:w,textEmphasis:w,textEmphasisStyle:w,textEmphasisColor:w,boxDecorationBreak:w,clipPath:w,maskImage:w,maskMode:w,maskRepeat:w,maskPosition:w,maskClip:w,maskOrigin:w,maskSize:w,maskComposite:w,mask:w,maskBorderSource:w,maskBorderMode:w,maskBorderSlice:w,maskBorderWidth:w,maskBorderOutset:w,maskBorderRepeat:w,maskBorder:w,maskType:w,textDecorationStyle:wm,textDecorationSkip:wm,textDecorationLine:wm,textDecorationColor:wm,filter:w,fontFeatureSettings:wm,breakAfter:wmms,breakBefore:wmms,breakInside:wmms,columnCount:wm,columnFill:wm,columnGap:wm,columnRule:wm,columnRuleColor:wm,columnRuleStyle:wm,columnRuleWidth:wm,columns:wm,columnSpan:wm,columnWidth:wm,writingMode:wms,flex:wms,flexBasis:w,flexDirection:wms,flexGrow:w,flexFlow:wms,flexShrink:w,flexWrap:wms,alignContent:w,alignItems:w,alignSelf:w,justifyContent:w,order:w,transitionDelay:w,transitionDuration:w,transitionProperty:w,transitionTimingFunction:w,backdropFilter:w,scrollSnapType:wms,scrollSnapPointsX:wms,scrollSnapPointsY:wms,scrollSnapDestination:wms,scrollSnapCoordinate:wms,shapeImageThreshold:w,shapeImageMargin:w,shapeImageOutside:w,hyphens:wmms,flowInto:wms,flowFrom:wms,regionFragment:wms,boxSizing:m,textAlignLast:m,tabSize:m,wrapFlow:ms,wrapThrough:ms,wrapMargin:ms,touchAction:ms,gridTemplateColumns:ms,gridTemplateRows:ms,gridTemplateAreas:ms,gridTemplate:ms,gridAutoColumns:ms,gridAutoRows:ms,gridAutoFlow:ms,grid:ms,gridRowStart:ms,gridColumnStart:ms,gridRowEnd:ms,gridRow:ms,gridColumn:ms,gridColumnEnd:ms,gridColumnGap:ms,gridRowGap:ms,gridArea:ms,gridGap:ms,textSizeAdjust:wms,borderImage:w,borderImageOutset:w,borderImageRepeat:w,borderImageSlice:w,borderImageSource:w,borderImageWidth:w}};exports["default"]=_default;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=calc;var _isPrefixedValue=__webpack_require__(113);var _isPrefixedValue2=_interopRequireDefault(_isPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var prefixes=['-webkit-','-moz-',''];function calc(property,value){if(typeof value==='string'&&!(0,_isPrefixedValue2.default)(value)&&value.indexOf('calc(')>-1){return prefixes.map(function(prefix){return value.replace(/calc\(/g,prefix+'calc(');});}}module.exports=exports['default'];

/***/ }),
/* 113 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=isPrefixedValue;var regex=/-webkit-|-moz-|-ms-/;function isPrefixedValue(value){return typeof value==='string'&&regex.test(value);}module.exports=exports['default'];

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=crossFade;var _isPrefixedValue=__webpack_require__(113);var _isPrefixedValue2=_interopRequireDefault(_isPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// http://caniuse.com/#search=cross-fade
	var prefixes=['-webkit-',''];function crossFade(property,value){if(typeof value==='string'&&!(0,_isPrefixedValue2.default)(value)&&value.indexOf('cross-fade(')>-1){return prefixes.map(function(prefix){return value.replace(/cross-fade\(/g,prefix+'cross-fade(');});}}module.exports=exports['default'];

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=cursor;var prefixes=['-webkit-','-moz-',''];var values={'zoom-in':true,'zoom-out':true,grab:true,grabbing:true};function cursor(property,value){if(property==='cursor'&&values.hasOwnProperty(value)){return prefixes.map(function(prefix){return prefix+value;});}}module.exports=exports['default'];

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=filter;var _isPrefixedValue=__webpack_require__(113);var _isPrefixedValue2=_interopRequireDefault(_isPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// http://caniuse.com/#feat=css-filter-function
	var prefixes=['-webkit-',''];function filter(property,value){if(typeof value==='string'&&!(0,_isPrefixedValue2.default)(value)&&value.indexOf('filter(')>-1){return prefixes.map(function(prefix){return value.replace(/filter\(/g,prefix+'filter(');});}}module.exports=exports['default'];

/***/ }),
/* 117 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=flex;var values={flex:['-webkit-box','-moz-box','-ms-flexbox','-webkit-flex','flex'],'inline-flex':['-webkit-inline-box','-moz-inline-box','-ms-inline-flexbox','-webkit-inline-flex','inline-flex']};function flex(property,value){if(property==='display'&&values.hasOwnProperty(value)){return values[value];}}module.exports=exports['default'];

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=flexboxIE;var alternativeValues={'space-around':'distribute','space-between':'justify','flex-start':'start','flex-end':'end'};var alternativeProps={alignContent:'msFlexLinePack',alignSelf:'msFlexItemAlign',alignItems:'msFlexAlign',justifyContent:'msFlexPack',order:'msFlexOrder',flexGrow:'msFlexPositive',flexShrink:'msFlexNegative',flexBasis:'msFlexPreferredSize'};function flexboxIE(property,value,style){if(alternativeProps.hasOwnProperty(property)){style[alternativeProps[property]]=alternativeValues[value]||value;}}module.exports=exports['default'];

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=flexboxOld;var alternativeValues={'space-around':'justify','space-between':'justify','flex-start':'start','flex-end':'end','wrap-reverse':'multiple',wrap:'multiple',flex:'box','inline-flex':'inline-box'};var alternativeProps={alignItems:'WebkitBoxAlign',justifyContent:'WebkitBoxPack',flexWrap:'WebkitBoxLines',flexGrow:'WebkitBoxFlex'};function flexboxOld(property,value,style){if(property==='flexDirection'&&typeof value==='string'){if(value.indexOf('column')>-1){style.WebkitBoxOrient='vertical';}else{style.WebkitBoxOrient='horizontal';}if(value.indexOf('reverse')>-1){style.WebkitBoxDirection='reverse';}else{style.WebkitBoxDirection='normal';}}if(alternativeProps.hasOwnProperty(property)){style[alternativeProps[property]]=alternativeValues[value]||value;}}module.exports=exports['default'];

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=gradient;var _isPrefixedValue=__webpack_require__(113);var _isPrefixedValue2=_interopRequireDefault(_isPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var prefixes=['-webkit-','-moz-',''];var values=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi;function gradient(property,value){if(typeof value==='string'&&!(0,_isPrefixedValue2.default)(value)&&values.test(value)){return prefixes.map(function(prefix){return value.replace(values,function(grad){return prefix+grad;});});}}module.exports=exports['default'];

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=imageSet;var _isPrefixedValue=__webpack_require__(113);var _isPrefixedValue2=_interopRequireDefault(_isPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// http://caniuse.com/#feat=css-image-set
	var prefixes=['-webkit-',''];function imageSet(property,value){if(typeof value==='string'&&!(0,_isPrefixedValue2.default)(value)&&value.indexOf('image-set(')>-1){return prefixes.map(function(prefix){return value.replace(/image-set\(/g,prefix+'image-set(');});}}module.exports=exports['default'];

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=position;function position(property,value){if(property==='position'&&value==='sticky'){return['-webkit-sticky','sticky'];}}module.exports=exports['default'];

/***/ }),
/* 123 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=sizing;var prefixes=['-webkit-','-moz-',''];var properties={maxHeight:true,maxWidth:true,width:true,height:true,columnWidth:true,minWidth:true,minHeight:true};var values={'min-content':true,'max-content':true,'fill-available':true,'fit-content':true,'contain-floats':true};function sizing(property,value){if(properties.hasOwnProperty(property)&&values.hasOwnProperty(value)){return prefixes.map(function(prefix){return prefix+value;});}}module.exports=exports['default'];

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=transition;var _hyphenateProperty=__webpack_require__(125);var _hyphenateProperty2=_interopRequireDefault(_hyphenateProperty);var _isPrefixedValue=__webpack_require__(113);var _isPrefixedValue2=_interopRequireDefault(_isPrefixedValue);var _capitalizeString=__webpack_require__(100);var _capitalizeString2=_interopRequireDefault(_capitalizeString);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var properties={transition:true,transitionProperty:true,WebkitTransition:true,WebkitTransitionProperty:true,MozTransition:true,MozTransitionProperty:true};var prefixMapping={Webkit:'-webkit-',Moz:'-moz-',ms:'-ms-'};function prefixValue(value,propertyPrefixMap){if((0,_isPrefixedValue2.default)(value)){return value;}// only split multi values, not cubic beziers
	var multipleValues=value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);for(var i=0,len=multipleValues.length;i<len;++i){var singleValue=multipleValues[i];var values=[singleValue];for(var property in propertyPrefixMap){var dashCaseProperty=(0,_hyphenateProperty2.default)(property);if(singleValue.indexOf(dashCaseProperty)>-1&&dashCaseProperty!=='order'){var prefixes=propertyPrefixMap[property];for(var j=0,pLen=prefixes.length;j<pLen;++j){// join all prefixes and create a new value
	values.unshift(singleValue.replace(dashCaseProperty,prefixMapping[prefixes[j]]+dashCaseProperty));}}}multipleValues[i]=values.join(',');}return multipleValues.join(',');}function transition(property,value,style,propertyPrefixMap){// also check for already prefixed transitions
	if(typeof value==='string'&&properties.hasOwnProperty(property)){var outputValue=prefixValue(value,propertyPrefixMap);// if the property is already prefixed
	var webkitOutput=outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val){return!/-moz-|-ms-/.test(val);}).join(',');if(property.indexOf('Webkit')>-1){return webkitOutput;}var mozOutput=outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val){return!/-webkit-|-ms-/.test(val);}).join(',');if(property.indexOf('Moz')>-1){return mozOutput;}style['Webkit'+(0,_capitalizeString2.default)(property)]=webkitOutput;style['Moz'+(0,_capitalizeString2.default)(property)]=mozOutput;return outputValue;}}module.exports=exports['default'];

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=hyphenateProperty;var _hyphenateStyleName=__webpack_require__(126);var _hyphenateStyleName2=_interopRequireDefault(_hyphenateStyleName);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function hyphenateProperty(property){return(0,_hyphenateStyleName2.default)(property);}module.exports=exports['default'];

/***/ }),
/* 126 */
/***/ (function(module, exports) {

	'use strict';/* eslint-disable no-var, prefer-template */var uppercasePattern=/[A-Z]/g;var msPattern=/^ms-/;var cache={};function toHyphenLower(match){return'-'+match.toLowerCase();}function hyphenateStyleName(name){if(cache.hasOwnProperty(name)){return cache[name];}var hName=name.replace(uppercasePattern,toHyphenLower);return cache[name]=msPattern.test(hName)?'-'+hName:hName;}module.exports=hyphenateStyleName;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _calc=_interopRequireDefault(__webpack_require__(128));var _crossFade=_interopRequireDefault(__webpack_require__(130));var _cursor=_interopRequireDefault(__webpack_require__(131));var _filter=_interopRequireDefault(__webpack_require__(132));var _flex=_interopRequireDefault(__webpack_require__(133));var _flexboxIE=_interopRequireDefault(__webpack_require__(134));var _flexboxOld=_interopRequireDefault(__webpack_require__(135));var _gradient=_interopRequireDefault(__webpack_require__(136));var _imageSet=_interopRequireDefault(__webpack_require__(137));var _position=_interopRequireDefault(__webpack_require__(138));var _sizing=_interopRequireDefault(__webpack_require__(139));var _transition=_interopRequireDefault(__webpack_require__(140));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}var _default={plugins:[_calc["default"],_crossFade["default"],_cursor["default"],_filter["default"],_flex["default"],_flexboxIE["default"],_flexboxOld["default"],_gradient["default"],_imageSet["default"],_position["default"],_sizing["default"],_transition["default"]],prefixMap:{chrome:{transform:35,transformOrigin:35,transformOriginX:35,transformOriginY:35,backfaceVisibility:35,perspective:35,perspectiveOrigin:35,transformStyle:35,transformOriginZ:35,animation:42,animationDelay:42,animationDirection:42,animationFillMode:42,animationDuration:42,animationIterationCount:42,animationName:42,animationPlayState:42,animationTimingFunction:42,appearance:66,userSelect:53,fontKerning:32,textEmphasisPosition:66,textEmphasis:66,textEmphasisStyle:66,textEmphasisColor:66,boxDecorationBreak:66,clipPath:54,maskImage:66,maskMode:66,maskRepeat:66,maskPosition:66,maskClip:66,maskOrigin:66,maskSize:66,maskComposite:66,mask:66,maskBorderSource:66,maskBorderMode:66,maskBorderSlice:66,maskBorderWidth:66,maskBorderOutset:66,maskBorderRepeat:66,maskBorder:66,maskType:66,textDecorationStyle:56,textDecorationSkip:56,textDecorationLine:56,textDecorationColor:56,filter:52,fontFeatureSettings:47,breakAfter:49,breakBefore:49,breakInside:49,columnCount:49,columnFill:49,columnGap:49,columnRule:49,columnRuleColor:49,columnRuleStyle:49,columnRuleWidth:49,columns:49,columnSpan:49,columnWidth:49,writingMode:47},safari:{flex:8,flexBasis:8,flexDirection:8,flexGrow:8,flexFlow:8,flexShrink:8,flexWrap:8,alignContent:8,alignItems:8,alignSelf:8,justifyContent:8,order:8,transition:6,transitionDelay:6,transitionDuration:6,transitionProperty:6,transitionTimingFunction:6,transform:8,transformOrigin:8,transformOriginX:8,transformOriginY:8,backfaceVisibility:8,perspective:8,perspectiveOrigin:8,transformStyle:8,transformOriginZ:8,animation:8,animationDelay:8,animationDirection:8,animationFillMode:8,animationDuration:8,animationIterationCount:8,animationName:8,animationPlayState:8,animationTimingFunction:8,appearance:11,userSelect:11,backdropFilter:11,fontKerning:9,scrollSnapType:10.1,scrollSnapPointsX:10.1,scrollSnapPointsY:10.1,scrollSnapDestination:10.1,scrollSnapCoordinate:10.1,textEmphasisPosition:7,textEmphasis:7,textEmphasisStyle:7,textEmphasisColor:7,boxDecorationBreak:11,clipPath:11,maskImage:11,maskMode:11,maskRepeat:11,maskPosition:11,maskClip:11,maskOrigin:11,maskSize:11,maskComposite:11,mask:11,maskBorderSource:11,maskBorderMode:11,maskBorderSlice:11,maskBorderWidth:11,maskBorderOutset:11,maskBorderRepeat:11,maskBorder:11,maskType:11,textDecorationStyle:11,textDecorationSkip:11,textDecorationLine:11,textDecorationColor:11,shapeImageThreshold:10,shapeImageMargin:10,shapeImageOutside:10,filter:9,hyphens:11,flowInto:11,flowFrom:11,breakBefore:8,breakAfter:8,breakInside:8,regionFragment:11,columnCount:8,columnFill:8,columnGap:8,columnRule:8,columnRuleColor:8,columnRuleStyle:8,columnRuleWidth:8,columns:8,columnSpan:8,columnWidth:8,writingMode:10.1},firefox:{appearance:60,userSelect:60,boxSizing:28,textAlignLast:48,textDecorationStyle:35,textDecorationSkip:35,textDecorationLine:35,textDecorationColor:35,tabSize:60,hyphens:42,fontFeatureSettings:33,breakAfter:51,breakBefore:51,breakInside:51,columnCount:51,columnFill:51,columnGap:51,columnRule:51,columnRuleColor:51,columnRuleStyle:51,columnRuleWidth:51,columns:51,columnSpan:51,columnWidth:51},opera:{flex:16,flexBasis:16,flexDirection:16,flexGrow:16,flexFlow:16,flexShrink:16,flexWrap:16,alignContent:16,alignItems:16,alignSelf:16,justifyContent:16,order:16,transform:22,transformOrigin:22,transformOriginX:22,transformOriginY:22,backfaceVisibility:22,perspective:22,perspectiveOrigin:22,transformStyle:22,transformOriginZ:22,animation:29,animationDelay:29,animationDirection:29,animationFillMode:29,animationDuration:29,animationIterationCount:29,animationName:29,animationPlayState:29,animationTimingFunction:29,appearance:50,userSelect:40,fontKerning:19,textEmphasisPosition:50,textEmphasis:50,textEmphasisStyle:50,textEmphasisColor:50,boxDecorationBreak:50,clipPath:41,maskImage:50,maskMode:50,maskRepeat:50,maskPosition:50,maskClip:50,maskOrigin:50,maskSize:50,maskComposite:50,mask:50,maskBorderSource:50,maskBorderMode:50,maskBorderSlice:50,maskBorderWidth:50,maskBorderOutset:50,maskBorderRepeat:50,maskBorder:50,maskType:50,textDecorationStyle:43,textDecorationSkip:43,textDecorationLine:43,textDecorationColor:43,filter:39,fontFeatureSettings:34,breakAfter:36,breakBefore:36,breakInside:36,columnCount:36,columnFill:36,columnGap:36,columnRule:36,columnRuleColor:36,columnRuleStyle:36,columnRuleWidth:36,columns:36,columnSpan:36,columnWidth:36,writingMode:34},ie:{flex:10,flexDirection:10,flexFlow:10,flexWrap:10,transform:9,transformOrigin:9,transformOriginX:9,transformOriginY:9,userSelect:11,wrapFlow:11,wrapThrough:11,wrapMargin:11,scrollSnapType:11,scrollSnapPointsX:11,scrollSnapPointsY:11,scrollSnapDestination:11,scrollSnapCoordinate:11,touchAction:10,hyphens:11,flowInto:11,flowFrom:11,breakBefore:11,breakAfter:11,breakInside:11,regionFragment:11,gridTemplateColumns:11,gridTemplateRows:11,gridTemplateAreas:11,gridTemplate:11,gridAutoColumns:11,gridAutoRows:11,gridAutoFlow:11,grid:11,gridRowStart:11,gridColumnStart:11,gridRowEnd:11,gridRow:11,gridColumn:11,gridColumnEnd:11,gridColumnGap:11,gridRowGap:11,gridArea:11,gridGap:11,textSizeAdjust:11,writingMode:11},edge:{userSelect:17,wrapFlow:17,wrapThrough:17,wrapMargin:17,scrollSnapType:17,scrollSnapPointsX:17,scrollSnapPointsY:17,scrollSnapDestination:17,scrollSnapCoordinate:17,hyphens:17,flowInto:17,flowFrom:17,breakBefore:17,breakAfter:17,breakInside:17,regionFragment:17,gridTemplateColumns:15,gridTemplateRows:15,gridTemplateAreas:15,gridTemplate:15,gridAutoColumns:15,gridAutoRows:15,gridAutoFlow:15,grid:15,gridRowStart:15,gridColumnStart:15,gridRowEnd:15,gridRow:15,gridColumn:15,gridColumnEnd:15,gridColumnGap:15,gridRowGap:15,gridArea:15,gridGap:15},ios_saf:{flex:8.1,flexBasis:8.1,flexDirection:8.1,flexGrow:8.1,flexFlow:8.1,flexShrink:8.1,flexWrap:8.1,alignContent:8.1,alignItems:8.1,alignSelf:8.1,justifyContent:8.1,order:8.1,transition:6,transitionDelay:6,transitionDuration:6,transitionProperty:6,transitionTimingFunction:6,transform:8.1,transformOrigin:8.1,transformOriginX:8.1,transformOriginY:8.1,backfaceVisibility:8.1,perspective:8.1,perspectiveOrigin:8.1,transformStyle:8.1,transformOriginZ:8.1,animation:8.1,animationDelay:8.1,animationDirection:8.1,animationFillMode:8.1,animationDuration:8.1,animationIterationCount:8.1,animationName:8.1,animationPlayState:8.1,animationTimingFunction:8.1,appearance:11,userSelect:11,backdropFilter:11,fontKerning:11,scrollSnapType:10.3,scrollSnapPointsX:10.3,scrollSnapPointsY:10.3,scrollSnapDestination:10.3,scrollSnapCoordinate:10.3,boxDecorationBreak:11,clipPath:11,maskImage:11,maskMode:11,maskRepeat:11,maskPosition:11,maskClip:11,maskOrigin:11,maskSize:11,maskComposite:11,mask:11,maskBorderSource:11,maskBorderMode:11,maskBorderSlice:11,maskBorderWidth:11,maskBorderOutset:11,maskBorderRepeat:11,maskBorder:11,maskType:11,textSizeAdjust:11,textDecorationStyle:11,textDecorationSkip:11,textDecorationLine:11,textDecorationColor:11,shapeImageThreshold:10,shapeImageMargin:10,shapeImageOutside:10,filter:9,hyphens:11,flowInto:11,flowFrom:11,breakBefore:8.1,breakAfter:8.1,breakInside:8.1,regionFragment:11,columnCount:8.1,columnFill:8.1,columnGap:8.1,columnRule:8.1,columnRuleColor:8.1,columnRuleStyle:8.1,columnRuleWidth:8.1,columns:8.1,columnSpan:8.1,columnWidth:8.1,writingMode:10.3},android:{borderImage:4.2,borderImageOutset:4.2,borderImageRepeat:4.2,borderImageSlice:4.2,borderImageSource:4.2,borderImageWidth:4.2,flex:4.2,flexBasis:4.2,flexDirection:4.2,flexGrow:4.2,flexFlow:4.2,flexShrink:4.2,flexWrap:4.2,alignContent:4.2,alignItems:4.2,alignSelf:4.2,justifyContent:4.2,order:4.2,transition:4.2,transitionDelay:4.2,transitionDuration:4.2,transitionProperty:4.2,transitionTimingFunction:4.2,transform:4.4,transformOrigin:4.4,transformOriginX:4.4,transformOriginY:4.4,backfaceVisibility:4.4,perspective:4.4,perspectiveOrigin:4.4,transformStyle:4.4,transformOriginZ:4.4,animation:4.4,animationDelay:4.4,animationDirection:4.4,animationFillMode:4.4,animationDuration:4.4,animationIterationCount:4.4,animationName:4.4,animationPlayState:4.4,animationTimingFunction:4.4,appearance:62,userSelect:4.4,fontKerning:4.4,textEmphasisPosition:62,textEmphasis:62,textEmphasisStyle:62,textEmphasisColor:62,boxDecorationBreak:62,clipPath:4.4,maskImage:62,maskMode:62,maskRepeat:62,maskPosition:62,maskClip:62,maskOrigin:62,maskSize:62,maskComposite:62,mask:62,maskBorderSource:62,maskBorderMode:62,maskBorderSlice:62,maskBorderWidth:62,maskBorderOutset:62,maskBorderRepeat:62,maskBorder:62,maskType:62,filter:4.4,fontFeatureSettings:4.4,breakAfter:4.4,breakBefore:4.4,breakInside:4.4,columnCount:4.4,columnFill:4.4,columnGap:4.4,columnRule:4.4,columnRuleColor:4.4,columnRuleStyle:4.4,columnRuleWidth:4.4,columns:4.4,columnSpan:4.4,columnWidth:4.4,writingMode:4.4},and_chr:{appearance:62,textEmphasisPosition:62,textEmphasis:62,textEmphasisStyle:62,textEmphasisColor:62,boxDecorationBreak:62,maskImage:62,maskMode:62,maskRepeat:62,maskPosition:62,maskClip:62,maskOrigin:62,maskSize:62,maskComposite:62,mask:62,maskBorderSource:62,maskBorderMode:62,maskBorderSlice:62,maskBorderWidth:62,maskBorderOutset:62,maskBorderRepeat:62,maskBorder:62,maskType:62},and_uc:{flex:11.4,flexBasis:11.4,flexDirection:11.4,flexGrow:11.4,flexFlow:11.4,flexShrink:11.4,flexWrap:11.4,alignContent:11.4,alignItems:11.4,alignSelf:11.4,justifyContent:11.4,order:11.4,transform:11.4,transformOrigin:11.4,transformOriginX:11.4,transformOriginY:11.4,backfaceVisibility:11.4,perspective:11.4,perspectiveOrigin:11.4,transformStyle:11.4,transformOriginZ:11.4,animation:11.4,animationDelay:11.4,animationDirection:11.4,animationFillMode:11.4,animationDuration:11.4,animationIterationCount:11.4,animationName:11.4,animationPlayState:11.4,animationTimingFunction:11.4,appearance:11.4,userSelect:11.4,textEmphasisPosition:11.4,textEmphasis:11.4,textEmphasisStyle:11.4,textEmphasisColor:11.4,clipPath:11.4,maskImage:11.4,maskMode:11.4,maskRepeat:11.4,maskPosition:11.4,maskClip:11.4,maskOrigin:11.4,maskSize:11.4,maskComposite:11.4,mask:11.4,maskBorderSource:11.4,maskBorderMode:11.4,maskBorderSlice:11.4,maskBorderWidth:11.4,maskBorderOutset:11.4,maskBorderRepeat:11.4,maskBorder:11.4,maskType:11.4,textSizeAdjust:11.4,filter:11.4,hyphens:11.4,fontFeatureSettings:11.4,breakAfter:11.4,breakBefore:11.4,breakInside:11.4,columnCount:11.4,columnFill:11.4,columnGap:11.4,columnRule:11.4,columnRuleColor:11.4,columnRuleStyle:11.4,columnRuleWidth:11.4,columns:11.4,columnSpan:11.4,columnWidth:11.4,writingMode:11.4},op_mini:{}}};exports["default"]=_default;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=calc;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function calc(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(typeof value==='string'&&value.indexOf('calc(')>-1&&(browserName==='firefox'&&browserVersion<15||browserName==='chrome'&&browserVersion<25||browserName==='safari'&&browserVersion<6.1||browserName==='ios_saf'&&browserVersion<7)){return(0,_getPrefixedValue2.default)(value.replace(/calc\(/g,cssPrefix+'calc('),value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=getPrefixedValue;function getPrefixedValue(prefixedValue,value,keepUnprefixed){if(keepUnprefixed){return[prefixedValue,value];}return prefixedValue;}module.exports=exports["default"];

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=crossFade;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function crossFade(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(typeof value==='string'&&value.indexOf('cross-fade(')>-1&&(browserName==='chrome'||browserName==='opera'||browserName==='and_chr'||(browserName==='ios_saf'||browserName==='safari')&&browserVersion<10)){return(0,_getPrefixedValue2.default)(value.replace(/cross-fade\(/g,cssPrefix+'cross-fade('),value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=cursor;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var grabValues={grab:true,grabbing:true};var zoomValues={'zoom-in':true,'zoom-out':true};function cursor(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;// adds prefixes for firefox, chrome, safari, and opera regardless of
	// version until a reliable browser support info can be found
	// see: https://github.com/rofrischmann/inline-style-prefixer/issues/79
	if(property==='cursor'&&grabValues[value]&&(browserName==='firefox'||browserName==='chrome'||browserName==='safari'||browserName==='opera')){return(0,_getPrefixedValue2.default)(cssPrefix+value,value,keepUnprefixed);}if(property==='cursor'&&zoomValues[value]&&(browserName==='firefox'&&browserVersion<24||browserName==='chrome'&&browserVersion<37||browserName==='safari'&&browserVersion<9||browserName==='opera'&&browserVersion<24)){return(0,_getPrefixedValue2.default)(cssPrefix+value,value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=filter;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function filter(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(typeof value==='string'&&value.indexOf('filter(')>-1&&(browserName==='ios_saf'||browserName==='safari'&&browserVersion<9.1)){return(0,_getPrefixedValue2.default)(value.replace(/filter\(/g,cssPrefix+'filter('),value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=flex;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var values={flex:true,'inline-flex':true};function flex(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(property==='display'&&values[value]&&(browserName==='chrome'&&browserVersion<29&&browserVersion>20||(browserName==='safari'||browserName==='ios_saf')&&browserVersion<9&&browserVersion>6||browserName==='opera'&&(browserVersion===15||browserVersion===16))){return(0,_getPrefixedValue2.default)(cssPrefix+value,value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=flexboxIE;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var alternativeValues={'space-around':'distribute','space-between':'justify','flex-start':'start','flex-end':'end',flex:'flexbox','inline-flex':'inline-flexbox'};var alternativeProps={alignContent:'msFlexLinePack',alignSelf:'msFlexItemAlign',alignItems:'msFlexAlign',justifyContent:'msFlexPack',order:'msFlexOrder',flexGrow:'msFlexPositive',flexShrink:'msFlexNegative',flexBasis:'msFlexPreferredSize'};function flexboxIE(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed,requiresPrefix=_ref.requiresPrefix;if((alternativeProps.hasOwnProperty(property)||property==='display'&&typeof value==='string'&&value.indexOf('flex')>-1)&&(browserName==='ie_mob'||browserName==='ie')&&browserVersion===10){delete requiresPrefix[property];if(!keepUnprefixed&&!Array.isArray(style[property])){delete style[property];}if(property==='display'&&alternativeValues.hasOwnProperty(value)){return(0,_getPrefixedValue2.default)(cssPrefix+alternativeValues[value],value,keepUnprefixed);}if(alternativeProps.hasOwnProperty(property)){style[alternativeProps[property]]=alternativeValues[value]||value;}}}module.exports=exports['default'];

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=flexboxOld;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var alternativeValues={'space-around':'justify','space-between':'justify','flex-start':'start','flex-end':'end','wrap-reverse':'multiple',wrap:'multiple',flex:'box','inline-flex':'inline-box'};var alternativeProps={alignItems:'WebkitBoxAlign',justifyContent:'WebkitBoxPack',flexWrap:'WebkitBoxLines',flexGrow:'WebkitBoxFlex'};var otherProps=['alignContent','alignSelf','order','flexGrow','flexShrink','flexBasis','flexDirection'];var properties=Object.keys(alternativeProps).concat(otherProps);function flexboxOld(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed,requiresPrefix=_ref.requiresPrefix;if((properties.indexOf(property)>-1||property==='display'&&typeof value==='string'&&value.indexOf('flex')>-1)&&(browserName==='firefox'&&browserVersion<22||browserName==='chrome'&&browserVersion<21||(browserName==='safari'||browserName==='ios_saf')&&browserVersion<=6.1||browserName==='android'&&browserVersion<4.4||browserName==='and_uc')){delete requiresPrefix[property];if(!keepUnprefixed&&!Array.isArray(style[property])){delete style[property];}if(property==='flexDirection'&&typeof value==='string'){if(value.indexOf('column')>-1){style.WebkitBoxOrient='vertical';}else{style.WebkitBoxOrient='horizontal';}if(value.indexOf('reverse')>-1){style.WebkitBoxDirection='reverse';}else{style.WebkitBoxDirection='normal';}}if(property==='display'&&alternativeValues.hasOwnProperty(value)){return(0,_getPrefixedValue2.default)(cssPrefix+alternativeValues[value],value,keepUnprefixed);}if(alternativeProps.hasOwnProperty(property)){style[alternativeProps[property]]=alternativeValues[value]||value;}}}module.exports=exports['default'];

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=gradient;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var values=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi;function gradient(property,value,style,_ref){var browserName=_ref.browserName,browserVersion=_ref.browserVersion,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(typeof value==='string'&&values.test(value)&&(browserName==='firefox'&&browserVersion<16||browserName==='chrome'&&browserVersion<26||(browserName==='safari'||browserName==='ios_saf')&&browserVersion<7||(browserName==='opera'||browserName==='op_mini')&&browserVersion<12.1||browserName==='android'&&browserVersion<4.4||browserName==='and_uc')){return(0,_getPrefixedValue2.default)(value.replace(values,function(grad){return cssPrefix+grad;}),value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=imageSet;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function imageSet(property,value,style,_ref){var browserName=_ref.browserName,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(typeof value==='string'&&value.indexOf('image-set(')>-1&&(browserName==='chrome'||browserName==='opera'||browserName==='and_chr'||browserName==='and_uc'||browserName==='ios_saf'||browserName==='safari')){return(0,_getPrefixedValue2.default)(value.replace(/image-set\(/g,cssPrefix+'image-set('),value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=position;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function position(property,value,style,_ref){var browserName=_ref.browserName,cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;if(property==='position'&&value==='sticky'&&(browserName==='safari'||browserName==='ios_saf')){return(0,_getPrefixedValue2.default)(cssPrefix+value,value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=sizing;var _getPrefixedValue=__webpack_require__(129);var _getPrefixedValue2=_interopRequireDefault(_getPrefixedValue);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var properties={maxHeight:true,maxWidth:true,width:true,height:true,columnWidth:true,minWidth:true,minHeight:true};var values={'min-content':true,'max-content':true,'fill-available':true,'fit-content':true,'contain-floats':true// TODO: chrome & opera support it
	};function sizing(property,value,style,_ref){var cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed;// This might change in the future
	// Keep an eye on it
	if(properties.hasOwnProperty(property)&&values.hasOwnProperty(value)){return(0,_getPrefixedValue2.default)(cssPrefix+value,value,keepUnprefixed);}}module.exports=exports['default'];

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=transition;var _hyphenateProperty=__webpack_require__(125);var _hyphenateProperty2=_interopRequireDefault(_hyphenateProperty);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var properties={transition:true,transitionProperty:true,WebkitTransition:true,WebkitTransitionProperty:true,MozTransition:true,MozTransitionProperty:true};var requiresPrefixDashCased=void 0;function transition(property,value,style,_ref){var cssPrefix=_ref.cssPrefix,keepUnprefixed=_ref.keepUnprefixed,requiresPrefix=_ref.requiresPrefix;if(typeof value==='string'&&properties.hasOwnProperty(property)){// memoize the prefix array for later use
	if(!requiresPrefixDashCased){requiresPrefixDashCased=Object.keys(requiresPrefix).map(function(prop){return(0,_hyphenateProperty2.default)(prop);});}// only split multi values, not cubic beziers
	var multipleValues=value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);requiresPrefixDashCased.forEach(function(prop){multipleValues.forEach(function(val,index){if(val.indexOf(prop)>-1&&prop!=='order'){multipleValues[index]=val.replace(prop,cssPrefix+prop)+(keepUnprefixed?','+val:'');}});});return multipleValues.join(',');}}module.exports=exports['default'];

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _cleanStateKey=_interopRequireDefault(__webpack_require__(142));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}var getState=function getState(state,elementKey,value){var key=(0,_cleanStateKey["default"])(elementKey);return!!state&&!!state._radiumStyleState&&!!state._radiumStyleState[key]&&state._radiumStyleState[key][value];};var _default=getState;exports["default"]=_default;

/***/ }),
/* 142 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;/* flow */var cleanStateKey=function cleanStateKey(key){return key===null||typeof key==='undefined'?'main':key.toString();};var _default=cleanStateKey;exports["default"]=_default;

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var getStateKey=function getStateKey(renderedElement){return typeof renderedElement.ref==='string'?renderedElement.ref:renderedElement.key;};var _default=getStateKey;exports["default"]=_default;

/***/ }),
/* 144 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var getRadiumStyleState=function getRadiumStyleState(component){return component._lastRadiumState||component.state&&component.state._radiumStyleState||{};};var _default=getRadiumStyleState;exports["default"]=_default;

/***/ }),
/* 145 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=hash;// a simple djb2 hash based on hash-string:
	// https://github.com/MatthewBarker/hash-string/blob/master/source/hash-string.js
	// returns a hex-encoded hash
	function hash(text){if(!text){return'';}var hashValue=5381;var index=text.length-1;while(index){hashValue=hashValue*33^text.charCodeAt(index);index-=1;}return(hashValue>>>0).toString(16);}

/***/ }),
/* 146 */
/***/ (function(module, exports) {

	"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports.isNestedStyle=isNestedStyle;exports.mergeStyles=mergeStyles;function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}function isNestedStyle(value){// Don't merge objects overriding toString, since they should be converted
	// to string values.
	return value&&value.constructor===Object&&value.toString===Object.prototype.toString;}// Merge style objects. Deep merge plain object values.
	function mergeStyles(styles){var result={};styles.forEach(function(style){if(!style||_typeof(style)!=='object'){return;}if(Array.isArray(style)){style=mergeStyles(style);}Object.keys(style).forEach(function(key){// Simple case, nothing nested
	if(!isNestedStyle(style[key])||!isNestedStyle(result[key])){result[key]=style[key];return;}// If nested media, don't merge the nested styles, append a space to the
	// end (benign when converted to CSS). This way we don't end up merging
	// media queries that appear later in the chain with those that appear
	// earlier.
	if(key.indexOf('@media')===0){var newKey=key;// eslint-disable-next-line no-constant-condition
	while(true){newKey+=' ';if(!result[newKey]){result[newKey]=style[key];return;}}}// Merge all other nested styles recursively
	result[key]=mergeStyles([result[key],style[key]]);});});return result;}

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _checkPropsPlugin=_interopRequireDefault(__webpack_require__(148));var _keyframesPlugin=_interopRequireDefault(__webpack_require__(149));var _mergeStyleArrayPlugin=_interopRequireDefault(__webpack_require__(150));var _prefixPlugin=_interopRequireDefault(__webpack_require__(151));var _removeNestedStylesPlugin=_interopRequireDefault(__webpack_require__(152));var _resolveInteractionStylesPlugin=_interopRequireDefault(__webpack_require__(153));var _resolveMediaQueriesPlugin=_interopRequireDefault(__webpack_require__(155));var _visitedPlugin=_interopRequireDefault(__webpack_require__(156));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}/* eslint-disable block-scoped-const */var _default={checkProps:_checkPropsPlugin["default"],keyframes:_keyframesPlugin["default"],mergeStyleArray:_mergeStyleArrayPlugin["default"],prefix:_prefixPlugin["default"],removeNestedStyles:_removeNestedStylesPlugin["default"],resolveInteractionStyles:_resolveInteractionStylesPlugin["default"],resolveMediaQueries:_resolveMediaQueriesPlugin["default"],visited:_visitedPlugin["default"]};exports["default"]=_default;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}var _checkProps=function checkProps(){};if(process.env.NODE_ENV!=='production'){// Warn if you use longhand and shorthand properties in the same style
	// object.
	// https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties
	var shorthandPropertyExpansions={background:['backgroundAttachment','backgroundBlendMode','backgroundClip','backgroundColor','backgroundImage','backgroundOrigin','backgroundPosition','backgroundPositionX','backgroundPositionY','backgroundRepeat','backgroundRepeatX','backgroundRepeatY','backgroundSize'],border:['borderBottom','borderBottomColor','borderBottomStyle','borderBottomWidth','borderColor','borderLeft','borderLeftColor','borderLeftStyle','borderLeftWidth','borderRight','borderRightColor','borderRightStyle','borderRightWidth','borderStyle','borderTop','borderTopColor','borderTopStyle','borderTopWidth','borderWidth'],borderImage:['borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth'],borderRadius:['borderBottomLeftRadius','borderBottomRightRadius','borderTopLeftRadius','borderTopRightRadius'],font:['fontFamily','fontKerning','fontSize','fontStretch','fontStyle','fontVariant','fontVariantLigatures','fontWeight','lineHeight'],listStyle:['listStyleImage','listStylePosition','listStyleType'],margin:['marginBottom','marginLeft','marginRight','marginTop'],padding:['paddingBottom','paddingLeft','paddingRight','paddingTop'],transition:['transitionDelay','transitionDuration','transitionProperty','transitionTimingFunction']};_checkProps=function checkProps(config){var componentName=config.componentName,style=config.style;if(_typeof(style)!=='object'||!style){return;}var styleKeys=Object.keys(style);styleKeys.forEach(function(styleKey){if(Array.isArray(shorthandPropertyExpansions[styleKey])&&shorthandPropertyExpansions[styleKey].some(function(sp){return styleKeys.indexOf(sp)!==-1;})){if(process.env.NODE_ENV!=='production'){/* eslint-disable no-console */console.warn('Radium: property "'+styleKey+'" in style object',style,': do not mix longhand and '+'shorthand properties in the same style object. Check the render '+'method of '+componentName+'.','See https://github.com/FormidableLabs/radium/issues/95 for more '+'information.');/* eslint-enable no-console */}}});styleKeys.forEach(function(k){return _checkProps(_objectSpread({},config,{style:style[k]}));});return;};}var _default=_checkProps;exports["default"]=_default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=keyframesPlugin;function keyframesPlugin(_ref){var addCSS=_ref.addCSS,config=_ref.config,style=_ref.style;var processKeyframeStyle=function processKeyframeStyle(value){var keyframesValue=value;var _keyframesValue$__pro=keyframesValue.__process(config.userAgent),animationName=_keyframesValue$__pro.animationName,css=_keyframesValue$__pro.css;addCSS(css);return animationName;};var newStyle=Object.keys(style).reduce(function(newStyleInProgress,key){var value=style[key];var isKeyframeArray=Array.isArray(value);if(key==='animationName'&&value&&(value.__radiumKeyframes||isKeyframeArray)){if(isKeyframeArray){value=value.map(processKeyframeStyle).join(', ');}else{value=processKeyframeStyle(value);}}newStyleInProgress[key]=value;return newStyleInProgress;},{});return{style:newStyle};}

/***/ }),
/* 150 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;// Convenient syntax for multiple styles: `style={[style1, style2, etc]}`
	// Ignores non-objects, so you can do `this.state.isCool && styles.cool`.
	var mergeStyleArrayPlugin=function mergeStyleArrayPlugin(_ref){var style=_ref.style,mergeStyles=_ref.mergeStyles;// eslint-disable-line no-shadow
	var newStyle=Array.isArray(style)?mergeStyles(style):style;return{style:newStyle};};var _default=mergeStyleArrayPlugin;exports["default"]=_default;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=prefixPlugin;var _prefixer=__webpack_require__(97);function prefixPlugin(_ref){var config=_ref.config,style=_ref.style;var newStyle=(0,_prefixer.getPrefixedStyle)(style,config.userAgent);return{style:newStyle};}

/***/ }),
/* 152 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=removeNestedStyles;function removeNestedStyles(_ref){var isNestedStyle=_ref.isNestedStyle,style=_ref.style;// eslint-disable-line no-shadow
	var newStyle=Object.keys(style).reduce(function(newStyleInProgress,key){var value=style[key];if(!isNestedStyle(value)){newStyleInProgress[key]=value;}return newStyleInProgress;},{});return{style:newStyle};}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _mouseUpListener=_interopRequireDefault(__webpack_require__(154));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}var _isInteractiveStyleField=function _isInteractiveStyleField(styleFieldName){return styleFieldName===':hover'||styleFieldName===':active'||styleFieldName===':focus';};var resolveInteractionStyles=function resolveInteractionStyles(config){var ExecutionEnvironment=config.ExecutionEnvironment,getComponentField=config.getComponentField,getState=config.getState,mergeStyles=config.mergeStyles,props=config.props,setState=config.setState,style=config.style;var newComponentFields={};var newProps={};// Only add handlers if necessary
	if(style[':hover']){// Always call the existing handler if one is already defined.
	// This code, and the very similar ones below, could be abstracted a bit
	// more, but it hurts readability IMO.
	var existingOnMouseEnter=props.onMouseEnter;newProps.onMouseEnter=function(e){existingOnMouseEnter&&existingOnMouseEnter(e);setState(':hover',true);};var existingOnMouseLeave=props.onMouseLeave;newProps.onMouseLeave=function(e){existingOnMouseLeave&&existingOnMouseLeave(e);setState(':hover',false);};}if(style[':active']){var existingOnMouseDown=props.onMouseDown;newProps.onMouseDown=function(e){existingOnMouseDown&&existingOnMouseDown(e);newComponentFields._lastMouseDown=Date.now();setState(':active','viamousedown');};var existingOnKeyDown=props.onKeyDown;newProps.onKeyDown=function(e){existingOnKeyDown&&existingOnKeyDown(e);if(e.key===' '||e.key==='Enter'){setState(':active','viakeydown');}};var existingOnKeyUp=props.onKeyUp;newProps.onKeyUp=function(e){existingOnKeyUp&&existingOnKeyUp(e);if(e.key===' '||e.key==='Enter'){setState(':active',false);}};}if(style[':focus']){var existingOnFocus=props.onFocus;newProps.onFocus=function(e){existingOnFocus&&existingOnFocus(e);setState(':focus',true);};var existingOnBlur=props.onBlur;newProps.onBlur=function(e){existingOnBlur&&existingOnBlur(e);setState(':focus',false);};}if(style[':active']&&!getComponentField('_radiumMouseUpListener')&&ExecutionEnvironment.canUseEventListeners){newComponentFields._radiumMouseUpListener=_mouseUpListener["default"].subscribe(function(){Object.keys(getComponentField('state')._radiumStyleState).forEach(function(key){if(getState(':active',key)==='viamousedown'){setState(':active',false,key);}});});}// Merge the styles in the order they were defined
	var interactionStyles=props.disabled?[style[':disabled']]:Object.keys(style).filter(function(name){return _isInteractiveStyleField(name)&&getState(name);}).map(function(name){return style[name];});var newStyle=mergeStyles([style].concat(interactionStyles));// Remove interactive styles
	newStyle=Object.keys(newStyle).reduce(function(styleWithoutInteractions,name){if(!_isInteractiveStyleField(name)&&name!==':disabled'){styleWithoutInteractions[name]=newStyle[name];}return styleWithoutInteractions;},{});return{componentFields:newComponentFields,props:newProps,style:newStyle};};var _default=resolveInteractionStyles;exports["default"]=_default;

/***/ }),
/* 154 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _callbacks=[];var _mouseUpListenerIsActive=false;function _handleMouseUp(){_callbacks.forEach(function(callback){callback();});}var subscribe=function subscribe(callback){if(_callbacks.indexOf(callback)===-1){_callbacks.push(callback);}if(!_mouseUpListenerIsActive){window.addEventListener('mouseup',_handleMouseUp);_mouseUpListenerIsActive=true;}return{remove:function remove(){var index=_callbacks.indexOf(callback);_callbacks.splice(index,1);if(_callbacks.length===0&&_mouseUpListenerIsActive){window.removeEventListener('mouseup',_handleMouseUp);_mouseUpListenerIsActive=false;}}};};var _default={subscribe:subscribe,__triggerForTests:_handleMouseUp};exports["default"]=_default;

/***/ }),
/* 155 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=resolveMediaQueries;function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var _windowMatchMedia;function _getWindowMatchMedia(ExecutionEnvironment){if(_windowMatchMedia===undefined){_windowMatchMedia=!!ExecutionEnvironment.canUseDOM&&!!window&&!!window.matchMedia&&function(mediaQueryString){return window.matchMedia(mediaQueryString);}||null;}return _windowMatchMedia;}function _filterObject(obj,predicate){return Object.keys(obj).filter(function(key){return predicate(obj[key],key);}).reduce(function(result,key){result[key]=obj[key];return result;},{});}function _removeMediaQueries(style){return Object.keys(style).reduce(function(styleWithoutMedia,key){if(key.indexOf('@media')!==0){styleWithoutMedia[key]=style[key];}return styleWithoutMedia;},{});}function _topLevelRulesToCSS(_ref){var addCSS=_ref.addCSS,appendImportantToEachValue=_ref.appendImportantToEachValue,cssRuleSetToString=_ref.cssRuleSetToString,hash=_ref.hash,isNestedStyle=_ref.isNestedStyle,style=_ref.style,userAgent=_ref.userAgent;var className='';Object.keys(style).filter(function(name){return name.indexOf('@media')===0;}).map(function(query){var topLevelRules=appendImportantToEachValue(_filterObject(style[query],function(value){return!isNestedStyle(value);}));if(!Object.keys(topLevelRules).length){return;}var ruleCSS=cssRuleSetToString('',topLevelRules,userAgent);// CSS classes cannot start with a number
	var mediaQueryClassName='rmq-'+hash(query+ruleCSS);var css=query+'{ .'+mediaQueryClassName+ruleCSS+'}';addCSS(css);className+=(className?' ':'')+mediaQueryClassName;});return className;}function _subscribeToMediaQuery(_ref2){var listener=_ref2.listener,listenersByQuery=_ref2.listenersByQuery,matchMedia=_ref2.matchMedia,mediaQueryListsByQuery=_ref2.mediaQueryListsByQuery,query=_ref2.query;query=query.replace('@media ','');var mql=mediaQueryListsByQuery[query];if(!mql&&matchMedia){mediaQueryListsByQuery[query]=mql=matchMedia(query);}if(!listenersByQuery||!listenersByQuery[query]){mql.addListener(listener);listenersByQuery[query]={remove:function remove(){mql.removeListener(listener);}};}return mql;}function resolveMediaQueries(_ref3){var ExecutionEnvironment=_ref3.ExecutionEnvironment,addCSS=_ref3.addCSS,appendImportantToEachValue=_ref3.appendImportantToEachValue,config=_ref3.config,cssRuleSetToString=_ref3.cssRuleSetToString,getComponentField=_ref3.getComponentField,getGlobalState=_ref3.getGlobalState,hash=_ref3.hash,isNestedStyle=_ref3.isNestedStyle,mergeStyles=_ref3.mergeStyles,props=_ref3.props,setState=_ref3.setState,style=_ref3.style;// eslint-disable-line no-shadow
	var newStyle=_removeMediaQueries(style);var mediaQueryClassNames=_topLevelRulesToCSS({addCSS:addCSS,appendImportantToEachValue:appendImportantToEachValue,cssRuleSetToString:cssRuleSetToString,hash:hash,isNestedStyle:isNestedStyle,style:style,userAgent:config.userAgent});var newProps=mediaQueryClassNames?{className:mediaQueryClassNames+(props.className?' '+props.className:'')}:null;var matchMedia=config.matchMedia||_getWindowMatchMedia(ExecutionEnvironment);if(!matchMedia){return{props:newProps,style:newStyle};}var listenersByQuery=_objectSpread({},getComponentField('_radiumMediaQueryListenersByQuery'));var mediaQueryListsByQuery=getGlobalState('mediaQueryListsByQuery')||{};Object.keys(style).filter(function(name){return name.indexOf('@media')===0;}).map(function(query){var nestedRules=_filterObject(style[query],isNestedStyle);if(!Object.keys(nestedRules).length){return;}var mql=_subscribeToMediaQuery({listener:function listener(){return setState(query,mql.matches,'_all');},listenersByQuery:listenersByQuery,matchMedia:matchMedia,mediaQueryListsByQuery:mediaQueryListsByQuery,query:query});// Apply media query states
	if(mql.matches){newStyle=mergeStyles([newStyle,nestedRules]);}});return{componentFields:{_radiumMediaQueryListenersByQuery:listenersByQuery},globalState:{mediaQueryListsByQuery:mediaQueryListsByQuery},props:newProps,style:newStyle};}

/***/ }),
/* 156 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=visited;function visited(_ref){var addCSS=_ref.addCSS,appendImportantToEachValue=_ref.appendImportantToEachValue,config=_ref.config,cssRuleSetToString=_ref.cssRuleSetToString,hash=_ref.hash,props=_ref.props,style=_ref.style;// eslint-disable-line no-shadow
	var className=props.className;var newStyle=Object.keys(style).reduce(function(newStyleInProgress,key){var value=style[key];if(key===':visited'){value=appendImportantToEachValue(value);var ruleCSS=cssRuleSetToString('',value,config.userAgent);var visitedClassName='rad-'+hash(ruleCSS);var css='.'+visitedClassName+':visited'+ruleCSS;addCSS(css);className=(className?className+' ':'')+visitedClassName;}else{newStyleInProgress[key]=value;}return newStyleInProgress;},{});return{props:className===props.className?null:{className:className},style:newStyle};}

/***/ }),
/* 157 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}var StyleKeeper=/*#__PURE__*/function(){function StyleKeeper(userAgent){_classCallCheck(this,StyleKeeper);this._userAgent=void 0;this._listeners=void 0;this._cssSet=void 0;this._userAgent=userAgent;this._listeners=[];this._cssSet={};}_createClass(StyleKeeper,[{key:"subscribe",value:function subscribe(listener){var _this=this;if(this._listeners.indexOf(listener)===-1){this._listeners.push(listener);}return{// Must be fat arrow to capture `this`
	remove:function remove(){var listenerIndex=_this._listeners.indexOf(listener);if(listenerIndex>-1){_this._listeners.splice(listenerIndex,1);}}};}},{key:"addCSS",value:function addCSS(css){var _this2=this;if(!this._cssSet[css]){this._cssSet[css]=true;this._emitChange();}return{// Must be fat arrow to capture `this`
	remove:function remove(){delete _this2._cssSet[css];_this2._emitChange();}};}},{key:"getCSS",value:function getCSS(){return Object.keys(this._cssSet).join('\n');}},{key:"_emitChange",value:function _emitChange(){this._listeners.forEach(function(listener){return listener();});}}]);return StyleKeeper;}();exports["default"]=StyleKeeper;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.withRadiumContexts=withRadiumContexts;exports.RadiumConfigContext=exports.StyleKeeperContext=void 0;var _react=_interopRequireWildcard(__webpack_require__(10));var _hoistNonReactStatics=_interopRequireDefault(__webpack_require__(36));var _styleKeeper=_interopRequireDefault(__webpack_require__(157));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}}newObj["default"]=obj;return newObj;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var StyleKeeperContext=_react["default"].createContext(undefined);exports.StyleKeeperContext=StyleKeeperContext;var RadiumConfigContext=_react["default"].createContext(undefined);exports.RadiumConfigContext=RadiumConfigContext;function withRadiumContexts(WrappedComponent){var WithRadiumContexts=_react["default"].forwardRef(function(props,ref){var radiumConfigContext=(0,_react.useContext)(RadiumConfigContext);var styleKeeperContext=(0,_react.useContext)(StyleKeeperContext);return _react["default"].createElement(WrappedComponent,_extends({ref:ref},props,{radiumConfigContext:radiumConfigContext,styleKeeperContext:styleKeeperContext}));});WithRadiumContexts.displayName="withRadiumContexts(".concat(WrappedComponent.displayName||WrappedComponent.name||'Component',")");return(0,_hoistNonReactStatics["default"])(WithRadiumContexts,WrappedComponent);}

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _cssRuleSetToString=_interopRequireDefault(__webpack_require__(95));var _react=_interopRequireWildcard(__webpack_require__(10));var _propTypes=_interopRequireDefault(__webpack_require__(11));var _context=__webpack_require__(158);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}}newObj["default"]=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}var Style=/*#__PURE__*/function(_PureComponent){_inherits(Style,_PureComponent);function Style(){_classCallCheck(this,Style);return _possibleConstructorReturn(this,_getPrototypeOf(Style).apply(this,arguments));}_createClass(Style,[{key:"_buildStyles",value:function _buildStyles(styles){var _this=this;var userAgent=this.props.radiumConfig&&this.props.radiumConfig.userAgent||this.props.radiumConfigContext&&this.props.radiumConfigContext.userAgent;var scopeSelector=this.props.scopeSelector;var rootRules=Object.keys(styles).reduce(function(accumulator,selector){if(_typeof(styles[selector])!=='object'){accumulator[selector]=styles[selector];}return accumulator;},{});var rootStyles=Object.keys(rootRules).length?(0,_cssRuleSetToString["default"])(scopeSelector||'',rootRules,userAgent):'';return rootStyles+Object.keys(styles).reduce(function(accumulator,selector){var rules=styles[selector];if(selector==='mediaQueries'){accumulator+=_this._buildMediaQueryString(rules);}else if(_typeof(styles[selector])==='object'){var completeSelector=scopeSelector?selector.split(',').map(function(part){return scopeSelector+' '+part.trim();}).join(','):selector;accumulator+=(0,_cssRuleSetToString["default"])(completeSelector,rules,userAgent);}return accumulator;},'');}},{key:"_buildMediaQueryString",value:function _buildMediaQueryString(stylesByMediaQuery){var _this2=this;var mediaQueryString='';Object.keys(stylesByMediaQuery).forEach(function(query){mediaQueryString+='@media '+query+'{'+_this2._buildStyles(stylesByMediaQuery[query])+'}';});return mediaQueryString;}},{key:"render",value:function render(){if(!this.props.rules){return null;}var styles=this._buildStyles(this.props.rules);return _react["default"].createElement("style",{dangerouslySetInnerHTML:{__html:styles}});}}]);return Style;}(_react.PureComponent);Style.propTypes={radiumConfig:_propTypes["default"].object,rules:_propTypes["default"].object,scopeSelector:_propTypes["default"].string};Style.defaultProps={scopeSelector:''};var _default=(0,_context.withRadiumContexts)(Style);exports["default"]=_default;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _react=_interopRequireWildcard(__webpack_require__(10));var _enhancer=_interopRequireDefault(__webpack_require__(90));var _styleKeeper=_interopRequireDefault(__webpack_require__(157));var _styleSheet=_interopRequireDefault(__webpack_require__(161));var _context=__webpack_require__(158);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}}newObj["default"]=obj;return newObj;}}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function getStyleKeeper(configProp,configContext){var userAgent=configProp&&configProp.userAgent||configContext&&configContext.userAgent;return new _styleKeeper["default"](userAgent);}var StyleRootInner=(0,_enhancer["default"])(function(_ref){var children=_ref.children,otherProps=_objectWithoutProperties(_ref,["children"]);return _react["default"].createElement("div",otherProps,children,_react["default"].createElement(_styleSheet["default"],null));});var StyleRoot=function StyleRoot(props){/* eslint-disable no-unused-vars */// Pass down all props except config to the rendered div.
	/* eslint-enable no-unused-vars */var radiumConfig=props.radiumConfig;var configContext=(0,_react.useContext)(_context.RadiumConfigContext);var styleKeeper=(0,_react.useRef)(getStyleKeeper(radiumConfig,configContext));return _react["default"].createElement(_context.StyleKeeperContext.Provider,{value:styleKeeper.current},_react["default"].createElement(StyleRootInner,props));};var _default=StyleRoot;exports["default"]=_default;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _react=_interopRequireWildcard(__webpack_require__(10));var _styleKeeper=_interopRequireDefault(__webpack_require__(157));var _context=__webpack_require__(158);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}}newObj["default"]=obj;return newObj;}}function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};}return _typeof(obj);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}var StyleSheet=/*#__PURE__*/function(_Component){_inherits(StyleSheet,_Component);// eslint-disable-next-line react/sort-comp
	function StyleSheet(){var _this;_classCallCheck(this,StyleSheet);_this=_possibleConstructorReturn(this,_getPrototypeOf(StyleSheet).apply(this,arguments));_this.styleKeeper=void 0;_this._subscription=void 0;_this._root=void 0;_this._css=void 0;_this._onChange=function(){var nextCSS=_this.styleKeeper.getCSS();if(nextCSS!==_this._css){if(_this._root){_this._root.innerHTML=nextCSS;}else{throw new Error('No root style object found, even after StyleSheet mount.');}_this._css=nextCSS;}};if(!_this.props.styleKeeperContext){throw new Error('StyleRoot is required to use StyleSheet');}_this.styleKeeper=_this.props.styleKeeperContext;_this._css=_this.styleKeeper.getCSS();return _this;}_createClass(StyleSheet,[{key:"componentDidMount",value:function componentDidMount(){this._subscription=this.styleKeeper.subscribe(this._onChange);this._onChange();}},{key:"shouldComponentUpdate",value:function shouldComponentUpdate(){return false;}},{key:"componentWillUnmount",value:function componentWillUnmount(){if(this._subscription){this._subscription.remove();}}},{key:"render",value:function render(){var _this2=this;return _react["default"].createElement("style",{dangerouslySetInnerHTML:{__html:this._css},ref:function ref(c){_this2._root=c;}});}}]);return StyleSheet;}(_react.Component);var _default=(0,_context.withRadiumContexts)(StyleSheet);exports["default"]=_default;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=keyframes;var _cssRuleSetToString=_interopRequireDefault(__webpack_require__(95));var _hash=_interopRequireDefault(__webpack_require__(145));var _prefixer=__webpack_require__(97);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function keyframes(keyframeRules,name){return{__radiumKeyframes:true,__process:function __process(userAgent){var keyframesPrefixed=(0,_prefixer.getPrefixedKeyframes)(userAgent);var rules=Object.keys(keyframeRules).map(function(percentage){return(0,_cssRuleSetToString["default"])(percentage,keyframeRules[percentage],userAgent);}).join('\n');var animationName=(name?name+'-':'')+'radium-animation-'+(0,_hash["default"])(rules);var css='@'+keyframesPrefixed+' '+animationName+' {\n'+rules+'\n}\n';return{css:css,animationName:animationName};}};}

/***/ }),
/* 163 */
/***/ (function(module, exports) {

	'use strict';module.exports={wrapper:{margin:'5px',display:'flex',width:'95%'},hide:{display:'none'},select:{width:'70%',margin:'5px',borderRadius:'5px',':focus':{backgroundColor:'lightpink'}},readOnly:{backgroundColor:'#F3EFEF'},label:{width:'30%',margin:'5px'},button:{width:'5%'}};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var radium = __webpack_require__(88);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(165);
	var getTextValue = __webpack_require__(76);

	var Select = function (_React$PureComponent) {
	    _inherits(Select, _React$PureComponent);

	    function Select(props) {
	        _classCallCheck(this, Select);

	        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

	        _this.state = {
	            data: props.data,
	            value: 0 /* здесь по значению ИД */
	            , readOnly: props.readOnly,
	            disabled: props.disabled,
	            fieldValue: props.value /*здесь по значени поля collId */
	            , btnDelete: props.btnDelete /* если истину, то рисуем рядом кнопку для очистки значения*/
	        };

	        _this.onChange = _this.onChange.bind(_this);
	        _this.btnDelClick = _this.btnDelClick.bind(_this);
	        _this.getValueById = _this.getValueById.bind(_this);

	        return _this;
	    }

	    // will update state if props changed


	    _createClass(Select, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.props.collId && this.props.collId !== 'id') {
	                // ищем ИД по значению поля
	                this.getValueById(this.state.data, this.props.collId, this.state.value);
	            }
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var fieldValue = e.target.value;

	            if (fieldValue === '') {
	                fieldValue = null;
	            }

	            if (this.props.collId && this.props.collId !== 'id') {
	                // найдем по ид значение поля в collId
	                fieldValue = this.getValueById(this.state.data, this.props.collId, fieldValue);
	            }
	            // сохраним ид как value
	            this.setState({ fieldValue: fieldValue, value: e.target.value });

	            if (this.props.onChange) {
	                // смотрим к чему привязан селект и отдаим его наверх
	                this.props.onChange(this.props.name, fieldValue); // в случае если задан обработчик на верхнем уровне, отдадим обработку туда
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var selectStyle = Object.assign({}, styles.select, this.props.style ? this.props.style : {});

	            return React.createElement(
	                'div',
	                { style: styles.wrapper, ref: 'wrapper' },
	                this.props.title ? React.createElement(
	                    'label',
	                    { ref: 'label', style: styles.label,
	                        htmlFor: this.props.name },
	                    getTextValue(this.props.title)
	                ) : null,
	                React.createElement(
	                    'select',
	                    { ref: 'select',
	                        style: selectStyle,
	                        value: this.state.value || 0,
	                        id: this.props.name,
	                        disabled: this.state.readOnly,
	                        size: this.props.size ? this.props.size : 0,
	                        onChange: this.onChange },
	                    this.prepaireDataOptions()
	                )
	            );
	        }

	        /**
	         *
	         * @param collId
	         * @param rowId
	         * @returns {*}
	         */

	    }, {
	        key: 'getValueById',
	        value: function getValueById(data, collId, rowId) {
	            // вернет значения поля по выбранному ИД
	            var fieldValue = 0;
	            var foundRow = data.find(function (row) {
	                return row[collId] === rowId;
	            });
	            if (foundRow) {
	                fieldValue = foundRow[collId];
	            }

	            return fieldValue;
	        }
	    }, {
	        key: 'btnDelClick',
	        value: function btnDelClick(event) {
	            // по вызову кнопку удалить, обнуляет значение
	            this.setState({ value: '' });
	            this.onChange(event);
	        }

	        /**
	         * Подготовит датасет для селекта
	         * @returns {*}
	         */

	    }, {
	        key: 'prepaireDataOptions',
	        value: function prepaireDataOptions() {
	            var _this2 = this;

	            var options = void 0;
	            var data = this.state.data.length ? this.state.data : [];

	            if (data.length) {
	                if (!this.state.value && !data.find(function (row) {
	                    return row.id === 0;
	                })) {
	                    // will add empty row
	                    data.unshift({ id: 0, kood: '', nimetus: '' });
	                }

	                options = data.map(function (item, index) {
	                    var key = 'option-' + index;
	                    var separator = ' ';
	                    var rowValue = (item.kood ? item.kood : '') + ' ' + separator + ' ' + (item.name ? item.name : item.nimetus);
	                    return React.createElement(
	                        'option',
	                        { value: item[_this2.props.collId], key: key,
	                            ref: key },
	                        ' ',
	                        rowValue,
	                        ' '
	                    );
	                }, this);
	            } else {
	                options = React.createElement('option', { value: 0, key: Math.random() });
	            }
	            return options;
	        }

	        /**
	         * установит фокус на элементы
	         */

	    }, {
	        key: 'focus',
	        value: function focus() {
	            this.refs['select'].focus();
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value || nextProps.readOnly !== prevState.readOnly || JSON.stringify(nextProps.data) !== JSON.stringify(prevState.data)) {
	                return { value: nextProps.value, readOnly: nextProps.readOnly, data: nextProps.data };
	            } else return null;
	        }
	    }]);

	    return Select;
	}(React.PureComponent);

	Select.propTypes = {
	    data: PropTypes.arrayOf(PropTypes.shape({
	        id: PropTypes.number,
	        kood: PropTypes.string,
	        nimetus: PropTypes.string
	    })),
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    btnDelete: PropTypes.bool,
	    collId: PropTypes.string.isRequired,
	    title: PropTypes.string,
	    placeholder: PropTypes.string,
	    defaultValue: PropTypes.string
	};

	Select.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    btnDelete: false,
	    collId: 'id',
	    title: '',
	    defaultValue: '',
	    data: [{ id: 0, kood: '', nimetus: '' }]
	};

	module.exports = radium(Select);

/***/ }),
/* 165 */
/***/ (function(module, exports) {

	'use strict';module.exports={wrapper:{margin:'5px',display:'flex',width:'95%'},input:{width:'70%',margin:'5px 2px',borderRadius:'5px'},a:{width:'70%',marginLeft:'5px',borderRadius:'5px'},hide:{display:'none'},select:{width:'70%',height:'30px',margin:'5px 2px',borderRadius:'5px',':focus':{backgroundColor:'lightpink'},opacity:1},readOnly:{backgroundColor:'#F3EFEF'},label:{width:'30%',margin:'5px'},button:{width:'5%'}};

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'account';

	var ButtonAccount = function (_React$PureComponent) {
	    _inherits(ButtonAccount, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonAccount(props) {
	        _classCallCheck(this, ButtonAccount);

	        var _this = _possibleConstructorReturn(this, (ButtonAccount.__proto__ || Object.getPrototypeOf(ButtonAccount)).call(this, props));

	        _this.state = {
	            value: props.value
	        };

	        return _this;
	    }

	    // will update state if props changed


	    _createClass(ButtonAccount, [{
	        key: 'handleClick',
	        value: function handleClick() {
	            return this.props.onClick('account');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var value = this.state.value;
	            var buttonStyle = Object.assign({}, styles.button, styles.buttonAccount);
	            return React.createElement(
	                Button,
	                {
	                    value: value,
	                    ref: 'btnAccount',
	                    style: buttonStyle,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value) {
	                return { value: nextProps.value };
	            } else return null;
	        }
	    }]);

	    return ButtonAccount;
	}(React.PureComponent);

	ButtonAccount.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    value: PropTypes.string
	};

	ButtonAccount.defaultProps = {
	    disabled: false,
	    show: true,
	    value: ''
	};

	module.exports = ButtonAccount;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(168);
	var DocContext = __webpack_require__(1);
	var fetchData = __webpack_require__(41);
	var LogUp = __webpack_require__(169);

	var ModalPage = __webpack_require__(171);

	var Login = function (_React$PureComponent) {
	    _inherits(Login, _React$PureComponent);

	    function Login(props) {
	        _classCallCheck(this, Login);

	        var _this = _possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).call(this, props));

	        _this.state = {
	            show: _this.props.show,
	            lastId: 0,
	            login: _this.props.login,
	            password: _this.props.password,
	            isShowLogUp: false
	        };
	        _this.onClickHandled = _this.onClickHandled.bind(_this);
	        _this.fecthData = _this.fecthData.bind(_this);
	        _this.onChangeInput = _this.onChangeInput.bind(_this);
	        _this.logUp = _this.logUp.bind(_this);
	        return _this;
	    }

	    _createClass(Login, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(
	                ModalPage,
	                _defineProperty({ show: this.state.show,
	                    modalPageBtnClick: this.onClickHandled
	                }, 'modalPageBtnClick', this.onClickHandled),
	                this.state.isShowLogUp ? React.createElement(LogUp, {
	                    show: true,
	                    modalPageBtnClick: this.logUp
	                }) : null,
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(
	                        'button',
	                        {
	                            style: styles.logUpButton,
	                            onClick: this.logUp
	                        },
	                        'New user'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(
	                        'div',
	                        { style: styles.docColumn },
	                        React.createElement(
	                            'label',
	                            null,
	                            'Login: '
	                        ),
	                        React.createElement('input', { type: 'text',
	                            id: 'login',
	                            name: 'login',
	                            onChange: this.onChangeInput,
	                            value: this.state.login || ''
	                        }),
	                        React.createElement(
	                            'label',
	                            null,
	                            'Password: '
	                        ),
	                        React.createElement('input', { type: 'text',
	                            id: 'password',
	                            name: 'password',
	                            onChange: this.onChangeInput,
	                            value: this.state.password || ''
	                        })
	                    )
	                )
	            );
	        }

	        /**
	         * вернет компонет для регистрации пользователем
	         */

	    }, {
	        key: 'logUp',
	        value: function logUp(event) {
	            console.log('logUp', event);
	            this.setState({ isShowLogUp: !this.state.isShowLogUp });
	        }
	    }, {
	        key: 'onChangeInput',
	        value: function onChangeInput(e) {
	            var fieldValue = e.target.value;
	            var fieldName = e.target.name;

	            switch (fieldName) {
	                case 'login':
	                    this.setState({ login: fieldValue });
	                    break;
	                case 'password':
	                    this.setState({ password: fieldValue });
	                    break;
	            }
	        }
	    }, {
	        key: 'onClickHandled',
	        value: function onClickHandled(event) {
	            if (event == 'Ok') {
	                // отправляем на сервер на контроль
	                this.fecthData();
	            }
	            this.setState({ show: !this.state.show });
	        }
	    }, {
	        key: 'fecthData',
	        value: function fecthData() {
	            var _this2 = this;

	            var data = new FormData();
	            data.append('login', this.state.login);
	            data.append('password', this.state.password);
	            return new Promise(function (resolved, rejected) {
	                fetchData.fetchDataPost('/main/login', data).then(function (response) {
	                    // error handling
	                    if (response.status === 200) {
	                        // load store with data

	                        // сохраним пользователя в сторе
	                        var store = _this2.props.store;
	                        store.dispatch({ type: 'user', user: response.data.data[0] });

	                        if (_this2.props.loginClickEvent) {
	                            _this2.props.loginClickEvent(response.data.data.length && response.data.data[0].id ? true : false);
	                        }
	                        resolved(response.data);
	                    } else {
	                        console.error('status !== 200');
	                        return rejected();
	                    }
	                }).catch(function (error) {
	                    console.error('fetch error', error);
	                    // Something happened in setting up the request that triggered an Error
	                    return rejected(error);
	                });
	            });
	        }
	    }]);

	    return Login;
	}(React.PureComponent);

	Login.propTypes = {
	    disabled: PropTypes.bool,
	    show: PropTypes.bool
	};

	Login.defaultProps = {
	    disabled: false.valueOf(),
	    pages: []
	};

	module.exports = Login;

/***/ }),
/* 168 */
/***/ (function(module, exports) {

	'use strict';module.exports={page:{/*
	                border:'1px solid black',
	        */borderRadius:'3px'},icons:{add:'images/icons/add.png',edit:'images/icons/edit.png',delete:'images/icons/delete.png',filter:'images/icons/filter.png',print:'images/icons/print.png',ok:'images/icons/ok.png',cancel:'images/icons/cancel.png'},pictureFrame:{width:'50%'},picture:{objectFit:'contain',width:'50%'},docRow:{display:'flex',flexDirection:'row'/*
	                border: '1px solid blue'
	        */},docColumn:{display:'flex',flexDirection:'column'},logUpButton:{wiodth:'auto'}};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(170);
	var DocContext = __webpack_require__(1);
	var fetchData = __webpack_require__(41);

	var ModalPage = __webpack_require__(171);

	var Logup = function (_React$PureComponent) {
	    _inherits(Logup, _React$PureComponent);

	    function Logup(props) {
	        _classCallCheck(this, Logup);

	        var _this = _possibleConstructorReturn(this, (Logup.__proto__ || Object.getPrototypeOf(Logup)).call(this, props));

	        _this.state = {
	            show: _this.props.show,
	            lastId: 0,
	            login: _this.props.login,
	            email: _this.props.email,
	            name: _this.props.name,
	            address: _this.props.address,
	            info: null
	        };
	        _this.onClickHandled = _this.onClickHandled.bind(_this);
	        _this.fecthData = _this.fecthData.bind(_this);
	        _this.onChangeInput = _this.onChangeInput.bind(_this);
	        return _this;
	    }

	    _createClass(Logup, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(
	                ModalPage,
	                _defineProperty({ show: this.state.show,
	                    modalPageBtnClick: this.onClickHandled
	                }, 'modalPageBtnClick', this.onClickHandled),
	                this.state.info ? React.createElement(
	                    'div',
	                    { style: styles.info },
	                    this.state.info
	                ) : null,
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(
	                        'div',
	                        { style: styles.docColumn },
	                        React.createElement(
	                            'label',
	                            null,
	                            'Login: '
	                        ),
	                        React.createElement('input', { type: 'text',
	                            id: 'login',
	                            name: 'login',
	                            onChange: this.onChangeInput,
	                            value: this.state.login || ''
	                        }),
	                        React.createElement(
	                            'label',
	                            null,
	                            'email: '
	                        ),
	                        React.createElement('input', { type: 'text',
	                            id: 'email',
	                            name: 'email',
	                            onChange: this.onChangeInput,
	                            value: this.state.email || ''
	                        }),
	                        React.createElement(
	                            'label',
	                            null,
	                            'Name: '
	                        ),
	                        React.createElement('input', { type: 'text',
	                            id: 'name',
	                            name: 'name',
	                            onChange: this.onChangeInput,
	                            value: this.state.name || ''
	                        }),
	                        React.createElement(
	                            'label',
	                            null,
	                            'Address: '
	                        ),
	                        React.createElement('input', { type: 'text',
	                            id: 'address',
	                            name: 'address',
	                            onChange: this.onChangeInput,
	                            value: this.state.address || ''
	                        })
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'onChangeInput',
	        value: function onChangeInput(e) {
	            var fieldValue = e.target.value;
	            var fieldName = e.target.name;

	            switch (fieldName) {
	                case 'login':
	                    this.setState({ login: fieldValue });
	                    break;
	                case 'email':
	                    this.setState({ email: fieldValue });
	                    break;
	                case 'name':
	                    this.setState({ name: fieldValue });
	                    break;
	                case 'address':
	                    this.setState({ address: fieldValue });
	                    break;
	            }
	        }
	    }, {
	        key: 'onClickHandled',
	        value: function onClickHandled(event) {
	            console.log('logup btn click');
	            if (event == 'Ok') {
	                // отправляем на сервер на контроль
	                this.fecthData();
	            } else {
	                this.setState({ wshow: !this.state.sho });
	            }
	        }
	    }, {
	        key: 'fecthData',
	        value: function fecthData() {
	            var _this2 = this;

	            var params = {
	                login: this.state.login,
	                email: this.state.email,
	                name: this.state.name,
	                address: this.state.address
	            };
	            var data = new FormData();
	            data.append('login', this.state.login);
	            data.append('email', this.state.email);
	            data.append('name', this.state.name);
	            data.append('address', this.state.address);
	            return new Promise(function (resolved, rejected) {
	                fetchData.fetchDataPost('/main/logup', params).then(function (response) {
	                    console.log('response', response);
	                    // error handling
	                    if (response.status === 200) {
	                        resolved(true);
	                    } else {
	                        console.error('status !== 200');
	                        rejected(false);
	                    }
	                }).then(function () {
	                    _this2.setState({ info: 'Successfully saved' }, function () {
	                        setTimeout(function () {
	                            _this2.setState({ show: false });
	                        }, 5000);
	                        console.log('wait ends, show ...');
	                    });
	                }).catch(function (error) {
	                    console.error('fetch error', error ? error : '');
	                    // Something happened in setting up the request that triggered an Error
	                    _this2.setStatus({ info: 'Error in saving data' });
	                });
	            });
	        }
	    }]);

	    return Logup;
	}(React.PureComponent);

	Logup.propTypes = {
	    disabled: PropTypes.bool,
	    show: PropTypes.bool
	};

	Logup.defaultProps = {
	    disabled: false.valueOf()
	};

	module.exports = Logup;

/***/ }),
/* 170 */
/***/ (function(module, exports) {

	'use strict';module.exports={page:{/*
	        border:'1px solid black',
	*/borderRadius:'3px'},icons:{add:'images/icons/add.png',edit:'images/icons/edit.png',delete:'images/icons/delete.png',filter:'images/icons/filter.png',print:'images/icons/print.png',ok:'images/icons/ok.png',cancel:'images/icons/cancel.png'},pictureFrame:{width:'50%'},picture:{objectFit:'contain',width:'50%'},docRow:{display:'flex',flexDirection:'row'/*
	                border: '1px solid blue'
	        */},docColumn:{display:'flex',flexDirection:'column'},info:{backgroundColor:'yellow'}};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    Button = __webpack_require__(75),
	    buttonStyles = __webpack_require__(74),
	    styles = __webpack_require__(172);
	var getTextValue = __webpack_require__(76);

	var ModalPage = function (_React$PureComponent) {
	    _inherits(ModalPage, _React$PureComponent);

	    function ModalPage(props) {
	        _classCallCheck(this, ModalPage);

	        var _this = _possibleConstructorReturn(this, (ModalPage.__proto__ || Object.getPrototypeOf(ModalPage)).call(this, props));

	        _this.handleBtnClick.bind(_this);
	        _this.changeVisibilityModalPage.bind(_this);
	        _this.state = {
	            show: _this.props.show
	        };
	        _this.onKeyUp = _this.onKeyUp.bind(_this);
	        return _this;
	    }

	    _createClass(ModalPage, [{
	        key: 'changeVisibilityModalPage',
	        value: function changeVisibilityModalPage() {
	            this.setState({ show: !this.state.show });
	        }

	        // will update state if props changed

	    }, {
	        key: 'handleBtnClick',
	        value: function handleBtnClick(btnEvent) {
	            // закрываем окно и если передан обработчик, отдаем туда данные
	            console.log('Modal btn clicked', btnEvent);
	            this.changeVisibilityModalPage();
	            if (this.props.modalPageBtnClick) {
	                var show = this.props.modalPageBtnClick(btnEvent);
	            }
	        }

	        /**
	         * перехватит сыбтия нажатия кнопки и вызовет дефолтные методы
	         * @param e
	         */

	    }, {
	        key: 'onKeyUp',
	        value: function onKeyUp(e) {
	            switch (e.key) {
	                case 'Enter':
	                    if (this.refs['btnOk']) {
	                        this.handleBtnClick('Ok');
	                    }
	                    break;
	                case 'Escape':
	                    if (this.refs['btnCancel']) {
	                        this.handleBtnClick('Cancel');
	                    }
	                    break;
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            // если передан атрибу modalObjects = ['btnOk','btnCancel']
	            var hideBtnOk = this.props.modalObjects.indexOf('btnOk') == -1 ? false : true,
	                // управление кнопкой Ок
	            hideBtnCancel = this.props.modalObjects.indexOf('btnCancel') == -1 ? false : true,
	                // управление кнопкой Cancel
	            displayModal = this.state.show ? 'flex' : 'none',
	                pagePosition = this.props.position,
	                containerStyle = Object.assign({}, styles.container, { display: displayModal }, { justifyContent: pagePosition }),
	                buttonOkStyle = Object.assign({}, styles.modalPageButtons, styles.defaultButton);

	            var Style = Object.assign({}, styles.modalPage, this.props.styles ? this.props.styles : {});
	            return React.createElement(
	                'div',
	                {
	                    ref: 'container',
	                    style: containerStyle,
	                    onKeyUp: this.onKeyUp
	                },
	                React.createElement(
	                    'div',
	                    { style: Style, ref: 'modalPageContainer' },
	                    React.createElement(
	                        'div',
	                        { style: styles.header, ref: 'modalPageHeader' },
	                        React.createElement(
	                            'span',
	                            { ref: 'headerName', style: styles.headerName },
	                            ' ',
	                            getTextValue(this.props.modalPageName),
	                            ' '
	                        ),
	                        React.createElement(Button, { style: styles.buttonClose, ref: 'btnClose',
	                            onClick: this.changeVisibilityModalPage.bind(this), value: 'x' })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.modalPageContent, ref: 'modalPageContent' },
	                        this.props.children
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.modalFooter, ref: 'modalPageButtons' },
	                        hideBtnOk ? React.createElement(
	                            Button,
	                            {
	                                ref: 'btnOk',
	                                value: 'Ok',
	                                style: buttonOkStyle,
	                                width: 'width' in styles.modalPageButtons ? styles.modalPageButtons.width : null,
	                                height: 'height' in styles.modalPageButtons ? styles.modalPageButtons.height : null,
	                                onClick: this.handleBtnClick.bind(this, 'Ok'),
	                                id: 'btnOk' },
	                            React.createElement('img', { ref: 'image', src: buttonStyles.icons['ok'] })
	                        ) : null,
	                        React.createElement('div', { style: styles.buttonsSeparator }),
	                        hideBtnCancel ? React.createElement(
	                            Button,
	                            {
	                                ref: 'btnCancel',
	                                value: 'Cancel',
	                                style: styles.modalPageButtons,
	                                width: 'width' in styles.modalPageButtons ? styles.modalPageButtons.width : null,
	                                height: 'height' in styles.modalPageButtons ? styles.modalPageButtons.height : null,
	                                onClick: this.handleBtnClick.bind(this, 'Cancel'),
	                                className: 'modalPageButtons',
	                                id: 'btnCancel' },
	                            React.createElement('img', { ref: 'image', src: buttonStyles.icons['cancel'] })
	                        ) : null
	                    )
	                )
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.show !== prevState.show) {
	                return { show: nextProps.show };
	            } else return null;
	        }
	    }]);

	    return ModalPage;
	}(React.PureComponent);

	/*
	ModalPage.propTypes = {
	    modalPageName: PropTypes.string.isRequired,
	    modalPageBtnClick: PropTypes.func.isRequired,
	    show: PropTypes.bool,
	    position: PropTypes.oneOf(['center', 'flex-start', 'flex-end']),
	}
	*/

	ModalPage.defaultProps = {
	    modalPageName: 'defaulName',
	    modalObjects: ['btnOk', 'btnCancel'],
	    position: 'center',
	    show: false
	};

	module.exports = ModalPage;

/***/ }),
/* 172 */
/***/ (function(module, exports) {

	'use strict';module.exports={container:{position:'fixed',top:'0',left:0,right:0,bottom:0,backgroundColor:'rgba(255, 255, 255, 0.25)',display:'flex',justifyContent:'center'},modalPage:{position:'relative',border:'1px solid black',background:'white',margin:'8px',borderRadius:'4px',outline:'none',display:'flex',flexDirection:'column',alignSelf:'center',height:'auto',maxHeight:'95%',overflow:'auto',zIndex:1},modalPageContent:{padding:'10px',margin:'10px',width:'auto'},header:{height:'30px',width:'100%',border:'1px solid darkgray',background:'lightgray',display:'flex',justifyContent:'space-between'},headerName:{color:'white',alignSelf:'center',marginLeft:'10px'},modalFooter:{alignSelf:'center',display:'flex',marginBotton:'10px'},modalPageButtons:{height:'30px',width:'100px',marginBottom:'10px'},buttonsSeparator:{width:'10px'},buttonClose:{borderRadius:'50%',backgroundColor:'lightgray',border:'none',fontWeight:'900',margin:'0px 0px'},left:{right:'auto',left:'0'},right:{left:'auto',right:'0'},defaultButton:{backgroundColor:'lightBlue'}};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var radium = __webpack_require__(88);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(174);
	var getTextValue = __webpack_require__(76);

	var Input = function (_React$PureComponent) {
	    _inherits(Input, _React$PureComponent);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.state = {
	            value: ''
	        };
	        _this.onChange = _this.onChange.bind(_this);
	        _this.btnClickHandler = _this.btnClickHandler.bind(_this);
	        return _this;
	    }

	    _createClass(Input, [{
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({ value: e.target.value });
	        }
	    }, {
	        key: 'render',
	        value: function render() {

	            return React.createElement(
	                'div',
	                { style: styles.searchText.wrapper },
	                React.createElement('input', { type: 'text',
	                    style: styles.searchText.text,
	                    onChange: this.onChange,
	                    value: this.state.value || ''
	                }),
	                React.createElement(
	                    'button',
	                    {
	                        style: styles.searchText.button,
	                        onClick: this.btnClickHandler,
	                        onDoubleClick: this.btnClickHandler
	                    },
	                    React.createElement('img', { ref: 'image', src: styles.icons['filter'] })
	                )
	            );
	        }
	    }, {
	        key: 'btnClickHandler',
	        value: function btnClickHandler() {
	            console.log('fliter btn clicked', this.state.value);
	            var store = this.props.store;
	            store.dispatch({ type: 'filter', filter: this.state.value });
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            this.setState({ value: e.target.value });
	        }

	        /**
	         * установит фокус на элементы
	         */

	    }, {
	        key: 'focus',
	        value: function focus() {
	            this.refs['input'].focus();
	        }
	    }]);

	    return Input;
	}(React.PureComponent);

	Input.propTypes = {
	    name: PropTypes.string.isRequired,
	    value: PropTypes.string,
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    valid: PropTypes.bool,
	    placeholder: PropTypes.string,
	    pattern: PropTypes.string,
	    title: PropTypes.string
	};

	Input.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    value: '',
	    title: ''
	};

	module.exports = radium(Input);

/***/ }),
/* 174 */
/***/ (function(module, exports) {

	'use strict';module.exports={grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'},th:{border:'1px solid black',display:'table-cell',paddingLeft:'5px'},tdButtons:{display:'inline-flex'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}},img:{objectFit:'contain',width:'50%'},picture:{objectFit:'contain',width:'500px',height:'500px'},frame:{width:'50%'},docRow:{display:'flex',flexDirection:'row',margin:'5px'},label:{width:'30%'},pageFrame:{display:'inline-flex',border:'1px solid black'},filterFrame:{width:'30%',//        border: '1px solid grey',
	margin:'5px'},componentFrame:{width:'70%',//        border: '1px solid red',
	margin:'5px'},docColumn:{display:'flex',flexDirection:'column',width:'50%'},button:{background:'white',margin:'5px 2px',borderRadius:'5px',height:'30px',display:'flex',border:'1px solid gray'},toolbarBtnImage:{width:'auto',height:'auto'},button_edit:{icon:'images/icons/edit.png'},button_accept:{icon:'images/icons/ok.png'},button_delete:{icon:'images/icons/delete.png'},icons:{add:'/images/icons/add.png',edit:'/images/icons/edit.png',delete:'/images/icons/delete.png',filter:'/images/icons/filter.png',print:'/images/icons/print.png',ok:'/images/icons/ok.png',cancel:'/images/icons/cancel.png',save:'/images/icons/save.png',execute:'/images/icons/execute.png',start:'/images/icons/start.png',login:'/images/icons/login.png',account:'/images/icons/account.png',rekv:'/images/icons/rekv.png',info:'/images/icons/info.png',settings:'/images/icons/settings.png',mail:'/images/icons/mail.png',select:'/images/icons/select.png',refresh:'/images/icons/refresh.png',attachment:'/images/icons/attachment.png',sale:'/images/icons/sale.png'},searchText:{wrapper:{height:'30px',borderRadius:'5px',border:'1px solid grey',margin:'5px 2px'},text:{border:0,padding:0,outline:0},button:{height:'30px',border:0,padding:0,outline:0}},btnEdit:{width:'30px',marginLeft:'2px'},btnSale:{width:'30px',marginLeft:'2px'},select:{height:'30px',width:'100px',borderRadius:'5px'},filterBlock:{marginTop:'5px'//        display: 'inline-block',
	},filterLabel:{display:'inline-block',width:'30%'}};

/***/ }),
/* 175 */
/***/ (function(module, exports) {

	'use strict';module.exports={container:{margin:'10px 0'},selectStyle:{margin:'5px',display:'flex',width:'95%',borderRadius:'5px'},pageName:{fontWeight:'bold',fontSize:'x-large'},selectKeel:{margin:'5px',display:'flex',width:'100px',height:'30px',borderRadius:'5px'}};

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	'use strict';module.exports={LEPING:{select:['kasutaja','vaatleja','peakasutaja','raama','juht','kasutaja'],add:['kasutaja','raama','juht'],edit:['kasutaja','raama','juht'],delete:['kasutaja','raama','juht'],arved:['raama']},USERID:{select:['admin','juht'],add:['admin'],edit:['admin'],delete:['admin']},REKL:{select:['juht'],add:['juht'],edit:['juht'],delete:['juht']},REKV:{select:['admin','juht','raama'],add:['admin'],edit:['admin','juht','raama'],delete:['admin']},ARV:{select:['kasutaja','arvestaja','vaatleja','peakasutaja','raama'],add:['kasutaja','peakasutaja','raama'],edit:['kasutaja','peakasutaja','raama'],delete:['kasutaja','peakasutaja','raama']},SMK:{select:['kasutaja','arvestaja','vaatleja','peakasutaja','raama'],add:['kasutaja','peakasutaja','raama'],edit:['kasutaja','peakasutaja','raama'],delete:['kasutaja','peakasutaja','raama'],import:['admin','raama']},PANK_VV:{edit:['kasutaja','peakasutaja'],delete:['kasutaja','peakasutaja']},VMK:{select:['kasutaja','arvestaja','vaatleja','peakasutaja','raama'],add:['kasutaja','peakasutaja','raama'],edit:['kasutaja','peakasutaja','raama'],delete:['kasutaja','peakasutaja','raama']},VORDER:{select:['kasutaja','arvestaja','vaatleja','peakasutaja'],add:['kasutaja','peakasutaja'],edit:['kasutaja','peakasutaja'],delete:['kasutaja','peakasutaja']},SORDER:{select:['kasutaja','arvestaja','vaatleja','peakasutaja'],add:['kasutaja','peakasutaja'],edit:['kasutaja','peakasutaja'],delete:['kasutaja','peakasutaja']},TUNNUS:{select:['raama'],add:['raama'],edit:['raama'],delete:['raama']},PROJECT:{select:['raama'],add:['raama'],edit:['raama'],delete:['raama']},KONTOD:{select:['raama'],add:['raama'],edit:['raama'],delete:['raama']},//nomenclature
	NOMENCLATURE:{select:['kasutaja','vaatleja','peakasutaja','raama','juht'],add:['raama','juht'],edit:['raama','juht'],delete:['raama','juht'],import:['admin']},ASUTUSED:{select:['kasutaja','vaatleja','peakasutaja','raama','juht'],add:['kasutaja','arvestaja','raama','juht'],edit:['kasutaja','arvestaja','raama','juht'],delete:['kasutaja','raama','juht']},OBJEKT:{select:['kasutaja','vaatleja','peakasutaja','raama','juht','kasutaja'],add:['kasutaja','raama','juht','kasutaja'],edit:['kasutaja','raama','juht','kasutaja'],delete:['kasutaja','raama','juht','kasutaja']},ARTIKKEL:{select:['kasutaja','vaatleja','peakasutaja'],add:['kasutaja'],edit:['kasutaja'],delete:['kasutaja']},ALLIKAS:{select:['kasutaja','vaatleja','peakasutaja'],add:['kasutaja'],edit:['kasutaja'],delete:['kasutaja']},TEGEV:{select:['kasutaja','vaatleja','peakasutaja'],add:['kasutaja'],edit:['kasutaja'],delete:['kasutaja']},//asutuse_liik
	TAOTLUS_LOGIN:{select:['admin'],edit:['admin'],delete:['admin']},TEATIS:{select:['arvestaja'],add:['arvestaja'],edit:['arvestaja'],delete:['arvestaja']},KAIBEANDMIK:{select:['raama']},KONTONDMIK:{select:['raama']}};

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	'use strict';// will check rights for action
	var checkRights=function checkRights(userRoles,docRights,action){var is_accepted=false;if(docRights&&docRights[action]){docRights[action].forEach(function(role){// raamatupidajad
	is_accepted=userRoles&&userRoles.is_raama&&role=='raama'?true:is_accepted;if(!is_accepted){is_accepted=userRoles&&userRoles.is_juht&&role=='juht'?true:is_accepted;}// adminid
	if(!is_accepted){is_accepted=userRoles&&userRoles.is_admin&&role=='admin'?true:is_accepted;}});}else{// если нет ограничений
	is_accepted=true;}return is_accepted;};module.exports=checkRights;

/***/ }),
/* 178 */,
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var React = __webpack_require__(10);
	var _fetchData = __webpack_require__(41);
	var DocContext = __webpack_require__(1);
	var Menu = __webpack_require__(40);
	var DocRights = __webpack_require__(176);
	var checkRights = __webpack_require__(177);
	var createEmptyFilterData = __webpack_require__(3);
	var prepareSqlWhereFromFilter = __webpack_require__(180);
	var Const = __webpack_require__(86);
	var Liimit = Const.RECORDS_LIMIT;
	var prepareData = __webpack_require__(181);
	var getTextValue = __webpack_require__(76);

	var DataGrid = __webpack_require__(183),
	    StartMenu = __webpack_require__(82),
	    BtnAdd = __webpack_require__(78),
	    BtnEdit = __webpack_require__(80),
	    BtnDelete = __webpack_require__(184),
	    BtnPrint = __webpack_require__(204),
	    BtnPdf = __webpack_require__(205),
	    BtnFilter = __webpack_require__(206),
	    BtnSelect = __webpack_require__(207),
	    BtnEmail = __webpack_require__(208),
	    BtnRefresh = __webpack_require__(209),
	    ToolbarContainer = __webpack_require__(71),
	    GridFilter = __webpack_require__(210),
	    ModalPage = __webpack_require__(171),
	    InputText = __webpack_require__(212),
	    ModalPageDelete = __webpack_require__(185),
	    ModalReport = __webpack_require__(214),
	    styles = __webpack_require__(218);

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Documents = function (_React$Component) {
	    _inherits(Documents, _React$Component);

	    function Documents(props) {
	        _classCallCheck(this, Documents);

	        var _this = _possibleConstructorReturn(this, (Documents.__proto__ || Object.getPrototypeOf(Documents)).call(this, props));

	        _this.gridData = [];
	        _this.gridConfig = DocContext.gridConfig ? DocContext.gridConfig[props.docTypeId] : [];
	        _this.filterData = DocContext.filter && DocContext.filter[props.docTypeId] ? DocContext.filter[props.docTypeId] : [];

	        if (props.initData && props.initData.result) {
	            _this.gridData = props.initData.result.data || [];
	            _this.gridConfig = !_this.gridConfig.length ? props.initData.gridConfig : _this.gridConfig;
	            _this.subtotals = props.initData.subtotals || [];
	        } else if (props.initData && props.initData.gridData) {

	            _this.gridData = props.initData.gridData || [];
	            _this.gridConfig = !_this.gridConfig.length ? props.initData.gridConfig : _this.gridConfig;
	            _this.subtotals = [];
	        }

	        _this.docTypeId = props.docTypeId;

	        _this.state = {
	            value: _this.gridData.length ? _this.gridData[0].id : 0,
	            sortBy: {},
	            sqlWhere: '',
	            getFilter: false,
	            isDelete: false,
	            hasStartMenuVisible: false, // will show start menu
	            startMenuValue: 'parentid',
	            warning: '', // строка извещений
	            warningType: '',
	            limit: Liimit, // default limit for query,
	            isEmptyFilter: false, // если true то обнулит данные фильтра при перегрузке данных
	            showSelectFields: false, //will open or close column in grid to select rows
	            isReport: false, // показ модального окна при проверке использования
	            txtReport: [] // данные использования
	        };

	        _this._bind('btnAddClick', 'clickHandler', 'btnEditClick', 'dblClickHandler', 'headerClickHandler', 'headerClickHandler', 'btnFilterClick', 'btnSelectClick', 'btnRefreshClick', 'modalPageBtnClick', 'modalDeletePageBtnClick', 'filterDataHandler', 'renderFilterToolbar', 'btnStartClickHanler', 'renderStartMenu', 'startMenuClickHandler', 'fetchData', 'handleInputChange', 'btnEmailClick', 'setRegisterName', 'modalReportePageBtnClick');

	        return _this;
	    }

	    /**
	     * пишем делаем запрос по итогу загрузки
	     */


	    _createClass(Documents, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this2 = this;

	            if (!DocContext.filter) {
	                DocContext.filter = {};
	            }

	            // will save current docTypeid
	            DocContext['docTypeId'] = this.docTypeId;

	            var reload = false; // if reload === true then it will call to reload

	            if (this.props.initData && this.props.initData.docTypeId && this.props.initData.docTypeId.toUpperCase() !== this.docTypeId.toUpperCase()) {
	                reload = true;
	            }

	            // дефолтные значения
	            if (!DocContext.filter[this.docTypeId] && DocContext.gridConfig[this.docTypeId]) {
	                var config = DocContext.gridConfig[this.docTypeId];
	                var filter = prepareData(config, this.docTypeId);

	                // ищем дефолтные значения
	                config.forEach(function (row) {
	                    if (row.default) {
	                        var value = void 0;
	                        try {
	                            value = eval(row.default);
	                        } catch (e) {
	                            console.error('No default value');
	                        }

	                        if (value) {
	                            // ищем и присваеваем значение
	                            var idx = filter.findIndex(function (data) {
	                                return data.id == row.id;
	                            });
	                            if (idx) {
	                                filter[idx].value = value;
	                            }
	                        }
	                    }
	                });

	                if (filter && filter.length) {
	                    DocContext.filter[this.docTypeId] = filter;
	                }
	            }

	            // проверим сохраненный фильтр для этого типа
	            if (DocContext.filter[this.docTypeId] && DocContext.filter[this.docTypeId].length > 0) {
	                this.filterData = DocContext.filter[this.docTypeId];
	                reload = true;
	            }

	            if (reload || !this.props.initData || !this.gridData || !this.gridData.length || !this.props.initData.docTypeId) {

	                // проверим на фильтр
	                var sqlWhere = prepareSqlWhereFromFilter(this.filterData, this.docTypeId);

	                //делаем запрос на получение данных
	                this.setState({ sqlWhere: sqlWhere }, function () {
	                    _this2.fetchData('selectDocs');
	                });
	            }

	            // if lastDocId available, will point it as selected
	            if (DocContext[this.docTypeId.toLowerCase()]) {
	                var docId = DocContext[this.docTypeId.toLowerCase()];
	                this.setState({ value: docId });
	            }

	            // задать имя реристра на страницу
	            this.setRegisterName();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _style = Object.assign({}, styles, this.props.style ? this.props.style : {});
	            var warningStyle = this.state.warningType && styles[this.state.warningType] ? styles[this.state.warningType] : null;
	            var btnParams = {
	                btnStart: {
	                    show: true
	                },
	                btnLogin: {
	                    show: true,
	                    disabled: false
	                },
	                btnAccount: {
	                    show: true,
	                    disabled: false
	                }

	            };
	            return React.createElement(
	                'div',
	                { style: _style.doc },
	                React.createElement(Menu, { params: btnParams,
	                    ref: 'menu',
	                    history: this.props.history,
	                    rekvId: DocContext.userData ? DocContext.userData.asutusId : 0,
	                    module: this.props.module }),
	                React.createElement(
	                    'div',
	                    { style: _style.docRow },
	                    this.props.render(this)
	                ),
	                this.renderFilterToolbar(),
	                this.renderDocToolBar(),
	                this.state.warning ? React.createElement(
	                    ToolbarContainer,
	                    { ref: 'toolbar-container' },
	                    React.createElement(
	                        'div',
	                        { style: warningStyle },
	                        React.createElement(
	                            'span',
	                            null,
	                            this.state.warning
	                        )
	                    )
	                ) : null,
	                React.createElement(
	                    'div',
	                    { style: _style.gridContainer },
	                    React.createElement(DataGrid, { ref: 'dataGrid',
	                        style: _style.grid.mainTable,
	                        gridData: this.gridData,
	                        gridColumns: this.gridConfig,
	                        subtotals: this.subtotals,
	                        onClick: this.clickHandler,
	                        onDblClick: this.dblClickHandler,
	                        onHeaderClick: this.headerClickHandler,
	                        custom_styling: this.props.custom_styling ? this.props.custom_styling : null,
	                        isSelect: this.state.showSelectFields,
	                        value: this.state.value }),
	                    this.state.getFilter ? React.createElement(
	                        ModalPage,
	                        { ref: 'modalpageFilter',
	                            modalPageBtnClick: this.modalPageBtnClick,
	                            modalPageName: 'Filter',
	                            show: true },
	                        React.createElement(GridFilter, { ref: 'gridFilter',
	                            focusElement: this.gridConfig[1].id,
	                            docTypeId: this.docTypeId,
	                            handler: this.filterDataHandler,
	                            gridConfig: this.gridConfig,
	                            data: this.filterData })
	                    ) : null,
	                    React.createElement(ModalPageDelete, {
	                        show: this.state.isDelete,
	                        modalPageBtnClick: this.modalDeletePageBtnClick.bind(this) }),
	                    React.createElement(ModalReport, {
	                        show: this.state.isReport,
	                        report: this.state.txtReport,
	                        modalPageBtnClick: this.modalReportePageBtnClick })
	                )
	            );
	        }

	        //поиск названия регистра

	    }, {
	        key: 'setRegisterName',
	        value: function setRegisterName() {
	            var _this3 = this;

	            var docType = DocContext['menu'].find(function (row) {
	                return row.kood === _this3.props.docTypeId;
	            });
	            if (docType) {
	                DocContext.pageName = docType.name;
	            }
	        }

	        // обработчик изменений в инпут (лимит)

	    }, {
	        key: 'handleInputChange',
	        value: function handleInputChange(name, value) {
	            this.setState({ limit: !value || value > Liimit ? Liimit : value });
	        }

	        /**
	         * вызовер подгрузку данных с параметром сортировки
	         * @param sortBy
	         */

	    }, {
	        key: 'headerClickHandler',
	        value: function headerClickHandler(sortBy) {
	            var _this4 = this;

	            if (sortBy[0].column == 'select') {
	                return;
	            }
	            // ихем тип поля, если указан
	            var row = this.gridConfig.find(function (row) {
	                return row.id == sortBy[0].column;
	            });
	            if (row && row.type) {
	                Object.assign(sortBy[0], { type: row.type });
	            }
	            this.setState({ sortBy: sortBy }, function () {
	                return _this4.fetchData('selectDocs');
	            });
	        }

	        /**
	         * Обработчик двойного клика
	         */

	    }, {
	        key: 'dblClickHandler',
	        value: function dblClickHandler() {
	            this.btnEditClick();
	        }

	        /**
	         * обработчик для грида
	         * @param action
	         * @param docId
	         * @param idx
	         */

	    }, {
	        key: 'clickHandler',
	        value: function clickHandler(action, docId, idx) {
	            if (docId && typeof docId === 'number') {
	                this.setState({ value: docId });
	            }
	        }

	        /**
	         * откроет модальное окно с полями для фильтрации
	         */

	    }, {
	        key: 'btnFilterClick',
	        value: function btnFilterClick() {
	            if (!this.filterData.length) {
	                this.filterData = createEmptyFilterData(this.gridConfig, this.filterData, this.docTypeId);
	            }
	            this.setState({ getFilter: true });
	        }

	        /**
	         * выполнит запрос и обновит данные грида
	         */

	    }, {
	        key: 'btnRefreshClick',
	        value: function btnRefreshClick() {
	            var _this5 = this;

	            this.fetchData('selectDocs').then(function () {
	                _this5.setState({ warning: '' + getTextValue('Edukalt'), warningType: 'ok' });
	            });
	        }

	        /**
	         * Обработчик для кнопки Add
	         */

	    }, {
	        key: 'btnAddClick',
	        value: function btnAddClick() {
	            if (this.props.btnAddClick) {
	                // кастомный обработчик события
	                this.props.btnAddClick(this.state.value);
	            } else {
	                return this.props.history.push({
	                    pathname: '/' + this.props.module + '/' + this.docTypeId + '/0',
	                    state: { module: this.props.module }
	                });
	            }
	        }

	        /**
	         * Обработчик для кнопки Edit
	         */

	    }, {
	        key: 'btnEditClick',
	        value: function btnEditClick() {
	            if (this.props.btnEditClick) {
	                // кастомный обработчик события
	                this.props.btnEditClick(this.state.value);
	            } else {
	                return this.props.history.push({
	                    pathname: '/' + this.props.module + '/' + this.docTypeId + '/' + this.state.value,
	                    state: { module: this.props.module }
	                });
	            }
	        }

	        /**
	         * Обработчик для кнопки Delete
	         */

	    }, {
	        key: 'btnDeleteClick',
	        value: function btnDeleteClick() {
	            this.setState({ isDelete: true });
	        }

	        /**
	         * Обработчик для кнопки Print
	         */

	    }, {
	        key: 'btnPrintClick',
	        value: function btnPrintClick() {
	            var sqlWhere = this.state.sqlWhere;
	            var url = void 0;
	            var params = encodeURIComponent('' + sqlWhere);
	            var filterData = this.filterData.filter(function (row) {
	                return !!row.value;
	            });
	            var filter = encodeURIComponent('' + JSON.stringify(filterData));
	            if (this.filterData.length) {
	                url = '/print/' + this.docTypeId + '/' + DocContext.userData.uuid + '/' + filter;
	            } else {
	                url = '/print/' + this.docTypeId + '/' + DocContext.userData.uuid + '/0';
	            }
	            window.open(url + '/' + params);
	        }

	        /**
	         * Обработчик для кнопки Pdf
	         */

	    }, {
	        key: 'btnPdfClick',
	        value: function btnPdfClick() {
	            var sqlWhere = this.state.sqlWhere;
	            var url = void 0;
	            var params = encodeURIComponent('' + sqlWhere);
	            var filter = encodeURIComponent('' + JSON.stringify(this.filterData));

	            if (this.filterData.length) {
	                url = '/pdf/' + this.docTypeId + '/' + DocContext.userData.uuid + '/' + filter;
	            } else {
	                url = '/pdf/' + this.docTypeId + '/' + DocContext.userData.uuid + '/0';
	            }
	            window.open(url + '/' + params);
	        }

	        /**
	         * обработчик для кнопки фильтрации
	         * @param btnEvent
	         */

	    }, {
	        key: 'modalPageBtnClick',
	        value: function modalPageBtnClick(btnEvent) {
	            var _this6 = this;

	            var filterString = ''; // строка фильтра

	            if (btnEvent === 'Ok') {
	                // собираем данные

	                filterString = prepareSqlWhereFromFilter(this.filterData, this.docTypeId);
	            } else {
	                // чистим строку фильтрации и массив фильтров
	                filterString = '';
	                this.filterData.forEach(function (row) {
	                    row.value = null;
	                    if (row.start) {
	                        row.start = null;
	                    }
	                    if (row.end) {
	                        row.end = null;
	                    }
	                });
	            }

	            this.setState({
	                getFilter: false,
	                sqlWhere: filterString,
	                isEmptyFilter: !filterString
	            }, function () {
	                return _this6.fetchData('selectDocs');
	            });
	        }

	        /**
	         * обработчик для кнопки фильтрации
	         * @param btnEvent
	         */

	    }, {
	        key: 'modalDeletePageBtnClick',
	        value: function modalDeletePageBtnClick(btnEvent) {
	            var _this7 = this;

	            this.setState({ isDelete: false });
	            if (btnEvent === 'Ok') {
	                // delete document
	                this.setState({ warning: getTextValue('Töötan') + '...', warningType: 'notValid' });
	                this.fetchData('delete').catch(function (err) {
	                    console.error('error in fetch-> ', err);
	                }).then(function (data) {
	                    if (data.error_message) {
	                        console.error('data.error_message', data);
	                        _this7.setState({ warning: getTextValue('Tekkis viga') + ': ' + data.error_message, warningType: 'error' });
	                        if (data.status && data.status == 401) {
	                            setTimeout(function () {
	                                document.location = '/login';
	                            }, 1000);
	                        }
	                    } else {
	                        _this7.fetchData('selectDocs');
	                        // если есть в кеше , то чиcтим
	                        var lib = _this7.docTypeId.toLowerCase();
	                        if (DocContext.libs[lib] && DocContext.libs[lib].length > 0) {
	                            DocContext.libs[lib] = [];
	                        }
	                    }
	                });
	            }
	        }

	        /**
	         * обработчик для фильтра грида
	         * @param data
	         */

	    }, {
	        key: 'filterDataHandler',
	        value: function filterDataHandler(data) {
	            this.filterData = data;

	            // создади обьект = держатель состояния фильтра
	            if (!DocContext.filter) {
	                DocContext.filter = {};
	            }

	            if (!DocContext.filter[this.docTypeId]) {
	                DocContext.filter[this.docTypeId] = [];
	            }

	            if (data && data.length > 0 && this.props.history.location) {
	                DocContext.filter[this.docTypeId] = this.filterData;
	            }
	        }

	        /**
	         * Обработчик для кнопки старт меню
	         */

	    }, {
	        key: 'btnStartClickHanler',
	        value: function btnStartClickHanler() {
	            this.setState({ hasStartMenuVisible: true });
	        }

	        /**
	         * получит от стартого меню данные, спрячет меню
	         */

	    }, {
	        key: 'startMenuClickHandler',
	        value: function startMenuClickHandler(value) {
	            this.setState({ hasStartMenuVisible: false });
	            return this.props.history.push({
	                pathname: '/' + this.props.module + '/' + value,
	                state: { module: this.props.module }
	            });
	        }
	    }, {
	        key: 'btnSelectClick',
	        value: function btnSelectClick() {
	            this.setState({ showSelectFields: !this.state.showSelectFields });
	        }

	        /**
	         * Вернет компонет с данными строки фильтрации
	         * @returns {XML}
	         */

	    }, {
	        key: 'renderFilterToolbar',
	        value: function renderFilterToolbar() {
	            var filter = this.getFilterString();
	            var component = void 0;

	            if (filter) {
	                component = React.createElement(
	                    ToolbarContainer,
	                    { ref: 'filterToolbarContainer', position: 'left' },
	                    React.createElement(
	                        'span',
	                        null,
	                        ' Filter: ',
	                        this.getFilterString()
	                    )
	                );
	            }

	            return component;
	        }

	        /**
	         * преобразует данные фильтра в строку чтоб показать ее
	         * @returns {string}
	         */

	    }, {
	        key: 'getFilterString',
	        value: function getFilterString() {
	            var string = '';

	            this.filterData.map(function (row) {
	                var kas_sisaldab = row.sqlNo && row.sqlNo == 0 ? '<>' : '=';
	                if (row.start) {
	                    string = string + ' ' + row.name + '>=' + row.start + ',' + row.name + '<=' + row.end + ';';
	                } else {
	                    if (row.value) {
	                        string = string + row.name + ':' + kas_sisaldab + ' ' + row.value + '; ';
	                    }
	                }
	            });
	            return string;
	        }

	        /**
	         * Вернет компонет - панель инструментов документа
	         * @returns {XML}
	         */

	    }, {
	        key: 'renderDocToolBar',
	        value: function renderDocToolBar() {
	            var filter = this.getFilterString();

	            var toolbarParams = this.prepareParamsForToolbar(); //параметры для кнопок управления, взависимости от активной строки
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { ref: 'input-limit',
	                        title: 'Limiit:',
	                        name: 'limit',
	                        style: styles.limit,
	                        value: getTextValue(String(this.state.limit) || Liimit, 2),
	                        readOnly: false,
	                        onChange: this.handleInputChange }),
	                    React.createElement(
	                        ToolbarContainer,
	                        { ref: 'toolbarContainer' },
	                        React.createElement(BtnAdd, { onClick: this.btnAddClick,
	                            show: toolbarParams['btnAdd'].show,
	                            disable: toolbarParams['btnAdd'].disabled }),
	                        React.createElement(BtnEdit, { onClick: this.btnEditClick,
	                            value: 'Muuda',
	                            show: toolbarParams['btnEdit'].show,
	                            disable: toolbarParams['btnEdit'].disabled }),
	                        React.createElement(BtnDelete, { onClick: this.btnDeleteClick.bind(this),
	                            show: toolbarParams['btnDelete'].show,
	                            disable: toolbarParams['btnDelete'].disabled }),
	                        React.createElement(BtnPrint, { onClick: this.btnPrintClick.bind(this),
	                            show: toolbarParams['btnPrint'].show,
	                            value: 'Trükk',
	                            disable: toolbarParams['btnPrint'].disabled }),
	                        React.createElement(BtnPdf, { onClick: this.btnPdfClick.bind(this),
	                            show: toolbarParams['btnPdf'].show,
	                            value: 'PDF',
	                            disable: toolbarParams['btnPdf'].disabled }),
	                        React.createElement(BtnEmail, { onClick: this.btnEmailClick.bind(this),
	                            show: toolbarParams['btnEmail'].show,
	                            value: 'Email',
	                            docTypeId: this.docTypeId,
	                            disable: toolbarParams['btnEmail'].disabled }),
	                        React.createElement(BtnFilter, { onClick: this.btnFilterClick }),
	                        React.createElement(BtnRefresh, { onClick: this.btnRefreshClick }),
	                        React.createElement(BtnSelect, {
	                            show: toolbarParams['btnSelect'].show,
	                            value: 'Valida',
	                            onClick: this.btnSelectClick,
	                            ref: 'grid-button-select' })
	                    )
	                )
	            );
	        }

	        /**
	         * Откроет стартовое меню
	         * @returns {*}
	         */

	    }, {
	        key: 'renderStartMenu',
	        value: function renderStartMenu() {
	            var component = void 0;
	            if (this.state.hasStartMenuVisible) {
	                component = React.createElement(StartMenu, { ref: 'startMenu',
	                    value: this.state.startMenuValue,
	                    clickHandler: this.startMenuClickHandler });
	            }
	            return component;
	        }

	        /**
	         *  читаем данные со стора, формируем параметры для кнопок управления, и туда их отдаем
	         * @returns {{btnAdd: {show: boolean, disabled: boolean}, btnEdit: {show: boolean, disabled: boolean}, btnDelete: {show: boolean, disabled: boolean}, btnPrint: {show: boolean, disabled: boolean}}}
	         */

	    }, {
	        key: 'prepareParamsForToolbar',
	        value: function prepareParamsForToolbar() {
	            var docRights = DocRights[this.docTypeId] ? DocRights[this.docTypeId] : {};
	            var userRoles = DocContext.userData ? DocContext.userData.roles : [];
	            var toolbarProps = {
	                add: this.props.toolbarProps ? !!this.props.toolbarProps.add : true,
	                edit: this.props.toolbarProps ? !!this.props.toolbarProps.edit : true,
	                delete: this.props.toolbarProps ? !!this.props.toolbarProps.delete : true,
	                print: this.props.toolbarProps ? !!this.props.toolbarProps.print : true,
	                pdf: this.props.toolbarProps ? !!this.props.toolbarProps.pdf : true,
	                email: this.props.toolbarProps ? !!this.props.toolbarProps.email : true,
	                start: this.props.toolbarProps ? !!this.props.toolbarProps.start : true
	            };

	            return Object.assign({
	                btnAdd: {
	                    show: toolbarProps['add'],
	                    disabled: false
	                },
	                btnEdit: {
	                    show: toolbarProps['edit'],
	                    disabled: !this.state.value
	                },
	                btnDelete: {
	                    show: toolbarProps['delete'],
	                    disabled: !this.state.value
	                },
	                btnPrint: {
	                    show: toolbarProps['print'],
	                    disabled: false
	                },
	                btnPdf: {
	                    show: toolbarProps['pdf'],
	                    disabled: false
	                },
	                btnEmail: {
	                    show: toolbarProps['email'],
	                    disabled: false
	                },
	                btnStart: {
	                    show: toolbarProps['start']
	                },
	                btnLogin: {
	                    show: true,
	                    disabled: false
	                },
	                btnAccount: {
	                    show: true,
	                    disabled: false
	                },
	                btnSelect: {
	                    show: this.gridConfig && this.gridConfig.length ? !!this.gridConfig.find(function (row) {
	                        return row.id === 'select';
	                    }) : false,
	                    disabled: false
	                }
	            }, this.props.toolbarParams ? this.props.toolbarParams : {});
	        }

	        /**
	         * Выполнит запросы
	         */

	    }, {
	        key: 'fetchData',
	        value: function fetchData(method, additionalData) {
	            var _this8 = this;

	            var URL = '/newApi';
	            var sqlWhere = this.state.sqlWhere;
	            switch (method) {
	                case 'delete':
	                    URL = '/newApi/delete';
	                    break;
	                case 'print':
	                    URL = '/print/' + this.docTypeId;
	                    break;
	                case 'selectDocs':
	                    URL = '/newApi';
	                    break;
	                default:
	                    URL = '/' + method;
	            }
	            // ставим статус
	            this.setState({ warning: 'Töötan...', warningType: 'notValid' });

	            var params = {
	                parameter: this.docTypeId, // параметры
	                docTypeId: this.docTypeId, // для согласования с документом
	                sortBy: this.state.sortBy, // сортировка
	                limit: this.state.limit, // row limit in query
	                docId: this.state.value,
	                method: method,
	                sqlWhere: sqlWhere, // динамический фильтр грида
	                filterData: this.filterData,
	                lastDocId: null,
	                module: this.props.module,
	                userId: DocContext.userData.userId,
	                uuid: DocContext.userData.uuid,
	                data: additionalData
	            };

	            return new Promise(function (resolved, rejected) {

	                _fetchData['fetchDataPost'](URL, params).then(function (response) {
	                    if (response.status && response.status === 401) {
	                        document.location = '/login';
	                    }

	                    // error handling
	                    if (response.status !== 200) {
	                        _this8.setState({ warning: '' + response.error_message, warningType: 'error' });

	                        return {
	                            result: null,
	                            status: response.status,
	                            error_message: 'error ' + (response.data && response.data.error_message ? 'response.data.error_message' : response.error_message)
	                        };
	                    }

	                    if (method === 'selectDocs') {
	                        _this8.gridData = response.data.result.data;

	                        if (response.data) {

	                            // если задан триггер, вызовем его
	                            if (_this8.props.trigger_select) {
	                                _this8.props.trigger_select(_this8);
	                            }
	                        }
	                        _this8.setState({ warning: '' + getTextValue('Edukalt'), warningType: 'ok' });
	                    } else if (method == 'delete' && response.data && response.data.result && response.data.result.error_code) {
	                        // проверка перед удалением
	                        var error = getTextValue('Tekkis viga: kustutamine eba\xF5nnestus');
	                        _this8.setState({
	                            warning: error,
	                            warningType: 'error',
	                            txtReport: response.data,
	                            isReport: !!(response.data.data && response.data.data.length)
	                        });
	                        return rejected(error);
	                    }
	                    resolved(response.data);
	                }).catch(function (error) {
	                    console.error('fetch error', error);
	                    // Something happened in setting up the request that triggered an Error
	                    _this8.setState({
	                        warning: getTextValue('Tekkis viga') + ' ' + error,
	                        warningType: 'error'
	                    });
	                    return rejected(error);
	                });
	            });
	        }

	        /**
	         * обработчик для кнопки отправки почты
	         */

	    }, {
	        key: 'btnEmailClick',
	        value: function btnEmailClick() {
	            // сохраним параметры для формирования вложения в контексте
	            DocContext['email-params'] = {
	                docId: this.state.docId,
	                docTypeId: this.docTypeId,
	                queryType: 'sqlWhere', // ид - документ
	                sqlWhere: this.state.sqlWhere,
	                filterData: this.filterData
	            };

	            this.props.history.push('/' + this.props.module + '/e-mail/0');
	        }

	        /**
	         * уберет окно с отчетом
	         */

	    }, {
	        key: 'modalReportePageBtnClick',
	        value: function modalReportePageBtnClick(event) {
	            var isReport = event && event == 'Ok' ? false : true;
	            this.setState({ isReport: isReport });
	        }
	    }, {
	        key: '_bind',
	        value: function _bind() {
	            var _this9 = this;

	            for (var _len = arguments.length, methods = Array(_len), _key = 0; _key < _len; _key++) {
	                methods[_key] = arguments[_key];
	            }

	            methods.forEach(function (method) {
	                return _this9[method] = _this9[method].bind(_this9);
	            });
	        }
	    }]);

	    return Documents;
	}(React.Component);

	Documents.propTypes = {
	    initData: PropTypes.shape({
	        result: PropTypes.object,
	        gridConfig: PropTypes.array
	    }),
	    docTypeId: PropTypes.string.isRequired
	};

	Documents.defaultProps = {
	    module: 'raama'
	};

	module.exports = Documents;

/***/ }),
/* 180 */
/***/ (function(module, exports) {

	'use strict';/**
	 * создаст строку - фильтр из параметров
	 * @param filterData
	 * @param docTypeId
	 * @returns {string}
	 */var prepareSqlWhereFromFilter=function prepareSqlWhereFromFilter(filterData,docTypeId){var filterString='';// строка фильтра
	var kas_sisaldab='';filterData.forEach(function(row){if(row.value){console.log('filterString',filterString);filterString=filterString+(filterString.length>0?" and ":" where ");kas_sisaldab=row.sqlNo&&Number(row.sqlNo)==0?'NOT':'';switch(row.type){case'text':var prepairedParameter=row.value.split(',').map(function(str){return'\''+str.trim()+'\'';}).join(',');// если параметры раздедены, то множественный параметр
	if(row.value.match(/,/)){filterString=filterString+' '+row.id+' '+kas_sisaldab+'  in ('+prepairedParameter+')';}else{if(docTypeId=='KUU_TAABEL'){filterString=filterString+'  upper('+row.id+') '+kas_sisaldab+' like upper(\'%'+row.value.trim()+'%\')';}else{// обработка некорректной кодировки
	filterString=filterString+'  upper('+row.id+') '+kas_sisaldab+' like upper(\'%'+row.value.trim()+'%\')';}}break;case'string':filterString=filterString+'  upper('+row.id+') '+kas_sisaldab+' like upper(\'%'+row.value.trim()+'%\')';break;case'date':if('start'in row&&row.start){filterString=filterString+' format_date('+row.id+'::text)  >=  format_date(\''+row.start+'\'::text) and (format_date('+row.id+'::text)  <=  format_date(\''+row.end+'\'::text) or '+row.end+' is null)';}else if(row.id=='valid'){// для этого поля ставим фильтр на контект действует до
	filterString=filterString+' (format_date('+row.id+'::text)  >=  format_date(\''+row.value+'\'::text) or '+row.id+' is null)';}else{filterString=filterString+row.id+(kas_sisaldab&&kas_sisaldab=='NOT'?"<>":"=")+"'"+row.value+"'";}break;case'number':if('start'in row&&row.start){filterString=filterString+' '+row.id+'::numeric  >=  '+row.start+' and ('+row.id+'::numeric  <=  '+row.end+' or '+row.end+' is null)';}else{filterString=filterString+row.id+"::numeric  "+(kas_sisaldab&&kas_sisaldab=='NOT'?"<>":"=")+row.value;}break;case'integer':if('start'in row&&row.start){filterString=filterString+' '+row.id+'  >=  '+row.start+' and ('+row.id+'  <=  '+row.end+' or '+row.end+' is null)';}else{filterString=filterString+row.id+"::integer  "+(kas_sisaldab&&kas_sisaldab=='NOT'?"<>":"=")+row.value;}break;}}});return filterString;};module.exports=prepareSqlWhereFromFilter;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var DocContext=__webpack_require__(1);var getDefaulDate=__webpack_require__(182);/**
	 * вернет дефолтные значения взависимости от типа
	 * @param row
	 */var getDefaultValues=function getDefaultValues(row){var returnValue={start:null,end:null,value:null};if(!!row.interval&&!row.start&&!row.end){switch(row.type){case'date':returnValue.start=getDefaulDate().start;returnValue.end=getDefaulDate().end;break;default:returnValue.start=null;returnValue.end;}}return returnValue;};function prepareFilterData(gridConfig,docTypeId){var data=[];if(!DocContext.filter){DocContext.filter={};}if(!DocContext.filter[docTypeId]){DocContext.filter[docTypeId]=[];}// проверим, если фильтр уже сохранен, то вернем уже ранее сохжанный массив
	if(docTypeId&&DocContext.filter[docTypeId].length>0){data=DocContext.filter[docTypeId];}else{gridConfig.map(function(row){var field={id:row.id,value:row.value?row.value:row.default?row.default:null,name:row.id,sqlNo:1,type:row.type?row.type:'text',interval:!!row.interval,start:row.value?row.value:null,end:row.value?row.value:null};if(row.interval){field[row.id+'_start']=row.value?row.value:null;field[row.id+'_end']=row.value?row.value:null;}data.push(field);});}return data;}module.exports=prepareFilterData;

/***/ }),
/* 182 */
/***/ (function(module, exports) {

	'use strict';/**
	 * добавит ноль в месяц или день по необходимости
	 * @param value
	 * @returns {string}
	 */var getTwoDigits=function getTwoDigits(value){return value<10?'0'+value:value;};/**
	 * вернет дефолтные значения взависимости от типа
	 * @param row
	 */var getDefaultDate=function getDefaultDate(period){var returnValue={start:null,end:null,value:null};Date.prototype.daysInMonth=function(){return 33-new Date(this.getFullYear(),this.getMonth(),33).getDate();};var today=new Date();var currentMonth=getTwoDigits(today.getMonth()+1);var currentYear=getTwoDigits(today.getFullYear());var startMonth=currentYear+'-'+currentMonth+'-01';var daysInMonth=getTwoDigits(today.daysInMonth());var finishMonth=currentYear+'-'+currentMonth+'-'+daysInMonth;switch(period){case'KUU':returnValue.start=startMonth;returnValue.end=finishMonth;break;case'AASTA':returnValue.start=currentYear+'-01-01';returnValue.end=currentYear+'-12-31';default:returnValue.start=null;returnValue.end=null;}return returnValue;};module.exports=getDefaultDate;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    ToolbarContainer = __webpack_require__(71),
	    GridButtonAdd = __webpack_require__(78),
	    GridButtonEdit = __webpack_require__(80),
	    GridButtonDelete = __webpack_require__(184),
	    ModalPageDelete = __webpack_require__(185),
	    InputCheckBox = __webpack_require__(187),
	    keydown = __webpack_require__(189);

	//const    KEYS = [38, 40]; // мониторим только стрелки вверх и внизх
	var styles = __webpack_require__(203);
	var getTextValue = __webpack_require__(76);

	var isExists = function isExists(object, prop) {
	    var result = false;
	    if (object && prop in object) {
	        result = true;
	    }
	    return result;
	};

	//@keydown @todo

	var DataGrid = function (_React$Component) {
	    _inherits(DataGrid, _React$Component);

	    function DataGrid(props) {
	        _classCallCheck(this, DataGrid);

	        var _this = _possibleConstructorReturn(this, (DataGrid.__proto__ || Object.getPrototypeOf(DataGrid)).call(this, props));

	        _this.state = {
	            activeRow: 0,
	            activeColumn: '',
	            isDelete: false,
	            sort: {
	                name: null,
	                direction: null
	            },
	            value: _this.props.value ? _this.props.value : 0,
	            gridData: props.gridData,
	            subtotals: props.subtotals ? props.subtotals : [],
	            isSelect: _this.props.isSelect
	        };

	        _this.handleGridHeaderClick = _this.handleGridHeaderClick.bind(_this);
	        _this.handleCellDblClick = _this.handleCellDblClick.bind(_this);
	        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
	        _this.prepareTableRow = _this.prepareTableRow.bind(_this);
	        _this.handleGridBtnClick = _this.handleGridBtnClick.bind(_this);
	        _this.getGridRowIndexById = _this.getGridRowIndexById.bind(_this);
	        _this.prepareTableFooter = _this.prepareTableFooter.bind(_this);
	        _this.getSum = _this.getSum.bind(_this);
	        _this.grid = [];

	        return _this;
	    }

	    // will update state if props changed


	    _createClass(DataGrid, [{
	        key: 'render',
	        value: function render() {
	            var tableHeaderStyle = Object.assign({}, styles.headerTable ? styles.headerTable : {}, this.props.style);
	            var tableMainStyle = Object.assign({}, styles.mainTable ? styles.mainTable : {}, this.props.style);

	            var toolbarParams = Object.assign({

	                btnAdd: {
	                    show: true,
	                    disabled: false
	                },
	                btnEdit: {
	                    show: true,
	                    disabled: false
	                },
	                btnDelete: {
	                    show: true,
	                    disabled: false
	                },
	                btnPrint: {
	                    show: true,
	                    disabled: false
	                }
	            }, this.props.toolbarParams ? this.props.toolbarParams : {});

	            // примем в зачет переданные стили
	            styles = _extends({}, styles, this.props.style);
	            return React.createElement(
	                'div',
	                { style: styles.main },
	                this.props.showToolBar ? React.createElement(
	                    ToolbarContainer,
	                    {
	                        ref: 'grid-toolbar-container',
	                        position: 'left' },
	                    React.createElement(GridButtonAdd, {
	                        show: toolbarParams.btnAdd.show,
	                        onClick: this.handleGridBtnClick,
	                        value: 'Lisa',
	                        ref: 'grid-button-add' }),
	                    React.createElement(GridButtonEdit, {
	                        show: toolbarParams.btnEdit.show,
	                        onClick: this.handleGridBtnClick,
	                        value: 'Muuda',
	                        ref: 'grid-button-edit' }),
	                    React.createElement(GridButtonDelete, {
	                        show: toolbarParams.btnDelete.show,
	                        onClick: this.handleGridBtnClick,
	                        value: 'Kustuta',
	                        ref: 'grid-button-delete' })
	                ) : null,
	                React.createElement(
	                    'div',
	                    { style: styles.header },
	                    React.createElement(
	                        'table',
	                        { ref: 'dataGridTable', style: tableHeaderStyle, onKeyPress: this.handleKeyDown },
	                        React.createElement(
	                            'tbody',
	                            null,
	                            React.createElement(
	                                'tr',
	                                null,
	                                this.prepareTableHeader()
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.wrapper },
	                    React.createElement(
	                        'table',
	                        { style: tableMainStyle, tabIndex: '1', onKeyDown: this.handleKeyDown,
	                            onKeyPress: this.handleKeyDown },
	                        React.createElement(
	                            'tbody',
	                            null,
	                            React.createElement(
	                                'tr',
	                                { style: { visibility: 'collapse' } },
	                                this.prepareTableHeader(true)
	                            ),
	                            this.prepareTableRow(),
	                            this.props.subtotals && this.props.subtotals.length ? React.createElement(
	                                'tr',
	                                null,
	                                this.prepareTableFooter()
	                            ) : null
	                        )
	                    )
	                ),
	                React.createElement(ModalPageDelete, {
	                    show: this.state.isDelete,
	                    modalPageBtnClick: this.modalDeletePageBtnClick.bind(this) })
	            );
	        } // render


	    }, {
	        key: 'modalDeletePageBtnClick',
	        value: function modalDeletePageBtnClick(btnEvent) {
	            //close modalpage
	            this.setState({ isDelete: false });

	            if (btnEvent === 'Ok' && this.props.handleGridBtnClick) {
	                this.props.handleGridBtnClick('delete', this.state.activeRow, this.state.gridData.length ? this.state.gridData[this.state.activeRow].id : 0, this.props.docTypeId ? this.props.docTypeId : '');
	            }
	        }

	        /**
	         * обработчика сабытия клика по кнопки панели грида
	         * @param btnName
	         * @returns {*}
	         */

	    }, {
	        key: 'handleGridBtnClick',
	        value: function handleGridBtnClick(btnName) {

	            var activeRow = this.state.activeRow;

	            var id = this.state.gridData.length ? this.state.gridData[activeRow].id : 0;

	            var docTypeId = this.props.docTypeId ? this.props.docTypeId : '';

	            if ((btnName === 'delete' || btnName === 'Kustuta') && !this.state.isDelete) {
	                // should open modal page and ask confirmation
	                return this.setState({ isDelete: true });
	            }

	            if (this.props.handleGridBtnClick) {
	                this.props.handleGridBtnClick(btnName, activeRow, id, docTypeId);
	            }
	        }

	        /**
	         * ищем индех в массиве данных
	         */

	    }, {
	        key: 'getGridRowIndexById',
	        value: function getGridRowIndexById() {
	            var _this2 = this;

	            var index = 0;

	            if (this.state.value) {
	                index = this.state.gridData.findIndex(function (row) {
	                    return row.id === _this2.state.value;
	                });
	                index = index > -1 ? index : 0;
	            }
	            return index;
	        }

	        /**
	         * отрабатывает событи клика по ячейке
	         * @param idx
	         */

	    }, {
	        key: 'handleCellClick',
	        value: function handleCellClick(idx, columnId) {
	            var _this3 = this;

	            if (this.state.gridData.length > 0) {
	                var action = this.props.onChangeAction || null;

	                var docId = this.state.gridData[idx].id;
	                var gridData = _extends({}, this.state.gridData);

	                // Отработает клик по колонки селект для выбора массива записей
	                if (this.state.isSelect && columnId == 'select') {
	                    // уже выбран, надо исключить
	                    gridData[idx].select = !gridData[idx].select;
	                }

	                // если поле не отмечено как readOnly то сл. действие не должно происходить
	                if (columnId) {
	                    var column = this.props.gridColumns.filter(function (row) {
	                        return row.id == columnId;
	                    });
	                    if (column && column.length && !column[0].readOnly && this.props.isForUpdate && gridData[idx][columnId] !== null && gridData[idx][columnId] !== undefined) {

	                        // value changed
	                        gridData[idx][columnId] = !gridData[idx][columnId];
	                    }
	                }

	                this.setState({
	                    gridData: gridData,
	                    activeRow: idx,
	                    value: docId
	                }, function () {
	                    var value = _this3.state.gridData[idx][columnId];
	                    if (_this3.props.onClick) {
	                        _this3.props.onClick(action, docId, idx, columnId, value);
	                    }
	                });
	            }
	        }

	        /**
	         * обработчик для двойного клика по ячейке
	         * @param idx
	         */

	    }, {
	        key: 'handleCellDblClick',
	        value: function handleCellDblClick(idx) {
	            // отметим активную строку и вызовен обработчик события dblClick
	            this.handleCellClick(idx, null);
	            if (this.props.onDblClick) {
	                this.props.onDblClick();
	            }
	        }

	        /**
	         * Отработает клик по заголовку грида (сортировка)
	         * @param name - наименование колонки
	         */

	    }, {
	        key: 'handleGridHeaderClick',
	        value: function handleGridHeaderClick(name) {
	            if (name === 'select' || name === 'row_id') {
	                // виртуальная колонка
	                // меняем значение выбрано на наоборот

	                if (this.state.gridData.length > 0 && name === 'select') {
	                    var data = this.state.gridData;
	                    data.forEach(function (row) {
	                        row.select = !row.select;
	                    });
	                    this.setState({ gridData: data });
	                }
	                return;
	            }

	            var sort = this.state.sort;
	            if (sort.name === name) {
	                sort.direction = sort.direction === 'asc' ? 'desc' : 'asc';
	            } else {
	                sort = {
	                    name: name,
	                    direction: 'asc'
	                };
	            }

	            var sortBy = [{ column: sort.name, direction: sort.direction }];

	            this.setState({
	                activeColumn: name,
	                sort: sort
	            });

	            if (this.props.onHeaderClick) {
	                this.props.onHeaderClick(sortBy);
	            }
	        }

	        /**
	         * Обработчик на событие - нажитие стрелки вниз
	         * @param e
	         */

	    }, {
	        key: 'handleKeyDown',
	        value: function handleKeyDown(e) {
	            // реакция на клавиатуру
	            var rowIndex = this.state.activeRow;
	            switch (e.which) {
	                case 40:
	                    // вниз, увеличим активную строку на + 1
	                    rowIndex++;

	                    if (this.state.gridData.length < rowIndex) {
	                        // вернем прежнее значение
	                        rowIndex = this.state.activeRow;
	                    }
	                    break;
	                case 38:
	                    // вниз, увеличим активную строку на - 1
	                    rowIndex--;
	                    rowIndex = rowIndex < 0 ? 0 : rowIndex;
	                    break;
	            }
	            this.setState({
	                activeRow: rowIndex
	            });
	        }

	        /**
	         * Готовит строку для грида
	         */

	    }, {
	        key: 'prepareTableRow',
	        value: function prepareTableRow() {
	            var _this4 = this;

	            var activeRow = this.getGridRowIndexById();

	            return this.state.gridData.map(function (row, rowIndex) {
	                var objectIndex = 'tr-' + rowIndex;

	                var gridColumns = _this4.props.gridColumns.map(function (row) {
	                    if (row.id === 'select' && _this4.props.isSelect) {
	                        row.show = true;
	                    }

	                    return row;
	                });

	                return React.createElement(
	                    'tr',
	                    {
	                        ref: objectIndex,
	                        onClick: _this4.handleCellClick.bind(_this4, rowIndex, null),
	                        onDoubleClick: _this4.handleCellDblClick.bind(_this4, rowIndex),
	                        onKeyDown: _this4.handleKeyDown.bind(_this4),
	                        style: Object.assign({}, styles.tr, activeRow === rowIndex ? styles.focused : {}),
	                        key: objectIndex },
	                    gridColumns.map(function (column, columnIndex) {
	                        // назначим символы для отображения логических данных
	                        var boolValueYes = column.boolSumbolYes ? column.boolSumbolYes : styles.boolSumbol['yes'].value || null;
	                        var boolValueNo = column.boolSumbolNo ? column.boolSumbolNo : styles.boolSumbol['no'].value || null;
	                        var boolValueNull = column.boolSumbolNull ? column.boolSumbolNull : styles.boolSumbol['null'] ? styles.boolSumbol['null'].value : null;

	                        // приведем значение value к заданому типу для параметра hideEmptyValue
	                        var fixedValue = column.type && column.type == "integer" ? Number(row[column.id]) : row[column.id];

	                        var cellIndex = 'td-' + rowIndex + '-' + columnIndex;

	                        var display = isExists(column, 'show') ? column.show : true,
	                            width = isExists(column, 'width') ? column.width : '100%',
	                            style = Object.assign({}, styles.td, !display ? { display: 'none' } : {}, { width: width });

	                        // проверим на заданный цвет
	                        if (styles.boolColour && column.type && column.type === 'boolean') {

	                            style = Object.assign(style, { backgroundColor: !!row[column.id] ? styles.boolColour.yes : styles.boolColour.no }, { color: !!row[column.id] ? styles.boolSumbol['yes'].color : styles.boolSumbol['no'].color });
	                        }

	                        // если задан фон в конфиге грида
	                        if (column.yesBackgroundColor && (!!row[column.id] || row[column.id] == 'Viga')) {
	                            style = _extends({}, style, { backgroundColor: column.yesBackgroundColor });
	                        }

	                        // Ок, Viga для  рапорта об исполнениее
	                        if (column.noBackgroundColor && (!row[column.id] || row[column.id] == 'Ok')) {
	                            style = _extends({}, style, { backgroundColor: column.noBackgroundColor });
	                        }

	                        if (column.nullBackgroundColor && row[column.id] == null) {
	                            style = _extends({}, style, { backgroundColor: column.nullBackgroundColor });
	                        }
	                        // цвет, при значении NULL
	                        if (styles.td && styles.td.nullColour && row[column.id] == null) {
	                            style = Object.assign(style, { backgroundColor: styles.td.nullColour });
	                        }

	                        // кастомное обработка стилей на клетку
	                        if (_this4.props.custom_styling) {
	                            var customeStyle = _this4.props.custom_styling(column, row);
	                            style = _extends({}, style, customeStyle);
	                        }

	                        // оберем для конкретного поля параметр hideEmptyValue

	                        var isHideEmptyValue = column.hideEmptyValue ? column.hideEmptyValue : false;

	                        if (column.hideEmptyValue && row['nom_id'] && row['nom_id'] == 999999999) {
	                            isHideEmptyValue = false;
	                        }

	                        return React.createElement(
	                            'td',
	                            { style: style,
	                                ref: cellIndex,
	                                key: cellIndex,
	                                align: column.type && column.type === 'boolean' ? 'center' : 'left',
	                                onClick: _this4.handleCellClick.bind(_this4, rowIndex, column.id)
	                            },
	                            column.type && column.type === 'boolean' ? React.createElement(
	                                'span',
	                                null,
	                                !!row[column.id] ? boolValueYes : row[column.id] == null ? boolValueNull : boolValueNo
	                            ) : isHideEmptyValue && !fixedValue ? null : row[column.id]
	                        );
	                    })
	                );
	            }, this);
	        }

	        /**
	         * Готовит компонент итоговая строка грида
	         * @param isHidden - колонка будет скрыта
	         */

	    }, {
	        key: 'prepareTableFooter',
	        value: function prepareTableFooter(isHidden) {
	            var _this5 = this;

	            return this.props.gridColumns.map(function (column, index) {
	                var headerIndex = 'td-' + index;

	                var headerStyle = 'td';

	                var display = isExists(column, 'show') ? column.show : true,
	                    width = isExists(column, 'width') ? column.width : '100%',
	                    style = Object.assign({}, styles[headerStyle], !display ? { display: 'none' } : {}, { width: width });

	                var subIndex = _this5.props.subtotals.indexOf(column.id);
	                var total = void 0;
	                if (subIndex > -1) {
	                    total = _this5.getSum(column.id, column.type && column.type == 'integer' ? 0 : 2);
	                }

	                // установить видимость
	                return React.createElement(
	                    'td',
	                    {
	                        style: style,
	                        ref: headerIndex,
	                        key: headerIndex
	                    },
	                    React.createElement(
	                        'span',
	                        null,
	                        total
	                    )
	                );
	            }, this);
	        }

	        /**
	         * Готовит компонент заголовок грида
	         * @param isHidden - колонка будет скрыта
	         */

	    }, {
	        key: 'prepareTableHeader',
	        value: function prepareTableHeader(isHidden) {
	            var _this6 = this;

	            // если есть опция выбор, то добавим в массив колонку с полем ticked
	            var gridColumns = this.props.gridColumns.map(function (row) {
	                if (row.id === 'select') {
	                    row.show = _this6.props.isSelect;
	                }
	                return row;
	            });

	            return gridColumns.map(function (column, index) {
	                var headerIndex = 'th-' + index + column.id;

	                var headerStyle = isHidden ? 'thHidden' : 'th';

	                // проверка на стиль заголовка, на фонт
	                var fontColor = {
	                    color: column.showBold && styles[headerStyle].boldColor ? styles[headerStyle].boldColor : styles[headerStyle].color
	                };

	                var display = isExists(column, 'show') ? column.show : true,
	                    width = isExists(column, 'width') ? column.width : '100%',
	                    style = Object.assign({}, styles[headerStyle], !display ? { display: 'none' } : {}, { width: width }, fontColor),
	                    activeColumn = _this6.state.activeColumn,
	                    iconType = _this6.state.sort.direction,
	                    imageStyleAsc = Object.assign({}, styles.image, activeColumn === column.id && iconType === 'asc' ? {} : { display: 'none' }),
	                    imageStyleDesc = Object.assign({}, styles.image, activeColumn === column.id && iconType === 'desc' ? {} : { display: 'none' });

	                // установить видимость
	                return React.createElement(
	                    'th',
	                    {
	                        style: style,
	                        ref: headerIndex,
	                        key: headerIndex,
	                        onClick: _this6.handleGridHeaderClick.bind(_this6, column.id) },
	                    React.createElement(
	                        'span',
	                        null,
	                        getTextValue(column.name)
	                    ),
	                    isHidden ? React.createElement('img', { ref: 'imageAsc', style: imageStyleAsc, src: styles.icons['asc'], alt: 'asc' }) : null,
	                    isHidden ? React.createElement('img', { ref: 'imageDesc', style: imageStyleDesc, src: styles.icons['desc'], alt: 'desc' }) : null
	                );
	            }, this);
	        }

	        /**
	         * расчет итогов
	         * @param columnField
	         * @param dec
	         * @returns {string}
	         */

	    }, {
	        key: 'getSum',
	        value: function getSum(columnField, dec) {
	            var total = 0;
	            var summa = 0;
	            if (this.state.gridData.length) {
	                this.state.gridData.forEach(function (row) {
	                    summa = row[columnField] && !isNaN(row[columnField]) ? Number(row[columnField]) : row[columnField] ? 1 : 0;
	                    total = total + Number(summa);
	                });
	            }

	            return total.toFixed(dec ? dec : 0);
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            return nextProps;
	            if (JSON.stringify(nextProps.gridData) !== JSON.stringify(prevState.gridData) || JSON.stringify(nextProps.gridColumns) !== JSON.stringify(prevState.gridColumns) || nextProps.gridData.length !== prevState.gridData.length || nextProps.isSelect !== prevState.isSelect) {
	                return { gridData: nextProps.gridData };
	            } else return null;
	        }
	    }]);

	    return DataGrid;
	}(React.Component);

	DataGrid.propTypes = {
	    gridColumns: PropTypes.arrayOf(PropTypes.shape({
	        id: PropTypes.string.isRequired,
	        name: PropTypes.string.isRequired,
	        width: PropTypes.string,
	        show: PropTypes.bool,
	        type: PropTypes.oneOf(['text', 'number', 'integer', 'date', 'string', 'select', 'boolean'])
	    })).isRequired,
	    gridData: PropTypes.array.isRequired,
	    onChangeAction: PropTypes.string,
	    onClick: PropTypes.func,
	    onDblClick: PropTypes.func,
	    onHeaderClick: PropTypes.func,
	    custom_styling: PropTypes.func,
	    activeRow: PropTypes.number,
	    handleGridCellClick: PropTypes.func,
	    showToolBar: PropTypes.bool,
	    subtotals: PropTypes.array
	};

	DataGrid.defaultProps = {
	    gridColumns: [],
	    gridData: [],
	    style: {},
	    showToolBar: false,
	    isForUpdate: false,
	    custom_styling: null,
	    subtotals: []
	};

	module.exports = DataGrid;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'delete';

	var ButtonRegisterDelete = function (_React$PureComponent) {
	    _inherits(ButtonRegisterDelete, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterDelete(props) {
	        _classCallCheck(this, ButtonRegisterDelete);

	        return _possibleConstructorReturn(this, (ButtonRegisterDelete.__proto__ || Object.getPrototypeOf(ButtonRegisterDelete)).call(this, props));
	    }

	    _createClass(ButtonRegisterDelete, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick('delete');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    value: 'Kustuta',
	                    ref: 'btnDelete',
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterDelete;
	}(React.PureComponent);

	/*
	ButtonRegisterDelete.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonRegisterDelete.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonRegisterDelete;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    ModalPage = __webpack_require__(171),
	    styles = __webpack_require__(186);

	var ModalPageDelete = function (_React$PureComponent) {
	    _inherits(ModalPageDelete, _React$PureComponent);

	    function ModalPageDelete(props) {
	        _classCallCheck(this, ModalPageDelete);

	        var _this = _possibleConstructorReturn(this, (ModalPageDelete.__proto__ || Object.getPrototypeOf(ModalPageDelete)).call(this, props));

	        _this.state = {
	            show: _this.props.show
	        };
	        return _this;
	    }

	    // will update state if props changed


	    _createClass(ModalPageDelete, [{
	        key: 'render',
	        value: function render() {
	            var modalObjects = ['btnOk', 'btnCancel'];

	            return React.createElement(
	                ModalPage,
	                { ref: 'modalPage',
	                    modalPageBtnClick: this.props.modalPageBtnClick,
	                    show: this.state.show,
	                    modalPageName: 'Delete document' },
	                React.createElement(
	                    'div',
	                    { ref: 'container' },
	                    React.createElement('img', { ref: 'image', src: styles.icon }),
	                    React.createElement(
	                        'span',
	                        { ref: 'message' },
	                        ' Kas kustuta dokument ? '
	                    )
	                )
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.show !== prevState.show) {
	                return { show: nextProps.show };
	            } else return null;
	        }
	    }]);

	    return ModalPageDelete;
	}(React.PureComponent);
	/*
	ModalPageDelete.propTypes = {
	    modalPageBtnClick: PropTypes.func.isRequired
	}
	*/


	module.exports = ModalPageDelete;

/***/ }),
/* 186 */
/***/ (function(module, exports) {

	'use strict';module.exports={icon:'/images/icons/delete.png'};

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var radium = __webpack_require__(88);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(188);

	var Input = function (_React$PureComponent) {
	    _inherits(Input, _React$PureComponent);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.state = {
	            value: Boolean(props.value),
	            readOnly: props.readOnly,
	            disabled: props.disabled
	        };
	        _this.onChange = _this.onChange.bind(_this);
	        return _this;
	    }

	    // will update state if props changed


	    _createClass(Input, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.refs['checkbox'].checked = this.state.value;
	        }
	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var value = e.target.checked;

	            this.setState({ value: value });

	            if (!this.state.readOnly && this.props.onChange) {
	                this.props.onChange(this.props.name, value);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var inputStyle = Object.assign({}, styles.input, this.props.width ? { width: this.props.width } : {}, this.state.readOnly ? styles.readOnly : {});

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'label',
	                    { style: styles.label, htmlFor: this.props.name, ref: 'label' },
	                    this.props.title
	                ),
	                React.createElement('input', { type: 'checkbox',
	                    id: this.props.name,
	                    ref: 'checkbox',
	                    style: inputStyle,
	                    name: this.props.name,
	                    value: this.state.value,
	                    checked: this.state.value,
	                    readOnly: this.state.readOnly,
	                    onChange: this.onChange,
	                    disabled: this.state.readOnly
	                })
	            );
	        }

	        /**
	         * установит фокус на элементы
	         */

	    }, {
	        key: 'focus',
	        value: function focus() {
	            this.refs['checkbox'].focus();
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value || nextProps.readOnly !== prevState.readOnly) {
	                return { value: nextProps.value, readOnly: nextProps.readOnly };
	            } else return null;
	        }
	    }]);

	    return Input;
	}(React.PureComponent);

	Input.propTypes = {
	    name: PropTypes.string.isRequired,
	    value: PropTypes.bool,
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    title: PropTypes.string
	};

	Input.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    value: false,
	    title: ''
	};

	module.exports = radium(Input);

/***/ }),
/* 188 */
/***/ (function(module, exports) {

	'use strict';module.exports={input:{':focus':{backgroundColor:'lightpink'}},readOnly:{backgroundColor:'#F3EFEF'},wrapper:{margin:'5px',display:'flex',width:'95%'},label:{width:'30%',margin:'5px'}};

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.ALL_PRINTABLE_KEYS=exports.ALL_KEYS=exports.Keys=exports.setBinding=exports.keydownScoped=exports.default=undefined;var _decorators=__webpack_require__(190);Object.defineProperty(exports,'default',{enumerable:true,get:function get(){return _interopRequireDefault(_decorators).default;}});Object.defineProperty(exports,'keydownScoped',{enumerable:true,get:function get(){return _decorators.keydownScoped;}});var _store=__webpack_require__(192);Object.defineProperty(exports,'setBinding',{enumerable:true,get:function get(){return _store.setBinding;}});var _keys=__webpack_require__(194);Object.defineProperty(exports,'Keys',{enumerable:true,get:function get(){return _interopRequireDefault(_keys).default;}});Object.defineProperty(exports,'ALL_KEYS',{enumerable:true,get:function get(){return _keys.ALL_KEYS;}});Object.defineProperty(exports,'ALL_PRINTABLE_KEYS',{enumerable:true,get:function get(){return _keys.ALL_PRINTABLE_KEYS;}});__webpack_require__(202);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});exports.keydownScoped=undefined;var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};/**
	                                                                                                                                                                                                                                                                               * @module decorators
	                                                                                                                                                                                                                                                                               *
	                                                                                                                                                                                                                                                                               */var _class_decorator=__webpack_require__(191);var _class_decorator2=_interopRequireDefault(_class_decorator);var _method_decorator=__webpack_require__(200);var _method_decorator2=_interopRequireDefault(_method_decorator);var _method_decorator_scoped=__webpack_require__(201);var _method_decorator_scoped2=_interopRequireDefault(_method_decorator_scoped);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
	 * noopDecorator
	 *
	 * @access private
	 * @return {undefined} Returns `undefined` so that the original undecorated instance/method is used
	 */function noopDecorator(){return undefined;}/**
	 * _decorator
	 *
	 * @access private
	 * @param {Function} methodFn The method wrapper to delegate to, based on whether user has specified a scoped decorator or not
	 * @param {Array} ...args Remainder of arguments passed in
	 * @return {Function} The decorated class or method
	 */function _decorator(methodFn){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}// check the first argument to see if it's a user-supplied keycode or array
	// of keycodes, or if it's the wrapped class or method
	var testArg=args[0];var isArray=Array.isArray(testArg);// if the test argument is not an object or function, it is user-supplied
	// keycodes. else there are no arguments and it's just the wrapped class
	if(isArray||~['string','number','symbol'].indexOf(typeof testArg==='undefined'?'undefined':_typeof(testArg))){var keys=isArray?testArg:args;// return the decorator function, which on the next call will look for
	// the presence of a method name to determine if this is a wrapped method
	// or component
	return function(target,methodName,descriptor){return methodName?methodFn({target:target,descriptor:descriptor,keys:keys}):(0,_class_decorator2.default)(target,keys);};}else{var WrappedComponent=args[0];var methodName=args[1];// method decorators without keycode (which) arguments are not allowed.
	if(WrappedComponent&&!methodName){return _class_decorator2.default.apply(undefined,args);}else{console.warn(methodName+': Method decorators must have keycode arguments, so the decorator for this method will not do anything');return noopDecorator;}}}/**
	 * keydownScoped
	 *
	 * Method decorator that will look for changes to its targeted component's
	 * `keydown` props to decide when to trigger, rather than responding directly
	 * to keydown events. This lets you specify a @keydown decorated class higher
	 * up in the view hierarchy for larger scoping of keydown events, or for
	 * programmatically sending keydown events as props into the components in order
	 * to trigger decorated methods with matching keys.
	 *
	 * @access public
	 * @param {Array} ...args  All (or no) arguments passed in from decoration
	 * @return {Function} The decorated class or method
	 */function keydownScoped(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return _decorator.apply(undefined,[_method_decorator_scoped2.default].concat(args));}/**
	 * keydown
	 *
	 * The main decorator and default export, handles both classes and methods.
	 *
	 * @access public
	 * @param {Array} ...args  All (or no) arguments passed in from decoration
	 * @return {Function} The decorated class or method
	 */function keydown(){for(var _len3=arguments.length,args=Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}return _decorator.apply(undefined,[_method_decorator2.default].concat(args));}exports.default=keydown;exports.keydownScoped=keydownScoped;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(10);var _react2=_interopRequireDefault(_react);var _store=__webpack_require__(192);var store=_interopRequireWildcard(_store);var _event_handlers=__webpack_require__(197);var _keys=__webpack_require__(194);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==="undefined"?"undefined":_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==="undefined"?"undefined":_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module componentWrapper
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	
	 * componentWrapper
	 *
	 * @access public
	 * @param {object} WrappedComponent React component class to be wrapped
	 * @param {array} [keys] The key(s) bound to the class
	 * @return {object} The higher-order function that wraps the decorated class
	 */function componentWrapper(WrappedComponent){var keys=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_keys.ALL_KEYS;var KeyBoardHelper=function(_React$Component){_inherits(KeyBoardHelper,_React$Component);function KeyBoardHelper(props){_classCallCheck(this,KeyBoardHelper);var _this=_possibleConstructorReturn(this,(KeyBoardHelper.__proto__||Object.getPrototypeOf(KeyBoardHelper)).call(this,props));_this.state={event:null};return _this;}_createClass(KeyBoardHelper,[{key:'componentDidMount',value:function componentDidMount(){(0,_event_handlers.onMount)(this);}},{key:'componentWillUnmount',value:function componentWillUnmount(){(0,_event_handlers.onUnmount)(this);}},{key:'handleKeyDown',value:function handleKeyDown(event){var _this2=this;// to simulate a keypress, set the event and then clear it in the callback
	this.setState({event:event},function(){return _this2.setState({event:null});});}},{key:'render',value:function render(){return _react2.default.createElement(WrappedComponent,_extends({},this.props,{keydown:this.state}));}}]);return KeyBoardHelper;}(_react2.default.Component);store.setBinding({keys:[].concat(keys),fn:KeyBoardHelper.prototype.handleKeyDown,target:KeyBoardHelper.prototype});return KeyBoardHelper;}exports.default=componentWrapper;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();exports._resetStore=_resetStore;exports.activate=activate;exports.deleteInstance=deleteInstance;exports.findBindingForEvent=findBindingForEvent;exports.getBinding=getBinding;exports.getInstances=getInstances;exports.isEmpty=isEmpty;exports.setBinding=setBinding;var _match_keys=__webpack_require__(193);var _match_keys2=_interopRequireDefault(_match_keys);var _parse_keys=__webpack_require__(195);var _parse_keys2=_interopRequireDefault(_parse_keys);var _uuid=__webpack_require__(196);var _uuid2=_interopRequireDefault(_uuid);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}/**
	                                                                                                                                                                                                     * @module store
	                                                                                                                                                                                                     *
	                                                                                                                                                                                                     *//**
	 * private
	 *
	 */// dict for class prototypes => bindings
	var _handlers=new Map();// all mounted instances that have keybindings
	var _instances=new Set();// for testing
	function _resetStore(){_handlers.clear();_instances.clear();}/**
	 * activate
	 *
	 * @access public
	 * @param {object} instance Instantiated class that extended React.Component, to be focused to receive keydown events
	 */function activate(instances){var instancesArray=[].concat(instances);// if no components were found as ancestors of the event target,
	// effectively deactivate keydown handling by capping the set of instances
	// with `null`.
	if(!instancesArray.length){_instances.add(null);}else{_instances.delete(null);// deleting and then adding the instance(s) has the effect of sorting the set
	// according to instance activation (ascending)
	instancesArray.forEach(function(instance){_instances.delete(instance);_instances.add(instance);});}};/**
	 * deleteInstance
	 *
	 * @access public
	 * @param {object} target Instantiated class that extended React.Component
	 * @return {boolean} The value set.has( target ) would have returned prior to deletion
	 */function deleteInstance(target){_instances.delete(target);};function findBindingForEvent(event){if(!_instances.has(null)){var keyMatchesEvent=function keyMatchesEvent(keySet){return(0,_match_keys2.default)({keySet:keySet,event:event});};// loop through instances in reverse activation order so that most
	// recently activated instance gets first dibs on event
	var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=[].concat(_toConsumableArray(_instances)).reverse()[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var instance=_step.value;var bindings=getBinding(instance.constructor.prototype);var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=bindings[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _step2$value=_slicedToArray(_step2.value,2),keySets=_step2$value[0],fn=_step2$value[1];if(keySets.some(keyMatchesEvent)){// return when matching keybinding is found - i.e. only one
	// keybound component can respond to a given key code. to get around this,
	// scope a common ancestor component class with @keydown and use
	// @keydownScoped to bind the duplicate keys in your child components
	// (or just inspect nextProps.keydown.event).
	return{fn:fn,instance:instance};}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}return null;};/**
	 * getBinding
	 *
	 * @access public
	 * @param {object} target Class used as key in dict of key bindings
	 * @return {object} The object containing bindings for the given class
	 */function getBinding(_ref){var __reactKeydownUUID=_ref.__reactKeydownUUID;return _handlers.get(__reactKeydownUUID);};/**
	 * getInstances
	 *
	 * @access public
	 * @return {set} All stored instances (all mounted component instances with keybindings)
	 */function getInstances(){return _instances;};/**
	 * isEmpty
	 *
	 * @access public
	 * @return {number} Size of the set of all stored instances
	 */function isEmpty(){return!_instances.size;};/**
	 * setBinding
	 *
	 * @access public
	 * @param {object} args All arguments necessary to set the binding
	 * @param {array} args.keys Key codes that should trigger the fn
	 * @param {function} args.fn The callback to be triggered when given keys are pressed
	 * @param {object} args.target The decorated class
	 */function setBinding(_ref2){var keys=_ref2.keys,fn=_ref2.fn,target=_ref2.target;var keySets=(0,_parse_keys2.default)(keys);var __reactKeydownUUID=target.__reactKeydownUUID;if(!__reactKeydownUUID){target.__reactKeydownUUID=(0,_uuid2.default)();_handlers.set(target.__reactKeydownUUID,new Map([[keySets,fn]]));}else{_handlers.get(__reactKeydownUUID).set(keySets,fn);}};

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _keys=__webpack_require__(194);var PRINTABLE_CHARACTERS='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()-_+=[]\\{}|;\':",./<>?£';var modKeys=Object.keys(_keys.modifiers);function matchKeys(_ref){var keySet=_ref.keySet,event=_ref.event;var key=keySet.key,_keySet$modifiers=keySet.modifiers,modifiers=_keySet$modifiers===undefined?[]:_keySet$modifiers;var keysMatch=void 0;keysMatch=key===_keys.ALL_KEYS;if(key===_keys.ALL_PRINTABLE_KEYS){if(event.key){// Modern browsers implement `key`, so if `key` is length 1, we have a match. e.g. 'a' for the
	// a key, or '2' for the 2 key. All other non-printable characters have names, e.g. 'Enter' or 'Backspace'.
	keysMatch=event.key.length===1;}else{// For browsers that do no support `event.key`, we test against a list of characters
	var pressedChar=String.fromCharCode(event.charCode);keysMatch=PRINTABLE_CHARACTERS.indexOf(pressedChar)>=0;}}if(key===event.which){var evtModKeys=modKeys.filter(function(modKey){return event[modKey+'Key'];}).sort();keysMatch=modifiers.length===evtModKeys.length&&modifiers.every(function(modKey,index){return evtModKeys[index]===modKey;});}return keysMatch;}exports.default=matchKeys;

/***/ }),
/* 194 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});// TODO: Need better, more complete, and more methodical key definitions
	var Keys={backspace:8,del:46,delete:46,tab:9,enter:13,'return':13,esc:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,';':186,'=':187,',':188,'-':189,'.':190,'/':191,'`':192,'[':219,'\\':220,']':221};// Add uppercase versions of keys above for backwards compatibility
	Object.keys(Keys).forEach(function(key){return Keys[key.toUpperCase()]=Keys[key];});'0123456789'.split('').forEach(function(num,index){return Keys[num]=index+48;});'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').forEach(function(letter,index){Keys[letter]=index+65;Keys[letter.toLowerCase()]=index+65;});// fn keys
	[1,2,3,4,5,6,7,8,9,10,11,12].forEach(function(item,index){return Keys['f'+index]=111+index;});var modifiers=exports.modifiers={control:'ctrl',ctrl:'ctrl',shift:'shift',meta:'meta',cmd:'meta',command:'meta',option:'alt',alt:'alt'};var ALL_KEYS=exports.ALL_KEYS=Symbol('ALL_KEYS');var ALL_PRINTABLE_KEYS=exports.ALL_PRINTABLE_KEYS=Symbol('ALL_PRINTABLE_KEYS');exports.default=Keys;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _keys=__webpack_require__(194);var _keys2=_interopRequireDefault(_keys);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function parseKeys(keysArray){return keysArray.map(function(key){var keySet={key:key};if(typeof key==='string'){var keyString=key.toLowerCase().trim();var matches=keyString.split(/\s?\+\s?/);keySet=matches.length===1?{key:_keys2.default[keyString]}:{key:_keys2.default[matches.pop()],modifiers:matches.map(function(modKey){return _keys.modifiers[modKey];}).sort()};}return keySet;});}exports.default=parseKeys;

/***/ }),
/* 196 */
/***/ (function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=uuid;// Counter being incremented. JS is single-threaded, so it'll Just Work™.
	var __counter=1;/**
	 * Returns a process-wide unique identifier.
	 */function uuid(){return"uid-"+__counter++;}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.onUnmount=exports.onMount=undefined;exports._onClick=_onClick;exports._onKeyDown=_onKeyDown;exports._shouldConsider=_shouldConsider;var _dom_helpers=__webpack_require__(198);var _dom_helpers2=_interopRequireDefault(_dom_helpers);var _listeners=__webpack_require__(199);var _listeners2=_interopRequireDefault(_listeners);var _store=__webpack_require__(192);var store=_interopRequireWildcard(_store);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}/* eslint-disable no-use-before-define *//**
	 * @module eventHandlers
	 *
	 *//**
	 * private
	 *
	 *//**
	 * _onClick
	 *
	 * @access private
	 * @param {object} event The click event object
	 * @param {object} event.target The DOM node from the click event
	 */function _onClick(_ref){var target=_ref.target;store.activate([].concat(_toConsumableArray(store.getInstances())).reduce(_dom_helpers2.default.findContainerNodes(target),[]).sort(_dom_helpers2.default.sortByDOMPosition).map(function(item){return item.instance;}));}/**
	 * _onKeyDown: The keydown event callback
	 *
	 * @access private
	 * @param {object} event The keydown event object
	 * @param {number} event.which The key code (which) received from the keydown event
	 */function _onKeyDown(event){var forceConsider=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(forceConsider||_shouldConsider(event)){var _ref2=store.findBindingForEvent(event)||{},fn=_ref2.fn,instance=_ref2.instance;if(fn){fn.call(instance,event);return true;}}return false;}/**
	 * _shouldConsider: Conditions for proceeding with key event handling
	 *
	 * @access private
	 * @param {object} event The keydown event object
	 * @param {object} event.target The node origin of the event
	 * @return {boolean} Whether to continue procesing the keydown event
	 */function _shouldConsider(_ref3){var ctrlKey=_ref3.ctrlKey,target=_ref3.target;return ctrlKey||!~['INPUT','SELECT','TEXTAREA'].indexOf(target.tagName)&&(!target.getAttribute||target.getAttribute('role')!=='textbox');}/**
	 * public
	 *
	 *//**
	 * onMount
	 *
	 * @access public
	 */function onMount(instance){store.activate(instance);_listeners2.default.bindKeys(_onKeyDown);_listeners2.default.bindClicks(_onClick);_dom_helpers2.default.bindFocusables(instance,store.activate);}/**
	 * onUnmount
	 *
	 * @access public
	 */function onUnmount(instance){store.deleteInstance(instance);if(store.isEmpty()){_listeners2.default.unbindClicks(_onClick);_listeners2.default.unbindKeys(_onKeyDown);}}exports.onMount=onMount;exports.onUnmount=onUnmount;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _reactDom=__webpack_require__(4);var _reactDom2=_interopRequireDefault(_reactDom);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var focusableSelector='a[href], button, input, object, select, textarea, [tabindex]';/**
	 * bindFocusables: Find any focusable child elements of the component instance and
	 * add an onFocus handler to focus our keydown handlers on the parent component
	 * when user keys applies focus to the element.
	 *
	 * NOTE: One limitation of this right now is that if you tab out of the
	 * component, _focusedInstance will still be set until next click or mount or
	 * controlled focus.
	 *
	 * @access public
	 * @param {object} instance The key-bound component instance
	 * @param {callback} activateOnFocus The fn to fire when element is focused
	 *//**
	 * @module domHelpers
	 *
	 */function bindFocusables(instance,activateOnFocus){if(document.querySelectorAll){try{var node=_reactDom2.default.findDOMNode(instance);if(node){var focusables=node.querySelectorAll(focusableSelector);if(focusables.length){var onFocus=function onFocus(element){var onFocusPrev=element.onfocus;return function(event){activateOnFocus(instance);if(onFocusPrev)onFocusPrev.call(element,event);};};Array.prototype.slice.call(focusables).forEach(function(element){return element.onfocus=onFocus(element);});}}}catch(error){// noop, mostly suppressing error here https://github.com/glortho/react-keydown/issues/76
	}}}/**
	 * findContainerNodes: Called by our click handler to find instances with nodes
	 * that are equal to or that contain the click target. Any that pass this test
	 * will be recipients of the next keydown event.
	 *
	 * @access public
	 * @param {object} target The click event.target DOM element
	 * @return {function} Reducer function
	 */function findContainerNodes(target){return function(memo,instance){try{var node=_reactDom2.default.findDOMNode(instance);if(node&&(node===target||node.contains(target))){memo.push({instance:instance,node:node});}}finally{return memo;}};}/**
	 * sortByDOMPosition: Called by our click handler to sort a list of instances
	 * according to least -> most nested. This is so that if multiple keybound
	 * instances have nodes that are ancestors of the click target, they will be
	 * sorted to let the instance closest to the click target get first dibs on the
	 * next key down event.
	 */function sortByDOMPosition(a,b){return a.node.compareDocumentPosition(b.node)===10?1:-1;}exports.default={bindFocusables:bindFocusables,findContainerNodes:findContainerNodes,sortByDOMPosition:sortByDOMPosition};

/***/ }),
/* 199 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});/**
	 * @module Listeners
	 *
	 */// flag for whether click listener has been bound to document
	var _clicksBound=false;// flag for whether keydown listener has been bound to document
	var _keysBound=false;var Listeners={/**
	   * _bindKeys
	   *
	   * @access public
	   */bindKeys:function bindKeys(callback){if(!_keysBound){document.addEventListener('keydown',callback);_keysBound=true;}},/**
	   * unbindKeys
	   *
	   * @access public
	   */unbindKeys:function unbindKeys(callback){if(_keysBound){document.removeEventListener('keydown',callback);_keysBound=false;}},/**
	   * bindClicks
	   *
	   * @access public
	   */bindClicks:function bindClicks(callback){if(!_clicksBound){document.addEventListener('click',callback,true);_clicksBound=true;}},/**
	   * unbindClicks
	   *
	   * @access public
	   */unbindClicks:function unbindClicks(callback){if(_clicksBound){document.removeEventListener('click',callback,true);_clicksBound=false;}}};exports.default=Listeners;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==="undefined"?"undefined":_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==="undefined"?"undefined":_typeof2(obj);};/**
	                                                                                                                                                                                                                                                                               * @module methodWrapper
	                                                                                                                                                                                                                                                                               *
	                                                                                                                                                                                                                                                                               */var _store=__webpack_require__(192);var store=_interopRequireWildcard(_store);var _event_handlers=__webpack_require__(197);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}/**
	 * _isReactKeyDown
	 *
	 * @access private
	 * @param {object} event The possibly synthetic event passed as an argument with
	 * the method invocation.
	 * @return {boolean}
	 */function _isReactKeyDown(event){return event&&(typeof event==='undefined'?'undefined':_typeof(event))==='object'&&event.nativeEvent instanceof window.KeyboardEvent&&event.type==='keydown';}/**
	 * methodWrapper
	 *
	 * @access public
	 * @param {object} args All arguments necessary for wrapping method
	 * @param {object} args.target The decorated class
	 * @param {object} args.descriptor Method descriptor
	 * @param {array} args.keys The array of keys bound to the given method
	 * @return {object} The method descriptor
	 */function methodWrapper(_ref){var target=_ref.target,descriptor=_ref.descriptor,keys=_ref.keys;var fn=descriptor.value;// if we haven't already created a binding for this class (via another
	// decorated method), wrap these lifecycle methods.
	if(!store.getBinding(target)){var componentDidMount=target.componentDidMount,componentWillUnmount=target.componentWillUnmount;target.componentDidMount=function(){(0,_event_handlers.onMount)(this);if(componentDidMount)return componentDidMount.call(this);};target.componentWillUnmount=function(){(0,_event_handlers.onUnmount)(this);if(componentWillUnmount)return componentWillUnmount.call(this);};}// add this binding of keys and method to the target's bindings
	store.setBinding({keys:keys,target:target,fn:fn});descriptor.value=function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var maybeEvent=args[0];if(_isReactKeyDown(maybeEvent)){// proxy method in order to use @keydown as filter for keydown events coming
	// from an actual onKeyDown binding (as identified by react's addition of
	// 'nativeEvent' + type === 'keydown')
	if(!maybeEvent.ctrlKey){// we already whitelist shortcuts with ctrl modifiers so if we were to
	// fire it again here the method would trigger twice. see https://github.com/glortho/react-keydown/issues/38
	return(0,_event_handlers._onKeyDown)(maybeEvent,true);}}else if(!maybeEvent||!(maybeEvent instanceof window.KeyboardEvent)||maybeEvent.type!=='keydown'){// if our first argument is a keydown event it is being handled by our
	// binding system. if it's anything else, just pass through.
	return fn.call.apply(fn,[this].concat(args));}};return descriptor;}exports.default=methodWrapper;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _match_keys=__webpack_require__(193);var _match_keys2=_interopRequireDefault(_match_keys);var _parse_keys=__webpack_require__(195);var _parse_keys2=_interopRequireDefault(_parse_keys);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
	 * methodWrapperScoped
	 *
	 * @access public
	 * @param {object} args All args necessary for decorating the method
	 * @param {object} args.target The decorated method's class object
	 * @param {object} args.descriptor The method's descriptor object
	 * @param {array} args.keys The key codes bound to the decorated method
	 * @return {object} The method's descriptor object
	 *//**
	 * @module methodWrapperScoped
	 *
	 */function methodWrapperScoped(_ref){var target=_ref.target,descriptor=_ref.descriptor,keys=_ref.keys;var componentWillReceiveProps=target.componentWillReceiveProps;var fn=descriptor.value;if(!keys){console.warn(fn+': keydownScoped requires one or more keys');}else{/**
	     * _shouldTrigger
	     *
	     * @access private
	     * @param {object} thisProps Exsting props from the wrapped component
	     * @param {object} thisProps.keydown The namespaced state from the higher-order
	     * component (class_decorator)
	     * @param {object} nextProps The incoming props from the wrapped component
	     * @param {object} nextProps.keydown The namescaped state from the higher-order
	     * component (class_decorator)
	     * @param {array} keys The keys bound to the decorated method
	     * @return {boolean} Whether all tests have passed
	     */var _shouldTrigger=function _shouldTrigger(keydownThis,keydownNext){if(!(keydownNext&&keydownNext.event&&!keydownThis.event))return false;return keySets.some(function(keySet){return(0,_match_keys2.default)({keySet:keySet,event:keydownNext.event});});};// wrap the component's lifecycle method to intercept key codes coming down
	// from the wrapped/scoped component up the view hierarchy. if new keydown
	// event has arrived and the key codes match what was specified in the
	// decorator, call the wrapped method.
	var keySets=(0,_parse_keys2.default)(keys);target.componentWillReceiveProps=function(nextProps){var keydownNext=nextProps.keydown;var keydownThis=this.props.keydown;if(_shouldTrigger(keydownThis,keydownNext)){return fn.call(this,keydownNext.event);}for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}if(componentWillReceiveProps)return componentWillReceiveProps.call.apply(componentWillReceiveProps,[this,nextProps].concat(args));};}return descriptor;}exports.default=methodWrapperScoped;

/***/ }),
/* 202 */
/***/ (function(module, exports) {

	'use strict';// Production steps of ECMA-262, Edition 6, 22.1.2.1
	// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
	if(!Array.from){Array.from=function(){var toStr=Object.prototype.toString;var isCallable=function isCallable(fn){return typeof fn==='function'||toStr.call(fn)==='[object Function]';};var toInteger=function toInteger(value){var number=Number(value);if(isNaN(number)){return 0;}if(number===0||!isFinite(number)){return number;}return(number>0?1:-1)*Math.floor(Math.abs(number));};var maxSafeInteger=Math.pow(2,53)-1;var toLength=function toLength(value){var len=toInteger(value);return Math.min(Math.max(len,0),maxSafeInteger);};// The length property of the from method is 1.
	return function from(arrayLike/*, mapFn, thisArg */){// 1. Let C be the this value.
	var C=this;// 2. Let items be ToObject(arrayLike).
	var items=Object(arrayLike);// 3. ReturnIfAbrupt(items).
	if(arrayLike==null){throw new TypeError("Array.from requires an array-like object - not null or undefined");}// 4. If mapfn is undefined, then let mapping be false.
	var mapFn=arguments.length>1?arguments[1]:void undefined;var T;if(typeof mapFn!=='undefined'){// 5. else
	// 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
	if(!isCallable(mapFn)){throw new TypeError('Array.from: when provided, the second argument must be a function');}// 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
	if(arguments.length>2){T=arguments[2];}}// 10. Let lenValue be Get(items, "length").
	// 11. Let len be ToLength(lenValue).
	var len=toLength(items.length);// 13. If IsConstructor(C) is true, then
	// 13. a. Let A be the result of calling the [[Construct]] internal method 
	// of C with an argument list containing the single item len.
	// 14. a. Else, Let A be ArrayCreate(len).
	var A=isCallable(C)?Object(new C(len)):new Array(len);// 16. Let k be 0.
	var k=0;// 17. Repeat, while k < len… (also steps a - h)
	var kValue;while(k<len){kValue=items[k];if(mapFn){A[k]=typeof T==='undefined'?mapFn(kValue,k):mapFn.call(T,kValue,k);}else{A[k]=kValue;}k+=1;}// 18. Let putStatus be Put(A, "length", len, true).
	A.length=len;// 20. Return A.
	return A;};}();}

/***/ }),
/* 203 */
/***/ (function(module, exports) {

	'use strict';module.exports={mainTable:{tableLayout:'fixed',width:'-webkit-calc(100% + 16px)',borderCollapse:'collapse',marginBottom:'20px'},headerTable:{tableLayout:'fixed',width:'100%',borderCollapse:'collapse'},footerTable:{tableLayout:'fixed',width:'100%',borderCollapse:'collapse'},th:{borderBottom:'1px solid black',backgroundColor:'grey',height:'30px',border:'1px solid lightgray',display:'table-cell',color:'black',boldColor:'red'},thHidden:{borderBottom:'1px solid black',backgroundColor:'grey',height:'1px',border:'1px solid lightgray',display:'table-cell'},tr:{backgroundColor:'white'},focused:{backgroundColor:'lightblue'},td:{border:'1px solid lightgray',display:'table-cell',paddingLeft:'5px'},icons:{asc:'/images/icons/sort-alpha-asc.png',desc:'/images/icons/sort-alpha-desc.png'},image:{margin:'1px'},wrapper:{height:'inherit',overflow:'auto',minHeight:'100px'},main:{height:'inherit'},header:{overflow:'hidden'},boolSumbol:{yes:{value:'\u2714',color:'green'},no:{//value: '\u2716',
	color:null},null:{value:'-',color:null}},boolColour:{yes:null,no:null}};

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'print';

	var ButtonRegisterPrint = function (_React$PureComponent) {
	    _inherits(ButtonRegisterPrint, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterPrint(props) {
	        _classCallCheck(this, ButtonRegisterPrint);

	        return _possibleConstructorReturn(this, (ButtonRegisterPrint.__proto__ || Object.getPrototypeOf(ButtonRegisterPrint)).call(this, props));
	    }

	    _createClass(ButtonRegisterPrint, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick(this.props.value);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnPrint',
	                    value: this.props.value,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterPrint;
	}(React.PureComponent);

	/*
	ButtonRegisterPrint.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonRegisterPrint.defaultProps = {
	    disabled: false,
	    show: true,
	    value: 'Print'
	};

	module.exports = ButtonRegisterPrint;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'attachment';

	var ButtonPdf = function (_React$PureComponent) {
	    _inherits(ButtonPdf, _React$PureComponent);

	    // кнопка вызова файла влодения в формате PDF
	    function ButtonPdf(props) {
	        _classCallCheck(this, ButtonPdf);

	        return _possibleConstructorReturn(this, (ButtonPdf.__proto__ || Object.getPrototypeOf(ButtonPdf)).call(this, props));
	    }

	    _createClass(ButtonPdf, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            if (this.props.onClick()) {
	                return this.props.onClick();
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnGetPdf',
	                    value: this.props.value ? this.props.value : 'PDF',
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonPdf;
	}(React.PureComponent);

	ButtonPdf.defaultProps = {
	    disabled: false,
	    show: true
	};
	module.exports = ButtonPdf;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'filter';

	var ButtonRegisterFilter = function (_React$PureComponent) {
	    _inherits(ButtonRegisterFilter, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterFilter(props) {
	        _classCallCheck(this, ButtonRegisterFilter);

	        return _possibleConstructorReturn(this, (ButtonRegisterFilter.__proto__ || Object.getPrototypeOf(ButtonRegisterFilter)).call(this, props));
	    }

	    _createClass(ButtonRegisterFilter, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnFilter',
	                    value: 'Filter',
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterFilter;
	}(React.PureComponent);

	/*
	ButtonRegisterFilter.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonRegisterFilter.defaultProps = {
	    disabled: false,
	    show: true
	};
	module.exports = ButtonRegisterFilter;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'select';

	var ButtonSelect = function (_React$PureComponent) {
	    _inherits(ButtonSelect, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonSelect(props) {
	        _classCallCheck(this, ButtonSelect);

	        return _possibleConstructorReturn(this, (ButtonSelect.__proto__ || Object.getPrototypeOf(ButtonSelect)).call(this, props));
	    }

	    _createClass(ButtonSelect, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick('select');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var value = this.props.value ? this.props.value : 'Valida';
	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnSelect',
	                    value: value,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonSelect;
	}(React.PureComponent);

	/*
	ButtonRegisterPrint.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonSelect.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonSelect;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ModalPage = __webpack_require__(171),
	    ICON = 'mail';

	var ButtonRegisterEmail = function (_React$Component) {
	    _inherits(ButtonRegisterEmail, _React$Component);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterEmail(props) {
	        _classCallCheck(this, ButtonRegisterEmail);

	        var _this = _possibleConstructorReturn(this, (ButtonRegisterEmail.__proto__ || Object.getPrototypeOf(ButtonRegisterEmail)).call(this, props));

	        _this.state = {
	            showModal: false
	        };
	        _this.modalPageClick = _this.modalPageClick.bind(_this);
	        return _this;
	    }

	    /**
	     * обработчик события клик, откроет модальное окно
	     * @param e
	     */


	    _createClass(ButtonRegisterEmail, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            // если требуется предварительно ихвещение, то открываем модальное окно, иначе вызываем метод из пропсов
	            if (this.props.docTypeId.toLowerCase() === 'arv' || this.props.docTypeId.toLowerCase() === 'teatis') {
	                this.setState({ showModal: true });
	            } else {
	                this.modalPageClick('Ok');
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    Button,
	                    {
	                        ref: 'btnEmail',
	                        value: this.props.value,
	                        show: this.props.show,
	                        disabled: this.props.disabled,
	                        onClick: function onClick(e) {
	                            return _this2.handleClick(e);
	                        } },
	                    React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	                ),
	                React.createElement(
	                    ModalPage,
	                    {
	                        modalPageBtnClick: this.modalPageClick,
	                        modalPageName: '' + this.props.value,
	                        show: this.state.showModal,
	                        modalObjects: ['btnOk', 'btnCancel']
	                    },
	                    'Kas saada email ?'
	                )
	            );
	        }

	        /**
	         * обработчик на событие клика на кнопки можального окна
	         * @param btnEvent
	         */

	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(btnEvent) {
	            if (btnEvent === 'Ok') {
	                this.props.onClick(this.props.value);
	            }
	            this.setState({ showModal: false });
	        }
	    }]);

	    return ButtonRegisterEmail;
	}(React.Component);

	/*
	ButtonRegisterPrint.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonRegisterEmail.defaultProps = {
	    disabled: false,
	    show: true,
	    value: 'Email',
	    docTypeId: ''
	};

	module.exports = ButtonRegisterEmail;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'refresh';

	var ButtonRefresh = function (_React$PureComponent) {
	    _inherits(ButtonRefresh, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRefresh(props) {
	        _classCallCheck(this, ButtonRefresh);

	        return _possibleConstructorReturn(this, (ButtonRefresh.__proto__ || Object.getPrototypeOf(ButtonRefresh)).call(this, props));
	    }

	    _createClass(ButtonRefresh, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnRefresh',
	                    value: 'Uuenda',
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRefresh;
	}(React.PureComponent);

	ButtonRefresh.defaultProps = {
	    disabled: false,
	    show: true
	};
	module.exports = ButtonRefresh;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var DocContext = __webpack_require__(1);
	var prepareData = __webpack_require__(181);
	var getTextValue = __webpack_require__(76);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(211);

	var GridFilter = function (_React$PureComponent) {
	    _inherits(GridFilter, _React$PureComponent);

	    function GridFilter(props) {
	        _classCallCheck(this, GridFilter);

	        var _this = _possibleConstructorReturn(this, (GridFilter.__proto__ || Object.getPrototypeOf(GridFilter)).call(this, props));

	        _this.state = {
	            gridConfig: props.gridConfig, // grid config
	            data: props.data
	        };

	        _this.handleChange = _this.handleChange.bind(_this);
	        _this.prepareFilterFields = _this.prepareFilterFields.bind(_this);
	        _this.returnInterval = _this.returnInterval.bind(_this);
	        _this.returnTextComponent = _this.returnTextComponent.bind(_this);
	        _this.handleSelectChange = _this.handleSelectChange.bind(_this);
	        return _this;
	    }

	    /**
	     * Обработчик на изменения инпутов
	     */


	    _createClass(GridFilter, [{
	        key: 'handleChange',
	        value: function handleChange(e) {
	            this.saveFilterContent(e.target.name, e.target.value, null);
	            this.forceUpdate();
	        }

	        /**
	         * Обработчик на изменения выбора селекта
	         */

	    }, {
	        key: 'handleSelectChange',
	        value: function handleSelectChange(e) {
	            this.saveFilterContent(e.target.name, null, e.target.value);
	            this.forceUpdate();
	        }

	        /**
	         * сохранит значение фильтра
	         * @param name
	         * @param value
	         * @param sqlNo - исключение на фильтр
	         */

	    }, {
	        key: 'saveFilterContent',
	        value: function saveFilterContent(name, value, sqlNo) {
	            var data = this.props.data;

	            // проверим на наличие полей для фильтрации
	            if (!data.length) {
	                data = prepareData(this.props.gridConfig, this.props.docTypeId);
	            } else {
	                data = this.props.data;
	            }

	            var kas_sisaldab = 1;
	            // ищем значение sqlNo
	            if (DocContext.filter[this.props.docTypeId]) {
	                var idx = DocContext.filter[this.props.docTypeId].findIndex(function (row) {
	                    return row.id === name;
	                });
	                if (idx >= 0) {
	                    kas_sisaldab = DocContext.filter[this.props.docTypeId][idx].sqlNo;
	                }
	            }

	            // сохраним значение фильтра

	            data = data.map(function (row) {
	                if (row.id === name) {

	                    row.value = !sqlNo ? value : row.value;
	                    row.sqlNo = value ? kas_sisaldab : sqlNo;
	                }
	                return row;
	            });

	            var index = void 0,
	                isIntervalStart = !!name.match(/_start/),
	                isIntervalEnd = !!name.match(/_end/);
	            var fieldName = name;

	            // надо найти элемент массива с данными для этого компонента
	            for (var i = 0; i < data.length; i++) {

	                isIntervalStart = !!name.match(/_start/);
	                isIntervalEnd = !!name.match(/_end/);

	                if (isIntervalStart) {
	                    // will replace start from firldName
	                    fieldName = name.replace(/_start/i, '');
	                }

	                if (isIntervalEnd) {
	                    // will replace end from firldName
	                    fieldName = name.replace(/_end/i, '');
	                }

	                if (data[i].id === fieldName) {
	                    index = i;
	                    break;
	                }
	            }

	            if (index > -1) {
	                if (isIntervalStart) {
	                    data[index].start = value;
	                    data[index][fieldName + '_start'] = value;
	                    data[index].value = value;
	                }
	                if (isIntervalEnd) {
	                    data[index].end = value;
	                    data[index][fieldName + '_end'] = value;
	                    data[index].value = value;
	                }
	                data[index].sqlNo = sqlNo ? sqlNo : 1;
	            }

	            // сохраним фильтр
	            DocContext.filter[this.props.docTypeId] = data;

	            if (this.props.handler) {
	                this.props.handler(data);
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var data = prepareData(this.props.gridConfig, this.props.docTypeId);
	            if (this.props.handler) {
	                this.props.handler(data);
	            }

	            // если указан элемент , то установим на него фокус
	            if (this.props.focusElement) {
	                var focusElement = this.refs[this.props.focusElement];
	                if (focusElement) {
	                    focusElement.focus();
	                }
	            }
	        }

	        // will update state if props changed

	    }, {
	        key: 'render',
	        value: function render() {
	            // создаст из полей грида компоненты для формирования условий фильтрации
	            return React.createElement(
	                'div',
	                { style: styles.fieldset },
	                this.prepareFilterFields()
	            );
	        }
	    }, {
	        key: 'prepareFilterFields',
	        value: function prepareFilterFields() {
	            var _this2 = this;

	            // только поля, которые отмечаны как show:true или явно ка указаны и те, у котоых нету hideFilter
	            var filterFields = this.props.gridConfig.filter(function (field) {
	                if (field.id !== 'id' && !field.hideFilter && (!field.filter || field.filter == 'show')) {
	                    return field;
	                }
	            });

	            return filterFields.map(function (row, index) {

	                return React.createElement(
	                    'div',
	                    { style: styles.formWidget, key: 'fieldSet-' + row.id },
	                    React.createElement(
	                        'div',
	                        { style: styles.formWidgetLabel },
	                        React.createElement(
	                            'span',
	                            null,
	                            getTextValue(row.name)
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.formWidgetInput },
	                        row.interval ? _this2.returnInterval(row) : _this2.returnTextComponent(row)
	                    )
	                );
	            });
	        }
	    }, {
	        key: 'returnTextComponent',
	        value: function returnTextComponent(row) {
	            var data = this.props.data;

	            // проверим на наличие полей для фильтрации
	            if (!data.length) {
	                data = prepareData(this.props.gridConfig, this.props.docTypeId);
	            }

	            var componentType = row.type ? row.type : 'text';

	            // ишем дефолтное значение
	            var value = row.value ? row.value : '';
	            var kas_sisaldab = 1;

	            // ищем инициализированное значение
	            var obj = data.find(function (dataRow) {
	                return dataRow.id == row.id;
	            });

	            if (obj && 'value' in obj) {
	                if (!obj.value && value) {
	                    // есть дефолтное значение
	                    value = data[index][row.id].value;
	                }
	                value = obj.value ? obj.value : value;
	                kas_sisaldab = obj.sqlNo ? obj.sqlNo : 1;
	            }

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'select',
	                    { style: styles.select,
	                        value: kas_sisaldab || 1,
	                        name: row.id,
	                        disabled: !value,
	                        id: 'sqlNo',
	                        onChange: this.handleSelectChange },
	                    React.createElement(
	                        'option',
	                        { value: 1 },
	                        getTextValue('SISALDAB')
	                    ),
	                    React.createElement(
	                        'option',
	                        { value: 0 },
	                        getTextValue('EI SISALDA')
	                    )
	                ),
	                React.createElement('input', { style: styles.input,
	                    type: componentType,
	                    title: getTextValue(row.name),
	                    name: row.id,
	                    placeholder: row.toolTip ? getTextValue(row.toolTip) : getTextValue(row.name),
	                    ref: row.id,
	                    value: value || '',
	                    onChange: this.handleChange,
	                    defaultValue: this.props.data[row.id] })
	            );
	        }

	        /**
	         * вернет два инпута, где будут хранится значения для сначала и конца диапазона
	         * @param row
	         */

	    }, {
	        key: 'returnInterval',
	        value: function returnInterval(row) {
	            if (row && row.interval && !('start' in row)) {
	                var value = row.value ? row.value : null;
	                row = _extends({}, row, { start: value }, { end: value });
	            }

	            var data = this.props.data;
	            var obj = data.find(function (dataRow) {
	                return dataRow.id == row.id;
	            });

	            if (!obj) {
	                return null;
	            }

	            var valueStart = row.interval ? obj['start'] : obj.value;
	            var valueEnd = row.interval ? obj['end'] : obj.value;

	            var componentType = row.type ? row.type : 'text';
	            if (valueStart && valueEnd) {
	                // сохраним значение
	                this.saveFilterContent(row.name, valueStart);
	                this.saveFilterContent(row.name, valueEnd);
	            }

	            return React.createElement(
	                'div',
	                { style: styles.interval },
	                React.createElement('input', { style: styles.input,
	                    type: componentType,
	                    title: row.name,
	                    name: row.id + '_start',
	                    placeholder: row.name,
	                    ref: row.id + '_start',
	                    value: valueStart || '',
	                    onChange: this.handleChange,
	                    defaultValue: this.props.data[row.id]
	                }),
	                React.createElement(
	                    'span',
	                    null,
	                    '-'
	                ),
	                React.createElement('input', { style: styles.input,
	                    type: componentType,
	                    title: row.name,
	                    name: row.id + '_end',
	                    placeholder: row.name,
	                    ref: row.id + '_end',
	                    value: valueEnd || '',
	                    onChange: this.handleChange,
	                    defaultValue: this.props.data[row.id]
	                })
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {

	            if (JSON.stringify(nextProps.gridConfig) !== JSON.stringify(prevState.gridConfig) || JSON.stringify(nextProps.data) !== JSON.stringify(prevState.data) || prevState.data.length === 0 || prevState.data.length !== nextProps.data.length) {
	                return { gridConfig: nextProps.gridConfig, data: nextProps.data };
	            } else return null;
	        }
	    }]);

	    return GridFilter;
	}(React.PureComponent);

	GridFilter.propTypes = {
	    gridConfig: PropTypes.array.isRequired,
	    data: PropTypes.array.isRequired
	};

	module.exports = GridFilter;

/***/ }),
/* 211 */
/***/ (function(module, exports) {

	'use strict';var _select;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}module.exports={formWidget:{marginBottom:'5px',display:'flex',flexDirection:'row'},formWidgetLabel:{display:'flex',justifyContent:'flex-end',width:'40%',marginRight:'10px'},formWidgetInput:{width:'100%',borderRadius:'2px',padding:'3px',border:'0px'},input:{borderRadius:'2px',padding:'5px',display:'inline-block'},select:(_select={borderRadius:'2px',padding:'5px',display:'inline-block',width:'auto'},_defineProperty(_select,'display','flex'),_defineProperty(_select,'marginRight','5px'),_select),wrapper:{margin:'5px',display:'flex',width:'95%'},fieldSet:{borderRadius:'2px',margin:'10px'},ui:{borderRadius:'2px',padding:'5px',display:'inline-block'},interval:{display:'inline-flex'}};

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var radium = __webpack_require__(88);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(213);
	var getTextValue = __webpack_require__(76);

	var Input = function (_React$PureComponent) {
	    _inherits(Input, _React$PureComponent);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.state = {
	            value: props.value || '',
	            readOnly: props.readOnly,
	            disabled: props.disabled,
	            valid: props.valid
	        };
	        _this.onChange = _this.onChange.bind(_this);
	        return _this;
	    }

	    // will update state if props changed


	    _createClass(Input, [{
	        key: 'onChange',
	        value: function onChange(e) {
	            var fieldValue = e.target.value;
	            this.setState({ value: fieldValue });

	            if (this.props.onChange) {
	                this.props.onChange(this.props.name, fieldValue);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var inputPlaceHolder = this.props.placeholder || this.props.title,
	                inputStyle = Object.assign({}, styles.input, this.props.width ? { width: this.props.width } : {}, this.props.style ? this.props.style : {}, this.state.readOnly ? styles.readOnly : {});

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'label',
	                    { style: styles.label, htmlFor: this.props.name, ref: 'label' },
	                    getTextValue(this.props.title)
	                ),
	                React.createElement('input', { type: 'text',
	                    id: this.props.name,
	                    ref: 'input',
	                    style: inputStyle,
	                    name: this.props.name,
	                    value: this.state.value,
	                    readOnly: this.state.readOnly,
	                    title: this.props.title,
	                    pattern: this.props.pattern,
	                    placeholder: inputPlaceHolder,
	                    onChange: this.onChange,
	                    maxLength: this.props.maxLength,
	                    disabled: this.props.disabled
	                })
	            );
	        }

	        /**
	         * установит фокус на элементы
	         */

	    }, {
	        key: 'focus',
	        value: function focus() {
	            this.refs['input'].focus();
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value || nextProps.readOnly !== prevState.readOnly) {
	                return { value: nextProps.value, readOnly: nextProps.readOnly };
	            } else return null;
	        }
	    }]);

	    return Input;
	}(React.PureComponent);

	Input.propTypes = {
	    name: PropTypes.string.isRequired,
	    value: PropTypes.string,
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    valid: PropTypes.bool,
	    placeholder: PropTypes.string,
	    pattern: PropTypes.string,
	    title: PropTypes.string
	};

	Input.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    value: '',
	    title: ''
	};

	module.exports = radium(Input);

/***/ }),
/* 213 */
/***/ (function(module, exports) {

	'use strict';module.exports={input:{width:'70%',margin:'5px 2px',borderRadius:'3px',':focus':{backgroundColor:'lightpink'},border:'1px solid gray',height:'30px'},readOnly:{backgroundColor:'#F3EFEF'},wrapper:{margin:'5px',display:'flex',width:'95%'},label:{width:'30%',margin:'5px'}};

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    ModalPage = __webpack_require__(171),
	    styles = __webpack_require__(215);

	var TextArea = __webpack_require__(216);
	var DataGrid = __webpack_require__(183);

	var ModalPageInfo = function (_React$PureComponent) {
	    _inherits(ModalPageInfo, _React$PureComponent);

	    function ModalPageInfo(props) {
	        _classCallCheck(this, ModalPageInfo);

	        var _this = _possibleConstructorReturn(this, (ModalPageInfo.__proto__ || Object.getPrototypeOf(ModalPageInfo)).call(this, props));

	        _this.state = {
	            show: _this.props.show
	        };

	        return _this;
	    }

	    // will update state if props changed


	    _createClass(ModalPageInfo, [{
	        key: 'render',
	        value: function render() {
	            var GRID_CONFIG = __webpack_require__(86).tulemused.gridConfig;

	            var systemMessage = this.props.systemMessage ? this.props.systemMessage : '',
	                data = this.props.report ? this.props.report : '',
	                modalObjects = ['btnOk'];

	            var report = this.loeTulemused(data);

	            return React.createElement(
	                ModalPage,
	                { ref: 'modalPage',
	                    style: styles.modalPage,
	                    show: this.props.show,
	                    modalPageBtnClick: this.props.modalPageBtnClick,
	                    modalPageName: 'T\xF6\xF6\xFClesanne report',
	                    modalObjects: modalObjects
	                },
	                React.createElement(
	                    'div',
	                    { ref: 'container' },
	                    React.createElement('img', { ref: 'image', src: styles.icon }),
	                    React.createElement(
	                        'span',
	                        null,
	                        ' ',
	                        systemMessage,
	                        ' '
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(TextArea, { title: 'Report',
	                            style: styles.tulemus,
	                            name: 'report',
	                            ref: 'textarea-report',
	                            value: report.kokkuVotte,
	                            readOnly: true })
	                    ),
	                    React.createElement(
	                        'div',
	                        { ref: 'grid-row-container' },
	                        React.createElement(DataGrid, {
	                            gridData: report.data,
	                            gridColumns: GRID_CONFIG,
	                            showToolBar: false,
	                            ref: 'data-grid' })
	                    )
	                )
	            );
	        }
	    }, {
	        key: 'loeTulemused',
	        value: function loeTulemused(data) {
	            var report = {
	                kokkuVotte: '',
	                data: []
	            };

	            var errors = 0;
	            // если один обьект
	            if (data && data.data && _typeof(data.data) == 'object' && !data.data.length) {
	                report.data.push({
	                    id: 1,
	                    result: data.result && !data.error_code ? 'Ok' : 'Viga',
	                    kas_vigane: data.kas_vigane ? 'Viga' : 'Ok',
	                    error_code: data.error_code,
	                    error_message: data.error_message,
	                    viitenr: data.viitenr ? data.viitenr : null
	                });
	                if (!data.result) {
	                    errors++;
	                }
	            }

	            if (data && data.data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) == 'object' && data.data.length) {
	                data.data.map(function (row, index) {
	                    report.data.push({
	                        id: row.id ? row.id : index,
	                        kas_vigane: row.kas_vigane ? 'Viga' : 'Ok',
	                        result: row.result && !row.error_code ? 'Ok' : 'Viga',
	                        error_code: row.error_code,
	                        error_message: row.error_message,
	                        viitenr: row.viitenr ? row.viitenr : null
	                    });
	                    if (!row.result) {
	                        errors++;
	                    }
	                });
	            }

	            report.kokkuVotte = 'Vead kokku ' + errors + ', Read kokku: ' + report.data.length + ', \xD5nnestus: ' + (report.data.length - errors);
	            return report;
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.show !== prevState.show) {
	                return { show: nextProps.show };
	            } else return null;
	        }
	    }]);

	    return ModalPageInfo;
	}(React.PureComponent);

	ModalPageInfo.propTypes = {
	    systemMessage: PropTypes.string,
	    modalPageBtnClick: PropTypes.func
	};

	module.exports = ModalPageInfo;

/***/ }),
/* 215 */
/***/ (function(module, exports) {

	'use strict';module.exports={icon:'/images/icons/info.png',modalPage:{height:'75%'},tulemus:{height:'2em'}};

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10),
	    styles = __webpack_require__(217);
	var radium = __webpack_require__(88);
	var getTextValue = __webpack_require__(76);

	var PropTypes = __webpack_require__(11);

	var Input = function (_React$PureComponent) {
	    _inherits(Input, _React$PureComponent);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.state = {
	            value: props.value || '',
	            readOnly: true,
	            disabled: props.disabled || true
	        };

	        _this.onChange = _this.onChange.bind(_this);

	        return _this;
	    }

	    _createClass(Input, [{
	        key: 'onChange',
	        value: function onChange(e) {
	            var fieldValue = e.target.value;

	            this.setState({ value: fieldValue });
	            if (this.props.onChange) {
	                this.props.onChange(this.props.name, fieldValue);
	            }
	        }

	        // will update state if props changed

	    }, {
	        key: 'render',
	        value: function render() {
	            var inputPlaceHolder = this.props.placeholder || this.props.title,
	                inputStyle = Object.assign({}, styles.input, this.props.width ? { width: this.props.width } : {}, this.state.readOnly ? styles.readOnly : {}, this.props.style ? this.props.style : {});

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'label',
	                    { htmlFor: this.props.name, ref: 'label',
	                        style: styles.label },
	                    React.createElement(
	                        'span',
	                        null,
	                        getTextValue(this.props.title)
	                    )
	                ),
	                React.createElement('textarea', {
	                    style: inputStyle,
	                    ref: 'input',
	                    id: this.props.name,
	                    name: this.props.name,
	                    value: this.state.value || '',
	                    readOnly: this.props.readOnly,
	                    title: this.props.title,
	                    placeholder: inputPlaceHolder,
	                    onChange: this.onChange,
	                    disabled: this.props.disabled
	                })
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value || nextProps.readOnly !== prevState.readOnly) {
	                return { value: nextProps.value, readOnly: nextProps.readOnly };
	            } else return null;
	        }
	    }]);

	    return Input;
	}(React.PureComponent);

	Input.propTypes = {
	    name: PropTypes.string.isRequired,
	    value: PropTypes.string,
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    valid: PropTypes.bool,
	    placeholder: PropTypes.string,
	    title: PropTypes.string
	};

	Input.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    title: '',
	    value: ''
	};

	module.exports = radium(Input);

/***/ }),
/* 217 */
/***/ (function(module, exports) {

	'use strict';module.exports={input:{width:'100%',borderRadius:'3px',overflow:'scroll',height:'fit-content',':focus':{backgroundColor:'lightpink'},border:'1px solid gray'},focused:{backgroundColor:'lightblue'},readOnly:{backgroundColor:'#F3EFEF'},wrapper:{margin:'5px',display:'flex',width:'98%',flexDirection:'column'},label:{margin:'5px'}};

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row wrap'/*
	                border: '1px solid blue'
	        */},docColumn:{display:'flex',flexDirection:'column',/*
	                border: '1px solid yellow',
	        */width:'50%'},doc:{position:'relative',height:'100%',display:'flex',flexDirection:'column'/*
	                border: '1px solid brown'
	        */},gridContainer:{display:'flex',flexFlow:'row wrap',height:'95%'},grid:{mainTable:{tableLayout:'fixed',position:'relative',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'},minHeight:'200px',marginBottom:'20px'},headerTable:{tableLayout:'fixed'}},limit:{width:'20%',margin:'5px 2px'},ok:{backgroundColor:'lightgreen',width:'100%',textAlign:'right'},error:{backgroundColor:'lightcoral',width:'100%',textAlign:'right'},notValid:{backgroundColor:'yellow',width:'100%',textAlign:'right'},total:{width:'auto'}};

/***/ }),
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var React = __webpack_require__(10);
	var _fetchData = __webpack_require__(41);
	var DocContext = __webpack_require__(1);
	var Menu = __webpack_require__(40);
	var DocRights = __webpack_require__(176);
	var checkRights = __webpack_require__(177);
	var LIBS_URL = __webpack_require__(86).LIBS.POST_LOAD_LIBS_URL;
	var URL = __webpack_require__(86).DOCS.POST_LOAD_DOCS_URL;

	var Form = __webpack_require__(224),
	    ToolbarContainer = __webpack_require__(71),
	    DocToolBar = __webpack_require__(228),
	    ModalPage = __webpack_require__(171),
	    ModalReport = __webpack_require__(214),
	    styles = __webpack_require__(241);

	/**
	 * Класс реализует базовый документ .
	 */

	var DocumentTemplate = function (_React$Component) {
	    _inherits(DocumentTemplate, _React$Component);

	    function DocumentTemplate(props) {
	        _classCallCheck(this, DocumentTemplate);

	        var _this = _possibleConstructorReturn(this, (DocumentTemplate.__proto__ || Object.getPrototypeOf(DocumentTemplate)).call(this, props));

	        _this.libs = {};
	        _this.state = {
	            docId: _this.props.docId, //если Id документа не передан, то создаем новый док
	            edited: _this.props.docId === 0,
	            reloadData: !Object.keys(props.initData).length,
	            gridRowEdit: false,
	            gridRowEvent: null,
	            warning: '',
	            warningStyle: '',
	            gridWarning: '',
	            checked: true,
	            loadedLibs: false,
	            libParams: {},
	            logs: [],
	            isDisableSave: props.isDisableSave,
	            docData: {},
	            isReport: false,
	            txtReport: []
	        };

	        _this.docData = Object.keys(props.initData).length ? props.initData : { id: props.docId };
	        _this.backup = {};
	        _this.requiredFields = [];
	        _this.serverValidation = [];
	        _this.bpm = [];
	        _this.pages = props.pages;
	        _this.loadingLibs = {};

	        _this._bind('btnAddClick', 'btnEditClick', 'btnLogoutClick', 'validation', 'handleInputChange', 'prepareParamsForToolbar', 'btnDeleteClick', 'btnPrintClick', 'btnEmailClick', 'btnPdfClick', 'btnSaveClick', 'btnCancelClick', 'btnTaskClick', 'fetchData', 'createLibs', 'loadLibs', 'hasLibInCache', 'addRow', 'editRow', 'handleGridBtnClick', 'handleGridRowInput', 'handleGridRow', 'validateGridRow', 'modalPageClick', 'handleGridRowChange', 'handlePageClick', 'modalPageBtnClick', 'btnLogsClick', 'handleGridCellClick', 'setDocumentName', 'modalReportePageBtnClick');

	        _this.gridRowData = {}; //будем хранить строку грида

	        return _this;
	    }

	    _createClass(DocumentTemplate, [{
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            // сохраним последнее значение дока этого типа
	            if (this.state.docId) {
	                DocContext[this.props.docTypeId.toLowerCase()] = this.state.docId;
	            }
	        }

	        /**
	         * пишем исходные данные в хранилище, регистрируем обработчики событий
	         */

	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            // сохраним в контексте тип документа, с которым мы работает
	            DocContext.docTypeId = this.props.docTypeId;

	            if (this.state.reloadData) {
	                //делаем запрос на получение данных
	                this.fetchData();
	            }

	            this.libs = this.createLibs(); //создаст объект для хранения справочников
	            if (this.props.focusElement) {
	                var focusElement = this.refs[this.props.focusElement];
	                if (focusElement) {
	                    focusElement.focus();
	                }
	            }

	            // задать имя реристра на страницу
	            this.setDocumentName();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var isInEditMode = this.state.edited;

	            if (this.props.libs.length && !this.state.loadedLibs) {
	                var kpv = new Date().toISOString().slice(0, 10);
	                if (this.docData && this.docData.kpv) {
	                    kpv = this.docData.kpv;
	                }
	                // грузим справочники
	                this.loadLibs(null, kpv);
	            }

	            var warningStyle = styles[this.state.warningType] ? styles[this.state.warningType] : null;

	            var dialogString = this.serverValidation.length > 0 ? 'Dokument ' + this.serverValidation[0].name + ' = ' + this.serverValidation[0].value + ' juba olemas. Kas j\xE4tka?' : '';
	            var btnParams = {
	                btnStart: {
	                    show: true
	                },
	                btnLogin: {
	                    show: true,
	                    disabled: false
	                },
	                btnAccount: {
	                    show: true,
	                    disabled: false
	                }

	            };

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(Menu, { params: btnParams,
	                    ref: 'menu',
	                    history: this.props.history,
	                    rekvId: DocContext.userData ? DocContext.userData.asutusId : 0,
	                    module: this.props.module ? this.props.module : DocContext.module }),
	                this.renderDocToolBar(),
	                React.createElement(
	                    Form,
	                    { pages: this.pages,
	                        ref: 'form',
	                        handlePageClick: this.handlePageClick,
	                        disabled: isInEditMode },
	                    React.createElement(
	                        ToolbarContainer,
	                        { ref: 'toolbar-container' },
	                        React.createElement(
	                            'div',
	                            { className: 'doc-toolbar-warning', style: warningStyle },
	                            this.state.warning ? React.createElement(
	                                'span',
	                                null,
	                                this.state.warning
	                            ) : null
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.doc },
	                        this.props.renderer ? this.props.renderer(this) : null
	                    )
	                ),
	                React.createElement(
	                    ModalPage,
	                    {
	                        show: this.serverValidation.length > 0,
	                        modalPageName: 'Kontrol',
	                        modalObjects: ['btnOk', 'btnCancel'],
	                        modalPageBtnClick: this.modalPageBtnClick.bind(this) },
	                    React.createElement(
	                        'div',
	                        { ref: 'container' },
	                        React.createElement('img', { ref: 'image', src: styles.modalValidate.iconImage }),
	                        React.createElement(
	                            'span',
	                            null,
	                            ' ',
	                            dialogString,
	                            ' '
	                        )
	                    )
	                ),
	                React.createElement(ModalReport, {
	                    show: this.state.isReport,
	                    report: this.state.txtReport,
	                    modalPageBtnClick: this.modalReportePageBtnClick })
	            );
	        }

	        /**
	         * Обработчик для кнопки Добавить
	         */

	    }, {
	        key: 'btnAddClick',
	        value: function btnAddClick() {
	            var _this2 = this;

	            //бекап данных
	            this.makeBackup();

	            if (this.props.history) {
	                this.props.history.push('/' + (this.props.module ? this.props.module : DocContext.module) + '/' + this.props.docTypeId + '/0');
	            }

	            this.setState({ docId: 0, edited: true }, function () {
	                _this2.fetchData().then(function () {
	                    _this2.forceUpdate();
	                });
	            });

	            if (this.props.focusElement && this.refs[this.props.focusElement]) {
	                this.refs[this.props.focusElement].focus();
	            }
	        }

	        /**
	         * Обработчик для кнопки редактировать
	         */

	    }, {
	        key: 'btnEditClick',
	        value: function btnEditClick() {
	            //в режим редактирования
	            this.setState({ edited: true, reloadData: true });
	            //бекап данных
	            this.makeBackup();

	            if (this.props.focusElement && this.refs[this.props.focusElement]) {
	                this.refs[this.props.focusElement].focus();
	            }
	        }
	    }, {
	        key: 'btnDeleteClick',
	        value: function btnDeleteClick() {
	            console.log('btnDeleteClick');
	        }
	    }, {
	        key: 'btnPrintClick',
	        value: function btnPrintClick() {
	            var url = '/print/' + this.props.docTypeId + '/' + DocContext.userData.uuid + '/' + this.state.docId;
	            window.open('' + url);
	        }
	    }, {
	        key: 'btnPdfClick',
	        value: function btnPdfClick() {
	            var url = '/pdf/' + this.props.docTypeId + '/' + DocContext.userData.uuid + '/' + this.state.docId;
	            window.open('' + url);
	        }

	        /**
	         * обработчик для кнопки отправки почты
	         */

	    }, {
	        key: 'btnEmailClick',
	        value: function btnEmailClick() {
	            var _this3 = this;

	            // если документ тип счет или извещение, то отправим напрямую, иначе переадрисуем на письмо
	            if (this.props.docTypeId.toLowerCase() == 'arv' || this.props.docTypeId.toLowerCase() == 'teatis') {
	                this.fetchData('Post', '/email').then(function (response) {
	                    if (response.status === 200) {
	                        _this3.setState({
	                            reloadData: false,
	                            warning: 'Email saadetud edukalt',
	                            warningType: 'ok'
	                        });
	                    } else {
	                        var errorMessage = response.error_message ? response.error_message : '';
	                        _this3.setState({
	                            reloadData: false,
	                            warning: 'Tekkis viga ' + errorMessage,
	                            warningType: 'error'
	                        });
	                    }
	                });
	            } else {
	                // сохраним параметры для формирования вложения в контексте
	                DocContext['email-params'] = {
	                    docId: this.state.docId,
	                    docTypeId: this.props.docTypeId,
	                    queryType: 'id' // ид - документ, where -
	                };

	                this.props.history.push('/' + (this.props.module ? this.props.module : DocContext.module) + '/e-mail/0');
	            }
	        }

	        /**
	         * Обработчик для кнопки сохранить
	         */

	    }, {
	        key: 'btnSaveClick',
	        value: function btnSaveClick() {
	            var _this4 = this;

	            this.setState({
	                edited: false,
	                warning: 'Salvestan...',
	                warningType: 'notValid'
	            });

	            this.fetchData('Put').then(function (response) {
	                if (!response) return false;
	                //call to save
	                _this4.docData = response.data[0];

	                _this4.setState({
	                    reloadData: false,
	                    warning: 'Salvestatud edukalt',
	                    warningType: 'ok',
	                    edited: false,
	                    docId: _this4.docData.id ? _this4.docData.id : 0
	                }, function () {
	                    // сохраним в контексте последние изменения
	                    DocContext[_this4.props.docTypeId] = _this4.docData.id;

	                    // обновим справочник
	                    if (DocContext.libs && DocContext.libs[_this4.props.docTypeId.toLowerCase()]) {
	                        _this4.loadLibs(_this4.props.docTypeId.toLowerCase());
	                    }

	                    // если есть в кеше , то читим
	                    var lib = _this4.props.docTypeId.toLowerCase();

	                    if (DocContext.libs && DocContext.libs[lib] && DocContext.libs[lib].length > 0) {
	                        DocContext.libs[lib] = [];
	                    }

	                    if (_this4.props.reload) {
	                        // reload / redirect
	                        setTimeout(function () {

	                            var current = '/' + (_this4.props.module ? _this4.props.module : DocContext.module) + '/' + _this4.props.docTypeId + '/' + _this4.docData.id;
	                            _this4.props.history.replace('/reload');
	                            setTimeout(function () {
	                                _this4.props.history.replace(current);
	                            });
	                        }, 2000);
	                    }
	                });
	            });
	        }

	        /**
	         * Обработчик события клика дял кнопки Отказ от сохранения
	         */

	    }, {
	        key: 'btnCancelClick',
	        value: function btnCancelClick() {
	            //востановим прежнее состояние
	            if (this.state.docId) {
	                this.restoreFromBackup();
	            } else {
	                this.props.history.goBack();
	            }
	            //режим редактирования
	            this.setState({ edited: false, warning: '', warningType: null });
	        }

	        /**
	         *
	         */

	    }, {
	        key: 'btnTaskClick',
	        value: function btnTaskClick(taskName, kpv, gruppId, tekst, kogus) {
	            var _this5 = this;

	            var task = this.bpm.find(function (task) {
	                return task.name === taskName;
	            });
	            if (!task) {
	                this.setState({
	                    warning: 'Viga, task ' + taskName + ' ei leidnud',
	                    warningType: 'error'

	                });
	                return;
	            }

	            var api = '/newApi/task/' + task.task;

	            this.setState({ warning: 'Töötan...', warningType: 'notValid' });

	            this.fetchData('Post', api, kpv || gruppId || tekst || kogus ? {
	                seisuga: kpv,
	                gruppId: gruppId,
	                viitenumber: tekst,
	                kogus: kogus
	            } : null).then(function (response) {
	                var dataRow = response.result;
	                var dataMessage = response.data.error_message ? response.data.error_message : '';

	                var docId = dataRow.docId;

	                if (docId) {

	                    _this5.setState({
	                        warning: 'Edukalt ' + dataMessage,
	                        warningType: 'ok'
	                    }, function () {

	                        setTimeout(function () {
	                            // koostatud uus dok, teeme reload
	                            var current = '/' + (_this5.props.module ? _this5.props.module : DocContext.module) + '/' + _this5.props.docTypeId + '/' + _this5.state.docId;
	                            _this5.props.history.replace('/reload');
	                            setTimeout(function () {
	                                _this5.props.history.replace(current);
	                            });
	                        }, 2000);
	                    });
	                } else if (dataMessage) {
	                    _this5.setState({
	                        warning: 'Viga, ' + dataMessage,
	                        warningType: 'error'
	                    }, function () {

	                        setTimeout(function () {
	                            // koostatud uus dok, teeme reload
	                            var current = '/' + (_this5.props.module ? _this5.props.module : DocContext.module) + '/' + _this5.props.docTypeId + '/' + _this5.state.docId;
	                            _this5.props.history.replace('/reload');
	                            setTimeout(function () {
	                                _this5.props.history.replace(current);
	                            });
	                        }, 2000);
	                    });
	                }
	            });
	        }

	        /**
	         * Выполнит запрос и покажет логи
	         */

	    }, {
	        key: 'btnLogsClick',
	        value: function btnLogsClick() {
	            var _this6 = this;

	            var api = '/newApi/logs/';

	            this.fetchData('Post', api).then(function (response) {
	                var dataRows = response.data;
	                _this6.setState({ showLogs: true, logs: dataRows });
	            });
	        }

	        /**
	         * Сделает копию текущего состояния данных
	         */

	    }, {
	        key: 'makeBackup',
	        value: function makeBackup() {
	            this.backup = JSON.stringify(this.docData);
	        }

	        /**
	         * востановить текущее состояние из копии
	         */

	    }, {
	        key: 'restoreFromBackup',
	        value: function restoreFromBackup() {
	            this.docData = JSON.parse(this.backup);
	        }

	        /**
	         * Обработчик для инпутов.
	         * @param inputName
	         * @param inputValue
	         * @returns {boolean}
	         */

	    }, {
	        key: 'handleInputChange',
	        value: function handleInputChange(inputName, inputValue) {
	            // обработчик изменений
	            // изменения допустимы только в режиме редактирования
	            if (!this.state.edited) {
	                console.error('not in edite mode');
	                return false;
	            }

	            this.docData[inputName] = inputValue;
	            if (this.props.handleInputChange) {
	                this.props.handleInputChange(inputName, inputValue);
	            }
	            this.validation();
	            this.forceUpdate();
	        }

	        /**
	         * обработчика грида
	         * @param gridData
	         */

	    }, {
	        key: 'handleGridCellClick',
	        value: function handleGridCellClick(action, docId, idx, columnId, value) {
	            if (this.docData && this.docData.gridData) {
	                this.docData.gridData[idx][columnId] = value;
	                this.setState({ docData: this.docData });

	                // если есть триггер, вызовем его
	                if (this.props.trigger) {
	                    this.props.trigger(this, idx, columnId, value);
	                }
	            }
	            this.validation();
	        }

	        /**
	         * вызовет метод валидации данных справочника (кода) и вернет результат проверки
	         * @returns {string}
	         */

	    }, {
	        key: 'validation',
	        value: function validation() {
	            var _this7 = this;

	            if (!this.state.edited) return '';

	            var warning = '',
	                notRequiredFields = [],
	                // пишем в массив поля с отсутствующими данными
	            expressionFields = [],
	                // пишем выражение
	            notMinMaxRule = [];

	            if (this.requiredFields) {

	                this.requiredFields.forEach(function (field) {
	                    if (field.name && field.name in _this7.docData) {
	                        var value = _this7.docData[field.name];

	                        if (!value && field.type !== 'B') {
	                            notRequiredFields.push(field.name);
	                        } else {
	                            if (field.serverValidation) {
	                                // send paring to server to validate

	                                _this7.fetchData('Post', '/newApi/validate/' + field.serverValidation + '/' + value).then(function (response) {
	                                    if (response.data.data.length) {

	                                        var docId = response.data.data[0].id;
	                                        var _warning = _this7.state.warning;

	                                        if (docId && docId !== _this7.state.docId) {
	                                            //переадресовка
	                                            _this7.serverValidation.push({
	                                                name: field.name,
	                                                value: value,
	                                                result: docId
	                                            });

	                                            _warning = _warning + (value + ' (' + field.name + ') juba olemas');

	                                            //svae in state
	                                            _this7.setState({
	                                                warning: _warning,
	                                                warningType: 'notValid'
	                                            });
	                                            _this7.forceUpdate();
	                                        }
	                                    }
	                                });
	                            }
	                        }
	                        // проверка на мин . макс значения

	                        // || value && value > props.max
	                        var checkValue = false;

	                        switch (field.type) {
	                            case 'D':
	                                var controlledValueD = Date.parse(value);
	                                if (field.min && controlledValueD < field.min && field.max && controlledValueD > field.max) {
	                                    checkValue = true;
	                                }
	                                break;
	                            case 'N':
	                                var controlledValueN = Number(value);

	                                if (field.min && controlledValueN === 0 || field.min && controlledValueN < field.min && field.max && controlledValueN > field.max) {
	                                    checkValue = true;
	                                }
	                                break;
	                        }
	                        if (checkValue) {
	                            notMinMaxRule.push(field.name);
	                        }

	                        // проверка на выражение
	                        if (field.expression) {
	                            var data = _this7.docData;
	                            var expression = field.expression;
	                            var result = eval(field.expression);
	                            if (!result) {
	                                expressionFields.push(field.name);
	                            }
	                        }
	                    }

	                    if (field.trigger) {
	                        field.trigger();
	                    }
	                });

	                if (notRequiredFields.length > 0) {
	                    warning = warning + ' puudub vajalikud andmed (' + notRequiredFields.join(', ') + ') ';
	                }

	                if (notMinMaxRule.length > 0) {
	                    warning = warning ? warning : '' + ' min/max on vale(' + notMinMaxRule.join(', ') + ') ';
	                }

	                if (expressionFields.length > 0) {
	                    warning = warning ? warning : '' + ' vale andmed (' + expressionFields.join(', ') + ') ';
	                }

	                this.setState({
	                    warning: warning,
	                    warningType: warning.length ? 'notValid' : null
	                });
	            }

	            return warning; // вернем извещение об итогах валидации
	        }

	        /**
	         * Вернет компонет - панель инструментов документа
	         * @returns {XML}
	         */

	    }, {
	        key: 'renderDocToolBar',
	        value: function renderDocToolBar() {
	            var toolbar = this.prepareParamsForToolbar();
	            console.log('toolbar', toolbar);
	            return React.createElement(
	                ToolbarContainer,
	                { ref: 'toolbarContainer' },
	                React.createElement(DocToolBar, { ref: 'doc-toolbar',
	                    docTypeId: this.props.docTypeId,
	                    bpm: this.bpm ? this.bpm : [],
	                    logs: this.state.logs,
	                    docId: this.state.docId,
	                    edited: this.state.edited,
	                    docStatus: this.docData.doc_status,
	                    validator: this.validation,
	                    btnAddClick: this.btnAddClick,
	                    btnEditClick: this.btnEditClick,
	                    btnCancelClick: this.btnCancelClick,
	                    btnPrintClick: this.btnPrintClick,
	                    btnEmailClick: this.btnEmailClick,
	                    btnSaveClick: this.btnSaveClick,
	                    btnLogsClick: this.btnLogsClick,
	                    btnTaskClick: this.btnTaskClick,
	                    toolbarParams: toolbar
	                })
	            );
	        }

	        /**
	         *  читаем данные со стора, формируем параметры для кнопок управления, и туда их отдаем
	         * @returns {{btnAdd: {show: boolean, disabled: boolean}, btnEdit: {show: boolean, disabled: boolean}, btnDelete: {show: boolean, disabled: boolean}, btnPrint: {show: boolean, disabled: boolean}}}
	         */

	    }, {
	        key: 'prepareParamsForToolbar',
	        value: function prepareParamsForToolbar() {
	            console.log('this.props.docTypeId', this.props.docTypeId);
	            var docRights = DocRights[this.props.docTypeId] ? DocRights[this.props.docTypeId] : [];
	            var userRoles = DocContext.userData ? DocContext.userData.roles : [];

	            return {
	                btnAdd: {
	                    show: checkRights(userRoles, docRights, 'add'),
	                    disabled: false
	                },
	                btnEdit: {
	                    show: checkRights(userRoles, docRights, 'edit'),
	                    disabled: false
	                },
	                btnSave: {
	                    show: this.state.edited,
	                    disabled: this.state.isDisableSave
	                },
	                btnDelete: {
	                    show: checkRights(userRoles, docRights, 'delete'),
	                    disabled: false
	                },
	                btnPrint: {
	                    show: checkRights(userRoles, docRights, 'print'),
	                    disabled: false
	                },
	                btnStart: {
	                    show: true
	                },
	                btnLogin: {
	                    show: true,
	                    disabled: false
	                },
	                btnAccount: {
	                    show: true,
	                    disabled: false
	                },
	                btnRekv: {
	                    show: true,
	                    disabled: false
	                }

	            };
	        }

	        /**
	         * Выполнит запросы
	         */

	    }, {
	        key: 'fetchData',
	        value: function fetchData(protocol, api, api_params) {
	            var _this8 = this;

	            var url = api ? api : URL + '/' + this.props.docTypeId + '/' + this.state.docId;
	            var method = 'fetchDataPost';
	            var params = {
	                docTypeId: this.props.docTypeId ? this.props.docTypeId : DocContext.docTypeId,
	                module: this.props.module ? this.props.module : DocContext.module,
	                userId: DocContext.userData.userId,
	                uuid: DocContext.userData.uuid,
	                docId: this.state.docId,
	                context: DocContext[api] ? DocContext[api] : null
	            };

	            if (protocol) {
	                //request call not default
	                method = 'fetchData' + protocol;
	                params = Object.assign({}, params, this.docData, api_params ? api_params : {});
	            }

	            return new Promise(function (resolved, rejected) {
	                _fetchData[method](url, params).then(function (response) {
	                    if (response.status && response.status === 401) {
	                        document.location = '/login';
	                    }

	                    if (response.data) {
	                        //execute select calls
	                        if (response.data.action && response.data.action === 'select') {
	                            _this8.docData = response.data.data[0];

	                            // will store required fields info
	                            if (response.data.data[0].requiredFields) {
	                                _this8.requiredFields = response.data.data[0].requiredFields;
	                            }

	                            // will store bpm info
	                            if (response.data.data[0].bpm) {
	                                var docRights = DocRights[_this8.props.docTypeId] ? DocRights[_this8.props.docTypeId] : [];
	                                var userRoles = DocContext.userData ? DocContext.userData.roles : [];

	                                // только доступные таски должны попасть в список
	                                _this8.bpm = response.data.data[0].bpm.filter(function (task) {
	                                    return checkRights(userRoles, docRights, task.task);
	                                });
	                            }

	                            //should return data and called for reload
	                            _this8.setState({ reloadData: false, warning: '', warningType: null });
	                            resolved(response.data.data[0]);
	                        }

	                        if (response.data.action && response.data.action === 'save' && response.data.result.error_code) {

	                            var error_teatis = response.data.result && response.data.result.error_message ? response.data.result.error_message : '';
	                            // error in save
	                            _this8.setState({
	                                warning: 'Tekkis viga: salvestamine eba\xF5nnestus ' + error_teatis,
	                                warningType: 'error',
	                                txtReport: response.data,
	                                isReport: !!(response.data.data && response.data.data.length)
	                            });

	                            return rejected();
	                        }

	                        return resolved(response.data);
	                    } else {
	                        console.error('Fetch viga ', response, params);
	                        _this8.setState({
	                            warning: 'Tekkis viga ' + (response.data.error_message ? response.data.error_message : ''),
	                            warningType: 'error'
	                        });
	                        return rejected();
	                    }
	                }).catch(function (e) {
	                    console.error('catched fetch error ' + e);
	                    _this8.setState({
	                        warning: 'Tekkis viga ' + e,
	                        warningType: 'error'
	                    });

	                    return rejected();
	                });
	            });
	        }

	        /**
	         * Обеспечит загрузку данных для библиотек
	         * libName - код справочника
	         * kpv - дата, по умолчанию сегодня
	         */

	    }, {
	        key: 'loadLibs',
	        value: function loadLibs(libName, kpv) {
	            var _this9 = this;

	            var libsCount = libName ? 1 : this.props.libs.length;

	            var libsToLoad = libName ? [libName] : Object.keys(this.libs);
	            // start loading
	            if (!this.loadingLibs[libName]) {
	                this.loadingLibs[libName] = true;
	            } else {
	                // уже идет загрузка
	                return;
	            }

	            libsToLoad.forEach(function (lib) {

	                var hasSqlWhere = lib in _this9.state.libParams;

	                new Date().toISOString().slice(0, 10); //ajutiselt

	                var params = Object.assign({
	                    module: _this9.props.module ? _this9.props.module : DocContext.module,
	                    userId: DocContext.userData.id,
	                    uuid: DocContext.userData.uuid
	                }, hasSqlWhere ? {
	                    sql: _this9.state.libParams[lib],
	                    kpv: kpv ? kpv : new Date().toISOString().slice(0, 10)
	                } : {});

	                // проверим наличие данных в кеше, если нет, то грузим
	                if (!!_this9.state.libParams[lib] || !_this9.hasLibInCache(lib)) {
	                    _fetchData.fetchDataPost(LIBS_URL + '/' + lib, params).then(function (response) {
	                        if (response && 'data' in response) {
	                            _this9.libs[lib] = response.data.result.result.data;

	                            // save lib in cache
	                            DocContext.libs[lib] = _this9.libs[lib];

	                            libsCount--;
	                            // отметка что справочник загружен
	                            _this9.loadingLibs[lib] = false;

	                            if (!libsCount && !_this9.state.loadedLibs) {
	                                //all libs loaded;
	                                _this9.setState({
	                                    loadedLibs: true,
	                                    warning: 'Kõik püsiandmed laaditud õnnestus',
	                                    warningType: 'ok'
	                                });
	                            }
	                        }
	                    }).catch(function (error) {
	                        console.error('loadLibs error', error);
	                    });
	                } else {
	                    // берем данные из кеша
	                    _this9.libs[lib] = DocContext.libs[lib].filter(function (row) {
	                        var kpv = _this9.docData.valid ? _this9.docData.valid : new Date().toISOString().slice(0, 10);
	                        kpv = _this9.docData.kpv ? _this9.docData.kpv : kpv;
	                        // есди в справочнике есть дата и она не пустая
	                        if (!row.valid || new Date(kpv) <= new Date(row.valid)) {
	                            return row;
	                        }
	                    });
	                    _this9.loadingLibs[lib] = false;

	                    libsCount--;

	                    if (!libsCount && !_this9.state.loadedLibs) {
	                        //all libs loaded;
	                        _this9.setState({
	                            loadedLibs: true,
	                            warning: 'Kõik püsiandmed laaditud õnnestus',
	                            warningType: 'ok'
	                        });
	                    }
	                }

	                if (libsCount <= 1 && !_this9.state.loadedLibs) {
	                    //all libs loaded;
	                    _this9.setState({
	                        loadedLibs: true,
	                        warning: 'Kõik püsiandmed laaditud õnnestus',
	                        warningType: 'ok'
	                    });
	                }
	            });
	        }

	        /**
	         * проверит наличии в кеше данных и если нет, то вернет false
	         * @param lib
	         * @returns {boolean}
	         */

	    }, {
	        key: 'hasLibInCache',
	        value: function hasLibInCache(lib) {
	            if (!DocContext.libs) {
	                DocContext.libs = {};
	            }
	            return !DocContext.libs[lib] || DocContext.libs[lib].length === 0 ? false : true;
	        }

	        /**
	         * вернет объект библиотек документа
	         * @returns {{}}
	         */

	    }, {
	        key: 'createLibs',
	        value: function createLibs() {
	            var _this10 = this;

	            var libs = {};
	            var libParams = {};
	            this.props.libs.forEach(function (lib) {
	                if ((typeof lib === 'undefined' ? 'undefined' : _typeof(lib)) == 'object') {
	                    //object
	                    libs[lib.id] = [];
	                    libParams[lib.id] = lib.filter;
	                } else {
	                    libs[lib] = [];
	                }
	            });
	            this.setState({ libParams: libParams }, function () {
	                return _this10.loadLibs();
	            });
	            return libs;
	        }

	        /**
	         * Если есть в пропсах метод создания строки грида, вызовет его
	         */

	    }, {
	        key: 'createGridRow',
	        value: function createGridRow() {
	            var gridRow = void 0;
	            if (this.props.createGridRow) {
	                gridRow = this.props.createGridRow(this);
	            }
	            return gridRow;
	        }

	        /**
	         * Обработчик события клика на вкладку страницы
	         * @param page
	         */

	    }, {
	        key: 'handlePageClick',
	        value: function handlePageClick(page) {
	            var _this11 = this;

	            if (page.handlePageClick) {
	                page.handlePageClick(page.docTypeId);
	            } else if (page.docId) {
	                var current = '/' + DocContext.module + '/' + page.docTypeId + '/' + page.docId;
	                this.props.history.replace('/reload');
	                setTimeout(function () {
	                    _this11.props.history.replace(current);
	                });
	            }
	        }

	        /**
	         * обработчик событий для панели инструментов грида
	         */

	    }, {
	        key: 'handleGridBtnClick',
	        value: function handleGridBtnClick(btnName, activeRow, id, docTypeId) {

	            if (this.props.handleGridBtnClick) {
	                // если есть обработчик, то отдаем туда, иначе вызываем метод на редактирование строки
	                this.props.handleGridBtnClick(btnName, activeRow, id, docTypeId);
	            } else {
	                switch (btnName.toLowerCase()) {
	                    case 'add':
	                        this.addRow();
	                        break;
	                    case 'lisa':
	                        this.addRow();
	                        break;
	                    case 'edit':
	                        this.editRow();
	                        break;
	                    case 'muuda':
	                        this.editRow();
	                        break;
	                    case 'delete':
	                        this.deleteRow();
	                        break;
	                    case 'kustuta':
	                        this.deleteRow();
	                        break;
	                    default:
	                        console.log('Vigane click . ', btnName.toLowerCase());

	                }
	            }
	        }

	        /**
	         *  управление модальным окном
	         * @param gridEvent
	         */

	    }, {
	        key: 'handleGridRow',
	        value: function handleGridRow(gridEvent) {
	            this.setState({ gridRowEdit: true, gridRowEvent: gridEvent });
	        }

	        /**
	         * добавит в состояние новую строку
	         */

	    }, {
	        key: 'addRow',
	        value: function addRow() {
	            //если не задан конфиг грида, то вернет фальш
	            if (!this.docData.gridConfig.length) {
	                return;
	            }

	            var gridColumns = this.docData.gridConfig,
	                newRow = {};

	            //создадим объект - строку грида
	            for (var i = 0; i < gridColumns.length; i++) {
	                var field = gridColumns[i].id;
	                newRow[field] = '';
	            }

	            newRow.id = 'NEW' + Math.random(); // генерим новое ид

	            this.gridRowData = newRow;

	            // откроем модальное окно для редактирования
	            this.setState({ gridRowEdit: true, gridRowEvent: 'add' });
	        }

	        /**
	         * откроет активную строку для редактирования
	         */

	    }, {
	        key: 'editRow',
	        value: function editRow() {
	            this.gridRowData = this.docData.gridData[this.refs['data-grid'].state.activeRow];

	            // откроем модальное окно для редактирования
	            this.setState({ gridRowEdit: true, gridRowEvent: 'edit' });
	        }

	        /**
	         * удалит активную строку
	         */

	    }, {
	        key: 'deleteRow',
	        value: function deleteRow() {
	            this.docData.gridData.splice(this.refs['data-grid'].state.activeRow, 1);

	            // перерасчет итогов
	            if (this.props.recalcDoc) {
	                this.props.recalcDoc();
	            }

	            this.validation();

	            // изменим состояние
	            this.forceUpdate();
	        }

	        /**
	         * Обработчик для строк грида
	         * @param name
	         * @param value
	         */

	    }, {
	        key: 'handleGridRowInput',
	        value: function handleGridRowInput(name, value) {
	            var rea = this.docData.gridConfig.filter(function (row) {
	                if (row.id === name) {
	                    return row;
	                }
	            });

	            var columnType = rea.length && rea[0].type ? rea[0].type : 'text';

	            switch (columnType) {
	                case 'text':
	                    this.gridRowData[name] = String(value);
	                    break;
	                case 'number':
	                    this.gridRowData[name] = Number(value);
	                    break;
	                default:
	                    this.gridRowData[name] = value;
	            }
	            this.forceUpdate();
	            this.validateGridRow();
	        }

	        /**
	         * отслеживаем изменения данных на форме
	         * @param name
	         * @param value
	         */

	    }, {
	        key: 'handleGridRowChange',
	        value: function handleGridRowChange(name, value) {
	            this.gridRowData[name] = value;
	            this.forceUpdate();
	            this.validateGridRow();
	        }

	        /**
	         * will check values on the form and return string with warning
	         */

	    }, {
	        key: 'validateGridRow',
	        value: function validateGridRow() {
	            var warning = '';

	            if (this.props.gridValidator) {
	                warning = this.props.gridValidator(this.gridRowData);
	            }

	            if (warning.length > 2) {
	                // есть проблемы
	                warning = 'Отсутсвуют данные:' + warning;
	            }

	            this.setState({ checked: true, gridWarning: warning });
	        }

	        /**
	         * отработаем Ok из модального окна
	         * @param btnEvent
	         * @param data
	         */

	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(btnEvent, data) {
	            var _this12 = this;

	            var showModal = false;

	            if (btnEvent === 'Ok' || btnEvent === 'OK') {
	                // ищем по ид строку в данных грида, если нет, то добавим строку
	                if (!this.docData.gridData.length || !this.docData.gridData.some(function (row) {
	                    return row.id === _this12.gridRowData.id;
	                })) {
	                    // вставка новой строки
	                    this.docData.gridData.splice(0, 0, this.gridRowData);
	                } else {
	                    this.docData.gridData = this.docData.gridData.map(function (row) {
	                        if (row.id === _this12.gridRowData.id) {
	                            // нашли, замещаем
	                            return _this12.gridRowData;
	                        } else {
	                            return row;
	                        }
	                    });
	                }

	                showModal = !!this.state.warning;
	            }

	            if (this.props.recalcDoc) {
	                this.props.recalcDoc();
	            }
	            this.setState({ gridRowEdit: showModal });
	            return showModal;
	        }
	    }, {
	        key: '_bind',
	        value: function _bind() {
	            var _this13 = this;

	            for (var _len = arguments.length, methods = Array(_len), _key = 0; _key < _len; _key++) {
	                methods[_key] = arguments[_key];
	            }

	            methods.forEach(function (method) {
	                if (_this13[method]) {
	                    _this13[method] = _this13[method].bind(_this13);
	                }
	            });
	        }

	        /**
	         * обработчик для кнопки модального окна
	         * @param btnEvent
	         */

	    }, {
	        key: 'modalPageBtnClick',
	        value: function modalPageBtnClick(btnEvent) {
	            var _this14 = this;

	            //получим значение
	            var docId = this.serverValidation[0].result;

	            // обнулим итог валидации
	            this.serverValidation = [];

	            if (btnEvent === 'Ok') {
	                // редайрект
	                // koostatud uus dok,
	                this.props.history.push('/' + (this.props.module ? this.props.module : DocContext.module) + '/' + this.props.docTypeId + '/' + docId);

	                var current = '/' + (this.props.module ? this.props.module : DocContext.module) + '/' + this.props.docTypeId + '/' + docId;
	                this.props.history.replace('/reload');
	                setTimeout(function () {
	                    _this14.props.history.replace(current);
	                });
	            } else {
	                this.forceUpdate();
	            }
	        }

	        //поиск названия регистра

	    }, {
	        key: 'setDocumentName',
	        value: function setDocumentName() {
	            var _this15 = this;

	            var docType = DocContext['menu'].find(function (row) {
	                return row.kood === _this15.props.docTypeId;
	            });
	            if (docType) {
	                DocContext.pageName = docType.name;
	            }
	        }

	        /**
	         * уберет окно с отчетом
	         */

	    }, {
	        key: 'modalReportePageBtnClick',
	        value: function modalReportePageBtnClick(event) {
	            var isReport = event && event == 'Ok' ? false : true;
	            this.setState({ isReport: isReport });
	        }
	    }]);

	    return DocumentTemplate;
	}(React.Component);

	DocumentTemplate.propTypes = {
	    initData: PropTypes.object, //Содержание документа
	    requiredFields: PropTypes.array, // обязательные поля
	    edited: PropTypes.bool, //режим редактирования
	    docTypeId: PropTypes.string.isRequired, //тип документа
	    docId: PropTypes.number.isRequired, //id документа
	    libs: PropTypes.array, //список библиотек
	    renderer: PropTypes.func, //частные компонеты документа
	    recalcDoc: PropTypes.func, //перерасчет сумм документа
	    focusElement: PropTypes.string //елемент на который будет отдан фокус при редактировании
	};

	DocumentTemplate.defaultProps = {
	    initData: [],
	    docId: 0,
	    edited: false,
	    requiredFields: [],
	    pages: [],
	    libs: [],
	    isDisableSave: false,
	    isGridDataSave: false
	};

	module.exports = DocumentTemplate;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    PageLabel = __webpack_require__(225),
	    styles = __webpack_require__(227);

	var Form = function (_React$PureComponent) {
	    _inherits(Form, _React$PureComponent);

	    function Form(props) {
	        _classCallCheck(this, Form);

	        var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

	        _this.handlePageClick = _this.handlePageClick.bind(_this);

	        return _this;
	    }

	    /**
	     * Обработчик клика вкладки
	     * @param page
	     */


	    _createClass(Form, [{
	        key: 'handlePageClick',
	        value: function handlePageClick(page) {

	            if (this.props.handlePageClick) {
	                this.props.handlePageClick(page);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var pages = this.props.pages;
	            return React.createElement(
	                'div',
	                null,
	                pages.length ? pages.map(function (page, idx) {
	                    return React.createElement(PageLabel, {
	                        key: idx,
	                        active: idx == 0 ? true : false,
	                        handlePageClick: _this2.handlePageClick,
	                        page: page,
	                        disabled: _this2.props.disabled,
	                        ref: 'page-' + idx });
	                }) : null,
	                React.createElement(
	                    'div',
	                    { style: styles.page },
	                    this.props.children
	                )
	            );
	        }
	    }]);

	    return Form;
	}(React.PureComponent);

	Form.propTypes = {
	    pages: PropTypes.array.isRequired,
	    handlePageClick: PropTypes.func,
	    disabled: PropTypes.bool
	};

	Form.defaultProps = {
	    disabled: false.valueOf(),
	    pages: []
	};

	module.exports = Form;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(226);

	var PageLabel = function (_React$PureComponent) {
	    _inherits(PageLabel, _React$PureComponent);

	    function PageLabel(props) {
	        _classCallCheck(this, PageLabel);

	        var _this = _possibleConstructorReturn(this, (PageLabel.__proto__ || Object.getPrototypeOf(PageLabel)).call(this, props));

	        _this.state = {
	            disabled: props.disabled
	        };

	        _this.handleClick = _this.handleClick.bind(_this);

	        return _this;
	    }

	    // will update state if props changed


	    _createClass(PageLabel, [{
	        key: 'handleClick',
	        value: function handleClick() {
	            // обработчик на событие клик, подгружаем связанный документ

	            if (this.state.disabled) {
	                return;
	            }

	            var page = this.props.page;

	            if (this.props.handlePageClick) {
	                this.props.handlePageClick(page);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var page = this.props.page,
	                style = Object.assign({}, styles.pageLabel, this.props.active ? { backgroundColor: 'white' } : {});

	            return React.createElement(
	                'label',
	                { style: style,
	                    disabled: this.state.disabled,
	                    ref: 'pageLabel',
	                    onClick: this.handleClick },
	                page.pageName
	            );
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.disabled !== prevState.disabled) {
	                return { disabled: nextProps.disabled };
	            } else return null;
	        }
	    }]);

	    return PageLabel;
	}(React.PureComponent);

	PageLabel.propTypes = {
	    handlePageClick: PropTypes.func,
	    page: PropTypes.object.isRequired,
	    disabled: PropTypes.bool,
	    active: PropTypes.bool
	};

	PageLabel.defaultProps = {
	    disabled: false,
	    active: true
	};

	module.exports = PageLabel;

/***/ }),
/* 226 */
/***/ (function(module, exports) {

	'use strict';module.exports={pageLabel:{border:'1px solid lightGrey',borderRadius:'3px',borderBottom:'1px solid white',margin:'5px',marginLeft:'-7px',padding:'2px 10px 2px 10px'}};

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	'use strict';module.exports={page:{/*
	        border:'1px solid black',
	*/borderRadius:'3px'},icons:{add:'images/icons/add.png',edit:'images/icons/edit.png',delete:'images/icons/delete.png',filter:'images/icons/filter.png',print:'images/icons/print.png',ok:'images/icons/ok.png',cancel:'images/icons/cancel.png'}};

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	//const {withRouter} = require('react-router-dom');

	var React = __webpack_require__(10),
	    ToolbarContainer = __webpack_require__(71),
	    BtnAdd = __webpack_require__(78),
	    BtnEdit = __webpack_require__(80),
	    BtnSave = __webpack_require__(229),
	    BtnCancel = __webpack_require__(230),
	    BtnPrint = __webpack_require__(204),
	    BtnEmail = __webpack_require__(208),
	    BtnPdf = __webpack_require__(205),
	    BtnLogs = __webpack_require__(231),
	    TaskWidget = __webpack_require__(233);

	var DocToolBar = function (_React$PureComponent) {
	    _inherits(DocToolBar, _React$PureComponent);

	    function DocToolBar(props) {
	        _classCallCheck(this, DocToolBar);

	        var _this = _possibleConstructorReturn(this, (DocToolBar.__proto__ || Object.getPrototypeOf(DocToolBar)).call(this, props));

	        _this.btnEditClick = _this.btnEditClick.bind(_this);
	        _this.btnAddClick = _this.btnAddClick.bind(_this);
	        _this.btnSaveClick = _this.btnSaveClick.bind(_this);
	        _this.btnCancelClick = _this.btnCancelClick.bind(_this);
	        _this.btnPrintClick = _this.btnPrintClick.bind(_this);
	        _this.btnPdfClick = _this.btnPdfClick.bind(_this);
	        _this.btnEmailClick = _this.btnEmailClick.bind(_this);
	        _this.btnLogsClick = _this.btnLogsClick.bind(_this);
	        _this.handleButtonTask = _this.handleButtonTask.bind(_this);
	        _this.handleSelectTask = _this.handleSelectTask.bind(_this);

	        _this.docId = null;

	        if (props.docId) {
	            _this.docId = props.docId;
	        }
	        _this.state = {
	            docStatus: props.docStatus
	        };
	        return _this;
	    }

	    _createClass(DocToolBar, [{
	        key: 'render',
	        value: function render() {
	            var isEditMode = this.props.edited,
	                isDocDisabled = this.props.docStatus === 2,
	                docId = this.docId;

	            // кнопки режима редактирования должны пропасть если редактирование и показывать если разрешено
	            var kas_add = this.props.toolbarParams ? this.props.toolbarParams['btnAdd'].show : true;
	            if (kas_add && isEditMode) {
	                kas_add = false;
	            }
	            var kas_edit = this.props.toolbarParams ? this.props.toolbarParams['btnEdit'].show : true;
	            if (kas_edit && isEditMode) {
	                kas_edit = false;
	            }

	            var toolbarParams = {
	                btnAdd: {
	                    show: kas_add,
	                    disabled: isEditMode
	                },
	                btnEdit: {
	                    show: kas_edit,
	                    disabled: isDocDisabled
	                },
	                btnPrint: {
	                    show: true,
	                    disabled: false
	                },
	                btnEmail: {
	                    show: true,
	                    disabled: false
	                },
	                btnSave: {
	                    show: isEditMode && !isDocDisabled,
	                    disabled: this.props.toolbarParams && this.props.toolbarParams['btnSave'] ? this.props.toolbarParams['btnSave'].disabled : false
	                },
	                btnCancel: {
	                    show: isEditMode && docId !== 0,
	                    disabled: false
	                }
	            };

	            return React.createElement(
	                ToolbarContainer,
	                { ref: 'toolbarContainer' },
	                React.createElement(BtnAdd, { ref: 'btnAdd',
	                    onClick: this.btnAddClick,
	                    show: toolbarParams['btnAdd'].show,
	                    disabled: toolbarParams['btnAdd'].disabled }),
	                React.createElement(BtnEdit, { ref: 'btnEdit',
	                    value: 'Muuda',
	                    onClick: this.btnEditClick,
	                    show: toolbarParams['btnEdit'].show,
	                    disabled: toolbarParams['btnEdit'].disabled }),
	                React.createElement(BtnSave, { ref: 'btnSave',
	                    value: 'Salvesta',
	                    onClick: this.btnSaveClick,
	                    show: toolbarParams['btnSave'].show,
	                    disabled: toolbarParams['btnSave'].disabled }),
	                React.createElement(BtnCancel, { ref: 'btnCancel',
	                    value: 'Tühista',
	                    onClick: this.btnCancelClick,
	                    show: toolbarParams['btnCancel'].show,
	                    disabled: toolbarParams['btnCancel'].disabled }),
	                React.createElement(BtnPrint, { ref: 'btnPrint',
	                    value: 'Trükk',
	                    onClick: this.btnPrintClick,
	                    show: toolbarParams['btnPrint'].show,
	                    disabled: toolbarParams['btnPrint'].disabled }),
	                React.createElement(BtnEmail, { ref: 'btnEmail',
	                    docTypeId: this.props.docTypeId,
	                    onClick: this.btnEmailClick,
	                    show: toolbarParams['btnEmail'].show,
	                    disabled: toolbarParams['btnEmail'].disabled }),
	                React.createElement(BtnLogs, { ref: 'btnLogs',
	                    data: this.props.logs,
	                    onClick: this.btnLogsClick,
	                    show: !isEditMode }),
	                this.props.bpm.length && !isDocDisabled && !isEditMode ? React.createElement(TaskWidget, { ref: 'taskWidget',
	                    taskList: this.props.bpm,
	                    handleSelectTask: this.handleSelectTask,
	                    handleButtonTask: this.handleButtonTask
	                }) : null
	            );
	        }

	        /**
	         * Вызовет метод перехода на новый документ
	         */

	    }, {
	        key: 'btnAddClick',
	        value: function btnAddClick() {
	            if (this.props.btnAddClick) {
	                this.props.btnAddClick();
	            } else {
	                console.error('method add not exists in props');
	            }
	        }

	        /**
	         * обработчик для кнопки Edit
	         */

	    }, {
	        key: 'btnEditClick',
	        value: function btnEditClick() {
	            // переводим документ в режим редактирования, сохранен = false
	            if (!this.props.docStatus || this.props.docStatus < 2) {
	                //this.docId
	                if (this.props.history) {
	                    return this.props.history.push('/raama/' + value);
	                }

	                if (this.props.btnEditClick) {
	                    this.props.btnEditClick();
	                } else {
	                    console.error('method edit not exists in props');
	                }
	            }
	        }
	    }, {
	        key: 'btnPrintClick',
	        value: function btnPrintClick() {
	            if (this.props.btnPrintClick) {
	                this.props.btnPrintClick();
	            }
	        }
	    }, {
	        key: 'btnPdfClick',
	        value: function btnPdfClick() {
	            if (this.props.btnPdfClick) {
	                this.props.btnPdfClick();
	            }
	        }

	        /**
	         * обработчик для кнопки email
	         */

	    }, {
	        key: 'btnEmailClick',
	        value: function btnEmailClick() {
	            if (this.props.btnEmailClick) {
	                this.props.btnEmailClick();
	            }
	        }

	        /**
	         * обработчик для кнопки Save
	         */

	    }, {
	        key: 'btnSaveClick',
	        value: function btnSaveClick() {
	            // валидатор
	            var validationMessage = this.props.validator ? this.props.validator() : '',
	                isValid = this.props.validator ? !validationMessage : true;

	            if (isValid) {
	                // если прошли валидацию, то сохранеям
	                if (this.props.btnSaveClick) {
	                    this.props.btnSaveClick();
	                } else {
	                    console.error('method save not exists in props');
	                }
	            } else {
	                console.log('Document is not valid', isValid);
	            }
	        }

	        /**
	         * Обработчик для события клика для кнопки Отказ
	         */

	    }, {
	        key: 'btnCancelClick',
	        value: function btnCancelClick() {
	            if (this.props.btnCancelClick) {
	                this.props.btnCancelClick();
	            } else {
	                console.error('method cancel not exists in props');
	            }
	        }
	    }, {
	        key: 'btnLogsClick',
	        value: function btnLogsClick() {
	            if (this.props.btnLogsClick) {
	                this.props.btnLogsClick();
	            }
	        }
	    }, {
	        key: 'handleButtonTask',
	        value: function handleButtonTask(taskName, kpv, gruppId, tekst, kogus) {
	            // ишем таску
	            var task = this.props.bpm.find(function (row) {
	                return row.name === taskName;
	            });

	            if (task) {
	                // метод вызывается при выборе задачи
	                return this.props.btnTaskClick(task.name, kpv, gruppId, tekst, kogus);
	            }
	        }
	    }, {
	        key: 'handleSelectTask',
	        value: function handleSelectTask(e) {
	            // метод вызывается при выборе задачи
	            var taskValue = e.target.value;
	            if (this.props.btnTaskClick) {
	                return this.props.btnTaskClick(taskValue);
	            }
	        }
	    }]);

	    return DocToolBar;
	}(React.PureComponent);

	DocToolBar.propTypes = {
	    bpm: PropTypes.array,
	    edited: PropTypes.bool,
	    docStatus: PropTypes.number,
	    validator: PropTypes.func
	};

	DocToolBar.defaultProps = {
	    bpm: [],
	    edited: false,
	    docStatus: 0
	};

	//module.exports = withRouter(DocToolBar);
	module.exports = DocToolBar;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'save';

	var ButtonRegisterSave = function (_React$PureComponent) {
	    _inherits(ButtonRegisterSave, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterSave(props) {
	        _classCallCheck(this, ButtonRegisterSave);

	        var _this = _possibleConstructorReturn(this, (ButtonRegisterSave.__proto__ || Object.getPrototypeOf(ButtonRegisterSave)).call(this, props));

	        _this.state = {
	            disabled: props.disabled
	        };
	        return _this;
	    }

	    _createClass(ButtonRegisterSave, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            // дисейблим кнопку
	            if (!this.state.disabled) {
	                this.setState({ disabled: true });
	                return this.props.onClick();
	            }
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(nextProps) {
	            this.setState({ disabled: nextProps.disabled });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnSave',
	                    value: 'Save',
	                    show: this.props.show,
	                    disabled: this.state.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterSave;
	}(React.PureComponent);

	ButtonRegisterSave.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    disabled: PropTypes.bool
	};

	ButtonRegisterSave.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonRegisterSave;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'cancel';

	var ButtonRegisterCancel = function (_React$PureComponent) {
	    _inherits(ButtonRegisterCancel, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterCancel(props) {
	        _classCallCheck(this, ButtonRegisterCancel);

	        var _this = _possibleConstructorReturn(this, (ButtonRegisterCancel.__proto__ || Object.getPrototypeOf(ButtonRegisterCancel)).call(this, props));

	        _this.state = {
	            disabled: props.disabled
	        };
	        return _this;
	    }

	    _createClass(ButtonRegisterCancel, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick();
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(nextProps) {
	            this.setState({ disabled: nextProps.disabled });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnCancel',
	                    value: 'Cancel',
	                    show: this.props.show,
	                    disabled: this.state.disabled,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterCancel;
	}(React.PureComponent);

	ButtonRegisterCancel.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    disabled: PropTypes.bool
	};

	ButtonRegisterCancel.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonRegisterCancel;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(232),
	    DataGrid = __webpack_require__(183),
	    Button = __webpack_require__(75),
	    BtnInfo = __webpack_require__(81),
	    ModalPage = __webpack_require__(171);

	var GRID_CONFIG = __webpack_require__(86).logs.gridConfig;

	var ShowLogs = function (_React$PureComponent) {
	    _inherits(ShowLogs, _React$PureComponent);

	    function ShowLogs(props) {
	        _classCallCheck(this, ShowLogs);

	        var _this = _possibleConstructorReturn(this, (ShowLogs.__proto__ || Object.getPrototypeOf(ShowLogs)).call(this, props));

	        _this.state = {
	            show: !!_this.props.data.length
	        };

	        _this.modalPageClick = _this.modalPageClick.bind(_this);
	        return _this;
	    }

	    _createClass(ShowLogs, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return this.state.show ? this.modalPage() : React.createElement(
	                Button,
	                {
	                    ref: 'btnLogs',
	                    value: 'Loggid',
	                    show: this.props.show,
	                    onClick: function onClick(e) {
	                        return _this2.handleClick(e);
	                    } },
	                React.createElement('img', { ref: 'image', src: styles.button.icon })
	            );
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick() {
	            this.props.onClick();
	            this.setState({
	                show: true
	            });
	        }
	    }, {
	        key: 'modalPage',
	        value: function modalPage() {
	            var modalObjects = ['btnOk'];

	            return React.createElement(
	                ModalPage,
	                {
	                    modalObjects: modalObjects,
	                    ref: 'modalpage-grid',
	                    show: true,
	                    modalPageBtnClick: this.modalPageClick,
	                    modalPageName: 'Loggid' },
	                React.createElement(
	                    'div',
	                    { style: styles.btnInfo },
	                    React.createElement(BtnInfo, { ref: 'btnInfo',
	                        value: '',
	                        docTypeId: 'logid',
	                        show: true })
	                ),
	                React.createElement(
	                    'div',
	                    { ref: 'grid-row-container' },
	                    React.createElement(DataGrid, { gridData: this.props.data.data,
	                        gridColumns: GRID_CONFIG,
	                        showToolBar: false,
	                        ref: 'data-grid' })
	                )
	            );
	        }
	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(event) {
	            if (event === 'Ok') {

	                // показать новое значение
	                this.setState({ show: false });
	            }
	        }
	    }]);

	    return ShowLogs;
	}(React.PureComponent);

	ShowLogs.propTypes = {
	    show: PropTypes.bool
	};

	ShowLogs.defaultProps = {
	    show: true
	};

	module.exports = ShowLogs;

/***/ }),
/* 232 */
/***/ (function(module, exports) {

	'use strict';module.exports={wrapper:{margin:'5px',display:'flex',width:'95%'},button:{icon:'/images/icons/info.png',width:'10%'},btnInfo:{display:'flex',flexDirection:'row-reverse'}};

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var getNow = __webpack_require__(234);
	var React = __webpack_require__(10),
	    Button = __webpack_require__(235),
	    ButtonOpen = __webpack_require__(75),
	    Select = __webpack_require__(164),
	    InputDate = __webpack_require__(236),
	    InputText = __webpack_require__(212),
	    InputNumber = __webpack_require__(238),
	    ModalPage = __webpack_require__(171),
	    styles = __webpack_require__(240);
	var DocContext = __webpack_require__(1);

	var TaskWidget = function (_React$PureComponent) {
	    _inherits(TaskWidget, _React$PureComponent);

	    function TaskWidget(props) {
	        _classCallCheck(this, TaskWidget);

	        var _this = _possibleConstructorReturn(this, (TaskWidget.__proto__ || Object.getPrototypeOf(TaskWidget)).call(this, props));

	        _this.state = {
	            taskList: props.taskList || [],
	            actualTask: props.taskList[0].name,
	            showList: false,
	            showModal: false,
	            showDate: true,
	            titleDate: null,
	            showViitenumber: false,
	            titleViitenumber: null,
	            showYksus: props.kasShowYksus,
	            titleYksus: null,
	            showKogus: props.kasShowKogus,
	            titleKogus: null,
	            viitenumber: null,
	            yksus: 0,
	            kogus: DocContext.mkJaak ? DocContext.mkJaak : 0,
	            seisuga: getNow()
	        };
	        _this.handleSelectTask = _this.handleSelectTask.bind(_this);
	        _this.handleButtonTask = _this.handleButtonTask.bind(_this);
	        _this.handleButtonOpenClick = _this.handleButtonOpenClick.bind(_this);
	        _this.modalPageClick = _this.modalPageClick.bind(_this);
	        _this.handleInputChange = _this.handleInputChange.bind(_this);
	        return _this;
	    }

	    _createClass(TaskWidget, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            if (!this.state.taskList) return React.createElement('div', null);

	            var tasks = this.state.taskList.map(function (task, index) {
	                return { id: index++, name: ' ', kood: task.name };
	            });

	            var taskId = tasks.findIndex(function (task) {
	                return task.name == _this2.state.actualTask;
	            });

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'div',
	                    null,
	                    React.createElement(
	                        'div',
	                        { style: styles.wrapper },
	                        React.createElement(Button, {
	                            ref: 'buttonTask',
	                            onClick: this.handleButtonTask,
	                            value: this.state.actualTask
	                        }),
	                        React.createElement(ButtonOpen, {
	                            ref: 'buttonOpenList',
	                            onClick: this.handleButtonOpenClick,
	                            value: 'v' })
	                    ),
	                    this.state.showList ? React.createElement(Select, { name: 'name',
	                        style: styles.select,
	                        data: tasks,
	                        collId: 'kood',
	                        value: this.state.actualTask || '',
	                        defaultValue: this.state.actualTask,
	                        ref: 'select-name',
	                        onChange: this.handleSelectTask,
	                        readOnly: false }) : null,
	                    this.state.showModal ? React.createElement(
	                        ModalPage,
	                        {
	                            modalPageBtnClick: this.modalPageClick,
	                            modalPageName: 'Tegevus',
	                            show: true,
	                            modalObjects: ['btnOk', 'btnCancel']
	                        },
	                        'Kas k\xE4ivata ' + this.state.actualTask + ' ?',
	                        this.state.showDate ? React.createElement(InputDate, { title: this.state.titleDate ? this.state.titleDate : 'Seisuga ',
	                            name: 'seisuga',
	                            value: this.state.seisuga,
	                            ref: 'input-kpv',
	                            readOnly: false,
	                            onChange: this.handleInputChange }) : null,
	                        this.state.showYksus ? React.createElement(Select, { title: this.state.titleYksus ? this.state.titleYksus : "Üksus:",
	                            name: 'yksus',
	                            libs: 'lapse_grupp',
	                            data: DocContext.libs.lapse_grupp ? DocContext.libs.lapse_grupp : [],
	                            ref: 'select-lapse_grupp',
	                            collId: 'id',
	                            onChange: this.handleInputChange,
	                            value: this.state.yksus || 0,
	                            disabled: false,
	                            readOnly: false
	                        }) : null,
	                        this.state.showViitenumber ? React.createElement(InputText, {
	                            title: this.state.titleViitenumber ? this.state.titleViitenumber : "Viitenumber:",
	                            name: 'viitenumber',
	                            ref: 'input-viitenumber',
	                            onChange: this.handleInputChange,
	                            value: this.state.viitenumber,
	                            readOnly: false
	                        }) : null,
	                        this.state.showKogus ? React.createElement(InputNumber, { title: this.state.titleKogus ? this.state.titleKogus : 'Väärtus',
	                            name: 'kogus',
	                            value: Number(this.state.kogus),
	                            ref: 'input-kogus',
	                            readOnly: false,
	                            max: DocContext.mkJaak ? DocContext.mkJaak : 999999999,
	                            onChange: this.handleInputChange }) : null
	                    ) : null
	                )
	            );
	        }
	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(btnEvent) {
	            this.setState({ showModal: false });
	            if (btnEvent === 'Ok') {
	                this.props.handleButtonTask(this.state.actualTask, this.state.seisuga, this.state.yksus, this.state.viitenumber, this.state.kogus);
	            }
	        }
	    }, {
	        key: 'handleButtonOpenClick',
	        value: function handleButtonOpenClick() {
	            var isShow = !this.state.showList;
	            this.setState({ showList: isShow });
	        }
	    }, {
	        key: 'handleSelectTask',
	        value: function handleSelectTask(name, value) {
	            var isShow = !this.state.showList;
	            var task = this.state.taskList.find(function (task) {
	                return task.name == value;
	            });
	            var isShowDate = task && task.hasOwnProperty('hideDate') ? !task.hideDate : true;
	            var showYksus = task && task.hasOwnProperty('showYksus') ? task.showYksus : false;
	            var showViitenumber = task && task.hasOwnProperty('showViitenumber') ? task.showViitenumber : false;
	            var showKogus = task && task.hasOwnProperty('showKogus') ? task.showKogus : false;

	            this.setState({
	                showList: isShow,
	                actualTask: value,
	                showDate: isShowDate,
	                titleDate: task.titleDate ? task.titleDate : null,
	                showYksus: showYksus,
	                showViitenumber: showViitenumber,
	                titleViitenumber: task.titleViitenumber ? task.titleViitenumber : null,
	                showKogus: showKogus,
	                titleKogus: task.titleKogus ? task.titleKogus : null
	            });
	        }
	    }, {
	        key: 'handleButtonTask',
	        value: function handleButtonTask() {
	            var _this3 = this;

	            var showYksus = this.state.showYksus;
	            var showViitenumber = this.state.showViitenumber;
	            var showKogus = this.state.showKogus;
	            var task = this.state.taskList.find(function (task) {
	                return task.name == _this3.state.actualTask;
	            });
	            var isShowDate = task && task.hasOwnProperty('hideDate') ? !task.hideDate : true;
	            var isShowViitenumber = task && task.hasOwnProperty('showViitenumber') ? task.showViitenumber : false;
	            var isShowKogus = task && task.hasOwnProperty('showKogus') ? task.showKogus : false;

	            showYksus = task && task.hasOwnProperty('showYksus') ? task.showYksus : false;

	            this.setState({
	                showModal: true,
	                showYksus: showYksus,
	                showDate: isShowDate,
	                showKogus: isShowKogus,
	                showViitenumber: isShowViitenumber
	            });
	        }

	        //will save value

	    }, {
	        key: 'handleInputChange',
	        value: function handleInputChange(name, value) {
	            var stateValue = {
	                seisuga: this.state.seisuga,
	                yksus: this.state.yksus,
	                viitenumber: this.state.viitenumber,
	                kogus: this.state.kogus
	            };
	            stateValue[name] = value;
	            this.setState(stateValue);
	        }
	    }]);

	    return TaskWidget;
	}(React.PureComponent);

	TaskWidget.propTypes = {
	    taskList: PropTypes.array,
	    handleButtonTask: PropTypes.func.isRequired,
	    handleSelectTask: PropTypes.func.isRequired,
	    kasShowYksus: PropTypes.bool,
	    kasShowKogus: PropTypes.bool,
	    kasShowViitenumber: PropTypes.bool
	};

	TaskWidget.defaultProps = {
	    taskList: [],
	    kasShowYksus: false,
	    kasShowKogus: false,
	    kasShowViitenumber: false
	};
	module.exports = TaskWidget;

/***/ }),
/* 234 */
/***/ (function(module, exports) {

	"use strict";// will return date in format 'YYYY-MM-DD'
	module.exports=function(){var now=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Date();return now.toISOString().substring(0,10);};

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'execute';

	var ButtonRegisterExecute = function (_React$PureComponent) {
	    _inherits(ButtonRegisterExecute, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterExecute(props) {
	        _classCallCheck(this, ButtonRegisterExecute);

	        var _this = _possibleConstructorReturn(this, (ButtonRegisterExecute.__proto__ || Object.getPrototypeOf(ButtonRegisterExecute)).call(this, props));

	        _this.handleClick = _this.handleClick.bind(_this);
	        return _this;
	    }

	    _createClass(ButtonRegisterExecute, [{
	        key: 'handleClick',
	        value: function handleClick() {
	            if (this.props.onClick) {
	                this.props.onClick();
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement(
	                Button,
	                {
	                    ref: 'btnExecute',
	                    value: this.props.value,
	                    show: this.props.show,
	                    disabled: this.props.disabled,
	                    onClick: this.handleClick },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonRegisterExecute;
	}(React.PureComponent);

	ButtonRegisterExecute.propTypes = {
	    onClick: PropTypes.func.isRequired,
	    value: PropTypes.string.isRequired
	};

	ButtonRegisterExecute.defaultProps = {
	    disabled: false,
	    show: true
	};

	module.exports = ButtonRegisterExecute;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var radium = __webpack_require__(88);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(237);

	var getTextValue = __webpack_require__(76);
	var currentDate = new Date().toLocaleDateString();

	var InputDate = function (_React$PureComponent) {
	    _inherits(InputDate, _React$PureComponent);

	    function InputDate(props) {
	        _classCallCheck(this, InputDate);

	        var _this = _possibleConstructorReturn(this, (InputDate.__proto__ || Object.getPrototypeOf(InputDate)).call(this, props));

	        _this.state = {
	            value: props.value || '',
	            readOnly: props.readOnly
	        };
	        _this.onChange = _this.onChange.bind(_this);
	        return _this;
	    }

	    /**
	     * установит фокус на элементы
	     */


	    _createClass(InputDate, [{
	        key: 'focus',
	        value: function focus() {
	            this.refs['input'].focus();
	        }

	        // will update state if props changed

	    }, {
	        key: 'onChange',
	        value: function onChange(e) {
	            var fieldValue = e.target.value,
	                validation = this.validate(fieldValue);

	            if (fieldValue == null) {
	                // если значение нул, то пусть будет nul
	                validation = true;
	            }

	            if (validation) {
	                this.setState({ value: fieldValue });

	                if (this.props.onChange) {
	                    // если задан обработчик, вернем его
	                    this.props.onChange(this.props.name, fieldValue);
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var inputPlaceHolder = this.props.placeholder || this.props.title,
	                inputStyle = Object.assign({}, styles.input, this.props.width ? { width: this.props.width } : {}, this.state.readOnly ? styles.readOnly : {}, this.props.styles ? this.props.styles : {});

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'label',
	                    { style: styles.label, htmlFor: this.props.name, ref: 'label' },
	                    getTextValue(this.props.title)
	                ),
	                React.createElement('input', { type: 'date',
	                    style: inputStyle,
	                    name: this.props.name,
	                    ref: 'input',
	                    value: this.state.value || '',
	                    readOnly: this.state.readOnly,
	                    title: this.props.title,
	                    placeholder: inputPlaceHolder,
	                    min: this.props.min,
	                    max: this.props.max,
	                    onChange: this.onChange,
	                    disabled: this.props.disabled
	                })
	            );
	        }
	    }, {
	        key: 'validate',
	        value: function validate(value) {
	            var result = true;

	            // проверка на мин , мах
	            if (this.props.min && this.props.max && value) {
	                var dateValue = new Date(value);
	                result = dateValue > this.props.min && dateValue < this.props.max;
	            }

	            return result;
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value || nextProps.readOnly !== prevState.readOnly) {
	                return { value: nextProps.value, readOnly: nextProps.readOnly };
	            } else return null;
	        }
	    }]);

	    return InputDate;
	}(React.PureComponent);

	InputDate.propTypes = {
	    name: PropTypes.string.isRequired,
	    value: PropTypes.string,
	    min: PropTypes.string,
	    max: PropTypes.string,
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    valid: PropTypes.bool,
	    pattern: PropTypes.string,
	    width: PropTypes.string,
	    title: PropTypes.string,
	    placeholder: PropTypes.string
	};

	InputDate.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    value: String(currentDate),
	    title: ''
	};

	module.exports = radium(InputDate);

/***/ }),
/* 237 */
/***/ (function(module, exports) {

	'use strict';module.exports={input:{width:'70%',borderRadius:'3px',margin:'5px 2px',':focus':{backgroundColor:'lightpink'},border:'1px solid gray',height:'30px'},focused:{backgroundColor:'lightblue'},readOnly:{backgroundColor:'#F3EFEF'},wrapper:{margin:'5px',display:'flex',width:'95%'},label:{width:'30%',margin:'5px'}};

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10),
	    styles = __webpack_require__(239);
	var radium = __webpack_require__(88);
	var getTextValue = __webpack_require__(76);

	var PropTypes = __webpack_require__(11);

	var Input = function (_React$PureComponent) {
	    _inherits(Input, _React$PureComponent);

	    function Input(props) {
	        _classCallCheck(this, Input);

	        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

	        _this.state = {
	            value: props.value,
	            readOnly: props.readOnly,
	            disabled: props.disabled,
	            valid: props.valid
	        };
	        _this.onChange = _this.onChange.bind(_this);
	        return _this;
	    }

	    // will update state if props changed


	    _createClass(Input, [{
	        key: 'onChange',
	        value: function onChange(e) {
	            var fieldValue = e.target.value;
	            this.setState({ value: fieldValue });

	            if (this.props.onChange) {
	                this.props.onChange(this.props.name, fieldValue);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var inputPlaceHolder = this.props.placeholder || this.props.name,
	                inputStyle = Object.assign({}, styles.input, this.props.style ? this.props.style : {}, this.props.width ? { width: this.props.width } : {}, this.state.readOnly ? styles.readOnly : {}),
	                inputMinValue = this.props.min,
	                inputMaxValue = this.props.max;

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(
	                    'label',
	                    { style: styles.label, htmlFor: this.props.name, ref: 'label' },
	                    getTextValue(this.props.title)
	                ),
	                React.createElement('input', { type: this.props.type ? this.props.type : 'number',
	                    id: this.props.name,
	                    ref: 'input',
	                    style: inputStyle,
	                    name: this.props.name,
	                    value: this.state.value,
	                    readOnly: this.state.readOnly,
	                    title: this.props.title,
	                    placeholder: inputPlaceHolder,
	                    onChange: this.onChange,
	                    min: inputMinValue,
	                    max: inputMaxValue,
	                    pattern: '\\d+(\\.\\d{2})?',
	                    step: '0.01',

	                    disabled: this.props.disabled
	                })
	            );
	        }

	        /**
	         * установит фокус на элементы
	         */

	    }, {
	        key: 'focus',
	        value: function focus() {
	            this.refs['input'].focus();
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value || nextProps.readOnly !== prevState.readOnly) {
	                return { value: nextProps.value, readOnly: nextProps.readOnly };
	            } else return null;
	        }
	    }]);

	    return Input;
	}(React.PureComponent);

	Input.propTypes = {
	    name: PropTypes.string.isRequired,
	    value: PropTypes.number,
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    valid: PropTypes.bool,
	    placeholder: PropTypes.string,
	    pattern: PropTypes.string,
	    title: PropTypes.string,
	    min: PropTypes.number,
	    max: PropTypes.number
	};

	Input.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    valid: true,
	    min: -999999999,
	    max: 999999999
	};

	module.exports = radium(Input);

/***/ }),
/* 239 */
/***/ (function(module, exports) {

	'use strict';module.exports={input:{width:'70%',margin:'5px 2px',borderRadius:'3px',':focus':{backgroundColor:'lightpink'},border:'1px solid gray',height:'30px'},focused:{backgroundColor:'lightblue'},readOnly:{backgroundColor:'#F3EFEF'},wrapper:{margin:'5px',display:'flex',width:'95%'},label:{width:'30%',margin:'5px'}};

/***/ }),
/* 240 */
/***/ (function(module, exports) {

	'use strict';module.exports={wrapper:{display:'inline-flex'},buttomOpen:{display:'flex'},select:{width:'auto',position:'absolute',height:'30px'}};

/***/ }),
/* 241 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'/*
	                border: '1px solid blue'
	        */},docColumn:{display:'flex',flexDirection:'column',/*
	                border: '1px solid yellow',
	        */width:'50%'},doc:{display:'flex',flexDirection:'column'/*
	                border: '1px solid brown'
	        */},ok:{backgroundColor:'lightgreen',width:'100%',textAlign:'right'},error:{backgroundColor:'lightcoral',width:'100%',textAlign:'right'},notValid:{backgroundColor:'yellow',width:'100%',textAlign:'right'},modalValidate:{iconImage:'/images/icons/info.png'}};

/***/ }),
/* 242 */,
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var styles = __webpack_require__(244);
	var Loading = function Loading(props) {
	    return React.createElement(
	        'div',
	        { style: styles.window },
	        React.createElement(
	            'label',
	            { style: styles.label },
	            props.label
	        )
	    );
	};

	module.exports = Loading;

/***/ }),
/* 244 */
/***/ (function(module, exports) {

	'use strict';module.exports={label:{width:'auto'},window:{display:'flex',justifyContent:'center',alignItems:'center'}};

/***/ }),
/* 245 */,
/* 246 */,
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var DocumentTemplate = __webpack_require__(223),
	    InputText = __webpack_require__(212),
	    DataGrid = __webpack_require__(183),
	    TextArea = __webpack_require__(216),
	    ModalPage = __webpack_require__(171),
	    Select = __webpack_require__(164),
	    CheckBox = __webpack_require__(187),
	    styles = __webpack_require__(248);

	var LIB_OBJS = __webpack_require__(86).REKV.LIB_OBJS;

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Rekv = function (_React$PureComponent) {
	    _inherits(Rekv, _React$PureComponent);

	    function Rekv(props) {
	        _classCallCheck(this, Rekv);

	        var _this = _possibleConstructorReturn(this, (Rekv.__proto__ || Object.getPrototypeOf(Rekv)).call(this, props));

	        _this.state = {
	            docId: props.docId ? props.docId : Number(props.match.params.docId),
	            loadedData: false
	        };
	        _this.renderer = _this.renderer.bind(_this);
	        _this.createGridRow = _this.createGridRow.bind(_this);
	        return _this;
	    }

	    _createClass(Rekv, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(DocumentTemplate, { docId: this.state.docId,
	                ref: 'document',
	                docTypeId: 'REKV',
	                history: this.props.history,
	                module: this.props.module,
	                libs: LIB_OBJS,
	                initData: this.props.initData,
	                renderer: this.renderer,
	                createGridRow: this.createGridRow

	            });
	        }

	        /**
	         * Метод вернет кастомный компонент
	         * @param self
	         * @returns {*}
	         */

	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self.docData) {
	                return null;
	            }
	            var gridData = self.docData.gridData,
	                gridColumns = self.docData.gridConfig;

	            return React.createElement(
	                'div',
	                { style: styles.doc },
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'Regkood: ',
	                        name: 'regkood',
	                        ref: 'input-regkood',
	                        readOnly: !self.state.edited,
	                        value: self.docData.regkood || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'KBM kood: ',
	                        name: 'kbmkood',
	                        ref: 'input-kbmkood',
	                        readOnly: !self.state.edited,
	                        value: self.docData.kbmkood || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, {
	                        title: 'Nimetus: ',
	                        name: 'nimetus',
	                        ref: 'input-nimetus',
	                        readOnly: !self.state.edited,
	                        value: self.docData.nimetus || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'T\xE4is. nimetus: ',
	                        name: 'muud',
	                        ref: 'input-muud',
	                        readOnly: !self.state.edited,
	                        value: self.docData.muud || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(Select, { title: 'Asutuse liik:',
	                        name: 'liik',
	                        data: self.libs['asutuse_liik'],
	                        value: self.docData.liik || '',
	                        defaultValue: self.docData.liik || '',
	                        ref: 'liik',
	                        collId: 'kood',
	                        readOnly: !self.state.edited,
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(TextArea, { title: 'Aadress: ',
	                        name: 'aadress',
	                        ref: 'textarea-aadress',
	                        onChange: self.handleInputChange,
	                        value: self.docData.aadress || '',
	                        readOnly: !self.state.edited })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'Juhataja: ',
	                        name: 'juht',
	                        ref: 'input-juht',
	                        readOnly: !self.state.edited,
	                        value: self.docData.juht || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'Raamatupidaja: ',
	                        name: 'raama',
	                        ref: 'input-raama',
	                        readOnly: !self.state.edited,
	                        value: self.docData.raama || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'Email: ',
	                        name: 'email',
	                        ref: 'input-email',
	                        readOnly: !self.state.edited,
	                        value: self.docData.email || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'Omniva salas\xF5na: ',
	                        name: 'earved',
	                        ref: 'input-earved',
	                        readOnly: !self.state.edited,
	                        value: self.docData.earved || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(InputText, { title: 'E-arve asutuse reg.kood: ',
	                        name: 'earve_regkood',
	                        ref: 'input-earve_regkood',
	                        readOnly: !self.state.edited,
	                        value: self.docData.earve_regkood || '',
	                        onChange: self.handleInputChange })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(
	                        'div',
	                        { style: styles.docColumn },
	                        React.createElement(InputText, { title: 'SEB e-arve aa: ',
	                            name: 'seb_earve',
	                            ref: 'input-seb_earve',
	                            readOnly: !self.state.edited,
	                            value: self.docData.seb_earve || '',
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docColumn },
	                        React.createElement(InputText, { title: 'SEB kasutaja tunnus: ',
	                            name: 'seb',
	                            ref: 'input-seb_parool',
	                            readOnly: !self.state.edited,
	                            value: self.docData.seb || '',
	                            onChange: self.handleInputChange })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(
	                        'div',
	                        { style: styles.docColumn },
	                        React.createElement(InputText, { title: 'SWED e-arve aa: ',
	                            name: 'swed_earve',
	                            ref: 'input-swed-earve',
	                            readOnly: !self.state.edited,
	                            value: self.docData.swed_earve || '',
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docColumn },
	                        React.createElement(InputText, { title: 'SWED kasutaja tunnus: ',
	                            name: 'swed',
	                            ref: 'input-swed_parool',
	                            readOnly: !self.state.edited,
	                            value: self.docData.swed || '',
	                            onChange: self.handleInputChange })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(DataGrid, { source: 'details',
	                        gridData: gridData,
	                        gridColumns: gridColumns,
	                        showToolBar: self.state.edited,
	                        handleGridRow: this.handleGridRow,
	                        handleGridBtnClick: self.handleGridBtnClick,
	                        readOnly: !self.state.edited,
	                        style: styles.grid.headerTable,
	                        ref: 'data-grid' })
	                ),
	                self.state.gridRowEdit ? this.createGridRow(self) : null
	            );
	        }

	        /**
	         * Создаст компонет строки грида
	         * @returns {XML}
	         */

	    }, {
	        key: 'createGridRow',
	        value: function createGridRow(self) {

	            var row = self.gridRowData ? self.gridRowData : {},
	                validateMessage = '',
	                // self.state.warning
	            buttonOkReadOnly = validateMessage.length > 0 || !self.state.checked,
	                modalObjects = ['btnOk', 'btnCancel'];

	            if (buttonOkReadOnly) {
	                // уберем кнопку Ок
	                modalObjects.splice(0, 1);
	            }

	            if (!row) return React.createElement('div', null);

	            return React.createElement(
	                'div',
	                { className: '.modalPage' },
	                React.createElement(
	                    ModalPage,
	                    {
	                        modalObjects: modalObjects,
	                        ref: 'modalpage-grid-row',
	                        show: true,
	                        modalPageBtnClick: self.modalPageClick,
	                        modalPageName: 'Rea lisamine / parandamine' },
	                    React.createElement(
	                        'div',
	                        { ref: 'grid-row-container' },
	                        self.state.gridWarning.length ? React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'span',
	                                null,
	                                self.state.gridWarning
	                            )
	                        ) : null,
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputText, { title: 'Number: ',
	                                name: 'arve',
	                                value: row.arve || '',
	                                readOnly: false,
	                                disabled: false,
	                                bindData: false,
	                                ref: 'number',
	                                onChange: self.handleGridRowInput })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputText, { title: 'Nimetus: ',
	                                name: 'nimetus',
	                                value: row.nimetus || '',
	                                readOnly: false,
	                                disabled: false,
	                                bindData: false,
	                                ref: 'number',
	                                onChange: self.handleGridRowInput })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(Select, { title: 'T\xFC\xFCp: ',
	                                name: 'kassapank',
	                                data: [{ id: 0, nimetus: 'Kassa' }, { id: 1, nimetus: 'Pank' }, { id: 2, nimetus: 'TP' }],
	                                value: row.kassapank || '',
	                                ref: 'kassapank',
	                                collId: 'id',
	                                onChange: self.handleGridRowChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(Select, { title: 'Konto: ',
	                                name: 'konto',
	                                data: self.libs['kontod'],
	                                value: row.konto || '',
	                                ref: 'konto',
	                                collId: 'kood',
	                                onChange: self.handleGridRowChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(CheckBox, { title: 'Kas p\xF5hiline?',
	                                name: 'default_',
	                                value: Boolean(self.docData.default_),
	                                ref: 'checkbox_default_',
	                                onChange: self.handleInputChange,
	                                readOnly: false
	                            })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        null,
	                        React.createElement(
	                            'span',
	                            null,
	                            validateMessage
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Rekv;
	}(React.PureComponent);

	Rekv.propTypes = {
	    docId: PropTypes.number,
	    initData: PropTypes.object
	};

	Rekv.defaultProps = {
	    initData: {}
	};

	module.exports = Rekv;

/***/ }),
/* 248 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'/*
	                border: '1px solid blue'
	        */},docColumn:{display:'flex',flexDirection:'column',/*
	                border: '1px solid yellow',
	        */width:'50%'},doc:{display:'flex',flexDirection:'column'/*
	                border: '1px solid brown'
	        */},grid:{mainTable:{width:'100%'},headerTable:{width:'100%'},gridContainer:{width:'100%'}},gridRow:{/*
	                border: '1px solid black',
	        */backgroundColor:'white',position:'relative',margin:'10% 30% 10% 30%',width:'auto',opacity:'1',top:'100px'},btnEdit:{width:'min-content'}};

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var Documents = __webpack_require__(179);
	var styles = __webpack_require__(250);
	var DOC_TYPE_ID = 'TAOTLUS_LOGIN';
	var TOOLBAR_PROPS = __webpack_require__(86).TEATIS.toolbarProps;

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Register = function (_React$PureComponent) {
	    _inherits(Register, _React$PureComponent);

	    function Register(props) {
	        _classCallCheck(this, Register);

	        return _possibleConstructorReturn(this, (Register.__proto__ || Object.getPrototypeOf(Register)).call(this, props));
	    }

	    _createClass(Register, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(Documents, { initData: this.props.initData,
	                history: this.props.history ? this.props.history : null,
	                module: this.props.module,
	                ref: 'register',
	                docTypeId: DOC_TYPE_ID,
	                style: styles,
	                toolbarProps: TOOLBAR_PROPS,
	                render: this.renderer });
	        }
	    }, {
	        key: 'renderer',
	        value: function renderer() {
	            return null;
	        }
	    }]);

	    return Register;
	}(React.PureComponent);

	module.exports = Register;

/***/ }),
/* 250 */
/***/ (function(module, exports) {

	'use strict';module.exports={grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}}};

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var DocumentTemplate = __webpack_require__(223),
	    InputText = __webpack_require__(212),
	    InputDate = __webpack_require__(236),
	    TextArea = __webpack_require__(216),
	    Loading = __webpack_require__(243);

	var styles = __webpack_require__(252);

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var TaotlusLogin = function (_React$PureComponent) {
	    _inherits(TaotlusLogin, _React$PureComponent);

	    function TaotlusLogin(props) {
	        _classCallCheck(this, TaotlusLogin);

	        var _this = _possibleConstructorReturn(this, (TaotlusLogin.__proto__ || Object.getPrototypeOf(TaotlusLogin)).call(this, props));

	        _this.state = {
	            docId: props.docId ? props.docId : Number(props.match.params.docId),
	            loadedData: false
	        };
	        _this.renderer = _this.renderer.bind(_this);
	        return _this;
	    }

	    _createClass(TaotlusLogin, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(DocumentTemplate, { docId: this.state.docId,
	                ref: 'document',
	                docTypeId: 'TAOTLUS_LOGIN',
	                module: this.props.module,
	                initData: this.props.initData,
	                userData: this.props.userData,
	                renderer: this.renderer,
	                focusElement: 'input-kasutaja',
	                history: this.props.history

	            });
	        }

	        /**
	         * Метод вернет кастомный компонент
	         * @param self
	         * @returns {*}
	         */

	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self.docData) {
	                // не загружены данные
	                return React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(Loading, { label: 'Laadimine...' })
	                );
	            }

	            return React.createElement(
	                'div',
	                { style: styles.doc },
	                React.createElement(
	                    'div',
	                    { style: styles.docColumn },
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputDate, { title: 'Kuup\xE4ev:',
	                            name: 'kpv',
	                            value: self.docData.kpv,
	                            ref: 'input-kpv',
	                            readOnly: true,
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputText, { title: 'Kasutaja nimi ',
	                            name: 'kasutaja',
	                            ref: 'input-kasutaja',
	                            readOnly: true,
	                            value: self.docData.kasutaja || '',
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputText, { title: 'Nimi',
	                            name: 'nimi',
	                            ref: 'input-nimi',
	                            readOnly: !self.state.edited,
	                            value: self.docData.nimi || '',
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputText, { title: 'Aadress',
	                            name: 'aadress',
	                            ref: 'input-aadress',
	                            readOnly: true,
	                            value: self.docData.aadress || '',
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputText, { title: 'E-mail',
	                            name: 'email',
	                            ref: 'input-email',
	                            readOnly: true,
	                            value: self.docData.email || '',
	                            onChange: self.handleInputChange })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputText, { title: 'Telefon',
	                            name: 'tel',
	                            ref: 'input-tel',
	                            readOnly: !self.state.edited,
	                            value: self.docData.tel || '',
	                            onChange: self.handleInputChange })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(TextArea, { title: 'Muud',
	                        name: 'muud',
	                        ref: 'textarea-muud',
	                        onChange: self.handleInputChange,
	                        value: self.docData.muud || '',
	                        readOnly: !self.state.edited })
	                )
	            );
	        }
	    }]);

	    return TaotlusLogin;
	}(React.PureComponent);

	TaotlusLogin.propTypes = {
	    docId: PropTypes.number,
	    initData: PropTypes.object
	};

	TaotlusLogin.defaultProps = {
	    initData: {}
	};

	module.exports = TaotlusLogin;

/***/ }),
/* 252 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'},docColumn:{display:'flex',flexDirection:'column',width:'50%'},doc:{display:'flex',flexDirection:'column'}};

/***/ }),
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var DocumentTemplate = __webpack_require__(223),
	    TextArea = __webpack_require__(216),
	    Loading = __webpack_require__(243);
	var DataGrid = __webpack_require__(183);

	var styles = __webpack_require__(261);

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Objekt = function (_React$PureComponent) {
	    _inherits(Objekt, _React$PureComponent);

	    function Objekt(props) {
	        _classCallCheck(this, Objekt);

	        var _this = _possibleConstructorReturn(this, (Objekt.__proto__ || Object.getPrototypeOf(Objekt)).call(this, props));

	        _this.state = {
	            docId: props.docId ? props.docId : Number(props.match.params.docId),
	            loadedData: false
	        };
	        _this.renderer = _this.renderer.bind(_this);
	        return _this;
	    }

	    _createClass(Objekt, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(DocumentTemplate, { docId: this.state.docId,
	                ref: 'document',
	                docTypeId: 'OBJEKT',
	                module: this.props.module,
	                initData: this.props.initData,
	                userData: this.props.userData,
	                renderer: this.renderer,
	                focusElement: 'input-aadress',
	                history: this.props.history

	            });
	        }

	        /**
	         * Метод вернет кастомный компонент
	         * @param self
	         * @returns {*}
	         */

	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self.docData) {
	                // не загружены данные
	                return React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(Loading, { label: 'Laadimine...' })
	                );
	            }

	            var gridUserData = self.docData.gridData,
	                gridUserColumns = self.docData.gridConfig;

	            return React.createElement(
	                'div',
	                { style: styles.doc },
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(TextArea, { title: 'Aadress',
	                        name: 'aadress',
	                        ref: 'textarea-aadress',
	                        onChange: self.handleInputChange,
	                        value: self.docData.aadress || '',
	                        readOnly: !self.state.edited })
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(TextArea, { title: 'Muud',
	                        name: 'muud',
	                        ref: 'textarea-muud',
	                        onChange: self.handleInputChange,
	                        value: self.docData.muud || '',
	                        readOnly: !self.state.edited })
	                ),
	                React.createElement('br', null),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(
	                        'label',
	                        { ref: 'label' },
	                        'Objekti kasutajad'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: styles.docRow },
	                    React.createElement(DataGrid, { source: 'userid',
	                        gridData: gridUserData,
	                        gridColumns: gridUserColumns,
	                        showToolBar: false,
	                        readOnly: true,
	                        style: styles.grid.headerTable,
	                        docTypeId: 'userid',
	                        ref: 'userid-data-grid' })
	                )
	            );
	        }
	    }]);

	    return Objekt;
	}(React.PureComponent);

	Objekt.propTypes = {
	    docId: PropTypes.number,
	    initData: PropTypes.object
	};

	Objekt.defaultProps = {
	    initData: {}
	};

	module.exports = Objekt;

/***/ }),
/* 261 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'},docColumn:{display:'flex',flexDirection:'column',width:'50%'},doc:{display:'flex',flexDirection:'column'},grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}}};

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var Documents = __webpack_require__(179);
	var styles = __webpack_require__(263);

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Objects = function (_React$PureComponent) {
	    _inherits(Objects, _React$PureComponent);

	    function Objects(props) {
	        _classCallCheck(this, Objects);

	        return _possibleConstructorReturn(this, (Objects.__proto__ || Object.getPrototypeOf(Objects)).call(this, props));
	    }

	    _createClass(Objects, [{
	        key: 'render',
	        value: function render() {
	            var DOC_TYPE_ID = this.props.module == 'kasutaja' ? 'ISIKU_OBJEKT' : 'OBJEKT';
	            return React.createElement(Documents, {
	                history: this.props.history ? this.props.history : null,
	                module: this.props.module,
	                ref: 'register',
	                docTypeId: DOC_TYPE_ID,
	                style: styles,
	                render: this.renderer });
	        }
	    }, {
	        key: 'renderer',
	        value: function renderer() {
	            return null;
	        }
	    }]);

	    return Objects;
	}(React.PureComponent);

	module.exports = Objects;

/***/ }),
/* 263 */
/***/ (function(module, exports) {

	'use strict';module.exports={grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}}};

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var React = __webpack_require__(10);

	var DocumentTemplate = __webpack_require__(223),
	    InputText = __webpack_require__(212),
	    InputDate = __webpack_require__(236),
	    InputNumber = __webpack_require__(238),
	    Select = __webpack_require__(164),
	    SelectData = __webpack_require__(265),
	    TextArea = __webpack_require__(216),
	    DataGrid = __webpack_require__(183),
	    relatedDocuments = __webpack_require__(267),
	    ModalPage = __webpack_require__(171),
	    ButtonEdit = __webpack_require__(80),
	    styles = __webpack_require__(268);
	var getTextValue = __webpack_require__(76);

	var Round = __webpack_require__(269);
	var Loading = __webpack_require__(243);

	var DocContext = __webpack_require__(1);
	var LIB_OBJS = __webpack_require__(86).LEPING.LIB_OBJS;

	var Leping = function (_React$PureComponent) {
	    _inherits(Leping, _React$PureComponent);

	    function Leping(props) {
	        _classCallCheck(this, Leping);

	        var _this = _possibleConstructorReturn(this, (Leping.__proto__ || Object.getPrototypeOf(Leping)).call(this, props));

	        _this.state = {
	            loadedData: false,
	            module: props.module ? props.module : DocContext.module,
	            docId: props.docId ? props.docId : Number(props.match.params.docId)
	        };

	        _this.createGridRow = _this.createGridRow.bind(_this);

	        _this.renderer = _this.renderer.bind(_this);
	        _this.gridValidateFields = _this.gridValidateFields.bind(_this);
	        _this.btnEditAsutusClick = _this.btnEditAsutusClick.bind(_this);

	        return _this;
	    }

	    _createClass(Leping, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(DocumentTemplate, { docId: this.state.docId,
	                ref: 'document',
	                history: this.props.history,
	                docTypeId: 'LEPING',
	                module: this.props.module,
	                initData: this.props.initData ? this.props.initData : {},
	                reload: true,
	                libs: LIB_OBJS,
	                renderer: this.renderer,
	                createGridRow: this.createGridRow,
	                gridValidator: this.gridValidateFields,
	                focusElement: 'input-number'
	            });
	        }

	        /**
	         *Вернет кастомные компоненты документа
	         */

	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self || !self.docData || !self.docData.kpv || !self.libs['objekt']) {
	                return React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(Loading, { label: 'Laadimine...' })
	                );
	            }

	            var isEditMode = self.state.edited,
	                gridData = self.docData.gridData,
	                gridColumns = self.docData.gridConfig,
	                mooduData = self.docData.moodu,
	                mooduColumns = self.docData.mooduConfig;

	            // фильтруем обьекты, только владелец
	            var objects = self.libs['objekt'].filter(function (obj) {
	                return obj.asutus_id == self.docData.asutusid;
	            });

	            // если нет услуг, добавим их
	            if (!gridData.length && self.libs['nomenclature'].length) {
	                self.libs['nomenclature'].forEach(function (nom) {
	                    gridData.push({ id: 0, nomid: nom.id, kogus: 0, hind: nom.hind, kood: nom.kood, nimetus: nom.nimetus });
	                });
	            }

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(InputText, { ref: 'input-number',
	                                title: 'Number',
	                                name: 'number',
	                                value: self.docData.number || '',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange }),
	                            React.createElement(InputDate, { title: 'Kuup\xE4ev',
	                                name: 'kpv',
	                                value: self.docData.kpv,
	                                ref: 'input-kpv',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange }),
	                            React.createElement(InputDate, { title: 'T\xE4htaeg',
	                                name: 'tahtaeg',
	                                value: self.docData.tahtaeg,
	                                ref: 'input-tahtaeg',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(Select, { title: 'Korteeriomanik',
	                                name: 'asutusid',
	                                libs: 'asutused',
	                                value: self.docData.asutusid,
	                                data: self.libs['asutused'],
	                                defaultValue: String(self.docData.asutus) || '',
	                                onChange: self.handleInputChange,
	                                collId: 'id',
	                                ref: 'select-asutus',
	                                readOnly: !isEditMode })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            DocContext.module !== 'kasutaja' ? React.createElement(ButtonEdit, {
	                                ref: 'btnEdit',
	                                value: 'Muuda',
	                                onClick: this.btnEditAsutusClick,
	                                show: !isEditMode,
	                                style: styles.btnEdit,
	                                disabled: false
	                            }) : null
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(Select, { title: 'Objekt',
	                                name: 'objektid',
	                                libs: 'objekt',
	                                value: self.docData.objektid,
	                                data: objects,
	                                defaultValue: String(self.docData.objekt) || '',
	                                onChange: self.handleInputChange,
	                                collId: 'id',
	                                ref: 'select-objek',
	                                readOnly: !isEditMode })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(TextArea, { title: 'M\xE4rkused',
	                            name: 'muud',
	                            ref: 'textarea-muud',
	                            onChange: self.handleInputChange,
	                            value: self.docData.muud || '',
	                            readOnly: !isEditMode })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(DataGrid, { source: 'details',
	                            gridData: gridData,
	                            gridColumns: gridColumns,
	                            showToolBar: isEditMode,
	                            handleGridRow: this.handleGridRow,
	                            handleGridBtnClick: self.handleGridBtnClick,
	                            readOnly: !isEditMode,
	                            style: styles.grid.headerTable,
	                            ref: 'data-grid' })
	                    ),
	                    self.state.gridRowEdit ? this.createGridRow(self) : null,
	                    React.createElement('br', null),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'label',
	                            { ref: 'label' },
	                            getTextValue('Mõõdu andmed')
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(DataGrid, { source: 'moodu',
	                            gridData: mooduData,
	                            gridColumns: mooduColumns,
	                            showToolBar: false,
	                            readOnly: true,
	                            style: styles.grid.headerTable,
	                            docTypeId: 'andmed',
	                            ref: 'moodu-grid' })
	                    )
	                )
	            );
	        }

	        /**
	         * Создаст компонет строки грида
	         * @returns {XML}
	         */

	    }, {
	        key: 'createGridRow',
	        value: function createGridRow(self) {

	            var row = self.gridRowData ? self.gridRowData : {},
	                validateMessage = '',
	                // self.state.warning
	            buttonOkReadOnly = validateMessage.length > 0 || !self.state.checked,
	                modalObjects = ['btnOk', 'btnCancel'];

	            if (buttonOkReadOnly) {
	                // уберем кнопку Ок
	                modalObjects.splice(0, 1);
	            }

	            if (!row) return React.createElement('div', null);

	            return React.createElement(
	                'div',
	                { className: '.modalPage' },
	                React.createElement(
	                    ModalPage,
	                    {
	                        modalObjects: modalObjects,
	                        ref: 'modalpage-grid-row',
	                        show: true,
	                        modalPageBtnClick: self.modalPageClick,
	                        modalPageName: 'Rea lisamine / parandamine' },
	                    React.createElement(
	                        'div',
	                        { ref: 'grid-row-container' },
	                        self.state.gridWarning.length ? React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'span',
	                                null,
	                                self.state.gridWarning
	                            )
	                        ) : null,
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.contant },
	                                React.createElement(Select, { title: 'Teenus',
	                                    name: 'nomid',
	                                    libs: 'nomenclature',
	                                    data: self.libs['nomenclature'],
	                                    readOnly: false,
	                                    value: row.nomid,
	                                    collId: 'id',
	                                    ref: 'nomid',
	                                    style: styles.select,
	                                    placeholder: 'Teenuse kood',
	                                    onChange: self.handleGridRowChange })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.contant },
	                                React.createElement(InputNumber, { title: 'Kogus ',
	                                    name: 'kogus',
	                                    value: Number(row.kogus ? row.kogus : 0),
	                                    readOnly: false,
	                                    disabled: false,
	                                    bindData: false,
	                                    ref: 'kogus',
	                                    pattern: '[0-9]{10}',
	                                    onChange: self.handleGridRowInput })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.contant },
	                                React.createElement(InputNumber, { title: 'Hind ',
	                                    name: 'hind',
	                                    value: Number(row.hind ? row.hind : 0),
	                                    readOnly: false,
	                                    disabled: false,
	                                    bindData: false,
	                                    ref: 'hind',
	                                    pattern: '[0-9]{10}',
	                                    onChange: self.handleGridRowInput })
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        null,
	                        React.createElement(
	                            'span',
	                            null,
	                            validateMessage
	                        )
	                    )
	                )
	            );
	        }

	        /**
	         * валидатор для строки грида
	         * @returns {string}
	         */

	    }, {
	        key: 'gridValidateFields',
	        value: function gridValidateFields() {
	            var warning = '';
	            var doc = this.refs['document'];
	            if (doc && doc.gridRowData) {

	                // только после проверки формы на валидность
	                if (doc.gridRowData && !doc.gridRowData['nomid']) warning = warning + ' Код операции';
	                if (!doc.gridRowData['kogus']) warning = warning + ' Количество';
	                if (!doc.gridRowData['hind']) warning = warning + ' Сумма';

	                // наименование услуги и код
	                if (doc.gridRowData && doc.gridRowData['nomid']) {
	                    var teenus = DocContext.libs['nomenclature'].filter(function (row) {
	                        return row.id == doc.gridRowData['nomid'];
	                    });
	                    if (teenus) {
	                        doc.gridRowData['kood'] = teenus[0].kood ? teenus[0].kood : null;
	                        doc.gridRowData['nimetus'] = teenus[0].nimetus ? teenus[0].nimetus : null;
	                    }
	                }
	            }
	            return warning;
	        }

	        // обработчик события клиска на кнопке редактирования контр-агента

	    }, {
	        key: 'btnEditAsutusClick',
	        value: function btnEditAsutusClick() {
	            var docAsutusId = this.refs['document'].docData.asutusid;

	            // осуществит переход на карточку контр-агента
	            this.props.history.push('/' + this.props.module + '/asutused/' + docAsutusId);
	        }
	    }]);

	    return Leping;
	}(React.PureComponent);

	Leping.propTypes = {
	    docId: PropTypes.number,
	    initData: PropTypes.object,
	    userData: PropTypes.object
	};

	Leping.defaultProps = {
	    params: { docId: 0 },
	    initData: {},
	    userData: {}
	};

	module.exports = Leping;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DocContext = __webpack_require__(1);

	var PropTypes = __webpack_require__(11);
	var fetchData = __webpack_require__(41);
	var POST_LOAD_LIBS_URL = __webpack_require__(86).LIBS.POST_LOAD_LIBS_URL;

	var React = __webpack_require__(10),
	    styles = __webpack_require__(266),
	    DataGrid = __webpack_require__(183),
	    Button = __webpack_require__(75),
	    InputText = __webpack_require__(212),
	    ModalPage = __webpack_require__(171);

	var SelectData = function (_React$PureComponent) {
	    _inherits(SelectData, _React$PureComponent);

	    function SelectData(props) {
	        _classCallCheck(this, SelectData);

	        var _this = _possibleConstructorReturn(this, (SelectData.__proto__ || Object.getPrototypeOf(SelectData)).call(this, props));

	        _this.state = {
	            value: props.value, /* возвращаемое значение, например id*/
	            fieldValue: props.defaultValue, /*видимое значение, например kood или name по указанному в collId */
	            readOnly: props.readOnly,
	            disabled: props.disabled,
	            edited: props.edited,
	            gridData: [],
	            gridConfig: props.config,
	            gridActiveRow: 0,
	            show: _this.props.show,
	            limit: '10'
	        };
	        _this.handleInputChange = _this.handleInputChange.bind(_this);
	        _this.handleGridClick = _this.handleGridClick.bind(_this);
	        _this.modalPageClick = _this.modalPageClick.bind(_this);
	        _this.loadLibs = _this.loadLibs.bind(_this);
	        _this.handleClick = _this.handleClick.bind(_this);
	        _this.handleGridBtnClick = _this.handleGridBtnClick.bind(_this);
	        return _this;
	    }

	    _createClass(SelectData, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.state.value) {
	                this.loadLibs('');
	            }
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(prevProps, prevState) {
	            if (this.state.value && prevState.value !== this.state.value && !this.state.fieldValue) {
	                this.loadLibs();
	            }
	        }

	        // will update state if props changed

	    }, {
	        key: 'render',
	        value: function render() {
	            var isEditeMode = !this.state.readOnly,
	                btnStyle = Object.assign({}, styles.button, { display: isEditeMode ? 'inline' : 'none' });

	            var isReadOnly = this.props.readOnly;
	            if (this.state.show) {
	                isReadOnly = false;
	            }

	            return React.createElement(
	                'div',
	                { style: styles.wrapper },
	                React.createElement(InputText, { ref: 'inputName',
	                    title: this.props.title,
	                    name: this.props.name,
	                    value: this.state.fieldValue || '',
	                    readOnly: isReadOnly,
	                    onChange: this.handleInputChange }),
	                React.createElement(Button, { value: 'v',
	                    ref: 'btnShow',
	                    style: btnStyle,
	                    onClick: this.handleClick }),
	                this.state.show ? this.modalPage() : null
	            );
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick() {
	            this.setState({
	                show: true
	            });
	        }
	    }, {
	        key: 'modalPage',
	        value: function modalPage() {
	            var modalObjects = ['btnOk', 'btnCancel'];
	            var limitInputStyle = styles.limitInput;

	            var toolbarParams = {
	                btnAdd: {
	                    show: true,
	                    disabled: false
	                },
	                btnEdit: {
	                    show: true,
	                    disabled: false
	                },
	                btnDelete: {
	                    show: false,
	                    disabled: false
	                },
	                btnPrint: {
	                    show: false,
	                    disabled: false
	                }
	            };
	            return React.createElement(
	                ModalPage,
	                {
	                    modalObjects: modalObjects,
	                    ref: 'modalpage-grid',
	                    show: true,
	                    modalPageBtnClick: this.modalPageClick,
	                    modalPageName: 'Vali rea' },
	                React.createElement(
	                    'div',
	                    { ref: 'grid-row-container' },
	                    React.createElement(InputText, { ref: 'input-filter',
	                        title: 'Otsingu parametrid:',
	                        name: 'gridFilter',
	                        value: this.state.fieldValue || '',
	                        readOnly: this.props.readOnly || !this.state.show,
	                        onChange: this.handleInputChange }),
	                    React.createElement(DataGrid, { gridData: this.state.gridData,
	                        gridColumns: this.state.gridConfig,
	                        onClick: this.handleGridClick,
	                        handleGridBtnClick: this.handleGridBtnClick,
	                        showToolBar: true,
	                        toolbarParams: toolbarParams,
	                        ref: 'data-grid' }),
	                    React.createElement(InputText, { ref: 'input-limit',
	                        title: 'Limiit:',
	                        width: limitInputStyle,
	                        name: 'limit',
	                        value: this.state.limit || '10',
	                        readOnly: false,
	                        onChange: this.handleInputChange })
	                )
	            );
	        }

	        // обработчик события измения значения в текстовом (поисковом) поле

	    }, {
	        key: 'handleInputChange',
	        value: function handleInputChange(name, value) {
	            var _this2 = this;

	            if (this.props.readOnly) {
	                console.error('readonly ');
	                return;
	            }

	            if (name === 'gridFilter') {
	                // обновим стейт
	                this.setState({ value: 0, fieldValue: value, show: true }, function () {
	                    if (value.length) {
	                        //выполним запрос
	                        setTimeout(function () {
	                            _this2.loadLibs(value);
	                        }, 100);
	                    }
	                });
	            } else {

	                this.setState({ value: 0, fieldValue: value, show: false }, function () {
	                    if (value.length) {
	                        //выполним запрос
	                        setTimeout(function () {
	                            _this2.loadLibs(value);
	                        }, 500);
	                    }
	                });
	            }

	            if (name === 'limit') {
	                this.setState({ limit: value });
	            }
	        }
	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(event) {
	            if (event === 'Ok') {
	                // надо найти активную строку

	                var boundField = this.props.boundToGrid ? this.props.boundToGrid : 'name',
	                    //grid filed name
	                boundToData = this.props.boundToData ? this.props.boundToData : false,
	                    //InputDefaultValue
	                boundFieldData = this.props.name; //inputName = fieldname

	                var activeRow = this.state.gridActiveRow,
	                    value = this.state.gridData[activeRow]['id'],
	                    fieldValue = this.state.gridData[activeRow][boundField];
	                // получить данные полей и установить состояние для виджета

	                // показать новое значение
	                this.setState({ value: value, fieldValue: fieldValue, show: false });

	                // вернуть значение наверх

	                if (this.props.onChange) {
	                    this.props.onChange(boundFieldData, value);

	                    // text value of input
	                    if (boundToData) {
	                        this.props.onChange(boundToData, fieldValue);
	                    }

	                    //если привязано другое поле
	                    if (this.props.collName) {
	                        this.props.onChange(this.props.collName, fieldValue);
	                    }
	                }
	            } else {
	                // востанавливаем старые значения из пропсов, заврывыаем окно
	                this.setState({
	                    value: this.props.value,
	                    fieldValue: this.props.defaultValue, show: false
	                });
	            }
	        }
	    }, {
	        key: 'handleGridClick',
	        value: function handleGridClick(event, value, activeRow) {
	            this.setState({ gridActiveRow: activeRow, value: value });
	        }
	    }, {
	        key: 'loadLibs',
	        value: function loadLibs(fieldValue, kpv) {
	            var _this3 = this;

	            var lib = this.props.libName;
	            var sqlWhere = '';
	            var limit = this.state.limit ? this.state.limit : 100;
	            var isSeachById = this.state.value && !fieldValue;

	            if (this.props.sqlFields && this.props.sqlFields.length && fieldValue && fieldValue.length > 0) {
	                this.props.sqlFields.forEach(function (field) {
	                    var isOr = sqlWhere.length > 0 ? ' or ' : '';
	                    sqlWhere = sqlWhere.concat(' ' + isOr + ' encode(' + field + '::bytea, \'escape\') ilike \'%' + fieldValue.trim() + '%\'');
	                });
	            }

	            if (isSeachById) {
	                // will seach by id
	                sqlWhere = 'id = ' + this.state.value;
	            }

	            sqlWhere = 'where ' + sqlWhere;

	            var libParams = Object.assign({ uuid: DocContext.userData.uuid }, sqlWhere.length ? {
	                sql: sqlWhere,
	                limit: limit,
	                kpv: kpv ? kpv : new Date().toISOString().slice(0, 10)
	            } : {});

	            if (sqlWhere.length > 0) {
	                fetchData.fetchDataPost(POST_LOAD_LIBS_URL + '/' + lib, libParams).then(function (response) {
	                    var gridData = [],
	                        gridConfig = [];

	                    if (response && 'data' in response) {
	                        gridData = response.data.result.result.data;
	                        gridConfig = response.data.result.result.gridConfig;
	                    }

	                    if (gridData && gridData.length > 0) {
	                        if (isSeachById && !_this3.state.show) {
	                            // только одна запись. Грид не нужен
	                            _this3.setState({
	                                fieldValue: gridData[0][_this3.props.boundToGrid],
	                                value: gridData[0]['id'],
	                                gridData: gridData,
	                                gridConfig: gridConfig
	                            });
	                        } else {
	                            _this3.setState({ gridData: gridData, gridConfig: gridConfig, show: true });
	                        }
	                    }
	                }).catch(function (error) {
	                    console.error('loadLibs error', error);
	                });
	            }
	        }
	    }, {
	        key: 'handleGridBtnClick',
	        value: function handleGridBtnClick(btnName, activeRow, id, docTypeId) {
	            // закрываем модальное окно поиска и переходим на новую запись справочника
	            this.setState({ show: false });
	            var docId = this.state.gridData[activeRow]['id'];
	            switch (btnName) {
	                case "Muuda":
	                    this.props.history.push('/' + DocContext.module + '/' + this.props.libName + '/' + docId);
	                    break;
	                case "edit":
	                    this.props.history.push('/' + DocContext.module + '/' + this.props.libName + '/' + docId);
	                    break;
	                case "add":
	                    this.props.history.push('/' + DocContext.module + '/' + this.props.libName + '/0');
	                    break;
	                default:
	                    console.log('Vigane click');
	            }
	        }
	    }], [{
	        key: 'getDerivedStateFromProps',
	        value: function getDerivedStateFromProps(nextProps, prevState) {
	            if (nextProps.value !== prevState.value) {
	                return { value: nextProps.value };
	            } else return null;
	        }
	    }]);

	    return SelectData;
	}(React.PureComponent);

	SelectData.propTypes = {
	    readOnly: PropTypes.bool,
	    disabled: PropTypes.bool,
	    collId: PropTypes.string,
	    title: PropTypes.string,
	    placeholder: PropTypes.string,
	    name: PropTypes.string.isRequired,
	    show: PropTypes.bool
	};

	SelectData.defaultProps = {
	    readOnly: false,
	    disabled: false,
	    btnDelete: false,
	    value: 0,
	    collId: 'id',
	    title: '',
	    show: false
	};

	module.exports = SelectData;

/***/ }),
/* 266 */
/***/ (function(module, exports) {

	'use strict';module.exports={wrapper:{margin:'5px',marginLeft:'20px',display:'flex',width:'95%'},input:{width:'75%',marginLeft:'15px',borderRadius:'3px',height:'30px'},hide:{display:'none'},select:{width:'60%',marginLeft:'15px'},readOnly:{backgroundColor:'#F3EFEF'},label:{width:'40%',margin:'5px'},button:{width:'10%'},limitInput:{width:'10%'}};

/***/ }),
/* 267 */
/***/ (function(module, exports) {

	'use strict';

	var relatedDocuments = function relatedDocuments(self) {
	    // формируем зависимости
	    var pages = self.pages;
	    var relatedDocuments = self.docData.relations ? self.docData.relations : [];
	    if (self.pages && self.pages.length && (!self.docData.id || self.docData.id === 0)) {
	        // создаем новый док
	        pages = [self.pages[0]];
	        relatedDocuments = [];
	    }

	    if (relatedDocuments.length > 0) {
	        relatedDocuments.forEach(function (doc) {
	            if (doc.id) {
	                // проверим на уникальность списка документов
	                var isExists = pages.find(function (page) {
	                    if (!page.docId) {
	                        return false;
	                    } else {
	                        return page.docId == doc.id && page.docTypeId == doc.doc_type;
	                    }
	                });

	                if (!isExists) {
	                    // в массиве нет, добавим ссылку на документ
	                    pages.push({ docTypeId: doc.doc_type, docId: doc.id,
	                        pageName: doc.name + (doc.number ? ' nr:' + doc.number : ' id:' + doc.id) });
	                }
	            }
	        });
	    }
	    self.pages = pages;
	};

	module.exports = relatedDocuments;

/***/ }),
/* 268 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'/*
	        border: '1px solid blue'
	*/},docColumn:{display:'flex',flexDirection:'column',/*
	        border: '1px solid yellow',
	*/width:'50%'},doc:{display:'flex',flexDirection:'column'/*
	        border: '1px solid brown'
	*/},summa:{width:'auto'},grid:{mainTable:{width:'100%'},headerTable:{width:'100%'},gridContainer:{width:'100%'}},gridRow:{/*
	        border: '1px solid black',
	*/backgroundColor:'white',position:'relative',margin:'10% 30% 10% 30%',width:'auto',opacity:'1',top:'100px'},btnEdit:{width:'min-content'},contant:{width:'auto'}};

/***/ }),
/* 269 */
/***/ (function(module, exports) {

	"use strict";var roundToTwo=function roundToTwo(num){return+(Math.round(num+"e+2")+"e-2");};module.exports=roundToTwo;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var DocumentRegister = __webpack_require__(179);
	var styles = __webpack_require__(271);
	var ToolbarContainer = __webpack_require__(71);
	var BtnArvesta = __webpack_require__(272);
	var DOC_TYPE_ID = 'LEPING';

	var checkRights = __webpack_require__(177);
	var DocContext = __webpack_require__(1);

	var DocRights = __webpack_require__(176);

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Documents = function (_React$PureComponent) {
	    _inherits(Documents, _React$PureComponent);

	    function Documents(props) {
	        _classCallCheck(this, Documents);

	        var _this = _possibleConstructorReturn(this, (Documents.__proto__ || Object.getPrototypeOf(Documents)).call(this, props));

	        _this.renderer = _this.renderer.bind(_this);
	        _this.onClickHandler = _this.onClickHandler.bind(_this);

	        return _this;
	    }

	    _createClass(Documents, [{
	        key: 'render',
	        value: function render() {
	            var DOC_TYPE_ID = this.props.module == 'kasutaja' ? 'ISIKU_LEPING' : 'LEPING';
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(DocumentRegister, { initData: this.props.initData,
	                    history: this.props.history ? this.props.history : null,
	                    module: this.props.module,
	                    ref: 'register',
	                    docTypeId: DOC_TYPE_ID,
	                    style: styles,
	                    render: this.renderer })
	            );
	        }
	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self) {
	                return null;
	            }

	            var docRights = DocRights[DOC_TYPE_ID] ? DocRights[DOC_TYPE_ID] : [];
	            var userRoles = DocContext.userData ? DocContext.userData.roles : [];

	            return React.createElement(
	                ToolbarContainer,
	                null,
	                checkRights(userRoles, docRights, 'arved') ? React.createElement(BtnArvesta, {
	                    value: 'Koosta arved',
	                    onClick: this.onClickHandler,
	                    ref: 'btn-koostaArved',
	                    key: 'key-koostaArved'
	                }) : null
	            );
	        }

	        //handler для события клик на кнопках панели

	    }, {
	        key: 'onClickHandler',
	        value: function onClickHandler(event, seisuga) {
	            var _this2 = this;

	            var ids = new Set(); // сюда пишем ид счетом, которые под обработку
	            var Doc = this.refs['register'];

	            var message = '';
	            // будет сформирован файл для отправки в банк SWED
	            Doc.gridData.forEach(function (row) {
	                if (row.select) {
	                    ids.add(row.id);
	                }
	            });
	            // конвертация в массив
	            ids = Array.from(ids);

	            if (!ids.length) {
	                Doc.setState({
	                    warning: 'Mitte ühtegi leping valitud', // строка извещений
	                    warningType: 'notValid'
	                });
	            } else {
	                Doc.fetchData('calc/koostaArved', { docs: ids, seisuga: seisuga }).then(function (data) {
	                    if (data.result) {
	                        message = 'task saadetud t\xE4itmisele';
	                        Doc.setState({ warning: '' + message, warningType: 'ok' });

	                        var tulemused = data.data.result.tulemused;
	                        // открываем отчет
	                        _this2.setState({ isReport: true, txtReport: tulemused });
	                    } else {
	                        if (data.error_message) {
	                            Doc.setState({ warning: 'Tekkis viga: ' + data.error_message, warningType: 'error' });
	                        } else {
	                            Doc.setState({
	                                warning: 'Kokku arvestatud : ' + data.result + ', ' + message,
	                                warningType: 'notValid'
	                            });
	                        }
	                    }
	                });
	            }
	        }
	    }]);

	    return Documents;
	}(React.PureComponent);

	module.exports = Documents;

/***/ }),
/* 271 */
/***/ (function(module, exports) {

	'use strict';module.exports={grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}},doc:{height:'100%'},total:{width:'auto'}};

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);
	var getNow = __webpack_require__(234);

	var ModalPage = __webpack_require__(171);

	var styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    InputDate = __webpack_require__(236),
	    InputNumber = __webpack_require__(238),
	    ICON = 'execute';
	var getTextValue = __webpack_require__(76);

	var ButtonTask = function (_React$PureComponent) {
	    _inherits(ButtonTask, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonTask(props) {
	        _classCallCheck(this, ButtonTask);

	        var _this = _possibleConstructorReturn(this, (ButtonTask.__proto__ || Object.getPrototypeOf(ButtonTask)).call(this, props));

	        _this.state = {
	            showModal: false,
	            seisuga: getNow(),
	            kogus: 0,
	            kas_kond: false
	        };
	        _this.handleClick = _this.handleClick.bind(_this);
	        _this.modalPageClick = _this.modalPageClick.bind(_this);
	        _this.handleInputChange = _this.handleInputChange.bind(_this);
	        return _this;
	    }

	    _createClass(ButtonTask, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.setState({ showModal: true });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var value = getTextValue(this.props.value ? this.props.value : 'Täitmine');
	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    Button,
	                    {
	                        show: true,
	                        value: value,
	                        ref: 'btnTask' || this.props.ref,
	                        style: styles.button,
	                        disabled: false,
	                        onClick: this.handleClick },
	                    React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	                ),
	                this.state.showModal ? React.createElement(
	                    ModalPage,
	                    {
	                        modalPageBtnClick: this.modalPageClick,
	                        modalPageName: value,
	                        show: true,
	                        modalObjects: ['btnOk', 'btnCancel']
	                    },
	                    'Kas k\xE4ivata "' + value + '" ?',
	                    this.props.showDate ? React.createElement(InputDate, { title: 'Seisuga ',
	                        name: 'kpv',
	                        value: this.state.seisuga,
	                        ref: 'input-kpv',
	                        readOnly: false,
	                        onChange: this.handleInputChange }) : null,
	                    this.props.showKogus ? React.createElement(InputNumber, { title: this.props.title ? this.props.title : 'Väärtus',
	                        name: 'kogus',
	                        value: Number(this.state.kogus),
	                        ref: 'input-kogus',
	                        readOnly: false,
	                        onChange: this.handleInputChange }) : null
	                ) : null
	            );
	        }
	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(btnEvent) {
	            this.setState({ showModal: false });
	            if (btnEvent === 'Ok') {
	                this.props.onClick(this.props.value, this.props.showKogus ? this.state.kogus : this.state.seisuga, this.state.kas_kond);
	            }
	        }

	        //will save value

	    }, {
	        key: 'handleInputChange',
	        value: function handleInputChange(name, value) {
	            switch (name) {
	                case 'kpv':
	                    this.setState({ seisuga: value });
	                    break;
	                case 'kogus':
	                    this.setState({ kogus: value });
	                    break;
	                case 'kas_kond':
	                    this.setState({ kas_kond: value });
	                    break;

	            }
	        }
	    }]);

	    return ButtonTask;
	}(React.PureComponent);

	ButtonTask.defaultProps = {
	    disabled: false,
	    show: true,
	    showDate: true,
	    showKogus: false,
	    showKond: false
	};

	module.exports = ButtonTask;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var React = __webpack_require__(10);

	var DocumentTemplate = __webpack_require__(223),
	    InputText = __webpack_require__(212),
	    InputDate = __webpack_require__(236),
	    InputNumber = __webpack_require__(238),
	    Select = __webpack_require__(164),
	    TextArea = __webpack_require__(216),
	    DataGrid = __webpack_require__(183),
	    relatedDocuments = __webpack_require__(267),
	    ModalPage = __webpack_require__(171),
	    ButtonEdit = __webpack_require__(80),
	    styles = __webpack_require__(274);
	var Round = __webpack_require__(269);
	var Loading = __webpack_require__(243);
	var getTextValue = __webpack_require__(76);

	var DocContext = __webpack_require__(1);
	var LIB_OBJS = __webpack_require__(86).ARV.LIB_OBJS;
	var DocRights = __webpack_require__(176);
	var checkRights = __webpack_require__(177);

	var Arve = function (_React$PureComponent) {
	    _inherits(Arve, _React$PureComponent);

	    function Arve(props) {
	        _classCallCheck(this, Arve);

	        var _this = _possibleConstructorReturn(this, (Arve.__proto__ || Object.getPrototypeOf(Arve)).call(this, props));

	        _this.state = {
	            loadedData: false,
	            module: props.module ? props.module : DocContext.module,
	            lapsId: null,
	            docId: props.docId ? props.docId : Number(props.match.params.docId)
	        };

	        _this.createGridRow = _this.createGridRow.bind(_this);
	        _this.recalcDocSumma = _this.recalcDocSumma.bind(_this);

	        _this.renderer = _this.renderer.bind(_this);
	        _this.gridValidateFields = _this.gridValidateFields.bind(_this);
	        _this.btnEditAsutusClick = _this.btnEditAsutusClick.bind(_this);
	        _this.pages = [{ pageName: 'Arve', docTypeId: 'ARV' }];

	        return _this;
	    }

	    _createClass(Arve, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(DocumentTemplate, { docId: this.state.docId,
	                ref: 'document',
	                history: this.props.history,
	                docTypeId: 'ARV',
	                module: this.state.module,
	                initData: this.props.initData ? this.props.initData : {},
	                reload: true,
	                libs: LIB_OBJS,
	                pages: this.pages,
	                renderer: this.renderer,
	                createGridRow: this.createGridRow,
	                gridValidator: this.gridValidateFields,
	                recalcDoc: this.recalcDocSumma,
	                focusElement: 'input-number'
	            });
	        }

	        /**
	         *Вернет кастомные компоненты документа
	         */

	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self || !self.docData || !self.docData.kpv) {
	                return React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(Loading, { label: 'Laadimine...' })
	                );
	            }

	            var isEditMode = self.state.edited,
	                gridData = self.docData.gridData,
	                gridColumns = self.docData.gridConfig,
	                gridArvTasuData = self.docData.queryArvTasu,
	                gridTasudColumns = self.docData.gridTasudConfig;

	            // формируем зависимости
	            if (self.docData.relations) {
	                relatedDocuments(self);
	            }

	            // права на редактирование карточки контрагента
	            var docRights = DocRights['ASUTUSED'] ? DocRights['ASUTUSED'] : [];
	            var userRoles = DocContext.userData ? DocContext.userData.roles : [];

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(InputText, { ref: 'input-number',
	                                title: 'Number',
	                                name: 'number',
	                                value: self.docData.number || '',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange }),
	                            React.createElement(InputDate, { title: 'Kuup\xE4ev',
	                                name: 'kpv',
	                                value: self.docData.kpv,
	                                ref: 'input-kpv',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange }),
	                            React.createElement(InputDate, { title: 'T\xE4htaeg',
	                                name: 'tahtaeg',
	                                value: self.docData.tahtaeg,
	                                ref: 'input-tahtaeg',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(Select, { title: 'Maksja',
	                                libs: 'asutused',
	                                name: 'asutusid',
	                                data: self.libs['asutused'],
	                                value: self.docData.asutusid || 0,
	                                defaultValue: self.docData.asutus,
	                                onChange: self.handleInputChange,
	                                collId: 'id',
	                                readOnly: !isEditMode })
	                        ),
	                        checkRights(userRoles, docRights, 'edit') ? React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(ButtonEdit, {
	                                ref: 'btnEdit',
	                                value: 'Muuda',
	                                onClick: this.btnEditAsutusClick,
	                                show: !isEditMode,
	                                style: styles.btnEdit,
	                                disabled: false
	                            })
	                        ) : null
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(InputText, { title: 'Lisa',
	                                name: 'lisa',
	                                value: self.docData.lisa || '',
	                                ref: 'input-lisa',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange }),
	                            React.createElement(InputText, { title: 'Viitenumber',
	                                name: 'viitenr',
	                                value: self.docData.viitenr || '',
	                                ref: 'input-viitenumber',
	                                readOnly: true,
	                                disable: true,
	                                onChange: self.handleInputChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(Select, { title: 'Arveldus arve',
	                                name: 'aa_id',
	                                libs: 'aa',
	                                value: self.docData.aa,
	                                data: self.libs['aa'],
	                                defaultValue: String(self.docData.aa) || '',
	                                onChange: self.handleInputChange,
	                                collId: 'kood',
	                                ref: 'select-aa',
	                                readOnly: !isEditMode })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(TextArea, { title: 'M\xE4rkused',
	                            name: 'muud',
	                            ref: 'textarea-muud',
	                            onChange: self.handleInputChange,
	                            value: self.docData.muud || '',
	                            readOnly: !isEditMode })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(DataGrid, { source: 'details',
	                            gridData: gridData,
	                            gridColumns: gridColumns,
	                            showToolBar: isEditMode,
	                            handleGridRow: this.handleGridRow,
	                            handleGridBtnClick: self.handleGridBtnClick,
	                            readOnly: !isEditMode,
	                            style: styles.grid.headerTable,
	                            ref: 'data-grid' })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(InputNumber, { title: 'Summa',
	                            name: 'summa',
	                            ref: 'input-summa',
	                            value: Number(self.docData.summa) || 0,
	                            disabled: true,
	                            style: styles.summa
	                        }),
	                        React.createElement(InputNumber, { title: 'K\xE4ibemaks',
	                            name: 'kbm',
	                            ref: 'input-kbm',
	                            disabled: true,
	                            style: styles.summa,
	                            value: Number(self.docData.kbm) || 0
	                        }),
	                        React.createElement(InputNumber, { title: 'J\xE4\xE4k',
	                            type: 'currency',
	                            name: 'jaak',
	                            ref: 'input-jaak',
	                            disabled: true,
	                            style: styles.summa,
	                            value: Number(self.docData.jaak) || 0
	                        })
	                    ),
	                    self.state.gridRowEdit ? this.createGridRow(self) : null,
	                    React.createElement('br', null),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'label',
	                            { ref: 'label' },
	                            getTextValue('Tasud')
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(DataGrid, { source: 'tasud',
	                            gridData: gridArvTasuData,
	                            gridColumns: gridTasudColumns,
	                            showToolBar: false,
	                            handleGridBtnClick: self.handleGridBtnClick,
	                            docTypeId: 'smk',
	                            readOnly: true,
	                            style: styles.grid.headerTable,
	                            ref: 'tasud-data-grid' })
	                    )
	                )
	            );
	        }

	        /**
	         * Создаст компонет строки грида
	         * @returns {XML}
	         */

	    }, {
	        key: 'createGridRow',
	        value: function createGridRow(self) {

	            var row = self.gridRowData ? self.gridRowData : {},
	                validateMessage = '',
	                // self.state.warning
	            buttonOkReadOnly = validateMessage.length > 0 || !self.state.checked,
	                modalObjects = ['btnOk', 'btnCancel'];

	            if (buttonOkReadOnly) {
	                // уберем кнопку Ок
	                modalObjects.splice(0, 1);
	            }

	            if (!row) return React.createElement('div', null);

	            return React.createElement(
	                'div',
	                { className: '.modalPage' },
	                React.createElement(
	                    ModalPage,
	                    {
	                        modalObjects: modalObjects,
	                        ref: 'modalpage-grid-row',
	                        show: true,
	                        modalPageBtnClick: self.modalPageClick,
	                        styles: styles.gridRow,
	                        modalPageName: 'Rea lisamine / parandamine' },
	                    React.createElement(
	                        'div',
	                        { ref: 'grid-row-container' },
	                        self.state.gridWarning.length ? React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'span',
	                                null,
	                                self.state.gridWarning
	                            )
	                        ) : null,
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(Select, { title: 'Teenus:',
	                                name: 'nomid',
	                                libs: 'nomenclature',
	                                data: self.libs['nomenclature'],
	                                readOnly: false,
	                                value: row.nomid,
	                                collId: 'id',
	                                ref: 'nomid',
	                                placeholder: 'Teenuse kood',
	                                onChange: self.handleGridRowChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputNumber, { title: 'Kogus:',
	                                name: 'kogus',
	                                value: Number(row.kogus ? row.kogus : 0),
	                                readOnly: false,
	                                disabled: false,
	                                bindData: false,
	                                ref: 'kogus',
	                                pattern: '[0-9]{10}',
	                                onChange: self.handleGridRowInput })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputNumber, { title: 'Hind:',
	                                name: 'hind',
	                                value: Number(row.hind ? row.hind : 0),
	                                readOnly: false,
	                                disabled: false,
	                                bindData: false,
	                                ref: 'hind',
	                                pattern: '[0-9]{10}',
	                                onChange: self.handleGridRowInput })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputNumber, { title: 'Kbm-ta:',
	                                name: 'kbmta',
	                                value: Number(row.summa ? row.summa - row.kbm : 0),
	                                disabled: true,
	                                bindData: false,
	                                ref: 'kbmta',
	                                pattern: '[0-9]{10}',
	                                onChange: self.handleGridRowChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputNumber, { title: 'Kbm:',
	                                name: 'kbm',
	                                value: Number(row.kbm ? row.kbm : 0),
	                                disabled: true,
	                                bindData: false,
	                                ref: 'kbm',
	                                pattern: '[0-9]{10}',
	                                onBlur: self.handleGridRowInput })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(InputNumber, { title: 'Summa:',
	                                name: 'Summa',
	                                value: Number(row.summa ? row.summa : 0),
	                                disabled: true,
	                                bindData: false,
	                                ref: 'summa',
	                                pattern: '[0-9]{10}',
	                                onChange: self.handleGridRowInput })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(Select, { title: 'Tunnus:',
	                                name: 'tunnus',
	                                data: self.libs['tunnus'],
	                                value: row.tunnus || '',
	                                ref: 'tunnus',
	                                collId: 'kood',
	                                onChange: self.handleGridRowChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(Select, { title: 'Projekt:',
	                                name: 'proj',
	                                data: self.libs['project'],
	                                value: row.proj || '',
	                                ref: 'project',
	                                collId: 'kood',
	                                onChange: self.handleGridRowChange })
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(TextArea, { title: 'M\xE4rkused:',
	                                name: 'muud',
	                                ref: 'gridrow-textarea-muud',
	                                onChange: self.handleGridRowChange,
	                                value: row.muud || '' })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        null,
	                        React.createElement(
	                            'span',
	                            null,
	                            validateMessage
	                        )
	                    )
	                )
	            );
	        }

	        /**
	         * валидатор для строки грида
	         * @returns {string}
	         */

	    }, {
	        key: 'gridValidateFields',
	        value: function gridValidateFields() {
	            var warning = '';
	            var doc = this.refs['document'];
	            if (doc && doc.gridRowData) {

	                // только после проверки формы на валидность
	                if (doc.gridRowData && !doc.gridRowData['nomid']) warning = warning + ' Код операции';
	                if (!doc.gridRowData['kogus']) warning = warning + ' Количество';
	                if (!doc.gridRowData['summa']) warning = warning + ' Сумма';

	                this.recalcRowSumm();
	                this.recalcDocSumma('summa');
	            }
	            return warning;
	        }

	        /**
	         * перерасчет суммы строки и расчет налога
	         */

	    }, {
	        key: 'recalcRowSumm',
	        value: function recalcRowSumm() {
	            var doc = this.refs['document'];

	            if (!Object.keys(doc.gridRowData).length) {
	                return;
	            }
	            //подставим наименование услогу

	            var vat = 0;
	            var nomHind = 0;
	            if (doc.gridRowData['nomid']) {
	                var nomDataName = doc.libs['nomenclature'].find(function (lib) {
	                    return Number(lib.id) === Number(doc.gridRowData['nomid']);
	                });

	                if (nomDataName) {
	                    doc.gridRowData['hind'] = nomDataName.hind && !doc.gridRowData['hind'] ? nomDataName.hind : doc.gridRowData['hind'];
	                    vat = nomDataName.vat ? Number(nomDataName.vat) / 100 : 0;
	                    nomHind = nomDataName.hind;
	                    doc.gridRowData['kood'] = nomDataName.kood ? nomDataName.kood : null;
	                    doc.gridRowData['nimetus'] = nomDataName.nimetus ? nomDataName.nimetus : null;
	                    doc.gridRowData['uhik'] = nomDataName.uhik ? nomDataName.uhik : null;
	                    doc.gridRowData['konto'] = nomDataName.konto ? nomDataName.konto : null;
	                    doc.gridRowData['tunnus'] = nomDataName.tunnus ? nomDataName.tunnus : null;
	                    doc.gridRowData['proj'] = nomDataName.proj ? nomDataName.proj : null;
	                    doc.gridRowData['kood1'] = nomDataName.tegev ? nomDataName.tegev : null;
	                    doc.gridRowData['kood2'] = nomDataName.allikas ? nomDataName.allikas : null;
	                    doc.gridRowData['kood5'] = nomDataName.artikkel ? nomDataName.artikkel : null;
	                }
	            }

	            doc.gridRowData['kogus'] = Number(doc.gridRowData.kogus);
	            doc.gridRowData['soodustus'] = doc.gridRowData['soodustus'] ? Number(doc.gridRowData.soodustus) : 0;
	            doc.gridRowData['hind'] = nomHind && doc.gridRowData['soodustus'] ? Number(nomHind) - doc.gridRowData['soodustus'] : Number(doc.gridRowData.hind);
	            doc.gridRowData['kbmta'] = Round(Number(doc.gridRowData['kogus']) * Number(doc.gridRowData['hind']));
	            doc.gridRowData['kbm'] = Round(Number(doc.gridRowData['kbmta']) * vat);
	            doc.gridRowData['summa'] = Round(Number(doc.gridRowData['kbmta']) + Number(doc.gridRowData['kbm']));
	        }

	        /**
	         * Перерасчет итоговых сумм документа
	         */

	    }, {
	        key: 'recalcDocSumma',
	        value: function recalcDocSumma() {
	            var doc = this.refs['document'];

	            doc.docData['summa'] = 0;
	            doc.docData['kbm'] = 0;
	            doc.docData.gridData.forEach(function (row) {
	                doc.docData['summa'] = Number(doc.docData['summa']) + Number(row['summa']);
	                doc.docData['kbm'] = Number(doc.docData['kbm']) + Number(row['kbm']);
	            });
	            doc.docData['summa'] = Round(doc.docData['summa']);
	            doc.docData['kbm'] = Round(doc.docData['kbm']);
	        }

	        // обработчик события клиска на кнопке редактирования контр-агента

	    }, {
	        key: 'btnEditAsutusClick',
	        value: function btnEditAsutusClick() {
	            var docAsutusId = this.refs['document'].docData.asutusid;

	            // осуществит переход на карточку контр-агента
	            this.props.history.push('/' + DocContext.module + '/asutused/' + docAsutusId);
	        }
	    }]);

	    return Arve;
	}(React.PureComponent);

	Arve.propTypes = {
	    docId: PropTypes.number,
	    initData: PropTypes.object,
	    userData: PropTypes.object
	};

	Arve.defaultProps = {
	    params: { docId: 0 },
	    initData: {},
	    userData: {}
	};

	module.exports = Arve;

/***/ }),
/* 274 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'/*
	        border: '1px solid blue'
	*/},docColumn:{display:'flex',flexDirection:'column',/*
	        border: '1px solid yellow',
	*/width:'50%'},doc:{display:'flex',flexDirection:'column'/*
	        border: '1px solid brown'
	*/},summa:{width:'auto'},grid:{mainTable:{width:'100%'},headerTable:{width:'100%'},gridContainer:{width:'100%'}},gridRow:{backgroundColor:'white',position:'relative',margin:'10% 30% 10% 30%',width:'750px',opacity:'1',alignSelf:'center'},btnEdit:{width:'min-content'}};

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var DocumentRegister = __webpack_require__(179);
	var ToolbarContainer = __webpack_require__(71);
	var BtnSettings = __webpack_require__(276);
	var BtnPrint = __webpack_require__(204);
	var BtnEmail = __webpack_require__(208);
	var BtnEarve = __webpack_require__(277);
	var InputNumber = __webpack_require__(238);
	var BtnArvesta = __webpack_require__(272);

	var getSum = __webpack_require__(278);

	var styles = __webpack_require__(279);

	var DocContext = __webpack_require__(1);
	var EVENTS = __webpack_require__(86).ARV.EVENTS;

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Documents = function (_React$PureComponent) {
	    _inherits(Documents, _React$PureComponent);

	    function Documents(props) {
	        _classCallCheck(this, Documents);

	        var _this = _possibleConstructorReturn(this, (Documents.__proto__ || Object.getPrototypeOf(Documents)).call(this, props));

	        _this.onClickHandler = _this.onClickHandler.bind(_this);
	        _this.renderer = _this.renderer.bind(_this);
	        _this.state = {
	            summa: 0,
	            jaak: 0,
	            read: 0
	        };

	        return _this;
	    }

	    _createClass(Documents, [{
	        key: 'render',
	        value: function render() {
	            var DOC_TYPE_ID = this.props.module == 'kasutaja' ? 'ISIKU_ARV' : 'ARV';

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(DocumentRegister, { initData: this.props.initData,
	                    history: this.props.history ? this.props.history : null,
	                    module: this.props.module,
	                    ref: 'register',
	                    docTypeId: DOC_TYPE_ID,
	                    style: styles,
	                    render: this.renderer }),
	                React.createElement(InputNumber, { title: 'Read kokku:',
	                    name: 'read_kokku',
	                    style: styles.total,
	                    ref: 'input-read',
	                    value: Number(this.state.read) || 0,
	                    disabled: true }),
	                React.createElement(InputNumber, { title: 'Summa kokku:',
	                    name: 'summa_kokku',
	                    style: styles.total,
	                    ref: 'input-summa',
	                    value: Number(this.state.summa).toFixed(2) || 0,
	                    disabled: true }),
	                React.createElement(InputNumber, { title: 'J\xE4\xE4k kokku:',
	                    name: 'jaak_kokku',
	                    style: styles.total,
	                    ref: 'input-jaak',
	                    value: Number(this.state.jaak).toFixed(2) || 0,
	                    disabled: true })
	            );
	        }
	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            var DOC_TYPE_ID = this.props.module == 'kasutaja' ? 'ISIKU_ARV' : 'ARV';

	            var summa = self.gridData ? getSum(self.gridData, 'summa') : 0;
	            var jaak = self.gridData ? getSum(self.gridData, 'jaak') : 0;
	            if (summa) {
	                this.setState({ summa: summa, read: self.gridData.length, jaak: jaak });
	            }

	            return React.createElement(
	                ToolbarContainer,
	                null,
	                React.createElement(BtnEarve, {
	                    onClick: this.onClickHandler,
	                    docTypeId: DOC_TYPE_ID,
	                    phrase: 'Kas laadida XML (SWED) fail?',
	                    ref: 'btnEarveSwedXML',
	                    value: EVENTS[6].name
	                }),
	                React.createElement(BtnEarve, {
	                    onClick: this.onClickHandler,
	                    docTypeId: DOC_TYPE_ID,
	                    phrase: 'Kas laadida XML (SEB) fail?',
	                    ref: 'btnEarveSebXML',
	                    value: EVENTS[5].name
	                }),
	                React.createElement(BtnEarve, {
	                    onClick: this.onClickHandler,
	                    docTypeId: DOC_TYPE_ID,
	                    phrase: 'Kas laadida XML fail?',
	                    ref: 'btnEarveXML',
	                    value: EVENTS[4].name
	                }),
	                React.createElement(BtnEarve, {
	                    onClick: this.onClickHandler,
	                    docTypeId: DOC_TYPE_ID,
	                    ref: 'btnEarveOmniva',
	                    value: EVENTS[3].name
	                }),
	                React.createElement(BtnEmail, {
	                    onClick: this.onClickHandler,
	                    docTypeId: DOC_TYPE_ID,
	                    ref: 'btnEmail',
	                    value: EVENTS[2].name
	                }),
	                React.createElement(BtnPrint, {
	                    onClick: this.onClickHandler,
	                    docTypeId: DOC_TYPE_ID,
	                    ref: 'btnPrint',
	                    value: EVENTS[1].name
	                }),
	                React.createElement(BtnSettings, {
	                    history: self.props.history ? self.props.history : null,
	                    docTypeId: DOC_TYPE_ID,
	                    onClick: this.onClickHandler,
	                    ref: 'btnSettings',
	                    value: EVENTS[0].name
	                })
	            );
	        }

	        //handler для события клик на кнопках панели

	    }, {
	        key: 'onClickHandler',
	        value: function onClickHandler(event, seisuga) {
	            var _this2 = this;

	            var ids = new Set(); // сюда пишем ид счетом, которые под обработку

	            var Doc = this.refs['register'];

	            switch (event) {
	                case EVENTS[0].name:
	                    //делаем редайрект на конфигурацию
	                    this.props.history.push('/' + this.props.module + '/config/' + DocContext.userData.asutusId);
	                    break;
	                case EVENTS[1].name:
	                    // Print

	                    // будет выведено на печать выбранные и только для печати счета
	                    Doc.gridData.forEach(function (row) {
	                        if (row.select && row.kas_paberil) {
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });
	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (ids.length > 0) {
	                        Doc.setState({
	                            warning: 'Leidsin ' + ids.length + ' arveid printimiseks', // строка извещений
	                            warningType: 'ok'
	                        });

	                        var url = '/multiple_print/' + DOC_TYPE_ID + '/' + DocContext.userData.uuid + '/' + ids;
	                        window.open('' + url);
	                    } else {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    }

	                    break;
	                case EVENTS[2].name:
	                    //emails

	                    // будет отправлено на почту  выбранные и только для эл.почты счета
	                    Doc.gridData.forEach(function (row) {
	                        if (row.select && row.kas_email) {
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });

	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (!ids.length) {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    } else {
	                        // отправляем запрос на выполнение

	                        Doc.fetchData('email', ids).then(function (data) {
	                            if (data.result) {
	                                Doc.setState({ warning: 'Kokku saadetud arveid emailga: ' + data.result, warningType: 'ok' });
	                            } else {
	                                console.error('email error', data);
	                                Doc.setState({ warning: 'Tekkis viga: ' + data.error_message, warningType: 'error' });
	                            }
	                        }).catch(function (error) {
	                            console.error('email error', error);
	                            Doc.setState({ warning: 'Tekkis viga: ' + error, warningType: 'error' });
	                        });
	                    }

	                    break;

	                case EVENTS[3].name:
	                    //e-arved

	                    // будет отправлено на почту  выбранные и только для эл.почты счета
	                    Doc.gridData.forEach(function (row) {
	                        if (row.select && row.kas_earved) {
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });
	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (!ids.length) {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    } else {
	                        // отправляем запрос на выполнение

	                        Doc.fetchData('e-arved', ids).then(function (data) {
	                            if (data && 'result' in data) {
	                                Doc.setState({ warning: 'Kokku saadetud arveid  : ' + data.result, warningType: 'ok' });
	                            } else {
	                                var error_message =  true ? data.error_message : '';
	                                Doc.setState({ warning: '' + error_message, warningType: 'error' });
	                            }
	                        }).catch(function (err) {
	                            var error_message =  true ? err.TypeError : '';
	                            Doc.setState({ warning: '' + error_message, warningType: 'error' });
	                        });
	                    }

	                    break;
	                case EVENTS[4].name:
	                    //e-arved (XML)

	                    // будет отправлено на почту  выбранные и только для эл.почты счета
	                    Doc.gridData.forEach(function (row) {
	                        if (row.select && row.kas_earved && Number(row.summa) > 0) {
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });
	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (!ids.length) {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    } else {
	                        // отправляем запрос на выполнение
	                        Doc.setState({
	                            warning: 'Leidsin ' + ids.length + ' arveid', // строка извещений
	                            warningType: 'ok'
	                        });

	                        var _url = '/e-arved/' + DocContext.userData.uuid + '/' + ids;
	                        window.open('' + _url);
	                    }

	                    break;
	                case EVENTS[5].name:
	                    //e-arved SEB (XML)

	                    // будет сформирован файл для отправки в банк СЕБ
	                    Doc.gridData.forEach(function (row) {
	                        if (row.kas_earved && row.pank && row.pank == 'SEB' && row.select && Number(row.summa) > 0) {
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });
	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (!ids.length) {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    } else {
	                        // отправляем запрос на выполнение
	                        Doc.setState({
	                            warning: 'Leidsin ' + ids.length + ' arveid', // строка извещений
	                            warningType: 'ok'
	                        });

	                        var _url2 = '/e-arved/seb/' + DocContext.userData.uuid + '/' + ids;
	                        window.open('' + _url2);
	                    }
	                    break;
	                case EVENTS[6].name:
	                    //e-arved Swed (XML)

	                    // будет сформирован файл для отправки в банк SWED
	                    Doc.gridData.forEach(function (row) {
	                        if (row.kas_earved && row.select && row.pank && row.pank == 'SWED' && Number(row.summa) > 0) {
	                            // && row.kas_swed
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });
	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (!ids.length) {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    } else {
	                        // отправляем запрос на выполнение
	                        Doc.setState({
	                            warning: 'Leidsin ' + ids.length + ' arveid', // строка извещений
	                            warningType: 'ok'
	                        });

	                        var _url3 = '/e-arved/swed/' + DocContext.userData.uuid + '/' + ids;
	                        window.open('' + _url3);
	                    }
	                    break;
	                case EVENTS[7].name:
	                    //списание маловероятных
	                    var message = '';
	                    // будет сформирован файл для отправки в банк SWED
	                    Doc.gridData.forEach(function (row) {
	                        if (row.ebatoenaolised == 'Jah' && Number(row.jaak) > 0) {
	                            // && row.kas_swed
	                            // выбрано для печати
	                            ids.add(row.id);
	                        }
	                    });
	                    // конвертация в массив
	                    ids = Array.from(ids);

	                    if (!ids.length) {
	                        Doc.setState({
	                            warning: 'Mitte ühtegi arve leidnum', // строка извещений
	                            warningType: 'notValid'
	                        });
	                    } else {
	                        Doc.fetchData('calc/ebatoenaolised', { docs: ids, seisuga: seisuga }).then(function (data) {
	                            if (data.result) {
	                                message = 'task saadetud t\xE4itmisele';
	                                Doc.setState({ warning: '' + message, warningType: 'ok' });

	                                var tulemused = data.data.result.tulemused;
	                                // открываем отчет
	                                _this2.setState({ isReport: true, txtReport: tulemused });
	                            } else {
	                                if (data.error_message) {
	                                    Doc.setState({ warning: 'Tekkis viga: ' + data.error_message, warningType: 'error' });
	                                } else {
	                                    Doc.setState({
	                                        warning: 'Kokku arvestatud : ' + data.result + ', ' + message,
	                                        warningType: 'notValid'
	                                    });
	                                }
	                            }
	                        });
	                    }
	                    break;

	            }
	        }
	    }]);

	    return Documents;
	}(React.PureComponent);

	module.exports = Documents;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var PropTypes = __webpack_require__(11);

	var styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ICON = 'settings';

	var ButtonSettings = function (_React$PureComponent) {
	    _inherits(ButtonSettings, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonSettings(props) {
	        _classCallCheck(this, ButtonSettings);

	        var _this = _possibleConstructorReturn(this, (ButtonSettings.__proto__ || Object.getPrototypeOf(ButtonSettings)).call(this, props));

	        _this.handleClick = _this.handleClick.bind(_this);
	        return _this;
	    }

	    _createClass(ButtonSettings, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            return this.props.onClick(this.props.value);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement(
	                Button,
	                {
	                    value: this.props.value,
	                    ref: 'btnSettings',
	                    style: styles.button,
	                    disabled: false,
	                    onClick: this.handleClick },
	                React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	            );
	        }
	    }]);

	    return ButtonSettings;
	}(React.PureComponent);

	ButtonSettings.defaultProps = {
	    disabled: false,
	    show: true,
	    value: 'Settings'
	};

	module.exports = ButtonSettings;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);

	var React = __webpack_require__(10),
	    styles = __webpack_require__(74),
	    Button = __webpack_require__(75),
	    ModalPage = __webpack_require__(171),
	    ICON = 'mail';

	var ButtonRegisterEmail = function (_React$PureComponent) {
	    _inherits(ButtonRegisterEmail, _React$PureComponent);

	    // кнопка создания документа в регистрах
	    function ButtonRegisterEmail(props) {
	        _classCallCheck(this, ButtonRegisterEmail);

	        var _this = _possibleConstructorReturn(this, (ButtonRegisterEmail.__proto__ || Object.getPrototypeOf(ButtonRegisterEmail)).call(this, props));

	        _this.state = {
	            showModal: false
	        };
	        _this.modalPageClick = _this.modalPageClick.bind(_this);
	        return _this;
	    }

	    /**
	     * обработчик события клик, откроет модальное окно
	     * @param e
	     */


	    _createClass(ButtonRegisterEmail, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.setState({ showModal: true });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var phrase = this.props.phrase ? this.props.phrase : 'Kas saada E-Arve ?';

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    Button,
	                    {
	                        ref: 'btnEmail',
	                        value: this.props.value,
	                        show: this.props.show,
	                        disabled: this.props.disabled,
	                        onClick: function onClick(e) {
	                            return _this2.handleClick(e);
	                        } },
	                    React.createElement('img', { ref: 'image', src: styles.icons[ICON] })
	                ),
	                React.createElement(
	                    ModalPage,
	                    {
	                        modalPageBtnClick: this.modalPageClick,
	                        modalPageName: '' + this.props.value,
	                        show: this.state.showModal,
	                        modalObjects: ['btnOk', 'btnCancel']
	                    },
	                    phrase
	                )
	            );
	        }

	        /**
	         * обработчик на событие клика на кнопки можального окна
	         * @param btnEvent
	         */

	    }, {
	        key: 'modalPageClick',
	        value: function modalPageClick(btnEvent) {
	            if (btnEvent === 'Ok') {
	                this.props.onClick(this.props.value);
	            }
	            this.setState({ showModal: false });
	        }
	    }]);

	    return ButtonRegisterEmail;
	}(React.PureComponent);

	/*
	ButtonRegisterPrint.propTypes = {
	    onClick: PropTypes.func.isRequired
	}
	*/

	ButtonRegisterEmail.defaultProps = {
	    disabled: false,
	    show: true,
	    value: 'Email'
	};

	module.exports = ButtonRegisterEmail;

/***/ }),
/* 278 */
/***/ (function(module, exports) {

	"use strict";// will calculate sum of some field
	var getSum=function getSum(data,columnField){var total=0;if(data&&data.length&&data[0][columnField]){data.forEach(function(row){return total=total+Number(row[columnField]);});}return total.toFixed(2);};module.exports=getSum;

/***/ }),
/* 279 */
/***/ (function(module, exports) {

	'use strict';module.exports={grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}},doc:{height:'100%'},total:{width:'auto'}};

/***/ }),
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PropTypes = __webpack_require__(11);
	var React = __webpack_require__(10);

	var DocumentTemplate = __webpack_require__(223),
	    InputText = __webpack_require__(212),
	    InputDate = __webpack_require__(236),
	    InputNumber = __webpack_require__(238),
	    Select = __webpack_require__(164),
	    SelectData = __webpack_require__(265),
	    TextArea = __webpack_require__(216),
	    DataGrid = __webpack_require__(183),
	    relatedDocuments = __webpack_require__(267),
	    ModalPage = __webpack_require__(171),
	    ButtonEdit = __webpack_require__(80),
	    styles = __webpack_require__(289);
	var Round = __webpack_require__(269);
	var Loading = __webpack_require__(243);

	var DocContext = __webpack_require__(1);
	var LIB_OBJS = __webpack_require__(86).ANDMED.LIB_OBJS;

	var Leping = function (_React$PureComponent) {
	    _inherits(Leping, _React$PureComponent);

	    function Leping(props) {
	        _classCallCheck(this, Leping);

	        var _this = _possibleConstructorReturn(this, (Leping.__proto__ || Object.getPrototypeOf(Leping)).call(this, props));

	        _this.state = {
	            loadedData: false,
	            module: props.module ? props.module : DocContext.module,
	            docId: props.docId ? props.docId : Number(props.match.params.docId)
	        };

	        _this.createGridRow = _this.createGridRow.bind(_this);

	        _this.renderer = _this.renderer.bind(_this);
	        _this.gridValidateFields = _this.gridValidateFields.bind(_this);
	        _this.btnEditAsutusClick = _this.btnEditAsutusClick.bind(_this);
	        _this.pages = [{ pageName: 'Andmed', docTypeId: 'ANDMED' }];

	        return _this;
	    }

	    _createClass(Leping, [{
	        key: 'render',
	        value: function render() {
	            return React.createElement(DocumentTemplate, { docId: this.state.docId,
	                ref: 'document',
	                history: this.props.history,
	                docTypeId: 'ANDMED',
	                module: this.props.module,
	                initData: this.props.initData ? this.props.initData : {},
	                reload: true,
	                pages: this.pages,
	                libs: LIB_OBJS,
	                renderer: this.renderer,
	                createGridRow: this.createGridRow,
	                gridValidator: this.gridValidateFields,
	                focusElement: 'input-kpv'
	            });
	        }

	        /**
	         *Вернет кастомные компоненты документа
	         */

	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            if (!self || !self.docData || !self.docData.kpv || self.libs['leping'].length == 0) {
	                return React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(Loading, { label: 'Laadimine...' })
	                );
	            }

	            // формируем зависимости
	            if (self.docData.relations) {
	                relatedDocuments(self);
	            }

	            var isEditMode = self.state.edited,
	                gridData = self.docData.gridData,
	                gridColumns = self.docData.gridConfig;

	            // фильтруем договоры, только владелец
	            var lepingud = self.libs['leping'].filter(function (leping) {
	                return leping.user_id == DocContext.userData.userId;
	            });

	            // если договор только один, то ставим его сразу
	            if (lepingud.length == 1 && !self.docData.lepingid) {
	                self.docData.lepingid = lepingud[0].id;
	            }

	            // если указан договор
	            if (self.docData.lepingid) {
	                lepingud.forEach(function (row) {
	                    if (row.id == self.docData.lepingid) {
	                        self.docData.asutus = row.asutus;
	                        self.docData.objekt = row.nimetus;

	                        if (gridData.length == 0) {
	                            // пишем услуги
	                            // если нет услуг, добавим их
	                            row.noms.forEach(function (nom) {
	                                gridData.push({
	                                    id: 0,
	                                    nomid: nom.nom_id,
	                                    kogus: 0,
	                                    eel_kogus: nom.eel_kogus,
	                                    hind: nom.hind,
	                                    kood: nom.kood,
	                                    nimetus: nom.nimetus
	                                });
	                            });
	                        }
	                    }
	                });
	            }

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(
	                    'div',
	                    { style: styles.doc },
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(InputDate, { title: 'Kuup\xE4ev',
	                                name: 'kpv',
	                                value: self.docData.kpv,
	                                ref: 'input-kpv',
	                                readOnly: !isEditMode,
	                                onChange: self.handleInputChange })
	                        )
	                    ),
	                    !self.docData.id ? React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(Select, { title: 'Leping',
	                                name: 'lepingid',
	                                libs: 'leping',
	                                value: self.docData.lepingid,
	                                data: lepingud,
	                                defaultValue: String(self.docData.objekt) || '',
	                                onChange: self.handleInputChange,
	                                collId: 'id',
	                                ref: 'select-leping',
	                                readOnly: !isEditMode })
	                        )
	                    ) : null,
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(InputText, { ref: 'input-asutus',
	                                title: 'Korteriomanik',
	                                name: 'asutus',
	                                value: self.docData.asutus || '',
	                                readOnly: true })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(
	                            'div',
	                            { style: styles.docColumn },
	                            React.createElement(InputText, { ref: 'input-objekt',
	                                title: 'Objekt',
	                                name: 'objekt',
	                                value: self.docData.objekt || '',
	                                readOnly: true })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(TextArea, { title: 'M\xE4rkused',
	                            name: 'muud',
	                            ref: 'textarea-muud',
	                            onChange: self.handleInputChange,
	                            value: self.docData.muud || '',
	                            readOnly: !isEditMode })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: styles.docRow },
	                        React.createElement(DataGrid, { source: 'details',
	                            gridData: gridData,
	                            gridColumns: gridColumns,
	                            showToolBar: isEditMode,
	                            handleGridRow: this.handleGridRow,
	                            handleGridBtnClick: self.handleGridBtnClick,
	                            readOnly: !isEditMode,
	                            style: styles.grid.headerTable,
	                            ref: 'data-grid' })
	                    ),
	                    self.state.gridRowEdit ? this.createGridRow(self) : null
	                )
	            );
	        }

	        /**
	         * Создаст компонет строки грида
	         * @returns {XML}
	         */

	    }, {
	        key: 'createGridRow',
	        value: function createGridRow(self) {

	            var row = self.gridRowData ? self.gridRowData : {},
	                validateMessage = '',
	                // self.state.warning
	            buttonOkReadOnly = validateMessage.length > 0 || !self.state.checked,
	                modalObjects = ['btnOk', 'btnCancel'];

	            if (buttonOkReadOnly) {
	                // уберем кнопку Ок
	                modalObjects.splice(0, 1);
	            }

	            if (!row) return React.createElement('div', null);

	            var gridRowInputStyle = styles.gridRowInput;

	            return React.createElement(
	                'div',
	                { className: '.modalPage' },
	                React.createElement(
	                    ModalPage,
	                    {
	                        modalObjects: modalObjects,
	                        ref: 'modalpage-grid-row',
	                        show: true,
	                        modalPageBtnClick: self.modalPageClick,
	                        modalPageName: 'Rea lisamine / parandamine' },
	                    React.createElement(
	                        'div',
	                        { ref: 'grid-row-container' },
	                        self.state.gridWarning.length ? React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'span',
	                                null,
	                                self.state.gridWarning
	                            )
	                        ) : null,
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.docColumn },
	                                React.createElement(InputText, { title: 'Teenus',
	                                    name: 'nomid',
	                                    readOnly: true,
	                                    value: row.nimetus,
	                                    style: gridRowInputStyle,
	                                    ref: 'nomid' })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.docColumn },
	                                React.createElement(InputNumber, { title: 'Kogus ',
	                                    name: 'kogus',
	                                    value: Number(row.kogus ? row.kogus : 0),
	                                    readOnly: false,
	                                    disabled: false,
	                                    bindData: false,
	                                    ref: 'kogus',
	                                    pattern: '[0-9]{10}',
	                                    style: gridRowInputStyle,
	                                    onChange: self.handleGridRowInput })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.docColumn },
	                                React.createElement(InputNumber, { title: 'Eelmise kogus ',
	                                    name: 'eel_kogus',
	                                    value: Number(row.eel_kogus ? row.eel_kogus : 0),
	                                    readOnly: true,
	                                    style: gridRowInputStyle,
	                                    ref: 'eel_kogus' })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: styles.docRow },
	                            React.createElement(
	                                'div',
	                                { style: styles.docColumn },
	                                React.createElement(InputNumber, { title: 'Vahe',
	                                    name: 'vahe',
	                                    value: row.kogus ? Number(row.kogus) - Number(row.eel_kogus ? row.eel_kogus : 0) : 0,
	                                    readOnly: true,
	                                    style: gridRowInputStyle,
	                                    ref: 'vahe' })
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        null,
	                        React.createElement(
	                            'span',
	                            null,
	                            validateMessage
	                        )
	                    )
	                )
	            );
	        }

	        /**
	         * валидатор для строки грида
	         * @returns {string}
	         */

	    }, {
	        key: 'gridValidateFields',
	        value: function gridValidateFields() {
	            var warning = '';
	            var doc = this.refs['document'];
	            if (doc && doc.gridRowData) {

	                // только после проверки формы на валидность

	                //            if (doc.gridRowData && !doc.gridRowData['nomid']) warning = warning + ' Код операции';
	                if (!doc.gridRowData['kogus']) warning = warning + ' Kogus';
	                if (!doc.gridRowData['nomid']) warning = warning + ' Teenus';
	            }
	            return warning;
	        }

	        // обработчик события клиска на кнопке редактирования контр-агента

	    }, {
	        key: 'btnEditAsutusClick',
	        value: function btnEditAsutusClick() {
	            var docAsutusId = this.refs['document'].docData.asutusid;

	            // осуществит переход на карточку контр-агента
	            this.props.history.push('/' + this.props.module + '/asutused/' + docAsutusId);
	        }
	    }]);

	    return Leping;
	}(React.PureComponent);

	Leping.propTypes = {
	    docId: PropTypes.number,
	    initData: PropTypes.object,
	    userData: PropTypes.object
	};

	Leping.defaultProps = {
	    params: { docId: 0 },
	    initData: {},
	    userData: {}
	};

	module.exports = Leping;

/***/ }),
/* 289 */
/***/ (function(module, exports) {

	'use strict';module.exports={docRow:{display:'flex',flexDirection:'row'/*
	        border: '1px solid blue'
	*/},docColumn:{display:'flex',flexDirection:'column',/*
	        border: '1px solid yellow',
	*/width:'50%'},doc:{display:'flex',flexDirection:'column'/*
	        border: '1px solid brown'
	*/},summa:{width:'auto'},grid:{mainTable:{width:'100%'},headerTable:{width:'100%'},gridContainer:{width:'100%'}},gridRow:{/*
	        border: '1px solid black',
	*/backgroundColor:'white',position:'relative',margin:'10% 30% 10% 30%',width:'auto',opacity:'1',top:'100px'},gridRowInput:{width:'auto',margin:'5px 10px'},btnEdit:{width:'min-content'}};

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(10);
	var DocumentRegister = __webpack_require__(179);
	var styles = __webpack_require__(291);

	/**
	 * Класс реализует документ справочника признаков.
	 */

	var Documents = function (_React$PureComponent) {
	    _inherits(Documents, _React$PureComponent);

	    function Documents(props) {
	        _classCallCheck(this, Documents);

	        var _this = _possibleConstructorReturn(this, (Documents.__proto__ || Object.getPrototypeOf(Documents)).call(this, props));

	        _this.renderer = _this.renderer.bind(_this);

	        return _this;
	    }

	    _createClass(Documents, [{
	        key: 'render',
	        value: function render() {
	            var DOC_TYPE_ID = this.props.module == 'kasutaja' ? 'ISIKU_ANDMED' : 'ANDMED';

	            return React.createElement(
	                'div',
	                null,
	                React.createElement(DocumentRegister, { initData: this.props.initData,
	                    history: this.props.history ? this.props.history : null,
	                    module: this.props.module,
	                    ref: 'register',
	                    docTypeId: DOC_TYPE_ID,
	                    style: styles,
	                    render: this.renderer })
	            );
	        }
	    }, {
	        key: 'renderer',
	        value: function renderer(self) {
	            return null;
	        }
	    }]);

	    return Documents;
	}(React.PureComponent);

	module.exports = Documents;

/***/ }),
/* 291 */
/***/ (function(module, exports) {

	'use strict';module.exports={grid:{mainTable:{width:'100%',td:{border:'1px solid lightGrey',display:'table-cell',paddingLeft:'5px'}},headerTable:{width:'100%'},gridContainer:{width:'100%'}},doc:{height:'100%'},total:{width:'auto'}};

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDA3NjU2MTg0NTllMTI2YWJjYTRiIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvYy1jb250ZXh0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbGlicy9jcmVhdGVFbXB0eUZpbHRlckRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyLWRvbS9janMvcmVhY3Qtcm91dGVyLWRvbS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXIvY2pzL3JlYWN0LXJvdXRlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwid2VicGFjazovLy8uL34vb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL34vcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvY2pzL2hpc3RvcnkubWluLmpzIiwid2VicGFjazovLy8uL34vcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3Jlc29sdmUtcGF0aG5hbWUvY2pzL3Jlc29sdmUtcGF0aG5hbWUubWluLmpzIiwid2VicGFjazovLy8uL34vcmVzb2x2ZS1wYXRobmFtZS9janMvcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vdmFsdWUtZXF1YWwvY2pzL3ZhbHVlLWVxdWFsLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3ZhbHVlLWVxdWFsL2Nqcy92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3Rpbnktd2FybmluZy9kaXN0L3Rpbnktd2FybmluZy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vfi90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvY2pzL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9+L3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyL2Nqcy9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2Nqcy9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbWVudS10b29sYmFyL21lbnUtdG9vbGJhci5qc3giLCJ3ZWJwYWNrOi8vLy4vbGlicy9mZXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Rvb2xiYXItY29udGFpbmVyL3Rvb2xiYXItY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Rvb2xiYXItY29udGFpbmVyL3Rvb2xiYXItY29udGFpbmVyLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItc3RhcnQvYnV0dG9uLXJlZ2lzdGVyLXN0YXJ0LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vbGlicy9nZXRUZXh0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vY29uZmlnL2xhbmcuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWFkZC9idXR0b24tcmVnaXN0ZXItYWRkLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tbG9naW4vYnV0dG9uLWxvZ2luLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZWRpdC9idXR0b24tcmVnaXN0ZXItZWRpdC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLWluZm8vaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc3RhcnQtbWVudS9zdGFydC1tZW51LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3N0YXJ0LW1lbnUvc3RhcnQtbWVudS5zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy90cmVlL3RyZWUuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvdHJlZS90cmVlLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb25maWcvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2VsZWN0LXJla3YvaW5kZXguanN4Iiwid2VicGFjazovLy8uL34vcmFkaXVtL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvZW5oYW5jZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3Jlc29sdmUtc3R5bGVzLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9hcHBlbmQtaW1wb3J0YW50LXRvLWVhY2gtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2FwcGVuZC1weC1pZi1uZWVkZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL21hcC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2Nzcy1ydWxlLXNldC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NhbWVsLWNhc2UtcHJvcHMtdG8tZGFzaC1jYXNlLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wcmVmaXhlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvY3JlYXRlUHJlZml4ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4UHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvY2FwaXRhbGl6ZVN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9hZGROZXdWYWx1ZXNPbmx5LmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvY3JlYXRlUHJlZml4ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvZ2V0QnJvd3NlckluZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL34vYm93c2VyL3NyYy9ib3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvZ2V0UHJlZml4ZWRLZXlmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9leGVudi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3ByZWZpeC1kYXRhL3N0YXRpYy5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jYWxjLmpzIiwid2VicGFjazovLy8uL34vY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY3Jvc3NGYWRlLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94SUUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveE9sZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9ncmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9pbWFnZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9wb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2Nzcy1pbi1qcy11dGlscy9saWIvaHlwaGVuYXRlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3ByZWZpeC1kYXRhL2R5bmFtaWMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2NhbGMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvY3Jvc3NGYWRlLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9jdXJzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleGJveElFLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Ym94T2xkLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9ncmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvaW1hZ2VTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3Bvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2dldC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvY2xlYW4tc3RhdGUta2V5LmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9nZXQtc3RhdGUta2V5LmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9nZXQtcmFkaXVtLXN0eWxlLXN0YXRlLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9oYXNoLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9tZXJnZS1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3BsdWdpbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3BsdWdpbnMvY2hlY2stcHJvcHMtcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL2tleWZyYW1lcy1wbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3BsdWdpbnMvbWVyZ2Utc3R5bGUtYXJyYXktcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL3ByZWZpeC1wbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3BsdWdpbnMvcmVtb3ZlLW5lc3RlZC1zdHlsZXMtcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL3Jlc29sdmUtaW50ZXJhY3Rpb24tc3R5bGVzLXBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9tb3VzZS11cC1saXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9yZXNvbHZlLW1lZGlhLXF1ZXJpZXMtcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL3Zpc2l0ZWQtcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9zdHlsZS1rZWVwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NvbXBvbmVudHMvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NvbXBvbmVudHMvc3R5bGUtcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvY29tcG9uZW50cy9zdHlsZS1zaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIva2V5ZnJhbWVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2VsZWN0LXJla3Yvc2VsZWN0LXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2VsZWN0L3NlbGVjdC1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLWFjY291bnQvYnV0dG9uLWFjY291bnQuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9naW4vbG9naW4uanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9naW4vc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9ndXAvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9ndXAvc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFsUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxwYWdlLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL21haW4vc2VhcmNoLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9tYWluL3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL21lbnUtdG9vbGJhci9tZW51LXRvb2xiYXIuc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2NvbmZpZy9kb2NfcmlnaHRzLmpzIiwid2VicGFjazovLy8uL2xpYnMvY2hlY2tSaWdodHMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9kb2N1bWVudHMvZG9jdW1lbnRzLmpzeCIsIndlYnBhY2s6Ly8vLi9saWJzL3ByZXBhcmVTcWxXaGVyZUZyb21GaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbGlicy9wcmVwYWlyZUZpbHRlckRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbGlicy9nZXREZWZhdWx0RGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1kZWxldGUvYnV0dG9uLXJlZ2lzdGVyLWRlbGV0ZS5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxwYWdlLWRlbGV0ZS9tb2RhbFBhZ2UtZGVsZXRlLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtZGVsZXRlL21vZGFscGFnZS1kZWxldGUtc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtY2hlY2tib3gvaW5wdXQtY2hlY2tib3guanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtY2hlY2tib3gvc3R5bGVzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qta2V5ZG93bi9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qta2V5ZG93bi9kaXN0L2RlY29yYXRvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvZGVjb3JhdG9ycy9jbGFzc19kZWNvcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3Qvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL21hdGNoX2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL3BhcnNlX2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL3V1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvZXZlbnRfaGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL2RvbV9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qta2V5ZG93bi9kaXN0L2xpYi9saXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvZGVjb3JhdG9ycy9tZXRob2RfZGVjb3JhdG9yLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qta2V5ZG93bi9kaXN0L2RlY29yYXRvcnMvbWV0aG9kX2RlY29yYXRvcl9zY29wZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL2FycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXRhLWdyaWQvZGF0YS1ncmlkLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItcHJpbnQvYnV0dG9uLXJlZ2lzdGVyLXByaW50LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcGRmL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZmlsdGVyL2J1dHRvbi1yZWdpc3Rlci1maWx0ZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1zZWxlY3QvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1lbWFpbC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZnJlc2gvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvZGF0YS1ncmlkL2dyaWQtZmlsdGVyL2dyaWQtZmlsdGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2RhdGEtZ3JpZC9ncmlkLWZpbHRlci9ncmlkLWZpbHRlci1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtcmVwb3J0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtcmVwb3J0L3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3RleHQtYXJlYS90ZXh0LWFyZWEuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvdGV4dC1hcmVhL3RleHQtYXJlYS1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9kb2N1bWVudHMvZG9jdW1lbnRzLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL2RvY3VtZW50VGVtcGxhdGUvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvZm9ybS9mb3JtLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3BhZ2UtbGFiZWwvcGFnZS1sYWJlbC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9wYWdlLWxhYmVsL3BhZ2UtbGFiZWwtc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvZm9ybS9mb3JtLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2RvYy10b29sYmFyL2RvYy10b29sYmFyLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItc2F2ZS9idXR0b24tcmVnaXN0ZXItc2F2ZS5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWNhbmNlbC9idXR0b24tcmVnaXN0ZXItY2FuY2VsLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Nob3ctbG9ncy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9zaG93LWxvZ3Mvc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvdGFzay13aWRnZXQvdGFzay13aWRnZXQuanN4Iiwid2VicGFjazovLy8uL2xpYnMvZ2V0Tm93LmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1leGVjdXRlL2J1dHRvbi1yZWdpc3Rlci1leGVjdXRlLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2lucHV0LWRhdGUvaW5wdXQtZGF0ZS5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9pbnB1dC1kYXRlL2lucHV0LWRhdGUtc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtbnVtYmVyL2lucHV0LW51bWJlci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9pbnB1dC1udW1iZXIvaW5wdXQtbnVtYmVyLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Rhc2std2lkZ2V0L3Rhc2std2lkZ2V0LXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL2RvY3VtZW50VGVtcGxhdGUvZG9jdW1lbnQtc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9hZGluZy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9sb2FkaW5nL3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL3Jla3YvZG9jdW1lbnQvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3MvcmVrdi9kb2N1bWVudC9zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy90YW90bHVzX2xvZ2luL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL3Rhb3RsdXNfbG9naW4vc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3MvdGFvdGx1c19sb2dpbi9kb2N1bWVudC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy90YW90bHVzX2xvZ2luL2RvY3VtZW50L3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL29iamVrdC9kb2N1bWVudC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9vYmpla3QvZG9jdW1lbnQvc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3Mvb2JqZWt0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL29iamVrdC9zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9sZXBpbmcvZG9jdW1lbnQvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2VsZWN0LWRhdGEvc2VsZWN0LWRhdGEuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2VsZWN0LWRhdGEvc2VsZWN0LWRhdGEtc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL21peGluL3JlbGF0ZWREb2N1bWVudHMuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3MvbGVwaW5nL2RvY3VtZW50L3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9saWJzL3JvdW5kX3RvXzIuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9sZXBpbmcvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3MvbGVwaW5nL3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tdGFzay9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9hcnYvZG9jdW1lbnQvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3MvYXJ2L2RvY3VtZW50L2FydmUuc3R5bGVzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2RvY3MvYXJ2L2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tc2V0dGluZ3MvaW5kZXguanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1lYXJ2ZS9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vbGlicy9nZXRTdW0uanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvZG9jcy9hcnYvYXJ2LXJlZ2lzdGVyLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL21vb2R1L2RvY3VtZW50L2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL21vb2R1L2RvY3VtZW50L3N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL21vb2R1L2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9kb2NzL21vb2R1L3N0eWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdO1xuIFx0d2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdID0gZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soY2h1bmtJZHMsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgY2FsbGJhY2tzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSlcbiBcdFx0XHRcdGNhbGxiYWNrcy5wdXNoLmFwcGx5KGNhbGxiYWNrcywgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKTtcbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihjaHVua0lkcywgbW9yZU1vZHVsZXMpO1xuIFx0XHR3aGlsZShjYWxsYmFja3MubGVuZ3RoKVxuIFx0XHRcdGNhbGxiYWNrcy5zaGlmdCgpLmNhbGwobnVsbCwgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4gXHRcdGlmKG1vcmVNb2R1bGVzWzBdKSB7XG4gXHRcdFx0aW5zdGFsbGVkTW9kdWxlc1swXSA9IDA7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyBcIjBcIiBtZWFucyBcImFscmVhZHkgbG9hZGVkXCJcbiBcdC8vIEFycmF5IG1lYW5zIFwibG9hZGluZ1wiLCBhcnJheSBjb250YWlucyBjYWxsYmFja3NcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDU6MFxuIFx0fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG4gXHQvLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3NcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uIHJlcXVpcmVFbnN1cmUoY2h1bmtJZCwgY2FsbGJhY2spIHtcbiBcdFx0Ly8gXCIwXCIgaXMgdGhlIHNpZ25hbCBmb3IgXCJhbHJlYWR5IGxvYWRlZFwiXG4gXHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMClcbiBcdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbChudWxsLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBhbiBhcnJheSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdLnB1c2goY2FsbGJhY2spO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbY2FsbGJhY2tdO1xuIFx0XHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiBcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gXHRcdFx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiBcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4gXHRcdFx0c2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuIFx0XHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgKHtcIjBcIjpcImFkbWluXCIsXCIxXCI6XCJqdWh0XCIsXCIyXCI6XCJrYXN1dGFqYVwiLFwiM1wiOlwibWFpblwiLFwiNFwiOlwicmFhbWFcIn1bY2h1bmtJZF18fGNodW5rSWQpICsgXCIuanNcIjtcbiBcdFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMDc2NTYxODQ1OWUxMjZhYmNhNGIiLCIndXNlIHN0cmljdCc7dmFyIGNyZWF0ZUVtcHR5RmlsdGVyRGF0YT1yZXF1aXJlKCcuLy4uL2xpYnMvY3JlYXRlRW1wdHlGaWx0ZXJEYXRhJyk7ZnVuY3Rpb24gRG9jQ29udGV4dCgpe3ZhciBfdGhpcz10aGlzO3RoaXMuZmlsdGVyPXt9LHRoaXMubGlicz17fSx0aGlzLm1lbnU9W10sdGhpcy5waWN0dXJlcz1bXSx0aGlzLmtlZWw9J0VTVCcsdGhpcy51c2VyRGF0YT17fSx0aGlzLmluaXRGaWx0ZXI9ZnVuY3Rpb24oZG9jVHlwZUlkKXsvKipcclxuICAgICAgICAgKiDQvNC10YLQvtC0INGB0L7Qt9C00LDRgdGCINC/0YPRgdGC0L7QuSDRhNC40LvRjNGC0YAg0L/QviDQv9C10YDQtdC00LDQvdC90L7QuSDQutC+0L3RhNC40LPRg9GA0LDRhtC40LhcclxuICAgICAgICAgKi9pZighZG9jVHlwZUlkKXtkb2NUeXBlSWQ9X3RoaXMuZG9jVHlwZUlkOy8vINC/0YDQvtCy0LXRgNC40Lwg0L3QsNC70LjRh9C40LUg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC5LiDQtdGB0LvQuCDQvdC10YIsINGC0L4g0LLQtdGA0L3QtdC8INC/0YPRgdGC0L7QuSDQvNCw0YHRgdC40LJcbmlmKCFEb2NDb250ZXh0LmdyaWRDb25maWd8fCFEb2NDb250ZXh0LmdyaWRDb25maWdbZG9jVHlwZUlkXS5sZW5ndGgpe0RvY0NvbnRleHQuZmlsdGVyW2RvY1R5cGVJZF09W107fWVsc2V7RG9jQ29udGV4dC5maWx0ZXJbZG9jVHlwZUlkXT1jcmVhdGVFbXB0eUZpbHRlckRhdGEoRG9jQ29udGV4dC5ncmlkQ29uZmlnW2RvY1R5cGVJZF0sW10sZG9jVHlwZUlkKTt9fX07fTttb2R1bGUuZXhwb3J0PURvY0NvbnRleHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2MtY29udGV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihtb2R1bGUpe2lmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKXttb2R1bGUuZGVwcmVjYXRlPWZ1bmN0aW9uKCl7fTttb2R1bGUucGF0aHM9W107Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5tb2R1bGUuY2hpbGRyZW49W107bW9kdWxlLndlYnBhY2tQb2x5ZmlsbD0xO31yZXR1cm4gbW9kdWxlO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgRG9jQ29udGV4dD1yZXF1aXJlKCcuLy4uL2Zyb250ZW5kL2RvYy1jb250ZXh0Jyk7LyoqXHJcbiAqINGB0L7Qt9C00LDRgdGCINC80LDRgdGB0LjQsiDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDRhNC40LvRjNGC0YDQsFxyXG4gKi9mdW5jdGlvbiBjcmVhdGVFbXB0eUZpbHRlckRhdGEoZ3JpZENvbmZpZyxmaWx0ZXJEYXRhLGRvY1R5cGVJZCl7ZmlsdGVyRGF0YT1ncmlkQ29uZmlnLm1hcChmdW5jdGlvbihyb3cpey8vIHByb3BzLmRhdGEg0L/Rg9GB0YLQvtC1LCDRgdC+0LfQtNCw0LXQvFxudmFyIHZhbHVlPXJvdy52YWx1ZT9yb3cudmFsdWU6bnVsbDtpZihyb3cuZGVmYXVsdCl7dmFyIGRlZmF1bHRWYWx1ZT1nZXREZWZhdWx0RGF0ZXMocm93LmRlZmF1bHQpO3ZhbHVlPWRlZmF1bHRWYWx1ZS5zdGFydDtpZihyb3cuaW50ZXJ2YWwpe3Jvdy5zdGFydD1kZWZhdWx0VmFsdWUuc3RhcnQ7cm93W3Jvdy5pZCsnX3N0YXJ0J109ZGVmYXVsdFZhbHVlLnN0YXJ0O3Jvdy5lbmQ9ZGVmYXVsdFZhbHVlLmVuZDtyb3dbcm93LmlkKydfZW5kJ109ZGVmYXVsdFZhbHVlLmVuZDt9fWlmKCFyb3cudHlwZSl7cm93LnR5cGU9J3RleHQnO31yb3cudmFsdWU9dmFsdWU7cmV0dXJuIHJvdzt9KTtEb2NDb250ZXh0LmZpbHRlcltkb2NUeXBlSWRdPWZpbHRlckRhdGE7cmV0dXJuIGZpbHRlckRhdGE7fW1vZHVsZS5leHBvcnRzPWNyZWF0ZUVtcHR5RmlsdGVyRGF0YTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2xpYnMvY3JlYXRlRW1wdHlGaWx0ZXJEYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09XCJwcm9kdWN0aW9uXCIpe21vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCIuL2Nqcy9yZWFjdC1yb3V0ZXItZG9tLm1pbi5qc1wiKTt9ZWxzZXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9janMvcmVhY3Qtcm91dGVyLWRvbS5qc1wiKTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXJvdXRlci1kb20vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnOy8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3M9bW9kdWxlLmV4cG9ydHM9e307Ly8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG52YXIgY2FjaGVkU2V0VGltZW91dDt2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTt9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7fShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PSdmdW5jdGlvbicpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dDt9ZWxzZXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXQ7fX1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXQ7fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09J2Z1bmN0aW9uJyl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dDt9ZWxzZXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dDt9fWNhdGNoKGUpe2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0O319KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKXtpZihjYWNoZWRTZXRUaW1lb3V0PT09c2V0VGltZW91dCl7Ly9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG5yZXR1cm4gc2V0VGltZW91dChmdW4sMCk7fS8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5pZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dCl7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKTt9dHJ5ey8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbnJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwwKTt9Y2F0Y2goZSl7dHJ5ey8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxucmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGZ1biwwKTt9Y2F0Y2goZSl7Ly8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbnJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcyxmdW4sMCk7fX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcil7aWYoY2FjaGVkQ2xlYXJUaW1lb3V0PT09Y2xlYXJUaW1lb3V0KXsvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbnJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTt9Ly8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuaWYoKGNhY2hlZENsZWFyVGltZW91dD09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFjYWNoZWRDbGVhclRpbWVvdXQpJiZjbGVhclRpbWVvdXQpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO310cnl7Ly8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xucmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO31jYXRjaChlKXt0cnl7Ly8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxucmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsbWFya2VyKTt9Y2F0Y2goZSl7Ly8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4vLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG5yZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxtYXJrZXIpO319fXZhciBxdWV1ZT1bXTt2YXIgZHJhaW5pbmc9ZmFsc2U7dmFyIGN1cnJlbnRRdWV1ZTt2YXIgcXVldWVJbmRleD0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighZHJhaW5pbmd8fCFjdXJyZW50UXVldWUpe3JldHVybjt9ZHJhaW5pbmc9ZmFsc2U7aWYoY3VycmVudFF1ZXVlLmxlbmd0aCl7cXVldWU9Y3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7fWVsc2V7cXVldWVJbmRleD0tMTt9aWYocXVldWUubGVuZ3RoKXtkcmFpblF1ZXVlKCk7fX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYoZHJhaW5pbmcpe3JldHVybjt9dmFyIHRpbWVvdXQ9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPXRydWU7dmFyIGxlbj1xdWV1ZS5sZW5ndGg7d2hpbGUobGVuKXtjdXJyZW50UXVldWU9cXVldWU7cXVldWU9W107d2hpbGUoKytxdWV1ZUluZGV4PGxlbil7aWYoY3VycmVudFF1ZXVlKXtjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7fX1xdWV1ZUluZGV4PS0xO2xlbj1xdWV1ZS5sZW5ndGg7fWN1cnJlbnRRdWV1ZT1udWxsO2RyYWluaW5nPWZhbHNlO3J1bkNsZWFyVGltZW91dCh0aW1lb3V0KTt9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihmdW4pe3ZhciBhcmdzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnc1tpLTFdPWFyZ3VtZW50c1tpXTt9fXF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLGFyZ3MpKTtpZihxdWV1ZS5sZW5ndGg9PT0xJiYhZHJhaW5pbmcpe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSk7fX07Ly8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sYXJyYXkpe3RoaXMuZnVuPWZ1bjt0aGlzLmFycmF5PWFycmF5O31JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpO307cHJvY2Vzcy50aXRsZT0nYnJvd3Nlcic7cHJvY2Vzcy5icm93c2VyPXRydWU7cHJvY2Vzcy5lbnY9e307cHJvY2Vzcy5hcmd2PVtdO3Byb2Nlc3MudmVyc2lvbj0nJzsvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXByb2Nlc3Mub249bm9vcDtwcm9jZXNzLmFkZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5vbmNlPW5vb3A7cHJvY2Vzcy5vZmY9bm9vcDtwcm9jZXNzLnJlbW92ZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDtwcm9jZXNzLmVtaXQ9bm9vcDtwcm9jZXNzLnByZXBlbmRMaXN0ZW5lcj1ub29wO3Byb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3Byb2Nlc3MubGlzdGVuZXJzPWZ1bmN0aW9uKG5hbWUpe3JldHVybltdO307cHJvY2Vzcy5iaW5kaW5nPWZ1bmN0aW9uKG5hbWUpe3Rocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTt9O3Byb2Nlc3MuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuJy8nO307cHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihkaXIpe3Rocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7fTtwcm9jZXNzLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDA7fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PSh0eXBlb2YgZT09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKGUpKSYmXCJkZWZhdWx0XCJpbiBlP2UuZGVmYXVsdDplO31PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcmVhY3RSb3V0ZXI9cmVxdWlyZShcInJlYWN0LXJvdXRlclwiKSxSZWFjdD1faW50ZXJvcERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxoaXN0b3J5PXJlcXVpcmUoXCJoaXN0b3J5XCIpO3JlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJ0aW55LXdhcm5pbmdcIik7dmFyIGludmFyaWFudD1faW50ZXJvcERlZmF1bHQocmVxdWlyZShcInRpbnktaW52YXJpYW50XCIpKTtmdW5jdGlvbiBfZXh0ZW5kcygpe3JldHVybihfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1hcmd1bWVudHNbdF07Zm9yKHZhciBvIGluIHIpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLG8pJiYoZVtvXT1yW29dKTt9fXJldHVybiBlO30pLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9ZnVuY3Rpb24gX2luaGVyaXRzTG9vc2UoZSx0KXtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSxfc2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSx0KTt9ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKGUsdCl7cmV0dXJuKF9zZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX19wcm90b19fPXQsZTt9KShlLHQpO31mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIHIsbyxuPXt9LGE9T2JqZWN0LmtleXMoZSk7Zm9yKG89MDtvPGEubGVuZ3RoO28rKyl7cj1hW29dLDA8PXQuaW5kZXhPZihyKXx8KG5bcl09ZVtyXSk7fXJldHVybiBuO312YXIgQnJvd3NlclJvdXRlcj1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKCl7Zm9yKHZhciBlLHQ9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheSh0KSxvPTA7bzx0O28rKyl7cltvXT1hcmd1bWVudHNbb107fXJldHVybihlPW4uY2FsbC5hcHBseShuLFt0aGlzXS5jb25jYXQocikpfHx0aGlzKS5oaXN0b3J5PWhpc3RvcnkuY3JlYXRlQnJvd3Nlckhpc3RvcnkoZS5wcm9wcyksZTt9cmV0dXJuIF9pbmhlcml0c0xvb3NlKGUsbiksZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQocmVhY3RSb3V0ZXIuUm91dGVyLHtoaXN0b3J5OnRoaXMuaGlzdG9yeSxjaGlsZHJlbjp0aGlzLnByb3BzLmNoaWxkcmVufSk7fSxlO30oUmVhY3QuQ29tcG9uZW50KSxIYXNoUm91dGVyPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUoKXtmb3IodmFyIGUsdD1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KHQpLG89MDtvPHQ7bysrKXtyW29dPWFyZ3VtZW50c1tvXTt9cmV0dXJuKGU9bi5jYWxsLmFwcGx5KG4sW3RoaXNdLmNvbmNhdChyKSl8fHRoaXMpLmhpc3Rvcnk9aGlzdG9yeS5jcmVhdGVIYXNoSGlzdG9yeShlLnByb3BzKSxlO31yZXR1cm4gX2luaGVyaXRzTG9vc2UoZSxuKSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdFJvdXRlci5Sb3V0ZXIse2hpc3Rvcnk6dGhpcy5oaXN0b3J5LGNoaWxkcmVuOnRoaXMucHJvcHMuY2hpbGRyZW59KTt9LGU7fShSZWFjdC5Db21wb25lbnQpLHJlc29sdmVUb0xvY2F0aW9uPWZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lKHQpOmU7fSxub3JtYWxpemVUb0xvY2F0aW9uPWZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24oZSx0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9oaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGUsbnVsbCxudWxsLHQpOmU7fSxmb3J3YXJkUmVmU2hpbT1mdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShlKXtyZXR1cm4gZTt9LGZvcndhcmRSZWY9UmVhY3QuZm9yd2FyZFJlZjtmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZSl7cmV0dXJuISEoZS5tZXRhS2V5fHxlLmFsdEtleXx8ZS5jdHJsS2V5fHxlLnNoaWZ0S2V5KTt9dm9pZCAwPT09Zm9yd2FyZFJlZiYmKGZvcndhcmRSZWY9Zm9yd2FyZFJlZlNoaW0pO3ZhciBMaW5rQW5jaG9yPWZvcndhcmRSZWYoZnVuY3Rpb24oZSx0KXt2YXIgcj1lLmlubmVyUmVmLG89ZS5uYXZpZ2F0ZSxuPWUub25DbGljayxhPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGUsW1wiaW5uZXJSZWZcIixcIm5hdmlnYXRlXCIsXCJvbkNsaWNrXCJdKSxpPWEudGFyZ2V0LGM9X2V4dGVuZHMoe30sYSx7b25DbGljazpmdW5jdGlvbiBvbkNsaWNrKHQpe3RyeXtuJiZuKHQpO31jYXRjaChlKXt0aHJvdyB0LnByZXZlbnREZWZhdWx0KCksZTt9dC5kZWZhdWx0UHJldmVudGVkfHwwIT09dC5idXR0b258fGkmJlwiX3NlbGZcIiE9PWl8fGlzTW9kaWZpZWRFdmVudCh0KXx8KHQucHJldmVudERlZmF1bHQoKSxvKCkpO319KTtyZXR1cm4gYy5yZWY9Zm9yd2FyZFJlZlNoaW0hPT1mb3J3YXJkUmVmJiZ0fHxyLFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsYyk7fSksTGluaz1mb3J3YXJkUmVmKGZ1bmN0aW9uKGUsYSl7dmFyIHQ9ZS5jb21wb25lbnQsaT12b2lkIDA9PT10P0xpbmtBbmNob3I6dCxjPWUucmVwbGFjZSx1PWUudG8sZj1lLmlubmVyUmVmLHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoZSxbXCJjb21wb25lbnRcIixcInJlcGxhY2VcIixcInRvXCIsXCJpbm5lclJlZlwiXSk7cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQocmVhY3RSb3V0ZXIuX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLG51bGwsZnVuY3Rpb24ocil7cnx8aW52YXJpYW50KCExKTt2YXIgbz1yLmhpc3RvcnksZT1ub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHUsci5sb2NhdGlvbiksci5sb2NhdGlvbiksdD1lP28uY3JlYXRlSHJlZihlKTpcIlwiLG49X2V4dGVuZHMoe30scyx7aHJlZjp0LG5hdmlnYXRlOmZ1bmN0aW9uIG5hdmlnYXRlKCl7dmFyIGU9cmVzb2x2ZVRvTG9jYXRpb24odSxyLmxvY2F0aW9uKSx0PWhpc3RvcnkuY3JlYXRlUGF0aChyLmxvY2F0aW9uKT09PWhpc3RvcnkuY3JlYXRlUGF0aChub3JtYWxpemVUb0xvY2F0aW9uKGUpKTsoY3x8dD9vLnJlcGxhY2U6by5wdXNoKShlKTt9fSk7cmV0dXJuIGZvcndhcmRSZWZTaGltIT09Zm9yd2FyZFJlZj9uLnJlZj1hfHxmOm4uaW5uZXJSZWY9ZixSZWFjdC5jcmVhdGVFbGVtZW50KGksbik7fSk7fSksZm9yd2FyZFJlZlNoaW0kMT1mdW5jdGlvbiBmb3J3YXJkUmVmU2hpbSQxKGUpe3JldHVybiBlO30sZm9yd2FyZFJlZiQxPVJlYWN0LmZvcndhcmRSZWY7ZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxyPTA7cjxlO3IrKyl7dFtyXT1hcmd1bWVudHNbcl07fXJldHVybiB0LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZTt9KS5qb2luKFwiIFwiKTt9dm9pZCAwPT09Zm9yd2FyZFJlZiQxJiYoZm9yd2FyZFJlZiQxPWZvcndhcmRSZWZTaGltJDEpO3ZhciBOYXZMaW5rPWZvcndhcmRSZWYkMShmdW5jdGlvbihlLHMpe3ZhciB0PWVbXCJhcmlhLWN1cnJlbnRcIl0sbD12b2lkIDA9PT10P1wicGFnZVwiOnQscj1lLmFjdGl2ZUNsYXNzTmFtZSxwPXZvaWQgMD09PXI/XCJhY3RpdmVcIjpyLFI9ZS5hY3RpdmVTdHlsZSxoPWUuY2xhc3NOYW1lLHk9ZS5leGFjdCxkPWUuaXNBY3RpdmUsbT1lLmxvY2F0aW9uLHY9ZS5zZW5zaXRpdmUsYj1lLnN0cmljdCxQPWUuc3R5bGUsdz1lLnRvLHg9ZS5pbm5lclJlZixnPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGUsW1wiYXJpYS1jdXJyZW50XCIsXCJhY3RpdmVDbGFzc05hbWVcIixcImFjdGl2ZVN0eWxlXCIsXCJjbGFzc05hbWVcIixcImV4YWN0XCIsXCJpc0FjdGl2ZVwiLFwibG9jYXRpb25cIixcInNlbnNpdGl2ZVwiLFwic3RyaWN0XCIsXCJzdHlsZVwiLFwidG9cIixcImlubmVyUmVmXCJdKTtyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdFJvdXRlci5fX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbihlKXtlfHxpbnZhcmlhbnQoITEpO3ZhciB0PW18fGUubG9jYXRpb24scj1ub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHcsdCksdCksbz1yLnBhdGhuYW1lLG49byYmby5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZyxcIlxcXFwkMVwiKSxhPW4/cmVhY3RSb3V0ZXIubWF0Y2hQYXRoKHQucGF0aG5hbWUse3BhdGg6bixleGFjdDp5LHNlbnNpdGl2ZTp2LHN0cmljdDpifSk6bnVsbCxpPSEhKGQ/ZChhLHQpOmEpLGM9XCJmdW5jdGlvblwiPT10eXBlb2YgaD9oKGkpOmgsdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQP1AoaSk6UDtpJiYoYz1qb2luQ2xhc3NuYW1lcyhjLHApLHU9X2V4dGVuZHMoe30sdSxSKSk7dmFyIGY9X2V4dGVuZHMoe1wiYXJpYS1jdXJyZW50XCI6aSYmbHx8bnVsbCxjbGFzc05hbWU6YyxzdHlsZTp1LHRvOnJ9LGcpO3JldHVybiBmb3J3YXJkUmVmU2hpbSQxIT09Zm9yd2FyZFJlZiQxP2YucmVmPXN8fHg6Zi5pbm5lclJlZj14LFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluayxmKTt9KTt9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIk1lbW9yeVJvdXRlclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIuTWVtb3J5Um91dGVyO319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIlByb21wdFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIuUHJvbXB0O319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIlJlZGlyZWN0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5SZWRpcmVjdDt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJSb3V0ZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIuUm91dGU7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiUm91dGVyXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5Sb3V0ZXI7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiU3RhdGljUm91dGVyXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5TdGF0aWNSb3V0ZXI7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiU3dpdGNoXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5Td2l0Y2g7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiZ2VuZXJhdGVQYXRoXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5nZW5lcmF0ZVBhdGg7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwibWF0Y2hQYXRoXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5tYXRjaFBhdGg7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwidXNlSGlzdG9yeVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIudXNlSGlzdG9yeTt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJ1c2VMb2NhdGlvblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIudXNlTG9jYXRpb247fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwidXNlUGFyYW1zXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci51c2VQYXJhbXM7fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwidXNlUm91dGVNYXRjaFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIudXNlUm91dGVNYXRjaDt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJ3aXRoUm91dGVyXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci53aXRoUm91dGVyO319KSxleHBvcnRzLkJyb3dzZXJSb3V0ZXI9QnJvd3NlclJvdXRlcixleHBvcnRzLkhhc2hSb3V0ZXI9SGFzaFJvdXRlcixleHBvcnRzLkxpbms9TGluayxleHBvcnRzLk5hdkxpbms9TmF2TGluazsvLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLm1pbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9janMvcmVhY3Qtcm91dGVyLWRvbS5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7aWYocHJvY2Vzcy5lbnYuTk9ERV9FTlY9PT1cInByb2R1Y3Rpb25cIil7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vY2pzL3JlYWN0LXJvdXRlci5taW4uanNcIik7fWVsc2V7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vY2pzL3JlYWN0LXJvdXRlci5qc1wiKTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXJvdXRlci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307ZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0KHQpe3JldHVybiB0JiZcIm9iamVjdFwiPT0odHlwZW9mIHQ9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZih0KSkmJlwiZGVmYXVsdFwiaW4gdD90LmRlZmF1bHQ6dDt9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFJlYWN0PV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO3JlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO3ZhciBoaXN0b3J5PXJlcXVpcmUoXCJoaXN0b3J5XCIpO3JlcXVpcmUoXCJ0aW55LXdhcm5pbmdcIik7dmFyIGNyZWF0ZUNvbnRleHQ9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0XCIpKSxpbnZhcmlhbnQ9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJ0aW55LWludmFyaWFudFwiKSkscGF0aFRvUmVnZXhwPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicGF0aC10by1yZWdleHBcIikpO3JlcXVpcmUoXCJyZWFjdC1pc1wiKTt2YXIgaG9pc3RTdGF0aWNzPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO2Z1bmN0aW9uIF9leHRlbmRzKCl7cmV0dXJuKF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPWFyZ3VtZW50c1tlXTtmb3IodmFyIG8gaW4gbil7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sbykmJih0W29dPW5bb10pO319cmV0dXJuIHQ7fSkuYXBwbHkodGhpcyxhcmd1bWVudHMpO31mdW5jdGlvbiBfaW5oZXJpdHNMb29zZSh0LGUpe3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpLF9zZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LGUpO31mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCxlKXtyZXR1cm4oX3NldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0O30pKHQsZSk7fWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHQsZSl7aWYobnVsbD09dClyZXR1cm57fTt2YXIgbixvLHI9e30sYT1PYmplY3Qua2V5cyh0KTtmb3Iobz0wO288YS5sZW5ndGg7bysrKXtuPWFbb10sMDw9ZS5pbmRleE9mKG4pfHwocltuXT10W25dKTt9cmV0dXJuIHI7fXZhciBjcmVhdGVOYW1lZENvbnRleHQ9ZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KHQpe3ZhciBlPWNyZWF0ZUNvbnRleHQoKTtyZXR1cm4gZS5kaXNwbGF5TmFtZT10LGU7fSxoaXN0b3J5Q29udGV4dD1jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKSxjb250ZXh0PWNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKSxSb3V0ZXI9ZnVuY3Rpb24obil7ZnVuY3Rpb24gdCh0KXt2YXIgZTtyZXR1cm4oZT1uLmNhbGwodGhpcyx0KXx8dGhpcykuc3RhdGU9e2xvY2F0aW9uOnQuaGlzdG9yeS5sb2NhdGlvbn0sZS5faXNNb3VudGVkPSExLGUuX3BlbmRpbmdMb2NhdGlvbj1udWxsLHQuc3RhdGljQ29udGV4dHx8KGUudW5saXN0ZW49dC5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbih0KXtlLl9pc01vdW50ZWQ/ZS5zZXRTdGF0ZSh7bG9jYXRpb246dH0pOmUuX3BlbmRpbmdMb2NhdGlvbj10O30pKSxlO31faW5oZXJpdHNMb29zZSh0LG4pLHQuY29tcHV0ZVJvb3RNYXRjaD1mdW5jdGlvbih0KXtyZXR1cm57cGF0aDpcIi9cIix1cmw6XCIvXCIscGFyYW1zOnt9LGlzRXhhY3Q6XCIvXCI9PT10fTt9O3ZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uKCl7dGhpcy5faXNNb3VudGVkPSEwLHRoaXMuX3BlbmRpbmdMb2NhdGlvbiYmdGhpcy5zZXRTdGF0ZSh7bG9jYXRpb246dGhpcy5fcGVuZGluZ0xvY2F0aW9ufSk7fSxlLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dGhpcy51bmxpc3RlbiYmKHRoaXMudW5saXN0ZW4oKSx0aGlzLl9pc01vdW50ZWQ9ITEsdGhpcy5fcGVuZGluZ0xvY2F0aW9uPW51bGwpO30sZS5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLHt2YWx1ZTp7aGlzdG9yeTp0aGlzLnByb3BzLmhpc3RvcnksbG9jYXRpb246dGhpcy5zdGF0ZS5sb2NhdGlvbixtYXRjaDp0LmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksc3RhdGljQ29udGV4dDp0aGlzLnByb3BzLnN0YXRpY0NvbnRleHR9fSxSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLHtjaGlsZHJlbjp0aGlzLnByb3BzLmNoaWxkcmVufHxudWxsLHZhbHVlOnRoaXMucHJvcHMuaGlzdG9yeX0pKTt9LHQ7fShSZWFjdC5Db21wb25lbnQpLE1lbW9yeVJvdXRlcj1mdW5jdGlvbihyKXtmdW5jdGlvbiB0KCl7Zm9yKHZhciB0LGU9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShlKSxvPTA7bzxlO28rKyl7bltvXT1hcmd1bWVudHNbb107fXJldHVybih0PXIuY2FsbC5hcHBseShyLFt0aGlzXS5jb25jYXQobikpfHx0aGlzKS5oaXN0b3J5PWhpc3RvcnkuY3JlYXRlTWVtb3J5SGlzdG9yeSh0LnByb3BzKSx0O31yZXR1cm4gX2luaGVyaXRzTG9vc2UodCxyKSx0LnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIse2hpc3Rvcnk6dGhpcy5oaXN0b3J5LGNoaWxkcmVuOnRoaXMucHJvcHMuY2hpbGRyZW59KTt9LHQ7fShSZWFjdC5Db21wb25lbnQpLExpZmVjeWNsZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzO31faW5oZXJpdHNMb29zZShlLHQpO3ZhciBuPWUucHJvdG90eXBlO3JldHVybiBuLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uKCl7dGhpcy5wcm9wcy5vbk1vdW50JiZ0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLHRoaXMpO30sbi5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24odCl7dGhpcy5wcm9wcy5vblVwZGF0ZSYmdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsdGhpcyx0KTt9LG4uY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt0aGlzLnByb3BzLm9uVW5tb3VudCYmdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLHRoaXMpO30sbi5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbDt9LGU7fShSZWFjdC5Db21wb25lbnQpO2Z1bmN0aW9uIFByb21wdCh0KXt2YXIgbz10Lm1lc3NhZ2UsZT10LndoZW4scj12b2lkIDA9PT1lfHxlO3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbih0KXtpZih0fHxpbnZhcmlhbnQoITEpLCFyfHx0LnN0YXRpY0NvbnRleHQpcmV0dXJuIG51bGw7dmFyIG49dC5oaXN0b3J5LmJsb2NrO3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSx7b25Nb3VudDpmdW5jdGlvbiBvbk1vdW50KHQpe3QucmVsZWFzZT1uKG8pO30sb25VcGRhdGU6ZnVuY3Rpb24gb25VcGRhdGUodCxlKXtlLm1lc3NhZ2UhPT1vJiYodC5yZWxlYXNlKCksdC5yZWxlYXNlPW4obykpO30sb25Vbm1vdW50OmZ1bmN0aW9uIG9uVW5tb3VudCh0KXt0LnJlbGVhc2UoKTt9LG1lc3NhZ2U6b30pO30pO312YXIgY2FjaGU9e30sY2FjaGVMaW1pdD0xZTQsY2FjaGVDb3VudD0wO2Z1bmN0aW9uIGNvbXBpbGVQYXRoKHQpe2lmKGNhY2hlW3RdKXJldHVybiBjYWNoZVt0XTt2YXIgZT1wYXRoVG9SZWdleHAuY29tcGlsZSh0KTtyZXR1cm4gY2FjaGVDb3VudDxjYWNoZUxpbWl0JiYoY2FjaGVbdF09ZSxjYWNoZUNvdW50KyspLGU7fWZ1bmN0aW9uIGdlbmVyYXRlUGF0aCh0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIi9cIiksdm9pZCAwPT09ZSYmKGU9e30pLFwiL1wiPT09dD90OmNvbXBpbGVQYXRoKHQpKGUse3ByZXR0eTohMH0pO31mdW5jdGlvbiBSZWRpcmVjdCh0KXt2YXIgYT10LmNvbXB1dGVkTWF0Y2gsaT10LnRvLGU9dC5wdXNoLGM9dm9pZCAwIT09ZSYmZTtyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLG51bGwsZnVuY3Rpb24odCl7dHx8aW52YXJpYW50KCExKTt2YXIgZT10Lmhpc3Rvcnksbj10LnN0YXRpY0NvbnRleHQsbz1jP2UucHVzaDplLnJlcGxhY2Uscj1oaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGE/XCJzdHJpbmdcIj09dHlwZW9mIGk/Z2VuZXJhdGVQYXRoKGksYS5wYXJhbXMpOl9leHRlbmRzKHt9LGkse3BhdGhuYW1lOmdlbmVyYXRlUGF0aChpLnBhdGhuYW1lLGEucGFyYW1zKX0pOmkpO3JldHVybiBuPyhvKHIpLG51bGwpOlJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLHtvbk1vdW50OmZ1bmN0aW9uIG9uTW91bnQoKXtvKHIpO30sb25VcGRhdGU6ZnVuY3Rpb24gb25VcGRhdGUodCxlKXt2YXIgbj1oaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGUudG8pO2hpc3RvcnkubG9jYXRpb25zQXJlRXF1YWwobixfZXh0ZW5kcyh7fSxyLHtrZXk6bi5rZXl9KSl8fG8ocik7fSx0bzppfSk7fSk7fXZhciBjYWNoZSQxPXt9LGNhY2hlTGltaXQkMT0xZTQsY2FjaGVDb3VudCQxPTA7ZnVuY3Rpb24gY29tcGlsZVBhdGgkMSh0LGUpe3ZhciBuPVwiXCIrZS5lbmQrZS5zdHJpY3QrZS5zZW5zaXRpdmUsbz1jYWNoZSQxW25dfHwoY2FjaGUkMVtuXT17fSk7aWYob1t0XSlyZXR1cm4gb1t0XTt2YXIgcj1bXSxhPXtyZWdleHA6cGF0aFRvUmVnZXhwKHQscixlKSxrZXlzOnJ9O3JldHVybiBjYWNoZUNvdW50JDE8Y2FjaGVMaW1pdCQxJiYob1t0XT1hLGNhY2hlQ291bnQkMSsrKSxhO31mdW5jdGlvbiBtYXRjaFBhdGgodSx0KXt2b2lkIDA9PT10JiYodD17fSksXCJzdHJpbmdcIiE9dHlwZW9mIHQmJiFBcnJheS5pc0FycmF5KHQpfHwodD17cGF0aDp0fSk7dmFyIGU9dCxuPWUucGF0aCxvPWUuZXhhY3QscD12b2lkIDAhPT1vJiZvLHI9ZS5zdHJpY3QsaD12b2lkIDAhPT1yJiZyLGE9ZS5zZW5zaXRpdmUsbD12b2lkIDAhPT1hJiZhO3JldHVybltdLmNvbmNhdChuKS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtpZighZSYmXCJcIiE9PWUpcmV0dXJuIG51bGw7aWYodClyZXR1cm4gdDt2YXIgbj1jb21waWxlUGF0aCQxKGUse2VuZDpwLHN0cmljdDpoLHNlbnNpdGl2ZTpsfSksbz1uLnJlZ2V4cCxyPW4ua2V5cyxhPW8uZXhlYyh1KTtpZighYSlyZXR1cm4gbnVsbDt2YXIgaT1hWzBdLGM9YS5zbGljZSgxKSxzPXU9PT1pO3JldHVybiBwJiYhcz9udWxsOntwYXRoOmUsdXJsOlwiL1wiPT09ZSYmXCJcIj09PWk/XCIvXCI6aSxpc0V4YWN0OnMscGFyYW1zOnIucmVkdWNlKGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdFtlLm5hbWVdPWNbbl0sdDt9LHt9KX07fSxudWxsKTt9ZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKHQpe3JldHVybiAwPT09UmVhY3QuQ2hpbGRyZW4uY291bnQodCk7fXZhciBSb3V0ZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzO31yZXR1cm4gX2luaGVyaXRzTG9vc2UoZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgYz10aGlzO3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbih0KXt0fHxpbnZhcmlhbnQoITEpO3ZhciBlPWMucHJvcHMubG9jYXRpb258fHQubG9jYXRpb24sbj1fZXh0ZW5kcyh7fSx0LHtsb2NhdGlvbjplLG1hdGNoOmMucHJvcHMuY29tcHV0ZWRNYXRjaD9jLnByb3BzLmNvbXB1dGVkTWF0Y2g6Yy5wcm9wcy5wYXRoP21hdGNoUGF0aChlLnBhdGhuYW1lLGMucHJvcHMpOnQubWF0Y2h9KSxvPWMucHJvcHMscj1vLmNoaWxkcmVuLGE9by5jb21wb25lbnQsaT1vLnJlbmRlcjtyZXR1cm4gQXJyYXkuaXNBcnJheShyKSYmaXNFbXB0eUNoaWxkcmVuKHIpJiYocj1udWxsKSxSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIse3ZhbHVlOm59LG4ubWF0Y2g/cj9cImZ1bmN0aW9uXCI9PXR5cGVvZiByP3Iobik6cjphP1JlYWN0LmNyZWF0ZUVsZW1lbnQoYSxuKTppP2kobik6bnVsbDpcImZ1bmN0aW9uXCI9PXR5cGVvZiByP3Iobik6bnVsbCk7fSk7fSxlO30oUmVhY3QuQ29tcG9uZW50KTtmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2godCl7cmV0dXJuXCIvXCI9PT10LmNoYXJBdCgwKT90OlwiL1wiK3Q7fWZ1bmN0aW9uIGFkZEJhc2VuYW1lKHQsZSl7cmV0dXJuIHQ/X2V4dGVuZHMoe30sZSx7cGF0aG5hbWU6YWRkTGVhZGluZ1NsYXNoKHQpK2UucGF0aG5hbWV9KTplO31mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHQsZSl7aWYoIXQpcmV0dXJuIGU7dmFyIG49YWRkTGVhZGluZ1NsYXNoKHQpO3JldHVybiAwIT09ZS5wYXRobmFtZS5pbmRleE9mKG4pP2U6X2V4dGVuZHMoe30sZSx7cGF0aG5hbWU6ZS5wYXRobmFtZS5zdWJzdHIobi5sZW5ndGgpfSk7fWZ1bmN0aW9uIGNyZWF0ZVVSTCh0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90Omhpc3RvcnkuY3JlYXRlUGF0aCh0KTt9ZnVuY3Rpb24gc3RhdGljSGFuZGxlcih0KXtyZXR1cm4gZnVuY3Rpb24oKXtpbnZhcmlhbnQoITEpO307fWZ1bmN0aW9uIG5vb3AoKXt9dmFyIFN0YXRpY1JvdXRlcj1mdW5jdGlvbihyKXtmdW5jdGlvbiB0KCl7Zm9yKHZhciBlLHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0KSxvPTA7bzx0O28rKyl7bltvXT1hcmd1bWVudHNbb107fXJldHVybihlPXIuY2FsbC5hcHBseShyLFt0aGlzXS5jb25jYXQobikpfHx0aGlzKS5oYW5kbGVQdXNoPWZ1bmN0aW9uKHQpe3JldHVybiBlLm5hdmlnYXRlVG8odCxcIlBVU0hcIik7fSxlLmhhbmRsZVJlcGxhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIGUubmF2aWdhdGVUbyh0LFwiUkVQTEFDRVwiKTt9LGUuaGFuZGxlTGlzdGVuPWZ1bmN0aW9uKCl7cmV0dXJuIG5vb3A7fSxlLmhhbmRsZUJsb2NrPWZ1bmN0aW9uKCl7cmV0dXJuIG5vb3A7fSxlO31faW5oZXJpdHNMb29zZSh0LHIpO3ZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLm5hdmlnYXRlVG89ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnByb3BzLG89bi5iYXNlbmFtZSxyPXZvaWQgMD09PW8/XCJcIjpvLGE9bi5jb250ZXh0LGk9dm9pZCAwPT09YT97fTphO2kuYWN0aW9uPWUsaS5sb2NhdGlvbj1hZGRCYXNlbmFtZShyLGhpc3RvcnkuY3JlYXRlTG9jYXRpb24odCkpLGkudXJsPWNyZWF0ZVVSTChpLmxvY2F0aW9uKTt9LGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wcm9wcyxlPXQuYmFzZW5hbWUsbj12b2lkIDA9PT1lP1wiXCI6ZSxvPXQuY29udGV4dCxyPXZvaWQgMD09PW8/e306byxhPXQubG9jYXRpb24saT12b2lkIDA9PT1hP1wiL1wiOmEsYz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSh0LFtcImJhc2VuYW1lXCIsXCJjb250ZXh0XCIsXCJsb2NhdGlvblwiXSkscz17Y3JlYXRlSHJlZjpmdW5jdGlvbiBjcmVhdGVIcmVmKHQpe3JldHVybiBhZGRMZWFkaW5nU2xhc2gobitjcmVhdGVVUkwodCkpO30sYWN0aW9uOlwiUE9QXCIsbG9jYXRpb246c3RyaXBCYXNlbmFtZShuLGhpc3RvcnkuY3JlYXRlTG9jYXRpb24oaSkpLHB1c2g6dGhpcy5oYW5kbGVQdXNoLHJlcGxhY2U6dGhpcy5oYW5kbGVSZXBsYWNlLGdvOnN0YXRpY0hhbmRsZXIoKSxnb0JhY2s6c3RhdGljSGFuZGxlcigpLGdvRm9yd2FyZDpzdGF0aWNIYW5kbGVyKCksbGlzdGVuOnRoaXMuaGFuZGxlTGlzdGVuLGJsb2NrOnRoaXMuaGFuZGxlQmxvY2t9O3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlcixfZXh0ZW5kcyh7fSxjLHtoaXN0b3J5OnMsc3RhdGljQ29udGV4dDpyfSkpO30sdDt9KFJlYWN0LkNvbXBvbmVudCksU3dpdGNoPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7fXJldHVybiBfaW5oZXJpdHNMb29zZShlLHQpLGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lcixudWxsLGZ1bmN0aW9uKG4pe258fGludmFyaWFudCghMSk7dmFyIG8scixhPXQucHJvcHMubG9jYXRpb258fG4ubG9jYXRpb247cmV0dXJuIFJlYWN0LkNoaWxkcmVuLmZvckVhY2godC5wcm9wcy5jaGlsZHJlbixmdW5jdGlvbih0KXtpZihudWxsPT1yJiZSZWFjdC5pc1ZhbGlkRWxlbWVudCh0KSl7dmFyIGU9KG89dCkucHJvcHMucGF0aHx8dC5wcm9wcy5mcm9tO3I9ZT9tYXRjaFBhdGgoYS5wYXRobmFtZSxfZXh0ZW5kcyh7fSx0LnByb3BzLHtwYXRoOmV9KSk6bi5tYXRjaDt9fSkscj9SZWFjdC5jbG9uZUVsZW1lbnQobyx7bG9jYXRpb246YSxjb21wdXRlZE1hdGNoOnJ9KTpudWxsO30pO30sZTt9KFJlYWN0LkNvbXBvbmVudCk7ZnVuY3Rpb24gd2l0aFJvdXRlcihvKXtmdW5jdGlvbiB0KHQpe3ZhciBlPXQud3JhcHBlZENvbXBvbmVudFJlZixuPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHQsW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lcixudWxsLGZ1bmN0aW9uKHQpe3JldHVybiB0fHxpbnZhcmlhbnQoITEpLFJlYWN0LmNyZWF0ZUVsZW1lbnQobyxfZXh0ZW5kcyh7fSxuLHQse3JlZjplfSkpO30pO312YXIgZT1cIndpdGhSb3V0ZXIoXCIrKG8uZGlzcGxheU5hbWV8fG8ubmFtZSkrXCIpXCI7cmV0dXJuIHQuZGlzcGxheU5hbWU9ZSx0LldyYXBwZWRDb21wb25lbnQ9byxob2lzdFN0YXRpY3ModCxvKTt9dmFyIHVzZUNvbnRleHQ9UmVhY3QudXNlQ29udGV4dDtmdW5jdGlvbiB1c2VIaXN0b3J5KCl7cmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO31mdW5jdGlvbiB1c2VMb2NhdGlvbigpe3JldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO31mdW5jdGlvbiB1c2VQYXJhbXMoKXt2YXIgdD11c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO3JldHVybiB0P3QucGFyYW1zOnt9O31mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHQpe3ZhciBlPXVzZUxvY2F0aW9uKCksbj11c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO3JldHVybiB0P21hdGNoUGF0aChlLnBhdGhuYW1lLHQpOm47fWV4cG9ydHMuTWVtb3J5Um91dGVyPU1lbW9yeVJvdXRlcixleHBvcnRzLlByb21wdD1Qcm9tcHQsZXhwb3J0cy5SZWRpcmVjdD1SZWRpcmVjdCxleHBvcnRzLlJvdXRlPVJvdXRlLGV4cG9ydHMuUm91dGVyPVJvdXRlcixleHBvcnRzLlN0YXRpY1JvdXRlcj1TdGF0aWNSb3V0ZXIsZXhwb3J0cy5Td2l0Y2g9U3dpdGNoLGV4cG9ydHMuX19IaXN0b3J5Q29udGV4dD1oaXN0b3J5Q29udGV4dCxleHBvcnRzLl9fUm91dGVyQ29udGV4dD1jb250ZXh0LGV4cG9ydHMuZ2VuZXJhdGVQYXRoPWdlbmVyYXRlUGF0aCxleHBvcnRzLm1hdGNoUGF0aD1tYXRjaFBhdGgsZXhwb3J0cy51c2VIaXN0b3J5PXVzZUhpc3RvcnksZXhwb3J0cy51c2VMb2NhdGlvbj11c2VMb2NhdGlvbixleHBvcnRzLnVzZVBhcmFtcz11c2VQYXJhbXMsZXhwb3J0cy51c2VSb3V0ZU1hdGNoPXVzZVJvdXRlTWF0Y2gsZXhwb3J0cy53aXRoUm91dGVyPXdpdGhSb3V0ZXI7Ly8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLm1pbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qtcm91dGVyL2Nqcy9yZWFjdC1yb3V0ZXIubWluLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JzsvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovaWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYhPT0ncHJvZHVjdGlvbicpe3ZhciBSZWFjdElzPXJlcXVpcmUoJ3JlYWN0LWlzJyk7Ly8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4vLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG52YXIgdGhyb3dPbkRpcmVjdEFjY2Vzcz10cnVlO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCx0aHJvd09uRGlyZWN0QWNjZXNzKTt9ZWxzZXsvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxubW9kdWxlLmV4cG9ydHM9cmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcHJvcC10eXBlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Byb2R1Y3Rpb24nKXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO31lbHNle21vZHVsZS5leHBvcnRzPXJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1pcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovJ3VzZSBzdHJpY3QnO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O2Z1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PSh0eXBlb2YgYT09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKGEpKSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdTt9fWNhc2UgZDpyZXR1cm4gdTt9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bTt9ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWw7fTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09azt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1oO307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PSh0eXBlb2YgYT09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKGEpKSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jO307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1uO307ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZTt9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dDt9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cjt9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kO307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zzt9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zjt9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXA7fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09KHR5cGVvZiBhPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YoYSkpJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpO307ZXhwb3J0cy50eXBlT2Y9ejtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi8ndXNlIHN0cmljdCc7dmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WIT09XCJwcm9kdWN0aW9uXCIpeyhmdW5jdGlvbigpeyd1c2Ugc3RyaWN0JzsvLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIGhhc1N5bWJvbD10eXBlb2YgU3ltYm9sPT09J2Z1bmN0aW9uJyYmU3ltYm9sLmZvcjt2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk6MHhlYWM3O3ZhciBSRUFDVF9QT1JUQUxfVFlQRT1oYXNTeW1ib2w/U3ltYm9sLmZvcigncmVhY3QucG9ydGFsJyk6MHhlYWNhO3ZhciBSRUFDVF9GUkFHTUVOVF9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpOjB4ZWFjYjt2YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRT1oYXNTeW1ib2w/U3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKToweGVhY2M7dmFyIFJFQUNUX1BST0ZJTEVSX1RZUEU9aGFzU3ltYm9sP1N5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJyk6MHhlYWQyO3ZhciBSRUFDVF9QUk9WSURFUl9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpOjB4ZWFjZDt2YXIgUkVBQ1RfQ09OVEVYVF9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0Jyk6MHhlYWNlOy8vIFRPRE86IFdlIGRvbid0IHVzZSBBc3luY01vZGUgb3IgQ29uY3VycmVudE1vZGUgYW55bW9yZS4gVGhleSB3ZXJlIHRlbXBvcmFyeVxuLy8gKHVuc3RhYmxlKSBBUElzIHRoYXQgaGF2ZSBiZWVuIHJlbW92ZWQuIENhbiB3ZSByZW1vdmUgdGhlIHN5bWJvbHM/XG52YXIgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5hc3luY19tb2RlJyk6MHhlYWNmO3ZhciBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRT1oYXNTeW1ib2w/U3ltYm9sLmZvcigncmVhY3QuY29uY3VycmVudF9tb2RlJyk6MHhlYWNmO3ZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpOjB4ZWFkMDt2YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRT1oYXNTeW1ib2w/U3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKToweGVhZDE7dmFyIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRT1oYXNTeW1ib2w/U3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpOjB4ZWFkODt2YXIgUkVBQ1RfTUVNT19UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5tZW1vJyk6MHhlYWQzO3ZhciBSRUFDVF9MQVpZX1RZUEU9aGFzU3ltYm9sP1N5bWJvbC5mb3IoJ3JlYWN0LmxhenknKToweGVhZDQ7dmFyIFJFQUNUX0JMT0NLX1RZUEU9aGFzU3ltYm9sP1N5bWJvbC5mb3IoJ3JlYWN0LmJsb2NrJyk6MHhlYWQ5O3ZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFPWhhc1N5bWJvbD9TeW1ib2wuZm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpOjB4ZWFkNTt2YXIgUkVBQ1RfUkVTUE9OREVSX1RZUEU9aGFzU3ltYm9sP1N5bWJvbC5mb3IoJ3JlYWN0LnJlc3BvbmRlcicpOjB4ZWFkNjt2YXIgUkVBQ1RfU0NPUEVfVFlQRT1oYXNTeW1ib2w/U3ltYm9sLmZvcigncmVhY3Quc2NvcGUnKToweGVhZDc7ZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpe3JldHVybiB0eXBlb2YgdHlwZT09PSdzdHJpbmcnfHx0eXBlb2YgdHlwZT09PSdmdW5jdGlvbid8fC8vIE5vdGU6IGl0cyB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyBpZiBpdCdzIGEgcG9seWZpbGwuXG50eXBlPT09UkVBQ1RfRlJBR01FTlRfVFlQRXx8dHlwZT09PVJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFfHx0eXBlPT09UkVBQ1RfUFJPRklMRVJfVFlQRXx8dHlwZT09PVJFQUNUX1NUUklDVF9NT0RFX1RZUEV8fHR5cGU9PT1SRUFDVF9TVVNQRU5TRV9UWVBFfHx0eXBlPT09UkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFfHwodHlwZW9mIHR5cGU9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHR5cGUpKT09PSdvYmplY3QnJiZ0eXBlIT09bnVsbCYmKHR5cGUuJCR0eXBlb2Y9PT1SRUFDVF9MQVpZX1RZUEV8fHR5cGUuJCR0eXBlb2Y9PT1SRUFDVF9NRU1PX1RZUEV8fHR5cGUuJCR0eXBlb2Y9PT1SRUFDVF9QUk9WSURFUl9UWVBFfHx0eXBlLiQkdHlwZW9mPT09UkVBQ1RfQ09OVEVYVF9UWVBFfHx0eXBlLiQkdHlwZW9mPT09UkVBQ1RfRk9SV0FSRF9SRUZfVFlQRXx8dHlwZS4kJHR5cGVvZj09PVJFQUNUX0ZVTkRBTUVOVEFMX1RZUEV8fHR5cGUuJCR0eXBlb2Y9PT1SRUFDVF9SRVNQT05ERVJfVFlQRXx8dHlwZS4kJHR5cGVvZj09PVJFQUNUX1NDT1BFX1RZUEV8fHR5cGUuJCR0eXBlb2Y9PT1SRUFDVF9CTE9DS19UWVBFKTt9ZnVuY3Rpb24gdHlwZU9mKG9iamVjdCl7aWYoKHR5cGVvZiBvYmplY3Q9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKG9iamVjdCkpPT09J29iamVjdCcmJm9iamVjdCE9PW51bGwpe3ZhciAkJHR5cGVvZj1vYmplY3QuJCR0eXBlb2Y7c3dpdGNoKCQkdHlwZW9mKXtjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTp2YXIgdHlwZT1vYmplY3QudHlwZTtzd2l0Y2godHlwZSl7Y2FzZSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU6Y2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6Y2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOmNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6cmV0dXJuIHR5cGU7ZGVmYXVsdDp2YXIgJCR0eXBlb2ZUeXBlPXR5cGUmJnR5cGUuJCR0eXBlb2Y7c3dpdGNoKCQkdHlwZW9mVHlwZSl7Y2FzZSBSRUFDVF9DT05URVhUX1RZUEU6Y2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOmNhc2UgUkVBQ1RfTEFaWV9UWVBFOmNhc2UgUkVBQ1RfTUVNT19UWVBFOmNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpyZXR1cm4gJCR0eXBlb2ZUeXBlO2RlZmF1bHQ6cmV0dXJuICQkdHlwZW9mO319Y2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpyZXR1cm4gJCR0eXBlb2Y7fX1yZXR1cm4gdW5kZWZpbmVkO30vLyBBc3luY01vZGUgaXMgZGVwcmVjYXRlZCBhbG9uZyB3aXRoIGlzQXN5bmNNb2RlXG52YXIgQXN5bmNNb2RlPVJFQUNUX0FTWU5DX01PREVfVFlQRTt2YXIgQ29uY3VycmVudE1vZGU9UkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7dmFyIENvbnRleHRDb25zdW1lcj1SRUFDVF9DT05URVhUX1RZUEU7dmFyIENvbnRleHRQcm92aWRlcj1SRUFDVF9QUk9WSURFUl9UWVBFO3ZhciBFbGVtZW50PVJFQUNUX0VMRU1FTlRfVFlQRTt2YXIgRm9yd2FyZFJlZj1SRUFDVF9GT1JXQVJEX1JFRl9UWVBFO3ZhciBGcmFnbWVudD1SRUFDVF9GUkFHTUVOVF9UWVBFO3ZhciBMYXp5PVJFQUNUX0xBWllfVFlQRTt2YXIgTWVtbz1SRUFDVF9NRU1PX1RZUEU7dmFyIFBvcnRhbD1SRUFDVF9QT1JUQUxfVFlQRTt2YXIgUHJvZmlsZXI9UkVBQ1RfUFJPRklMRVJfVFlQRTt2YXIgU3RyaWN0TW9kZT1SRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO3ZhciBTdXNwZW5zZT1SRUFDVF9TVVNQRU5TRV9UWVBFO3ZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZT1mYWxzZTsvLyBBc3luY01vZGUgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcbmZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCl7e2lmKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSl7aGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGU9dHJ1ZTsvLyBVc2luZyBjb25zb2xlWyd3YXJuJ10gdG8gZXZhZGUgQmFiZWwgYW5kIEVTTGludFxuY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcrJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTcrLiBVcGRhdGUgeW91ciBjb2RlIHRvIHVzZSAnKydSZWFjdElzLmlzQ29uY3VycmVudE1vZGUoKSBpbnN0ZWFkLiBJdCBoYXMgdGhlIGV4YWN0IHNhbWUgQVBJLicpO319cmV0dXJuIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KXx8dHlwZU9mKG9iamVjdCk9PT1SRUFDVF9BU1lOQ19NT0RFX1RZUEU7fWZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KXtyZXR1cm4gdHlwZU9mKG9iamVjdCk9PT1SRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTt9ZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KXtyZXR1cm4gdHlwZU9mKG9iamVjdCk9PT1SRUFDVF9DT05URVhUX1RZUEU7fWZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyKG9iamVjdCl7cmV0dXJuIHR5cGVPZihvYmplY3QpPT09UkVBQ1RfUFJPVklERVJfVFlQRTt9ZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCl7cmV0dXJuKHR5cGVvZiBvYmplY3Q9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKG9iamVjdCkpPT09J29iamVjdCcmJm9iamVjdCE9PW51bGwmJm9iamVjdC4kJHR5cGVvZj09PVJFQUNUX0VMRU1FTlRfVFlQRTt9ZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCl7cmV0dXJuIHR5cGVPZihvYmplY3QpPT09UkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTt9ZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3Qpe3JldHVybiB0eXBlT2Yob2JqZWN0KT09PVJFQUNUX0ZSQUdNRU5UX1RZUEU7fWZ1bmN0aW9uIGlzTGF6eShvYmplY3Qpe3JldHVybiB0eXBlT2Yob2JqZWN0KT09PVJFQUNUX0xBWllfVFlQRTt9ZnVuY3Rpb24gaXNNZW1vKG9iamVjdCl7cmV0dXJuIHR5cGVPZihvYmplY3QpPT09UkVBQ1RfTUVNT19UWVBFO31mdW5jdGlvbiBpc1BvcnRhbChvYmplY3Qpe3JldHVybiB0eXBlT2Yob2JqZWN0KT09PVJFQUNUX1BPUlRBTF9UWVBFO31mdW5jdGlvbiBpc1Byb2ZpbGVyKG9iamVjdCl7cmV0dXJuIHR5cGVPZihvYmplY3QpPT09UkVBQ1RfUFJPRklMRVJfVFlQRTt9ZnVuY3Rpb24gaXNTdHJpY3RNb2RlKG9iamVjdCl7cmV0dXJuIHR5cGVPZihvYmplY3QpPT09UkVBQ1RfU1RSSUNUX01PREVfVFlQRTt9ZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3Qpe3JldHVybiB0eXBlT2Yob2JqZWN0KT09PVJFQUNUX1NVU1BFTlNFX1RZUEU7fWV4cG9ydHMuQXN5bmNNb2RlPUFzeW5jTW9kZTtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPUNvbmN1cnJlbnRNb2RlO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPUNvbnRleHRDb25zdW1lcjtleHBvcnRzLkNvbnRleHRQcm92aWRlcj1Db250ZXh0UHJvdmlkZXI7ZXhwb3J0cy5FbGVtZW50PUVsZW1lbnQ7ZXhwb3J0cy5Gb3J3YXJkUmVmPUZvcndhcmRSZWY7ZXhwb3J0cy5GcmFnbWVudD1GcmFnbWVudDtleHBvcnRzLkxhenk9TGF6eTtleHBvcnRzLk1lbW89TWVtbztleHBvcnRzLlBvcnRhbD1Qb3J0YWw7ZXhwb3J0cy5Qcm9maWxlcj1Qcm9maWxlcjtleHBvcnRzLlN0cmljdE1vZGU9U3RyaWN0TW9kZTtleHBvcnRzLlN1c3BlbnNlPVN1c3BlbnNlO2V4cG9ydHMuaXNBc3luY01vZGU9aXNBc3luY01vZGU7ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWlzQ29uY3VycmVudE1vZGU7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1pc0NvbnRleHRDb25zdW1lcjtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWlzQ29udGV4dFByb3ZpZGVyO2V4cG9ydHMuaXNFbGVtZW50PWlzRWxlbWVudDtleHBvcnRzLmlzRm9yd2FyZFJlZj1pc0ZvcndhcmRSZWY7ZXhwb3J0cy5pc0ZyYWdtZW50PWlzRnJhZ21lbnQ7ZXhwb3J0cy5pc0xhenk9aXNMYXp5O2V4cG9ydHMuaXNNZW1vPWlzTWVtbztleHBvcnRzLmlzUG9ydGFsPWlzUG9ydGFsO2V4cG9ydHMuaXNQcm9maWxlcj1pc1Byb2ZpbGVyO2V4cG9ydHMuaXNTdHJpY3RNb2RlPWlzU3RyaWN0TW9kZTtleHBvcnRzLmlzU3VzcGVuc2U9aXNTdXNwZW5zZTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1pc1ZhbGlkRWxlbWVudFR5cGU7ZXhwb3J0cy50eXBlT2Y9dHlwZU9mO30pKCk7fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi8ndXNlIHN0cmljdCc7dmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O3ZhciBSZWFjdElzPXJlcXVpcmUoJ3JlYWN0LWlzJyk7dmFyIGFzc2lnbj1yZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7dmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0PXJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7dmFyIGNoZWNrUHJvcFR5cGVzPXJlcXVpcmUoJy4vY2hlY2tQcm9wVHlwZXMnKTt2YXIgaGFzPUZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTt2YXIgcHJpbnRXYXJuaW5nPWZ1bmN0aW9uIHByaW50V2FybmluZygpe307aWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYhPT0ncHJvZHVjdGlvbicpe3ByaW50V2FybmluZz1mdW5jdGlvbiBwcmludFdhcm5pbmcodGV4dCl7dmFyIG1lc3NhZ2U9J1dhcm5pbmc6ICcrdGV4dDtpZih0eXBlb2YgY29uc29sZSE9PSd1bmRlZmluZWQnKXtjb25zb2xlLmVycm9yKG1lc3NhZ2UpO310cnl7Ly8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4vLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbnRocm93IG5ldyBFcnJvcihtZXNzYWdlKTt9Y2F0Y2goeCl7fX07fWZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwoKXtyZXR1cm4gbnVsbDt9bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsdGhyb3dPbkRpcmVjdEFjY2Vzcyl7LyogZ2xvYmFsIFN5bWJvbCAqL3ZhciBJVEVSQVRPUl9TWU1CT0w9dHlwZW9mIFN5bWJvbD09PSdmdW5jdGlvbicmJlN5bWJvbC5pdGVyYXRvcjt2YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0w9J0BAaXRlcmF0b3InOy8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cbi8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKXt2YXIgaXRlcmF0b3JGbj1tYXliZUl0ZXJhYmxlJiYoSVRFUkFUT1JfU1lNQk9MJiZtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF18fG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtpZih0eXBlb2YgaXRlcmF0b3JGbj09PSdmdW5jdGlvbicpe3JldHVybiBpdGVyYXRvckZuO319LyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG4gICAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gICAqXG4gICAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcbiAgICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cbiAgICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAgICpcbiAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuICAgKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gICAqXG4gICAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuICAgKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gICAqICAgICB9LFxuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuICAgKlxuICAgKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAgICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG4gICAqXG4gICAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAgICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICAgKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICAgKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gICAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgKiAgICAgICAgICApO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH1cbiAgICogICAgfSxcbiAgICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gICAqICB9KTtcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL3ZhciBBTk9OWU1PVVM9Jzw8YW5vbnltb3VzPj4nOy8vIEltcG9ydGFudCFcbi8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbnZhciBSZWFjdFByb3BUeXBlcz17YXJyYXk6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksYm9vbDpjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLGZ1bmM6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksbnVtYmVyOmNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxvYmplY3Q6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLHN0cmluZzpjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3RyaW5nJyksc3ltYm9sOmNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSxhbnk6Y3JlYXRlQW55VHlwZUNoZWNrZXIoKSxhcnJheU9mOmNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixlbGVtZW50OmNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpLGVsZW1lbnRUeXBlOmNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSxpbnN0YW5jZU9mOmNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsbm9kZTpjcmVhdGVOb2RlQ2hlY2tlcigpLG9iamVjdE9mOmNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsb25lT2Y6Y3JlYXRlRW51bVR5cGVDaGVja2VyLG9uZU9mVHlwZTpjcmVhdGVVbmlvblR5cGVDaGVja2VyLHNoYXBlOmNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsZXhhY3Q6Y3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcn07LyoqXG4gICAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAqLy8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9mdW5jdGlvbiBpcyh4LHkpey8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbmlmKHg9PT15KXsvLyBTdGVwcyAxLTUsIDctMTBcbi8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG5yZXR1cm4geCE9PTB8fDEveD09PTEveTt9ZWxzZXsvLyBTdGVwIDYuYTogTmFOID09IE5hTlxucmV0dXJuIHghPT14JiZ5IT09eTt9fS8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqLy8qKlxuICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG4gICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsXG4gICAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuXG4gICAqL2Z1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSl7dGhpcy5tZXNzYWdlPW1lc3NhZ2U7dGhpcy5zdGFjaz0nJzt9Ly8gTWFrZSBgaW5zdGFuY2VvZiBFcnJvcmAgc3RpbGwgd29yayBmb3IgcmV0dXJuZWQgZXJyb3JzLlxuUHJvcFR5cGVFcnJvci5wcm90b3R5cGU9RXJyb3IucHJvdG90eXBlO2Z1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKXtpZihwcm9jZXNzLmVudi5OT0RFX0VOViE9PSdwcm9kdWN0aW9uJyl7dmFyIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlPXt9O3ZhciBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudD0wO31mdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCxwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSxzZWNyZXQpe2NvbXBvbmVudE5hbWU9Y29tcG9uZW50TmFtZXx8QU5PTllNT1VTO3Byb3BGdWxsTmFtZT1wcm9wRnVsbE5hbWV8fHByb3BOYW1lO2lmKHNlY3JldCE9PVJlYWN0UHJvcFR5cGVzU2VjcmV0KXtpZih0aHJvd09uRGlyZWN0QWNjZXNzKXsvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2VcbnZhciBlcnI9bmV3IEVycm9yKCdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnKydVc2UgYFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpYCB0byBjYWxsIHRoZW0uICcrJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnKTtlcnIubmFtZT0nSW52YXJpYW50IFZpb2xhdGlvbic7dGhyb3cgZXJyO31lbHNlIGlmKHByb2Nlc3MuZW52Lk5PREVfRU5WIT09J3Byb2R1Y3Rpb24nJiZ0eXBlb2YgY29uc29sZSE9PSd1bmRlZmluZWQnKXsvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcbnZhciBjYWNoZUtleT1jb21wb25lbnROYW1lKyc6Jytwcm9wTmFtZTtpZighbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldJiYvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcbm1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50PDMpe3ByaW50V2FybmluZygnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJysnZnVuY3Rpb24gZm9yIHRoZSBgJytwcm9wRnVsbE5hbWUrJ2AgcHJvcCBvbiBgJytjb21wb25lbnROYW1lKydgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJysnYW5kIHdpbGwgdGhyb3cgaW4gdGhlIHN0YW5kYWxvbmUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcrJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJysnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcrJ2ZvciBkZXRhaWxzLicpO21hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XT10cnVlO21hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7fX19aWYocHJvcHNbcHJvcE5hbWVdPT1udWxsKXtpZihpc1JlcXVpcmVkKXtpZihwcm9wc1twcm9wTmFtZV09PT1udWxsKXtyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnKygnaW4gYCcrY29tcG9uZW50TmFtZSsnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO31yZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiAnKygnYCcrY29tcG9uZW50TmFtZSsnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC4nKSk7fXJldHVybiBudWxsO31lbHNle3JldHVybiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSk7fX12YXIgY2hhaW5lZENoZWNrVHlwZT1jaGVja1R5cGUuYmluZChudWxsLGZhbHNlKTtjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQ9Y2hlY2tUeXBlLmJpbmQobnVsbCx0cnVlKTtyZXR1cm4gY2hhaW5lZENoZWNrVHlwZTt9ZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKXtmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSxzZWNyZXQpe3ZhciBwcm9wVmFsdWU9cHJvcHNbcHJvcE5hbWVdO3ZhciBwcm9wVHlwZT1nZXRQcm9wVHlwZShwcm9wVmFsdWUpO2lmKHByb3BUeXBlIT09ZXhwZWN0ZWRUeXBlKXsvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbi8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxudmFyIHByZWNpc2VUeXBlPWdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7cmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcrbG9jYXRpb24rJyBgJytwcm9wRnVsbE5hbWUrJ2Agb2YgdHlwZSAnKygnYCcrcHJlY2lzZVR5cGUrJ2Agc3VwcGxpZWQgdG8gYCcrY29tcG9uZW50TmFtZSsnYCwgZXhwZWN0ZWQgJykrKCdgJytleHBlY3RlZFR5cGUrJ2AuJykpO31yZXR1cm4gbnVsbDt9cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTt9ZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKXtyZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCk7fWZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcil7ZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMscHJvcE5hbWUsY29tcG9uZW50TmFtZSxsb2NhdGlvbixwcm9wRnVsbE5hbWUpe2lmKHR5cGVvZiB0eXBlQ2hlY2tlciE9PSdmdW5jdGlvbicpe3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcrcHJvcEZ1bGxOYW1lKydgIG9mIGNvbXBvbmVudCBgJytjb21wb25lbnROYW1lKydgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO312YXIgcHJvcFZhbHVlPXByb3BzW3Byb3BOYW1lXTtpZighQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKXt2YXIgcHJvcFR5cGU9Z2V0UHJvcFR5cGUocHJvcFZhbHVlKTtyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJytsb2NhdGlvbisnIGAnK3Byb3BGdWxsTmFtZSsnYCBvZiB0eXBlICcrKCdgJytwcm9wVHlwZSsnYCBzdXBwbGllZCB0byBgJytjb21wb25lbnROYW1lKydgLCBleHBlY3RlZCBhbiBhcnJheS4nKSk7fWZvcih2YXIgaT0wO2k8cHJvcFZhbHVlLmxlbmd0aDtpKyspe3ZhciBlcnJvcj10eXBlQ2hlY2tlcihwcm9wVmFsdWUsaSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSsnWycraSsnXScsUmVhY3RQcm9wVHlwZXNTZWNyZXQpO2lmKGVycm9yIGluc3RhbmNlb2YgRXJyb3Ipe3JldHVybiBlcnJvcjt9fXJldHVybiBudWxsO31yZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO31mdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKXtmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSl7dmFyIHByb3BWYWx1ZT1wcm9wc1twcm9wTmFtZV07aWYoIWlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpe3ZhciBwcm9wVHlwZT1nZXRQcm9wVHlwZShwcm9wVmFsdWUpO3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIG9mIHR5cGUgJysoJ2AnK3Byb3BUeXBlKydgIHN1cHBsaWVkIHRvIGAnK2NvbXBvbmVudE5hbWUrJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7fXJldHVybiBudWxsO31yZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO31mdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCl7ZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMscHJvcE5hbWUsY29tcG9uZW50TmFtZSxsb2NhdGlvbixwcm9wRnVsbE5hbWUpe3ZhciBwcm9wVmFsdWU9cHJvcHNbcHJvcE5hbWVdO2lmKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShwcm9wVmFsdWUpKXt2YXIgcHJvcFR5cGU9Z2V0UHJvcFR5cGUocHJvcFZhbHVlKTtyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJytsb2NhdGlvbisnIGAnK3Byb3BGdWxsTmFtZSsnYCBvZiB0eXBlICcrKCdgJytwcm9wVHlwZSsnYCBzdXBwbGllZCB0byBgJytjb21wb25lbnROYW1lKydgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7fXJldHVybiBudWxsO31yZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO31mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3Mpe2Z1bmN0aW9uIHZhbGlkYXRlKHByb3BzLHByb3BOYW1lLGNvbXBvbmVudE5hbWUsbG9jYXRpb24scHJvcEZ1bGxOYW1lKXtpZighKHByb3BzW3Byb3BOYW1lXWluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpe3ZhciBleHBlY3RlZENsYXNzTmFtZT1leHBlY3RlZENsYXNzLm5hbWV8fEFOT05ZTU9VUzt2YXIgYWN0dWFsQ2xhc3NOYW1lPWdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIG9mIHR5cGUgJysoJ2AnK2FjdHVhbENsYXNzTmFtZSsnYCBzdXBwbGllZCB0byBgJytjb21wb25lbnROYW1lKydgLCBleHBlY3RlZCAnKSsoJ2luc3RhbmNlIG9mIGAnK2V4cGVjdGVkQ2xhc3NOYW1lKydgLicpKTt9cmV0dXJuIG51bGw7fXJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7fWZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcyl7aWYoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKXtpZihwcm9jZXNzLmVudi5OT0RFX0VOViE9PSdwcm9kdWN0aW9uJyl7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnRzIHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheSwgZ290ICcrYXJndW1lbnRzLmxlbmd0aCsnIGFyZ3VtZW50cy4gJysnQSBjb21tb24gbWlzdGFrZSBpcyB0byB3cml0ZSBvbmVPZih4LCB5LCB6KSBpbnN0ZWFkIG9mIG9uZU9mKFt4LCB5LCB6XSkuJyk7fWVsc2V7cHJpbnRXYXJuaW5nKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheS4nKTt9fXJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO31mdW5jdGlvbiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSl7dmFyIHByb3BWYWx1ZT1wcm9wc1twcm9wTmFtZV07Zm9yKHZhciBpPTA7aTxleHBlY3RlZFZhbHVlcy5sZW5ndGg7aSsrKXtpZihpcyhwcm9wVmFsdWUsZXhwZWN0ZWRWYWx1ZXNbaV0pKXtyZXR1cm4gbnVsbDt9fXZhciB2YWx1ZXNTdHJpbmc9SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMsZnVuY3Rpb24gcmVwbGFjZXIoa2V5LHZhbHVlKXt2YXIgdHlwZT1nZXRQcmVjaXNlVHlwZSh2YWx1ZSk7aWYodHlwZT09PSdzeW1ib2wnKXtyZXR1cm4gU3RyaW5nKHZhbHVlKTt9cmV0dXJuIHZhbHVlO30pO3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIG9mIHZhbHVlIGAnK1N0cmluZyhwcm9wVmFsdWUpKydgICcrKCdzdXBwbGllZCB0byBgJytjb21wb25lbnROYW1lKydgLCBleHBlY3RlZCBvbmUgb2YgJyt2YWx1ZXNTdHJpbmcrJy4nKSk7fXJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7fWZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpe2Z1bmN0aW9uIHZhbGlkYXRlKHByb3BzLHByb3BOYW1lLGNvbXBvbmVudE5hbWUsbG9jYXRpb24scHJvcEZ1bGxOYW1lKXtpZih0eXBlb2YgdHlwZUNoZWNrZXIhPT0nZnVuY3Rpb24nKXtyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnK3Byb3BGdWxsTmFtZSsnYCBvZiBjb21wb25lbnQgYCcrY29tcG9uZW50TmFtZSsnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7fXZhciBwcm9wVmFsdWU9cHJvcHNbcHJvcE5hbWVdO3ZhciBwcm9wVHlwZT1nZXRQcm9wVHlwZShwcm9wVmFsdWUpO2lmKHByb3BUeXBlIT09J29iamVjdCcpe3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIG9mIHR5cGUgJysoJ2AnK3Byb3BUeXBlKydgIHN1cHBsaWVkIHRvIGAnK2NvbXBvbmVudE5hbWUrJ2AsIGV4cGVjdGVkIGFuIG9iamVjdC4nKSk7fWZvcih2YXIga2V5IGluIHByb3BWYWx1ZSl7aWYoaGFzKHByb3BWYWx1ZSxrZXkpKXt2YXIgZXJyb3I9dHlwZUNoZWNrZXIocHJvcFZhbHVlLGtleSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSsnLicra2V5LFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtpZihlcnJvciBpbnN0YW5jZW9mIEVycm9yKXtyZXR1cm4gZXJyb3I7fX19cmV0dXJuIG51bGw7fXJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7fWZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycyl7aWYoIUFycmF5LmlzQXJyYXkoYXJyYXlPZlR5cGVDaGVja2Vycykpe3Byb2Nlc3MuZW52Lk5PREVfRU5WIT09J3Byb2R1Y3Rpb24nP3ByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpOnZvaWQgMDtyZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDt9Zm9yKHZhciBpPTA7aTxhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDtpKyspe3ZhciBjaGVja2VyPWFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07aWYodHlwZW9mIGNoZWNrZXIhPT0nZnVuY3Rpb24nKXtwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCAnKydyZWNlaXZlZCAnK2dldFBvc3RmaXhGb3JUeXBlV2FybmluZyhjaGVja2VyKSsnIGF0IGluZGV4ICcraSsnLicpO3JldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO319ZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMscHJvcE5hbWUsY29tcG9uZW50TmFtZSxsb2NhdGlvbixwcm9wRnVsbE5hbWUpe2Zvcih2YXIgaT0wO2k8YXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7aSsrKXt2YXIgY2hlY2tlcj1hcnJheU9mVHlwZUNoZWNrZXJzW2ldO2lmKGNoZWNrZXIocHJvcHMscHJvcE5hbWUsY29tcG9uZW50TmFtZSxsb2NhdGlvbixwcm9wRnVsbE5hbWUsUmVhY3RQcm9wVHlwZXNTZWNyZXQpPT1udWxsKXtyZXR1cm4gbnVsbDt9fXJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnK2xvY2F0aW9uKycgYCcrcHJvcEZ1bGxOYW1lKydgIHN1cHBsaWVkIHRvICcrKCdgJytjb21wb25lbnROYW1lKydgLicpKTt9cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTt9ZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKXtmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSl7aWYoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKXtyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJytsb2NhdGlvbisnIGAnK3Byb3BGdWxsTmFtZSsnYCBzdXBwbGllZCB0byAnKygnYCcrY29tcG9uZW50TmFtZSsnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO31yZXR1cm4gbnVsbDt9cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTt9ZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKXtmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSl7dmFyIHByb3BWYWx1ZT1wcm9wc1twcm9wTmFtZV07dmFyIHByb3BUeXBlPWdldFByb3BUeXBlKHByb3BWYWx1ZSk7aWYocHJvcFR5cGUhPT0nb2JqZWN0Jyl7cmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcrbG9jYXRpb24rJyBgJytwcm9wRnVsbE5hbWUrJ2Agb2YgdHlwZSBgJytwcm9wVHlwZSsnYCAnKygnc3VwcGxpZWQgdG8gYCcrY29tcG9uZW50TmFtZSsnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO31mb3IodmFyIGtleSBpbiBzaGFwZVR5cGVzKXt2YXIgY2hlY2tlcj1zaGFwZVR5cGVzW2tleV07aWYoIWNoZWNrZXIpe2NvbnRpbnVlO312YXIgZXJyb3I9Y2hlY2tlcihwcm9wVmFsdWUsa2V5LGNvbXBvbmVudE5hbWUsbG9jYXRpb24scHJvcEZ1bGxOYW1lKycuJytrZXksUmVhY3RQcm9wVHlwZXNTZWNyZXQpO2lmKGVycm9yKXtyZXR1cm4gZXJyb3I7fX1yZXR1cm4gbnVsbDt9cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTt9ZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKXtmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uLHByb3BGdWxsTmFtZSl7dmFyIHByb3BWYWx1ZT1wcm9wc1twcm9wTmFtZV07dmFyIHByb3BUeXBlPWdldFByb3BUeXBlKHByb3BWYWx1ZSk7aWYocHJvcFR5cGUhPT0nb2JqZWN0Jyl7cmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcrbG9jYXRpb24rJyBgJytwcm9wRnVsbE5hbWUrJ2Agb2YgdHlwZSBgJytwcm9wVHlwZSsnYCAnKygnc3VwcGxpZWQgdG8gYCcrY29tcG9uZW50TmFtZSsnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO30vLyBXZSBuZWVkIHRvIGNoZWNrIGFsbCBrZXlzIGluIGNhc2Ugc29tZSBhcmUgcmVxdWlyZWQgYnV0IG1pc3NpbmcgZnJvbVxuLy8gcHJvcHMuXG52YXIgYWxsS2V5cz1hc3NpZ24oe30scHJvcHNbcHJvcE5hbWVdLHNoYXBlVHlwZXMpO2Zvcih2YXIga2V5IGluIGFsbEtleXMpe3ZhciBjaGVja2VyPXNoYXBlVHlwZXNba2V5XTtpZighY2hlY2tlcil7cmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcrbG9jYXRpb24rJyBgJytwcm9wRnVsbE5hbWUrJ2Aga2V5IGAnK2tleSsnYCBzdXBwbGllZCB0byBgJytjb21wb25lbnROYW1lKydgLicrJ1xcbkJhZCBvYmplY3Q6ICcrSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLG51bGwsJyAgJykrJ1xcblZhbGlkIGtleXM6ICcrSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc2hhcGVUeXBlcyksbnVsbCwnICAnKSk7fXZhciBlcnJvcj1jaGVja2VyKHByb3BWYWx1ZSxrZXksY29tcG9uZW50TmFtZSxsb2NhdGlvbixwcm9wRnVsbE5hbWUrJy4nK2tleSxSZWFjdFByb3BUeXBlc1NlY3JldCk7aWYoZXJyb3Ipe3JldHVybiBlcnJvcjt9fXJldHVybiBudWxsO31yZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO31mdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKXtzd2l0Y2godHlwZW9mIHByb3BWYWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YocHJvcFZhbHVlKSl7Y2FzZSdudW1iZXInOmNhc2Unc3RyaW5nJzpjYXNlJ3VuZGVmaW5lZCc6cmV0dXJuIHRydWU7Y2FzZSdib29sZWFuJzpyZXR1cm4hcHJvcFZhbHVlO2Nhc2Unb2JqZWN0JzppZihBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpe3JldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTt9aWYocHJvcFZhbHVlPT09bnVsbHx8aXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSl7cmV0dXJuIHRydWU7fXZhciBpdGVyYXRvckZuPWdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtpZihpdGVyYXRvckZuKXt2YXIgaXRlcmF0b3I9aXRlcmF0b3JGbi5jYWxsKHByb3BWYWx1ZSk7dmFyIHN0ZXA7aWYoaXRlcmF0b3JGbiE9PXByb3BWYWx1ZS5lbnRyaWVzKXt3aGlsZSghKHN0ZXA9aXRlcmF0b3IubmV4dCgpKS5kb25lKXtpZighaXNOb2RlKHN0ZXAudmFsdWUpKXtyZXR1cm4gZmFsc2U7fX19ZWxzZXsvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbndoaWxlKCEoc3RlcD1pdGVyYXRvci5uZXh0KCkpLmRvbmUpe3ZhciBlbnRyeT1zdGVwLnZhbHVlO2lmKGVudHJ5KXtpZighaXNOb2RlKGVudHJ5WzFdKSl7cmV0dXJuIGZhbHNlO319fX19ZWxzZXtyZXR1cm4gZmFsc2U7fXJldHVybiB0cnVlO2RlZmF1bHQ6cmV0dXJuIGZhbHNlO319ZnVuY3Rpb24gaXNTeW1ib2wocHJvcFR5cGUscHJvcFZhbHVlKXsvLyBOYXRpdmUgU3ltYm9sLlxuaWYocHJvcFR5cGU9PT0nc3ltYm9sJyl7cmV0dXJuIHRydWU7fS8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG5pZighcHJvcFZhbHVlKXtyZXR1cm4gZmFsc2U7fS8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnXG5pZihwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXT09PSdTeW1ib2wnKXtyZXR1cm4gdHJ1ZTt9Ly8gRmFsbGJhY2sgZm9yIG5vbi1zcGVjIGNvbXBsaWFudCBTeW1ib2xzIHdoaWNoIGFyZSBwb2x5ZmlsbGVkLlxuaWYodHlwZW9mIFN5bWJvbD09PSdmdW5jdGlvbicmJnByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCl7cmV0dXJuIHRydWU7fXJldHVybiBmYWxzZTt9Ly8gRXF1aXZhbGVudCBvZiBgdHlwZW9mYCBidXQgd2l0aCBzcGVjaWFsIGhhbmRsaW5nIGZvciBhcnJheSBhbmQgcmVnZXhwLlxuZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKXt2YXIgcHJvcFR5cGU9dHlwZW9mIHByb3BWYWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YocHJvcFZhbHVlKTtpZihBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpe3JldHVybidhcnJheSc7fWlmKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCl7Ly8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4vLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbnJldHVybidvYmplY3QnO31pZihpc1N5bWJvbChwcm9wVHlwZSxwcm9wVmFsdWUpKXtyZXR1cm4nc3ltYm9sJzt9cmV0dXJuIHByb3BUeXBlO30vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSl7aWYodHlwZW9mIHByb3BWYWx1ZT09PSd1bmRlZmluZWQnfHxwcm9wVmFsdWU9PT1udWxsKXtyZXR1cm4nJytwcm9wVmFsdWU7fXZhciBwcm9wVHlwZT1nZXRQcm9wVHlwZShwcm9wVmFsdWUpO2lmKHByb3BUeXBlPT09J29iamVjdCcpe2lmKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpe3JldHVybidkYXRlJzt9ZWxzZSBpZihwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApe3JldHVybidyZWdleHAnO319cmV0dXJuIHByb3BUeXBlO30vLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4vLyBGb3IgZXhhbXBsZSwgXCJ1bmRlZmluZWRcIiBvciBcIm9mIHR5cGUgYXJyYXlcIlxuZnVuY3Rpb24gZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKHZhbHVlKXt2YXIgdHlwZT1nZXRQcmVjaXNlVHlwZSh2YWx1ZSk7c3dpdGNoKHR5cGUpe2Nhc2UnYXJyYXknOmNhc2Unb2JqZWN0JzpyZXR1cm4nYW4gJyt0eXBlO2Nhc2UnYm9vbGVhbic6Y2FzZSdkYXRlJzpjYXNlJ3JlZ2V4cCc6cmV0dXJuJ2EgJyt0eXBlO2RlZmF1bHQ6cmV0dXJuIHR5cGU7fX0vLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSl7aWYoIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvcnx8IXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKXtyZXR1cm4gQU5PTllNT1VTO31yZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7fVJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzPWNoZWNrUHJvcFR5cGVzO1JlYWN0UHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlPWNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1JlYWN0UHJvcFR5cGVzLlByb3BUeXBlcz1SZWFjdFByb3BUeXBlcztyZXR1cm4gUmVhY3RQcm9wVHlwZXM7fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcHJvcC10eXBlcy9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovJ3VzZSBzdHJpY3QnOy8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovdmFyIGdldE93blByb3BlcnR5U3ltYm9scz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBwcm9wSXNFbnVtZXJhYmxlPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7ZnVuY3Rpb24gdG9PYmplY3QodmFsKXtpZih2YWw9PT1udWxsfHx2YWw9PT11bmRlZmluZWQpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7fXJldHVybiBPYmplY3QodmFsKTt9ZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCl7dHJ5e2lmKCFPYmplY3QuYXNzaWduKXtyZXR1cm4gZmFsc2U7fS8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcbnZhciB0ZXN0MT1uZXcgU3RyaW5nKCdhYmMnKTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xudGVzdDFbNV09J2RlJztpZihPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF09PT0nNScpe3JldHVybiBmYWxzZTt9Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxudmFyIHRlc3QyPXt9O2Zvcih2YXIgaT0wO2k8MTA7aSsrKXt0ZXN0MlsnXycrU3RyaW5nLmZyb21DaGFyQ29kZShpKV09aTt9dmFyIG9yZGVyMj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uKG4pe3JldHVybiB0ZXN0MltuXTt9KTtpZihvcmRlcjIuam9pbignJykhPT0nMDEyMzQ1Njc4OScpe3JldHVybiBmYWxzZTt9Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxudmFyIHRlc3QzPXt9OydhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24obGV0dGVyKXt0ZXN0M1tsZXR0ZXJdPWxldHRlcjt9KTtpZihPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LHRlc3QzKSkuam9pbignJykhPT0nYWJjZGVmZ2hpamtsbW5vcHFyc3QnKXtyZXR1cm4gZmFsc2U7fXJldHVybiB0cnVlO31jYXRjaChlcnIpey8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5yZXR1cm4gZmFsc2U7fX1tb2R1bGUuZXhwb3J0cz1zaG91bGRVc2VOYXRpdmUoKT9PYmplY3QuYXNzaWduOmZ1bmN0aW9uKHRhcmdldCxzb3VyY2Upe3ZhciBmcm9tO3ZhciB0bz10b09iamVjdCh0YXJnZXQpO3ZhciBzeW1ib2xzO2Zvcih2YXIgcz0xO3M8YXJndW1lbnRzLmxlbmd0aDtzKyspe2Zyb209T2JqZWN0KGFyZ3VtZW50c1tzXSk7Zm9yKHZhciBrZXkgaW4gZnJvbSl7aWYoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLGtleSkpe3RvW2tleV09ZnJvbVtrZXldO319aWYoZ2V0T3duUHJvcGVydHlTeW1ib2xzKXtzeW1ib2xzPWdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtmb3IodmFyIGk9MDtpPHN5bWJvbHMubGVuZ3RoO2krKyl7aWYocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sc3ltYm9sc1tpXSkpe3RvW3N5bWJvbHNbaV1dPWZyb21bc3ltYm9sc1tpXV07fX19fXJldHVybiB0bzt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovJ3VzZSBzdHJpY3QnO3ZhciBSZWFjdFByb3BUeXBlc1NlY3JldD0nU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO21vZHVsZS5leHBvcnRzPVJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqLyd1c2Ugc3RyaWN0Jzt2YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307dmFyIHByaW50V2FybmluZz1mdW5jdGlvbiBwcmludFdhcm5pbmcoKXt9O2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WIT09J3Byb2R1Y3Rpb24nKXt2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQ9cmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTt2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzPXt9O3ZhciBoYXM9RnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO3ByaW50V2FybmluZz1mdW5jdGlvbiBwcmludFdhcm5pbmcodGV4dCl7dmFyIG1lc3NhZ2U9J1dhcm5pbmc6ICcrdGV4dDtpZih0eXBlb2YgY29uc29sZSE9PSd1bmRlZmluZWQnKXtjb25zb2xlLmVycm9yKG1lc3NhZ2UpO310cnl7Ly8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4vLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbnRocm93IG5ldyBFcnJvcihtZXNzYWdlKTt9Y2F0Y2goeCl7fX07fS8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLHZhbHVlcyxsb2NhdGlvbixjb21wb25lbnROYW1lLGdldFN0YWNrKXtpZihwcm9jZXNzLmVudi5OT0RFX0VOViE9PSdwcm9kdWN0aW9uJyl7Zm9yKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKXtpZihoYXModHlwZVNwZWNzLHR5cGVTcGVjTmFtZSkpe3ZhciBlcnJvcjsvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxudHJ5ey8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuaWYodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdIT09J2Z1bmN0aW9uJyl7dmFyIGVycj1FcnJvcigoY29tcG9uZW50TmFtZXx8J1JlYWN0IGNsYXNzJykrJzogJytsb2NhdGlvbisnIHR5cGUgYCcrdHlwZVNwZWNOYW1lKydgIGlzIGludmFsaWQ7ICcrJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnK190eXBlb2YodHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0pKydgLicpO2Vyci5uYW1lPSdJbnZhcmlhbnQgVmlvbGF0aW9uJzt0aHJvdyBlcnI7fWVycm9yPXR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcyx0eXBlU3BlY05hbWUsY29tcG9uZW50TmFtZSxsb2NhdGlvbixudWxsLFJlYWN0UHJvcFR5cGVzU2VjcmV0KTt9Y2F0Y2goZXgpe2Vycm9yPWV4O31pZihlcnJvciYmIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSl7cHJpbnRXYXJuaW5nKChjb21wb25lbnROYW1lfHwnUmVhY3QgY2xhc3MnKSsnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJytsb2NhdGlvbisnIGAnK3R5cGVTcGVjTmFtZSsnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcrJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcrKHR5cGVvZiBlcnJvcj09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YoZXJyb3IpKSsnLiAnKydZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnKydjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcrJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nKTt9aWYoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciYmIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpey8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuLy8gc2FtZSBlcnJvci5cbmxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXT10cnVlO3ZhciBzdGFjaz1nZXRTdGFjaz9nZXRTdGFjaygpOicnO3ByaW50V2FybmluZygnRmFpbGVkICcrbG9jYXRpb24rJyB0eXBlOiAnK2Vycm9yLm1lc3NhZ2UrKHN0YWNrIT1udWxsP3N0YWNrOicnKSk7fX19fX0vKipcbiAqIFJlc2V0cyB3YXJuaW5nIGNhY2hlIHdoZW4gdGVzdGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGU9ZnVuY3Rpb24oKXtpZihwcm9jZXNzLmVudi5OT0RFX0VOViE9PSdwcm9kdWN0aW9uJyl7bG9nZ2VkVHlwZUZhaWx1cmVzPXt9O319O21vZHVsZS5leHBvcnRzPWNoZWNrUHJvcFR5cGVzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovJ3VzZSBzdHJpY3QnO3ZhciBSZWFjdFByb3BUeXBlc1NlY3JldD1yZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO2Z1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKXt9ZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpe31lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlPWVtcHR5RnVuY3Rpb247bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBzaGltKHByb3BzLHByb3BOYW1lLGNvbXBvbmVudE5hbWUsbG9jYXRpb24scHJvcEZ1bGxOYW1lLHNlY3JldCl7aWYoc2VjcmV0PT09UmVhY3RQcm9wVHlwZXNTZWNyZXQpey8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbnJldHVybjt9dmFyIGVycj1uZXcgRXJyb3IoJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcrJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcrJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnKTtlcnIubmFtZT0nSW52YXJpYW50IFZpb2xhdGlvbic7dGhyb3cgZXJyO307c2hpbS5pc1JlcXVpcmVkPXNoaW07ZnVuY3Rpb24gZ2V0U2hpbSgpe3JldHVybiBzaGltO307Ly8gSW1wb3J0YW50IVxuLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG52YXIgUmVhY3RQcm9wVHlwZXM9e2FycmF5OnNoaW0sYm9vbDpzaGltLGZ1bmM6c2hpbSxudW1iZXI6c2hpbSxvYmplY3Q6c2hpbSxzdHJpbmc6c2hpbSxzeW1ib2w6c2hpbSxhbnk6c2hpbSxhcnJheU9mOmdldFNoaW0sZWxlbWVudDpzaGltLGVsZW1lbnRUeXBlOnNoaW0saW5zdGFuY2VPZjpnZXRTaGltLG5vZGU6c2hpbSxvYmplY3RPZjpnZXRTaGltLG9uZU9mOmdldFNoaW0sb25lT2ZUeXBlOmdldFNoaW0sc2hhcGU6Z2V0U2hpbSxleGFjdDpnZXRTaGltLGNoZWNrUHJvcFR5cGVzOmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQscmVzZXRXYXJuaW5nQ2FjaGU6ZW1wdHlGdW5jdGlvbn07UmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzPVJlYWN0UHJvcFR5cGVzO3JldHVybiBSZWFjdFByb3BUeXBlczt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Byb2R1Y3Rpb24nKXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCcuL2Nqcy9oaXN0b3J5Lm1pbi5qcycpO31lbHNle21vZHVsZS5leHBvcnRzPXJlcXVpcmUoJy4vY2pzL2hpc3RvcnkuanMnKTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2hpc3RvcnkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQodCl7cmV0dXJuIHQmJlwib2JqZWN0XCI9PSh0eXBlb2YgdD09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHQpKSYmXCJkZWZhdWx0XCJpbiB0P3QuZGVmYXVsdDp0O31PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcmVzb2x2ZVBhdGhuYW1lPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwicmVzb2x2ZS1wYXRobmFtZVwiKSksdmFsdWVFcXVhbD1faW50ZXJvcERlZmF1bHQocmVxdWlyZShcInZhbHVlLWVxdWFsXCIpKTtyZXF1aXJlKFwidGlueS13YXJuaW5nXCIpO3ZhciBpbnZhcmlhbnQ9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJ0aW55LWludmFyaWFudFwiKSk7ZnVuY3Rpb24gX2V4dGVuZHMoKXtyZXR1cm4oX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl7dmFyIGU9YXJndW1lbnRzW25dO2Zvcih2YXIgYSBpbiBlKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxhKSYmKHRbYV09ZVthXSk7fX1yZXR1cm4gdDt9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaCh0KXtyZXR1cm5cIi9cIj09PXQuY2hhckF0KDApP3Q6XCIvXCIrdDt9ZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2godCl7cmV0dXJuXCIvXCI9PT10LmNoYXJBdCgwKT90LnN1YnN0cigxKTp0O31mdW5jdGlvbiBoYXNCYXNlbmFtZSh0LG4pe3JldHVybiAwPT09dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yobi50b0xvd2VyQ2FzZSgpKSYmLTEhPT1cIi8/I1wiLmluZGV4T2YodC5jaGFyQXQobi5sZW5ndGgpKTt9ZnVuY3Rpb24gc3RyaXBCYXNlbmFtZSh0LG4pe3JldHVybiBoYXNCYXNlbmFtZSh0LG4pP3Quc3Vic3RyKG4ubGVuZ3RoKTp0O31mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2godCl7cmV0dXJuXCIvXCI9PT10LmNoYXJBdCh0Lmxlbmd0aC0xKT90LnNsaWNlKDAsLTEpOnQ7fWZ1bmN0aW9uIHBhcnNlUGF0aCh0KXt2YXIgbj10fHxcIi9cIixlPVwiXCIsYT1cIlwiLHI9bi5pbmRleE9mKFwiI1wiKTstMSE9PXImJihhPW4uc3Vic3RyKHIpLG49bi5zdWJzdHIoMCxyKSk7dmFyIG89bi5pbmRleE9mKFwiP1wiKTtyZXR1cm4tMSE9PW8mJihlPW4uc3Vic3RyKG8pLG49bi5zdWJzdHIoMCxvKSkse3BhdGhuYW1lOm4sc2VhcmNoOlwiP1wiPT09ZT9cIlwiOmUsaGFzaDpcIiNcIj09PWE/XCJcIjphfTt9ZnVuY3Rpb24gY3JlYXRlUGF0aCh0KXt2YXIgbj10LnBhdGhuYW1lLGU9dC5zZWFyY2gsYT10Lmhhc2gscj1ufHxcIi9cIjtyZXR1cm4gZSYmXCI/XCIhPT1lJiYocis9XCI/XCI9PT1lLmNoYXJBdCgwKT9lOlwiP1wiK2UpLGEmJlwiI1wiIT09YSYmKHIrPVwiI1wiPT09YS5jaGFyQXQoMCk/YTpcIiNcIithKSxyO31mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbih0LG4sZSxhKXt2YXIgcjtcInN0cmluZ1wiPT10eXBlb2YgdD8ocj1wYXJzZVBhdGgodCkpLnN0YXRlPW46KHZvaWQgMD09PShyPV9leHRlbmRzKHt9LHQpKS5wYXRobmFtZSYmKHIucGF0aG5hbWU9XCJcIiksci5zZWFyY2g/XCI/XCIhPT1yLnNlYXJjaC5jaGFyQXQoMCkmJihyLnNlYXJjaD1cIj9cIityLnNlYXJjaCk6ci5zZWFyY2g9XCJcIixyLmhhc2g/XCIjXCIhPT1yLmhhc2guY2hhckF0KDApJiYoci5oYXNoPVwiI1wiK3IuaGFzaCk6ci5oYXNoPVwiXCIsdm9pZCAwIT09biYmdm9pZCAwPT09ci5zdGF0ZSYmKHIuc3RhdGU9bikpO3RyeXtyLnBhdGhuYW1lPWRlY29kZVVSSShyLnBhdGhuYW1lKTt9Y2F0Y2godCl7dGhyb3cgdCBpbnN0YW5jZW9mIFVSSUVycm9yP25ldyBVUklFcnJvcignUGF0aG5hbWUgXCInK3IucGF0aG5hbWUrJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpOnQ7fXJldHVybiBlJiYoci5rZXk9ZSksYT9yLnBhdGhuYW1lP1wiL1wiIT09ci5wYXRobmFtZS5jaGFyQXQoMCkmJihyLnBhdGhuYW1lPXJlc29sdmVQYXRobmFtZShyLnBhdGhuYW1lLGEucGF0aG5hbWUpKTpyLnBhdGhuYW1lPWEucGF0aG5hbWU6ci5wYXRobmFtZXx8KHIucGF0aG5hbWU9XCIvXCIpLHI7fWZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKHQsbil7cmV0dXJuIHQucGF0aG5hbWU9PT1uLnBhdGhuYW1lJiZ0LnNlYXJjaD09PW4uc2VhcmNoJiZ0Lmhhc2g9PT1uLmhhc2gmJnQua2V5PT09bi5rZXkmJnZhbHVlRXF1YWwodC5zdGF0ZSxuLnN0YXRlKTt9ZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKXt2YXIgbz1udWxsO3ZhciBhPVtdO3JldHVybntzZXRQcm9tcHQ6ZnVuY3Rpb24gc2V0UHJvbXB0KHQpe3JldHVybiBvPXQsZnVuY3Rpb24oKXtvPT09dCYmKG89bnVsbCk7fTt9LGNvbmZpcm1UcmFuc2l0aW9uVG86ZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyh0LG4sZSxhKXtpZihudWxsIT1vKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28odCxuKTpvO1wic3RyaW5nXCI9PXR5cGVvZiByP1wiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZShyLGEpOmEoITApOmEoITEhPT1yKTt9ZWxzZSBhKCEwKTt9LGFwcGVuZExpc3RlbmVyOmZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKHQpe3ZhciBuPSEwO2Z1bmN0aW9uIGUoKXtuJiZ0LmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpO31yZXR1cm4gYS5wdXNoKGUpLGZ1bmN0aW9uKCl7bj0hMSxhPWEuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0IT09ZTt9KTt9O30sbm90aWZ5TGlzdGVuZXJzOmZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQpLGU9MDtlPHQ7ZSsrKXtuW2VdPWFyZ3VtZW50c1tlXTt9YS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFwcGx5KHZvaWQgMCxuKTt9KTt9fTt9dmFyIGNhblVzZURPTT0hKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKHQsbil7bih3aW5kb3cuY29uZmlybSh0KSk7fWZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpe3ZhciB0PXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O3JldHVybigtMT09PXQuaW5kZXhPZihcIkFuZHJvaWQgMi5cIikmJi0xPT09dC5pbmRleE9mKFwiQW5kcm9pZCA0LjBcIil8fC0xPT09dC5pbmRleE9mKFwiTW9iaWxlIFNhZmFyaVwiKXx8LTEhPT10LmluZGV4T2YoXCJDaHJvbWVcIil8fC0xIT09dC5pbmRleE9mKFwiV2luZG93cyBQaG9uZVwiKSkmJndpbmRvdy5oaXN0b3J5JiZcInB1c2hTdGF0ZVwiaW4gd2luZG93Lmhpc3Rvcnk7fWZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKXtyZXR1cm4tMT09PXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJUcmlkZW50XCIpO31mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpe3JldHVybi0xPT09d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIik7fWZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQodCl7cmV0dXJuIHZvaWQgMD09PXQuc3RhdGUmJi0xPT09bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQ3JpT1NcIik7fXZhciBQb3BTdGF0ZUV2ZW50PVwicG9wc3RhdGVcIixIYXNoQ2hhbmdlRXZlbnQ9XCJoYXNoY2hhbmdlXCI7ZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCl7dHJ5e3JldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZXx8e307fWNhdGNoKHQpe3JldHVybnt9O319ZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkodCl7dm9pZCAwPT09dCYmKHQ9e30pLGNhblVzZURPTXx8aW52YXJpYW50KCExKTt2YXIgcz13aW5kb3cuaGlzdG9yeSxjPXN1cHBvcnRzSGlzdG9yeSgpLG49IXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSxlPXQsYT1lLmZvcmNlUmVmcmVzaCxoPXZvaWQgMCE9PWEmJmEscj1lLmdldFVzZXJDb25maXJtYXRpb24sdT12b2lkIDA9PT1yP2dldENvbmZpcm1hdGlvbjpyLG89ZS5rZXlMZW5ndGgsaT12b2lkIDA9PT1vPzY6byxmPXQuYmFzZW5hbWU/c3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaCh0LmJhc2VuYW1lKSk6XCJcIjtmdW5jdGlvbiBsKHQpe3ZhciBuPXR8fHt9LGU9bi5rZXksYT1uLnN0YXRlLHI9d2luZG93LmxvY2F0aW9uLG89ci5wYXRobmFtZStyLnNlYXJjaCtyLmhhc2g7cmV0dXJuIGYmJihvPXN0cmlwQmFzZW5hbWUobyxmKSksY3JlYXRlTG9jYXRpb24obyxhLGUpO31mdW5jdGlvbiBkKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLGkpO312YXIgdj1jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO2Z1bmN0aW9uIHAodCl7X2V4dGVuZHMoVCx0KSxULmxlbmd0aD1zLmxlbmd0aCx2Lm5vdGlmeUxpc3RlbmVycyhULmxvY2F0aW9uLFQuYWN0aW9uKTt9ZnVuY3Rpb24gZyh0KXtpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KHQpfHx3KGwodC5zdGF0ZSkpO31mdW5jdGlvbiBQKCl7dyhsKGdldEhpc3RvcnlTdGF0ZSgpKSk7fXZhciBtPSExO2Z1bmN0aW9uIHcobil7aWYobSltPSExLHAoKTtlbHNle3YuY29uZmlybVRyYW5zaXRpb25UbyhuLFwiUE9QXCIsdSxmdW5jdGlvbih0KXt0P3Aoe2FjdGlvbjpcIlBPUFwiLGxvY2F0aW9uOm59KTpmdW5jdGlvbih0KXt2YXIgbj1ULmxvY2F0aW9uLGU9SC5pbmRleE9mKG4ua2V5KTstMT09PWUmJihlPTApO3ZhciBhPUguaW5kZXhPZih0LmtleSk7LTE9PT1hJiYoYT0wKTt2YXIgcj1lLWE7ciYmKG09ITAsTChyKSk7fShuKTt9KTt9fXZhciB5PWwoZ2V0SGlzdG9yeVN0YXRlKCkpLEg9W3kua2V5XTtmdW5jdGlvbiB4KHQpe3JldHVybiBmK2NyZWF0ZVBhdGgodCk7fWZ1bmN0aW9uIEwodCl7cy5nbyh0KTt9dmFyIE89MDtmdW5jdGlvbiBFKHQpezE9PT0oTys9dCkmJjE9PT10Pyh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LGcpLG4mJndpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCxQKSk6MD09PU8mJih3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LGcpLG4mJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCxQKSk7fXZhciBTPSExO3ZhciBUPXtsZW5ndGg6cy5sZW5ndGgsYWN0aW9uOlwiUE9QXCIsbG9jYXRpb246eSxjcmVhdGVIcmVmOngscHVzaDpmdW5jdGlvbiBwdXNoKHQsbil7dmFyIGk9Y3JlYXRlTG9jYXRpb24odCxuLGQoKSxULmxvY2F0aW9uKTt2LmNvbmZpcm1UcmFuc2l0aW9uVG8oaSxcIlBVU0hcIix1LGZ1bmN0aW9uKHQpe2lmKHQpe3ZhciBuPXgoaSksZT1pLmtleSxhPWkuc3RhdGU7aWYoYyl7aWYocy5wdXNoU3RhdGUoe2tleTplLHN0YXRlOmF9LG51bGwsbiksaCl3aW5kb3cubG9jYXRpb24uaHJlZj1uO2Vsc2V7dmFyIHI9SC5pbmRleE9mKFQubG9jYXRpb24ua2V5KSxvPUguc2xpY2UoMCxyKzEpO28ucHVzaChpLmtleSksSD1vLHAoe2FjdGlvbjpcIlBVU0hcIixsb2NhdGlvbjppfSk7fX1lbHNlIHdpbmRvdy5sb2NhdGlvbi5ocmVmPW47fX0pO30scmVwbGFjZTpmdW5jdGlvbiByZXBsYWNlKHQsbil7dmFyIG89XCJSRVBMQUNFXCIsaT1jcmVhdGVMb2NhdGlvbih0LG4sZCgpLFQubG9jYXRpb24pO3YuY29uZmlybVRyYW5zaXRpb25UbyhpLG8sdSxmdW5jdGlvbih0KXtpZih0KXt2YXIgbj14KGkpLGU9aS5rZXksYT1pLnN0YXRlO2lmKGMpe2lmKHMucmVwbGFjZVN0YXRlKHtrZXk6ZSxzdGF0ZTphfSxudWxsLG4pLGgpd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uobik7ZWxzZXt2YXIgcj1ILmluZGV4T2YoVC5sb2NhdGlvbi5rZXkpOy0xIT09ciYmKEhbcl09aS5rZXkpLHAoe2FjdGlvbjpvLGxvY2F0aW9uOml9KTt9fWVsc2Ugd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uobik7fX0pO30sZ286TCxnb0JhY2s6ZnVuY3Rpb24gZ29CYWNrKCl7TCgtMSk7fSxnb0ZvcndhcmQ6ZnVuY3Rpb24gZ29Gb3J3YXJkKCl7TCgxKTt9LGJsb2NrOmZ1bmN0aW9uIGJsb2NrKHQpe3ZvaWQgMD09PXQmJih0PSExKTt2YXIgbj12LnNldFByb21wdCh0KTtyZXR1cm4gU3x8KEUoMSksUz0hMCksZnVuY3Rpb24oKXtyZXR1cm4gUyYmKFM9ITEsRSgtMSkpLG4oKTt9O30sbGlzdGVuOmZ1bmN0aW9uIGxpc3Rlbih0KXt2YXIgbj12LmFwcGVuZExpc3RlbmVyKHQpO3JldHVybiBFKDEpLGZ1bmN0aW9uKCl7RSgtMSksbigpO307fX07cmV0dXJuIFQ7fXZhciBIYXNoQ2hhbmdlRXZlbnQkMT1cImhhc2hjaGFuZ2VcIixIYXNoUGF0aENvZGVycz17aGFzaGJhbmc6e2VuY29kZVBhdGg6ZnVuY3Rpb24gZW5jb2RlUGF0aCh0KXtyZXR1cm5cIiFcIj09PXQuY2hhckF0KDApP3Q6XCIhL1wiK3N0cmlwTGVhZGluZ1NsYXNoKHQpO30sZGVjb2RlUGF0aDpmdW5jdGlvbiBkZWNvZGVQYXRoKHQpe3JldHVyblwiIVwiPT09dC5jaGFyQXQoMCk/dC5zdWJzdHIoMSk6dDt9fSxub3NsYXNoOntlbmNvZGVQYXRoOnN0cmlwTGVhZGluZ1NsYXNoLGRlY29kZVBhdGg6YWRkTGVhZGluZ1NsYXNofSxzbGFzaDp7ZW5jb2RlUGF0aDphZGRMZWFkaW5nU2xhc2gsZGVjb2RlUGF0aDphZGRMZWFkaW5nU2xhc2h9fTtmdW5jdGlvbiBzdHJpcEhhc2godCl7dmFyIG49dC5pbmRleE9mKFwiI1wiKTtyZXR1cm4tMT09PW4/dDp0LnNsaWNlKDAsbik7fWZ1bmN0aW9uIGdldEhhc2hQYXRoKCl7dmFyIHQ9d2luZG93LmxvY2F0aW9uLmhyZWYsbj10LmluZGV4T2YoXCIjXCIpO3JldHVybi0xPT09bj9cIlwiOnQuc3Vic3RyaW5nKG4rMSk7fWZ1bmN0aW9uIHB1c2hIYXNoUGF0aCh0KXt3aW5kb3cubG9jYXRpb24uaGFzaD10O31mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgodCl7d2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKStcIiNcIit0KTt9ZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkodCl7dm9pZCAwPT09dCYmKHQ9e30pLGNhblVzZURPTXx8aW52YXJpYW50KCExKTt2YXIgbj13aW5kb3cuaGlzdG9yeSxlPShzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpLHQpLGE9ZS5nZXRVc2VyQ29uZmlybWF0aW9uLGk9dm9pZCAwPT09YT9nZXRDb25maXJtYXRpb246YSxyPWUuaGFzaFR5cGUsbz12b2lkIDA9PT1yP1wic2xhc2hcIjpyLHM9dC5iYXNlbmFtZT9zdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHQuYmFzZW5hbWUpKTpcIlwiLGM9SGFzaFBhdGhDb2RlcnNbb10saD1jLmVuY29kZVBhdGgsdT1jLmRlY29kZVBhdGg7ZnVuY3Rpb24gZigpe3ZhciB0PXUoZ2V0SGFzaFBhdGgoKSk7cmV0dXJuIHMmJih0PXN0cmlwQmFzZW5hbWUodCxzKSksY3JlYXRlTG9jYXRpb24odCk7fXZhciBsPWNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7ZnVuY3Rpb24gZCh0KXtfZXh0ZW5kcyhFLHQpLEUubGVuZ3RoPW4ubGVuZ3RoLGwubm90aWZ5TGlzdGVuZXJzKEUubG9jYXRpb24sRS5hY3Rpb24pO312YXIgdj0hMSxwPW51bGw7ZnVuY3Rpb24gZygpe3ZhciB0PWdldEhhc2hQYXRoKCksbj1oKHQpO2lmKHQhPT1uKXJlcGxhY2VIYXNoUGF0aChuKTtlbHNle3ZhciBlPWYoKSxhPUUubG9jYXRpb247aWYoIXYmJmZ1bmN0aW9uKHQsbil7cmV0dXJuIHQucGF0aG5hbWU9PT1uLnBhdGhuYW1lJiZ0LnNlYXJjaD09PW4uc2VhcmNoJiZ0Lmhhc2g9PT1uLmhhc2g7fShhLGUpKXJldHVybjtpZihwPT09Y3JlYXRlUGF0aChlKSlyZXR1cm47cD1udWxsLGZ1bmN0aW9uKG4pe2lmKHYpdj0hMSxkKCk7ZWxzZXtsLmNvbmZpcm1UcmFuc2l0aW9uVG8obixcIlBPUFwiLGksZnVuY3Rpb24odCl7dD9kKHthY3Rpb246XCJQT1BcIixsb2NhdGlvbjpufSk6ZnVuY3Rpb24odCl7dmFyIG49RS5sb2NhdGlvbixlPXkubGFzdEluZGV4T2YoY3JlYXRlUGF0aChuKSk7LTE9PT1lJiYoZT0wKTt2YXIgYT15Lmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodCkpOy0xPT09YSYmKGE9MCk7dmFyIHI9ZS1hO3ImJih2PSEwLEgocikpO30obik7fSk7fX0oZSk7fX12YXIgUD1nZXRIYXNoUGF0aCgpLG09aChQKTtQIT09bSYmcmVwbGFjZUhhc2hQYXRoKG0pO3ZhciB3PWYoKSx5PVtjcmVhdGVQYXRoKHcpXTtmdW5jdGlvbiBIKHQpe24uZ28odCk7fXZhciB4PTA7ZnVuY3Rpb24gTCh0KXsxPT09KHgrPXQpJiYxPT09dD93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSxnKTowPT09eCYmd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsZyk7fXZhciBPPSExO3ZhciBFPXtsZW5ndGg6bi5sZW5ndGgsYWN0aW9uOlwiUE9QXCIsbG9jYXRpb246dyxjcmVhdGVIcmVmOmZ1bmN0aW9uIGNyZWF0ZUhyZWYodCl7dmFyIG49ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIiksZT1cIlwiO3JldHVybiBuJiZuLmdldEF0dHJpYnV0ZShcImhyZWZcIikmJihlPXN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikpLGUrXCIjXCIraChzK2NyZWF0ZVBhdGgodCkpO30scHVzaDpmdW5jdGlvbiBwdXNoKHQsbil7dmFyIG89Y3JlYXRlTG9jYXRpb24odCx2b2lkIDAsdm9pZCAwLEUubG9jYXRpb24pO2wuY29uZmlybVRyYW5zaXRpb25UbyhvLFwiUFVTSFwiLGksZnVuY3Rpb24odCl7aWYodCl7dmFyIG49Y3JlYXRlUGF0aChvKSxlPWgocytuKTtpZihnZXRIYXNoUGF0aCgpIT09ZSl7cD1uLHB1c2hIYXNoUGF0aChlKTt2YXIgYT15Lmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoRS5sb2NhdGlvbikpLHI9eS5zbGljZSgwLGErMSk7ci5wdXNoKG4pLHk9cixkKHthY3Rpb246XCJQVVNIXCIsbG9jYXRpb246b30pO31lbHNlIGQoKTt9fSk7fSxyZXBsYWNlOmZ1bmN0aW9uIHJlcGxhY2UodCxuKXt2YXIgcj1cIlJFUExBQ0VcIixvPWNyZWF0ZUxvY2F0aW9uKHQsdm9pZCAwLHZvaWQgMCxFLmxvY2F0aW9uKTtsLmNvbmZpcm1UcmFuc2l0aW9uVG8obyxyLGksZnVuY3Rpb24odCl7aWYodCl7dmFyIG49Y3JlYXRlUGF0aChvKSxlPWgocytuKTtnZXRIYXNoUGF0aCgpIT09ZSYmKHA9bixyZXBsYWNlSGFzaFBhdGgoZSkpO3ZhciBhPXkuaW5kZXhPZihjcmVhdGVQYXRoKEUubG9jYXRpb24pKTstMSE9PWEmJih5W2FdPW4pLGQoe2FjdGlvbjpyLGxvY2F0aW9uOm99KTt9fSk7fSxnbzpILGdvQmFjazpmdW5jdGlvbiBnb0JhY2soKXtIKC0xKTt9LGdvRm9yd2FyZDpmdW5jdGlvbiBnb0ZvcndhcmQoKXtIKDEpO30sYmxvY2s6ZnVuY3Rpb24gYmxvY2sodCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciBuPWwuc2V0UHJvbXB0KHQpO3JldHVybiBPfHwoTCgxKSxPPSEwKSxmdW5jdGlvbigpe3JldHVybiBPJiYoTz0hMSxMKC0xKSksbigpO307fSxsaXN0ZW46ZnVuY3Rpb24gbGlzdGVuKHQpe3ZhciBuPWwuYXBwZW5kTGlzdGVuZXIodCk7cmV0dXJuIEwoMSksZnVuY3Rpb24oKXtMKC0xKSxuKCk7fTt9fTtyZXR1cm4gRTt9ZnVuY3Rpb24gY2xhbXAodCxuLGUpe3JldHVybiBNYXRoLm1pbihNYXRoLm1heCh0LG4pLGUpO31mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHQpe3ZvaWQgMD09PXQmJih0PXt9KTt2YXIgbj10LHI9bi5nZXRVc2VyQ29uZmlybWF0aW9uLGU9bi5pbml0aWFsRW50cmllcyxhPXZvaWQgMD09PWU/W1wiL1wiXTplLG89bi5pbml0aWFsSW5kZXgsaT12b2lkIDA9PT1vPzA6byxzPW4ua2V5TGVuZ3RoLGM9dm9pZCAwPT09cz82OnMsaD1jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO2Z1bmN0aW9uIHUodCl7X2V4dGVuZHMoZyx0KSxnLmxlbmd0aD1nLmVudHJpZXMubGVuZ3RoLGgubm90aWZ5TGlzdGVuZXJzKGcubG9jYXRpb24sZy5hY3Rpb24pO31mdW5jdGlvbiBmKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLGMpO312YXIgbD1jbGFtcChpLDAsYS5sZW5ndGgtMSksZD1hLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gY3JlYXRlTG9jYXRpb24odCx2b2lkIDAsXCJzdHJpbmdcIj09dHlwZW9mIHQ/ZigpOnQua2V5fHxmKCkpO30pLHY9Y3JlYXRlUGF0aDtmdW5jdGlvbiBwKHQpe3ZhciBuPWNsYW1wKGcuaW5kZXgrdCwwLGcuZW50cmllcy5sZW5ndGgtMSksZT1nLmVudHJpZXNbbl07aC5jb25maXJtVHJhbnNpdGlvblRvKGUsXCJQT1BcIixyLGZ1bmN0aW9uKHQpe3Q/dSh7YWN0aW9uOlwiUE9QXCIsbG9jYXRpb246ZSxpbmRleDpufSk6dSgpO30pO312YXIgZz17bGVuZ3RoOmQubGVuZ3RoLGFjdGlvbjpcIlBPUFwiLGxvY2F0aW9uOmRbbF0saW5kZXg6bCxlbnRyaWVzOmQsY3JlYXRlSHJlZjp2LHB1c2g6ZnVuY3Rpb24gcHVzaCh0LG4pe3ZhciBhPWNyZWF0ZUxvY2F0aW9uKHQsbixmKCksZy5sb2NhdGlvbik7aC5jb25maXJtVHJhbnNpdGlvblRvKGEsXCJQVVNIXCIscixmdW5jdGlvbih0KXtpZih0KXt2YXIgbj1nLmluZGV4KzEsZT1nLmVudHJpZXMuc2xpY2UoMCk7ZS5sZW5ndGg+bj9lLnNwbGljZShuLGUubGVuZ3RoLW4sYSk6ZS5wdXNoKGEpLHUoe2FjdGlvbjpcIlBVU0hcIixsb2NhdGlvbjphLGluZGV4Om4sZW50cmllczplfSk7fX0pO30scmVwbGFjZTpmdW5jdGlvbiByZXBsYWNlKHQsbil7dmFyIGU9XCJSRVBMQUNFXCIsYT1jcmVhdGVMb2NhdGlvbih0LG4sZigpLGcubG9jYXRpb24pO2guY29uZmlybVRyYW5zaXRpb25UbyhhLGUscixmdW5jdGlvbih0KXt0JiYoZy5lbnRyaWVzW2cuaW5kZXhdPWEsdSh7YWN0aW9uOmUsbG9jYXRpb246YX0pKTt9KTt9LGdvOnAsZ29CYWNrOmZ1bmN0aW9uIGdvQmFjaygpe3AoLTEpO30sZ29Gb3J3YXJkOmZ1bmN0aW9uIGdvRm9yd2FyZCgpe3AoMSk7fSxjYW5HbzpmdW5jdGlvbiBjYW5Hbyh0KXt2YXIgbj1nLmluZGV4K3Q7cmV0dXJuIDA8PW4mJm48Zy5lbnRyaWVzLmxlbmd0aDt9LGJsb2NrOmZ1bmN0aW9uIGJsb2NrKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksaC5zZXRQcm9tcHQodCk7fSxsaXN0ZW46ZnVuY3Rpb24gbGlzdGVuKHQpe3JldHVybiBoLmFwcGVuZExpc3RlbmVyKHQpO319O3JldHVybiBnO31leHBvcnRzLmNyZWF0ZUJyb3dzZXJIaXN0b3J5PWNyZWF0ZUJyb3dzZXJIaXN0b3J5LGV4cG9ydHMuY3JlYXRlSGFzaEhpc3Rvcnk9Y3JlYXRlSGFzaEhpc3RvcnksZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5PWNyZWF0ZU1lbW9yeUhpc3RvcnksZXhwb3J0cy5jcmVhdGVMb2NhdGlvbj1jcmVhdGVMb2NhdGlvbixleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsPWxvY2F0aW9uc0FyZUVxdWFsLGV4cG9ydHMucGFyc2VQYXRoPXBhcnNlUGF0aCxleHBvcnRzLmNyZWF0ZVBhdGg9Y3JlYXRlUGF0aDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaGlzdG9yeS9janMvaGlzdG9yeS5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztpZihwcm9jZXNzLmVudi5OT0RFX0VOVj09PSdwcm9kdWN0aW9uJyl7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZSgnLi9janMvcmVzb2x2ZS1wYXRobmFtZS5taW4uanMnKTt9ZWxzZXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCcuL2Nqcy9yZXNvbHZlLXBhdGhuYW1lLmpzJyk7fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpc0Fic29sdXRlKGUpe3JldHVyblwiL1wiPT09ZS5jaGFyQXQoMCk7fWZ1bmN0aW9uIHNwbGljZU9uZShlLHQpe2Zvcih2YXIgcz10LG49cysxLGk9ZS5sZW5ndGg7bjxpO3MrPTEsbis9MSl7ZVtzXT1lW25dO31lLnBvcCgpO31mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUoZSx0KXt2b2lkIDA9PT10JiYodD1cIlwiKTt2YXIgcyxuPWUmJmUuc3BsaXQoXCIvXCIpfHxbXSxpPXQmJnQuc3BsaXQoXCIvXCIpfHxbXSxsPWUmJmlzQWJzb2x1dGUoZSkscj10JiZpc0Fic29sdXRlKHQpLG89bHx8cjtpZihlJiZpc0Fic29sdXRlKGUpP2k9bjpuLmxlbmd0aCYmKGkucG9wKCksaT1pLmNvbmNhdChuKSksIWkubGVuZ3RoKXJldHVyblwiL1wiO2lmKGkubGVuZ3RoKXt2YXIgdT1pW2kubGVuZ3RoLTFdO3M9XCIuXCI9PT11fHxcIi4uXCI9PT11fHxcIlwiPT09dTt9ZWxzZSBzPSExO2Zvcih2YXIgYT0wLGM9aS5sZW5ndGg7MDw9YztjLS0pe3ZhciBmPWlbY107XCIuXCI9PT1mP3NwbGljZU9uZShpLGMpOlwiLi5cIj09PWY/KHNwbGljZU9uZShpLGMpLGErKyk6YSYmKHNwbGljZU9uZShpLGMpLGEtLSk7fWlmKCFvKWZvcig7YS0tO2Epe2kudW5zaGlmdChcIi4uXCIpO30hb3x8XCJcIj09PWlbMF18fGlbMF0mJmlzQWJzb2x1dGUoaVswXSl8fGkudW5zaGlmdChcIlwiKTt2YXIgaD1pLmpvaW4oXCIvXCIpO3JldHVybiBzJiZcIi9cIiE9PWguc3Vic3RyKC0xKSYmKGgrPVwiL1wiKSxoO31tb2R1bGUuZXhwb3J0cz1yZXNvbHZlUGF0aG5hbWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Jlc29sdmUtcGF0aG5hbWUvY2pzL3Jlc29sdmUtcGF0aG5hbWUubWluLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7ZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSl7cmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKT09PScvJzt9Ly8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCxpbmRleCl7Zm9yKHZhciBpPWluZGV4LGs9aSsxLG49bGlzdC5sZW5ndGg7azxuO2krPTEsays9MSl7bGlzdFtpXT1saXN0W2tdO31saXN0LnBvcCgpO30vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLGZyb20pe2lmKGZyb209PT11bmRlZmluZWQpZnJvbT0nJzt2YXIgdG9QYXJ0cz10byYmdG8uc3BsaXQoJy8nKXx8W107dmFyIGZyb21QYXJ0cz1mcm9tJiZmcm9tLnNwbGl0KCcvJyl8fFtdO3ZhciBpc1RvQWJzPXRvJiZpc0Fic29sdXRlKHRvKTt2YXIgaXNGcm9tQWJzPWZyb20mJmlzQWJzb2x1dGUoZnJvbSk7dmFyIG11c3RFbmRBYnM9aXNUb0Fic3x8aXNGcm9tQWJzO2lmKHRvJiZpc0Fic29sdXRlKHRvKSl7Ly8gdG8gaXMgYWJzb2x1dGVcbmZyb21QYXJ0cz10b1BhcnRzO31lbHNlIGlmKHRvUGFydHMubGVuZ3RoKXsvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbmZyb21QYXJ0cy5wb3AoKTtmcm9tUGFydHM9ZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTt9aWYoIWZyb21QYXJ0cy5sZW5ndGgpcmV0dXJuJy8nO3ZhciBoYXNUcmFpbGluZ1NsYXNoO2lmKGZyb21QYXJ0cy5sZW5ndGgpe3ZhciBsYXN0PWZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoLTFdO2hhc1RyYWlsaW5nU2xhc2g9bGFzdD09PScuJ3x8bGFzdD09PScuLid8fGxhc3Q9PT0nJzt9ZWxzZXtoYXNUcmFpbGluZ1NsYXNoPWZhbHNlO312YXIgdXA9MDtmb3IodmFyIGk9ZnJvbVBhcnRzLmxlbmd0aDtpPj0wO2ktLSl7dmFyIHBhcnQ9ZnJvbVBhcnRzW2ldO2lmKHBhcnQ9PT0nLicpe3NwbGljZU9uZShmcm9tUGFydHMsaSk7fWVsc2UgaWYocGFydD09PScuLicpe3NwbGljZU9uZShmcm9tUGFydHMsaSk7dXArKzt9ZWxzZSBpZih1cCl7c3BsaWNlT25lKGZyb21QYXJ0cyxpKTt1cC0tO319aWYoIW11c3RFbmRBYnMpZm9yKDt1cC0tO3VwKXtmcm9tUGFydHMudW5zaGlmdCgnLi4nKTt9aWYobXVzdEVuZEFicyYmZnJvbVBhcnRzWzBdIT09JycmJighZnJvbVBhcnRzWzBdfHwhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSlmcm9tUGFydHMudW5zaGlmdCgnJyk7dmFyIHJlc3VsdD1mcm9tUGFydHMuam9pbignLycpO2lmKGhhc1RyYWlsaW5nU2xhc2gmJnJlc3VsdC5zdWJzdHIoLTEpIT09Jy8nKXJlc3VsdCs9Jy8nO3JldHVybiByZXN1bHQ7fW1vZHVsZS5leHBvcnRzPXJlc29sdmVQYXRobmFtZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVzb2x2ZS1wYXRobmFtZS9janMvcmVzb2x2ZS1wYXRobmFtZS5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Byb2R1Y3Rpb24nKXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCcuL2Nqcy92YWx1ZS1lcXVhbC5taW4uanMnKTt9ZWxzZXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCcuL2Nqcy92YWx1ZS1lcXVhbC5qcycpO31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdmFsdWUtZXF1YWwvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtmdW5jdGlvbiB2YWx1ZU9mKGUpe3JldHVybiBlLnZhbHVlT2Y/ZS52YWx1ZU9mKCk6T2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoZSk7fWZ1bmN0aW9uIHZhbHVlRXF1YWwodSxyKXtpZih1PT09cilyZXR1cm4hMDtpZihudWxsPT11fHxudWxsPT1yKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkodSkpcmV0dXJuIEFycmF5LmlzQXJyYXkocikmJnUubGVuZ3RoPT09ci5sZW5ndGgmJnUuZXZlcnkoZnVuY3Rpb24oZSx1KXtyZXR1cm4gdmFsdWVFcXVhbChlLHJbdV0pO30pO2lmKFwib2JqZWN0XCIhPSh0eXBlb2YgdT09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHUpKSYmXCJvYmplY3RcIiE9KHR5cGVvZiByPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YocikpKXJldHVybiExO3ZhciBlPXZhbHVlT2YodSksdD12YWx1ZU9mKHIpO3JldHVybiBlIT09dXx8dCE9PXI/dmFsdWVFcXVhbChlLHQpOk9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sdSxyKSkuZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuIHZhbHVlRXF1YWwodVtlXSxyW2VdKTt9KTt9bW9kdWxlLmV4cG9ydHM9dmFsdWVFcXVhbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdmFsdWUtZXF1YWwvY2pzL3ZhbHVlLWVxdWFsLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtmdW5jdGlvbiB2YWx1ZU9mKG9iail7cmV0dXJuIG9iai52YWx1ZU9mP29iai52YWx1ZU9mKCk6T2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTt9ZnVuY3Rpb24gdmFsdWVFcXVhbChhLGIpey8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbmlmKGE9PT1iKXJldHVybiB0cnVlOy8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG5pZihhPT1udWxsfHxiPT1udWxsKXJldHVybiBmYWxzZTtpZihBcnJheS5pc0FycmF5KGEpKXtyZXR1cm4gQXJyYXkuaXNBcnJheShiKSYmYS5sZW5ndGg9PT1iLmxlbmd0aCYmYS5ldmVyeShmdW5jdGlvbihpdGVtLGluZGV4KXtyZXR1cm4gdmFsdWVFcXVhbChpdGVtLGJbaW5kZXhdKTt9KTt9aWYoKHR5cGVvZiBhPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihhKSk9PT0nb2JqZWN0J3x8KHR5cGVvZiBiPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihiKSk9PT0nb2JqZWN0Jyl7dmFyIGFWYWx1ZT12YWx1ZU9mKGEpO3ZhciBiVmFsdWU9dmFsdWVPZihiKTtpZihhVmFsdWUhPT1hfHxiVmFsdWUhPT1iKXJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSxiVmFsdWUpO3JldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LGEsYikpLmV2ZXJ5KGZ1bmN0aW9uKGtleSl7cmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLGJba2V5XSk7fSk7fXJldHVybiBmYWxzZTt9bW9kdWxlLmV4cG9ydHM9dmFsdWVFcXVhbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdmFsdWUtZXF1YWwvY2pzL3ZhbHVlLWVxdWFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIGlzUHJvZHVjdGlvbj1wcm9jZXNzLmVudi5OT0RFX0VOVj09PSdwcm9kdWN0aW9uJztmdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbixtZXNzYWdlKXtpZighaXNQcm9kdWN0aW9uKXtpZihjb25kaXRpb24pe3JldHVybjt9dmFyIHRleHQ9XCJXYXJuaW5nOiBcIittZXNzYWdlO2lmKHR5cGVvZiBjb25zb2xlIT09J3VuZGVmaW5lZCcpe2NvbnNvbGUud2Fybih0ZXh0KTt9dHJ5e3Rocm93IEVycm9yKHRleHQpO31jYXRjaCh4KXt9fX1tb2R1bGUuZXhwb3J0cz13YXJuaW5nO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aW55LXdhcm5pbmcvZGlzdC90aW55LXdhcm5pbmcuY2pzLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgaXNQcm9kdWN0aW9uPXByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Byb2R1Y3Rpb24nO3ZhciBwcmVmaXg9J0ludmFyaWFudCBmYWlsZWQnO2Z1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sbWVzc2FnZSl7aWYoY29uZGl0aW9uKXtyZXR1cm47fWlmKGlzUHJvZHVjdGlvbil7dGhyb3cgbmV3IEVycm9yKHByZWZpeCk7fXRocm93IG5ldyBFcnJvcihwcmVmaXgrXCI6IFwiKyhtZXNzYWdlfHwnJykpO31leHBvcnRzLmRlZmF1bHQ9aW52YXJpYW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmNqcy5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywnX19lc01vZHVsZScse3ZhbHVlOnRydWV9KTtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZXgpe3JldHVybiBleCYmKHR5cGVvZiBleD09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YoZXgpKT09PSdvYmplY3QnJiYnZGVmYXVsdCdpbiBleD9leFsnZGVmYXVsdCddOmV4O312YXIgcmVzb2x2ZVBhdGhuYW1lPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJykpO3ZhciB2YWx1ZUVxdWFsPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd2YWx1ZS1lcXVhbCcpKTt2YXIgd2FybmluZz1faW50ZXJvcERlZmF1bHQocmVxdWlyZSgndGlueS13YXJuaW5nJykpO3ZhciBpbnZhcmlhbnQ9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3RpbnktaW52YXJpYW50JykpO2Z1bmN0aW9uIF9leHRlbmRzKCl7X2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3JldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT0nLyc/cGF0aDonLycrcGF0aDt9ZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCl7cmV0dXJuIHBhdGguY2hhckF0KDApPT09Jy8nP3BhdGguc3Vic3RyKDEpOnBhdGg7fWZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgscHJlZml4KXtyZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpPT09MCYmJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkhPT0tMTt9ZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLHByZWZpeCl7cmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgscHJlZml4KT9wYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKTpwYXRoO31mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCl7cmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoLTEpPT09Jy8nP3BhdGguc2xpY2UoMCwtMSk6cGF0aDt9ZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpe3ZhciBwYXRobmFtZT1wYXRofHwnLyc7dmFyIHNlYXJjaD0nJzt2YXIgaGFzaD0nJzt2YXIgaGFzaEluZGV4PXBhdGhuYW1lLmluZGV4T2YoJyMnKTtpZihoYXNoSW5kZXghPT0tMSl7aGFzaD1wYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtwYXRobmFtZT1wYXRobmFtZS5zdWJzdHIoMCxoYXNoSW5kZXgpO312YXIgc2VhcmNoSW5kZXg9cGF0aG5hbWUuaW5kZXhPZignPycpO2lmKHNlYXJjaEluZGV4IT09LTEpe3NlYXJjaD1wYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO3BhdGhuYW1lPXBhdGhuYW1lLnN1YnN0cigwLHNlYXJjaEluZGV4KTt9cmV0dXJue3BhdGhuYW1lOnBhdGhuYW1lLHNlYXJjaDpzZWFyY2g9PT0nPyc/Jyc6c2VhcmNoLGhhc2g6aGFzaD09PScjJz8nJzpoYXNofTt9ZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbil7dmFyIHBhdGhuYW1lPWxvY2F0aW9uLnBhdGhuYW1lLHNlYXJjaD1sb2NhdGlvbi5zZWFyY2gsaGFzaD1sb2NhdGlvbi5oYXNoO3ZhciBwYXRoPXBhdGhuYW1lfHwnLyc7aWYoc2VhcmNoJiZzZWFyY2ghPT0nPycpcGF0aCs9c2VhcmNoLmNoYXJBdCgwKT09PSc/Jz9zZWFyY2g6XCI/XCIrc2VhcmNoO2lmKGhhc2gmJmhhc2ghPT0nIycpcGF0aCs9aGFzaC5jaGFyQXQoMCk9PT0nIyc/aGFzaDpcIiNcIitoYXNoO3JldHVybiBwYXRoO31mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLHN0YXRlLGtleSxjdXJyZW50TG9jYXRpb24pe3ZhciBsb2NhdGlvbjtpZih0eXBlb2YgcGF0aD09PSdzdHJpbmcnKXsvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG5sb2NhdGlvbj1wYXJzZVBhdGgocGF0aCk7bG9jYXRpb24uc3RhdGU9c3RhdGU7fWVsc2V7Ly8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxubG9jYXRpb249X2V4dGVuZHMoe30scGF0aCk7aWYobG9jYXRpb24ucGF0aG5hbWU9PT11bmRlZmluZWQpbG9jYXRpb24ucGF0aG5hbWU9Jyc7aWYobG9jYXRpb24uc2VhcmNoKXtpZihsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApIT09Jz8nKWxvY2F0aW9uLnNlYXJjaD0nPycrbG9jYXRpb24uc2VhcmNoO31lbHNle2xvY2F0aW9uLnNlYXJjaD0nJzt9aWYobG9jYXRpb24uaGFzaCl7aWYobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkhPT0nIycpbG9jYXRpb24uaGFzaD0nIycrbG9jYXRpb24uaGFzaDt9ZWxzZXtsb2NhdGlvbi5oYXNoPScnO31pZihzdGF0ZSE9PXVuZGVmaW5lZCYmbG9jYXRpb24uc3RhdGU9PT11bmRlZmluZWQpbG9jYXRpb24uc3RhdGU9c3RhdGU7fXRyeXtsb2NhdGlvbi5wYXRobmFtZT1kZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO31jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgVVJJRXJyb3Ipe3Rocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInK2xvY2F0aW9uLnBhdGhuYW1lKydcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJysnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTt9ZWxzZXt0aHJvdyBlO319aWYoa2V5KWxvY2F0aW9uLmtleT1rZXk7aWYoY3VycmVudExvY2F0aW9uKXsvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbmlmKCFsb2NhdGlvbi5wYXRobmFtZSl7bG9jYXRpb24ucGF0aG5hbWU9Y3VycmVudExvY2F0aW9uLnBhdGhuYW1lO31lbHNlIGlmKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSE9PScvJyl7bG9jYXRpb24ucGF0aG5hbWU9cmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7fX1lbHNley8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuaWYoIWxvY2F0aW9uLnBhdGhuYW1lKXtsb2NhdGlvbi5wYXRobmFtZT0nLyc7fX1yZXR1cm4gbG9jYXRpb247fWZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsYil7cmV0dXJuIGEucGF0aG5hbWU9PT1iLnBhdGhuYW1lJiZhLnNlYXJjaD09PWIuc2VhcmNoJiZhLmhhc2g9PT1iLmhhc2gmJmEua2V5PT09Yi5rZXkmJnZhbHVlRXF1YWwoYS5zdGF0ZSxiLnN0YXRlKTt9ZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKXt2YXIgcHJvbXB0PW51bGw7ZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpe3dhcm5pbmcocHJvbXB0PT1udWxsLCdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO3Byb21wdD1uZXh0UHJvbXB0O3JldHVybiBmdW5jdGlvbigpe2lmKHByb21wdD09PW5leHRQcm9tcHQpcHJvbXB0PW51bGw7fTt9ZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbixhY3Rpb24sZ2V0VXNlckNvbmZpcm1hdGlvbixjYWxsYmFjayl7Ly8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4vLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4vLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbmlmKHByb21wdCE9bnVsbCl7dmFyIHJlc3VsdD10eXBlb2YgcHJvbXB0PT09J2Z1bmN0aW9uJz9wcm9tcHQobG9jYXRpb24sYWN0aW9uKTpwcm9tcHQ7aWYodHlwZW9mIHJlc3VsdD09PSdzdHJpbmcnKXtpZih0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbj09PSdmdW5jdGlvbicpe2dldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LGNhbGxiYWNrKTt9ZWxzZXt3YXJuaW5nKGZhbHNlLCdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7Y2FsbGJhY2sodHJ1ZSk7fX1lbHNley8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbmNhbGxiYWNrKHJlc3VsdCE9PWZhbHNlKTt9fWVsc2V7Y2FsbGJhY2sodHJ1ZSk7fX12YXIgbGlzdGVuZXJzPVtdO2Z1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKXt2YXIgaXNBY3RpdmU9dHJ1ZTtmdW5jdGlvbiBsaXN0ZW5lcigpe2lmKGlzQWN0aXZlKWZuLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpO31saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7cmV0dXJuIGZ1bmN0aW9uKCl7aXNBY3RpdmU9ZmFsc2U7bGlzdGVuZXJzPWxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7cmV0dXJuIGl0ZW0hPT1saXN0ZW5lcjt9KTt9O31mdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKXtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPW5ldyBBcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fWxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKXtyZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLGFyZ3MpO30pO31yZXR1cm57c2V0UHJvbXB0OnNldFByb21wdCxjb25maXJtVHJhbnNpdGlvblRvOmNvbmZpcm1UcmFuc2l0aW9uVG8sYXBwZW5kTGlzdGVuZXI6YXBwZW5kTGlzdGVuZXIsbm90aWZ5TGlzdGVuZXJzOm5vdGlmeUxpc3RlbmVyc307fXZhciBjYW5Vc2VET009ISEodHlwZW9mIHdpbmRvdyE9PSd1bmRlZmluZWQnJiZ3aW5kb3cuZG9jdW1lbnQmJndpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSxjYWxsYmFjayl7Y2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn0vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCl7dmFyIHVhPXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O2lmKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykhPT0tMXx8dWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSE9PS0xKSYmdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpIT09LTEmJnVhLmluZGV4T2YoJ0Nocm9tZScpPT09LTEmJnVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKT09PS0xKXJldHVybiBmYWxzZTtyZXR1cm4gd2luZG93Lmhpc3RvcnkmJidwdXNoU3RhdGUnaW4gd2luZG93Lmhpc3Rvcnk7fS8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL2Z1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKXtyZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpPT09LTE7fS8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKXtyZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpPT09LTE7fS8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL2Z1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpe3JldHVybiBldmVudC5zdGF0ZT09PXVuZGVmaW5lZCYmbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpPT09LTE7fXZhciBQb3BTdGF0ZUV2ZW50PSdwb3BzdGF0ZSc7dmFyIEhhc2hDaGFuZ2VFdmVudD0naGFzaGNoYW5nZSc7ZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCl7dHJ5e3JldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZXx8e307fWNhdGNoKGUpey8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG5yZXR1cm57fTt9fS8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL2Z1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKXtpZihwcm9wcz09PXZvaWQgMCl7cHJvcHM9e307fSFjYW5Vc2VET00/aW52YXJpYW50KGZhbHNlLCdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTp2b2lkIDA7dmFyIGdsb2JhbEhpc3Rvcnk9d2luZG93Lmhpc3Rvcnk7dmFyIGNhblVzZUhpc3Rvcnk9c3VwcG9ydHNIaXN0b3J5KCk7dmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyPSFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7dmFyIF9wcm9wcz1wcm9wcyxfcHJvcHMkZm9yY2VSZWZyZXNoPV9wcm9wcy5mb3JjZVJlZnJlc2gsZm9yY2VSZWZyZXNoPV9wcm9wcyRmb3JjZVJlZnJlc2g9PT12b2lkIDA/ZmFsc2U6X3Byb3BzJGZvcmNlUmVmcmVzaCxfcHJvcHMkZ2V0VXNlckNvbmZpcm09X3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sZ2V0VXNlckNvbmZpcm1hdGlvbj1fcHJvcHMkZ2V0VXNlckNvbmZpcm09PT12b2lkIDA/Z2V0Q29uZmlybWF0aW9uOl9wcm9wcyRnZXRVc2VyQ29uZmlybSxfcHJvcHMka2V5TGVuZ3RoPV9wcm9wcy5rZXlMZW5ndGgsa2V5TGVuZ3RoPV9wcm9wcyRrZXlMZW5ndGg9PT12b2lkIDA/NjpfcHJvcHMka2V5TGVuZ3RoO3ZhciBiYXNlbmFtZT1wcm9wcy5iYXNlbmFtZT9zdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSk6Jyc7ZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKXt2YXIgX3JlZj1oaXN0b3J5U3RhdGV8fHt9LGtleT1fcmVmLmtleSxzdGF0ZT1fcmVmLnN0YXRlO3ZhciBfd2luZG93JGxvY2F0aW9uPXdpbmRvdy5sb2NhdGlvbixwYXRobmFtZT1fd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLHNlYXJjaD1fd2luZG93JGxvY2F0aW9uLnNlYXJjaCxoYXNoPV93aW5kb3ckbG9jYXRpb24uaGFzaDt2YXIgcGF0aD1wYXRobmFtZStzZWFyY2graGFzaDt3YXJuaW5nKCFiYXNlbmFtZXx8aGFzQmFzZW5hbWUocGF0aCxiYXNlbmFtZSksJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJysnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInK3BhdGgrJ1wiIHRvIGJlZ2luIHdpdGggXCInK2Jhc2VuYW1lKydcIi4nKTtpZihiYXNlbmFtZSlwYXRoPXN0cmlwQmFzZW5hbWUocGF0aCxiYXNlbmFtZSk7cmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsc3RhdGUsa2V5KTt9ZnVuY3Rpb24gY3JlYXRlS2V5KCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLGtleUxlbmd0aCk7fXZhciB0cmFuc2l0aW9uTWFuYWdlcj1jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO2Z1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSl7X2V4dGVuZHMoaGlzdG9yeSxuZXh0U3RhdGUpO2hpc3RvcnkubGVuZ3RoPWdsb2JhbEhpc3RvcnkubGVuZ3RoO3RyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLGhpc3RvcnkuYWN0aW9uKTt9ZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpey8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG5pZihpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSlyZXR1cm47aGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7fWZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKXtoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTt9dmFyIGZvcmNlTmV4dFBvcD1mYWxzZTtmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pe2lmKGZvcmNlTmV4dFBvcCl7Zm9yY2VOZXh0UG9wPWZhbHNlO3NldFN0YXRlKCk7fWVsc2V7dmFyIGFjdGlvbj0nUE9QJzt0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLGFjdGlvbixnZXRVc2VyQ29uZmlybWF0aW9uLGZ1bmN0aW9uKG9rKXtpZihvayl7c2V0U3RhdGUoe2FjdGlvbjphY3Rpb24sbG9jYXRpb246bG9jYXRpb259KTt9ZWxzZXtyZXZlcnRQb3AobG9jYXRpb24pO319KTt9fWZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pe3ZhciB0b0xvY2F0aW9uPWhpc3RvcnkubG9jYXRpb247Ly8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbi8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbi8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG52YXIgdG9JbmRleD1hbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO2lmKHRvSW5kZXg9PT0tMSl0b0luZGV4PTA7dmFyIGZyb21JbmRleD1hbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7aWYoZnJvbUluZGV4PT09LTEpZnJvbUluZGV4PTA7dmFyIGRlbHRhPXRvSW5kZXgtZnJvbUluZGV4O2lmKGRlbHRhKXtmb3JjZU5leHRQb3A9dHJ1ZTtnbyhkZWx0YSk7fX12YXIgaW5pdGlhbExvY2F0aW9uPWdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTt2YXIgYWxsS2V5cz1baW5pdGlhbExvY2F0aW9uLmtleV07Ly8gUHVibGljIGludGVyZmFjZVxuZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbil7cmV0dXJuIGJhc2VuYW1lK2NyZWF0ZVBhdGgobG9jYXRpb24pO31mdW5jdGlvbiBwdXNoKHBhdGgsc3RhdGUpe3dhcm5pbmcoISgodHlwZW9mIHBhdGg9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHBhdGgpKT09PSdvYmplY3QnJiZwYXRoLnN0YXRlIT09dW5kZWZpbmVkJiZzdGF0ZSE9PXVuZGVmaW5lZCksJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcrJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO3ZhciBhY3Rpb249J1BVU0gnO3ZhciBsb2NhdGlvbj1jcmVhdGVMb2NhdGlvbihwYXRoLHN0YXRlLGNyZWF0ZUtleSgpLGhpc3RvcnkubG9jYXRpb24pO3RyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sYWN0aW9uLGdldFVzZXJDb25maXJtYXRpb24sZnVuY3Rpb24ob2spe2lmKCFvaylyZXR1cm47dmFyIGhyZWY9Y3JlYXRlSHJlZihsb2NhdGlvbik7dmFyIGtleT1sb2NhdGlvbi5rZXksc3RhdGU9bG9jYXRpb24uc3RhdGU7aWYoY2FuVXNlSGlzdG9yeSl7Z2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe2tleTprZXksc3RhdGU6c3RhdGV9LG51bGwsaHJlZik7aWYoZm9yY2VSZWZyZXNoKXt3aW5kb3cubG9jYXRpb24uaHJlZj1ocmVmO31lbHNle3ZhciBwcmV2SW5kZXg9YWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTt2YXIgbmV4dEtleXM9YWxsS2V5cy5zbGljZSgwLHByZXZJbmRleCsxKTtuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7YWxsS2V5cz1uZXh0S2V5cztzZXRTdGF0ZSh7YWN0aW9uOmFjdGlvbixsb2NhdGlvbjpsb2NhdGlvbn0pO319ZWxzZXt3YXJuaW5nKHN0YXRlPT09dW5kZWZpbmVkLCdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7d2luZG93LmxvY2F0aW9uLmhyZWY9aHJlZjt9fSk7fWZ1bmN0aW9uIHJlcGxhY2UocGF0aCxzdGF0ZSl7d2FybmluZyghKCh0eXBlb2YgcGF0aD09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YocGF0aCkpPT09J29iamVjdCcmJnBhdGguc3RhdGUhPT11bmRlZmluZWQmJnN0YXRlIT09dW5kZWZpbmVkKSwnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJysnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7dmFyIGFjdGlvbj0nUkVQTEFDRSc7dmFyIGxvY2F0aW9uPWNyZWF0ZUxvY2F0aW9uKHBhdGgsc3RhdGUsY3JlYXRlS2V5KCksaGlzdG9yeS5sb2NhdGlvbik7dHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbixhY3Rpb24sZ2V0VXNlckNvbmZpcm1hdGlvbixmdW5jdGlvbihvayl7aWYoIW9rKXJldHVybjt2YXIgaHJlZj1jcmVhdGVIcmVmKGxvY2F0aW9uKTt2YXIga2V5PWxvY2F0aW9uLmtleSxzdGF0ZT1sb2NhdGlvbi5zdGF0ZTtpZihjYW5Vc2VIaXN0b3J5KXtnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7a2V5OmtleSxzdGF0ZTpzdGF0ZX0sbnVsbCxocmVmKTtpZihmb3JjZVJlZnJlc2gpe3dpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO31lbHNle3ZhciBwcmV2SW5kZXg9YWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtpZihwcmV2SW5kZXghPT0tMSlhbGxLZXlzW3ByZXZJbmRleF09bG9jYXRpb24ua2V5O3NldFN0YXRlKHthY3Rpb246YWN0aW9uLGxvY2F0aW9uOmxvY2F0aW9ufSk7fX1lbHNle3dhcm5pbmcoc3RhdGU9PT11bmRlZmluZWQsJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTt3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTt9fSk7fWZ1bmN0aW9uIGdvKG4pe2dsb2JhbEhpc3RvcnkuZ28obik7fWZ1bmN0aW9uIGdvQmFjaygpe2dvKC0xKTt9ZnVuY3Rpb24gZ29Gb3J3YXJkKCl7Z28oMSk7fXZhciBsaXN0ZW5lckNvdW50PTA7ZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpe2xpc3RlbmVyQ291bnQrPWRlbHRhO2lmKGxpc3RlbmVyQ291bnQ9PT0xJiZkZWx0YT09PTEpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsaGFuZGxlUG9wU3RhdGUpO2lmKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCxoYW5kbGVIYXNoQ2hhbmdlKTt9ZWxzZSBpZihsaXN0ZW5lckNvdW50PT09MCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCxoYW5kbGVQb3BTdGF0ZSk7aWYobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LGhhbmRsZUhhc2hDaGFuZ2UpO319dmFyIGlzQmxvY2tlZD1mYWxzZTtmdW5jdGlvbiBibG9jayhwcm9tcHQpe2lmKHByb21wdD09PXZvaWQgMCl7cHJvbXB0PWZhbHNlO312YXIgdW5ibG9jaz10cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtpZighaXNCbG9ja2VkKXtjaGVja0RPTUxpc3RlbmVycygxKTtpc0Jsb2NrZWQ9dHJ1ZTt9cmV0dXJuIGZ1bmN0aW9uKCl7aWYoaXNCbG9ja2VkKXtpc0Jsb2NrZWQ9ZmFsc2U7Y2hlY2tET01MaXN0ZW5lcnMoLTEpO31yZXR1cm4gdW5ibG9jaygpO307fWZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcil7dmFyIHVubGlzdGVuPXRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtjaGVja0RPTUxpc3RlbmVycygxKTtyZXR1cm4gZnVuY3Rpb24oKXtjaGVja0RPTUxpc3RlbmVycygtMSk7dW5saXN0ZW4oKTt9O312YXIgaGlzdG9yeT17bGVuZ3RoOmdsb2JhbEhpc3RvcnkubGVuZ3RoLGFjdGlvbjonUE9QJyxsb2NhdGlvbjppbml0aWFsTG9jYXRpb24sY3JlYXRlSHJlZjpjcmVhdGVIcmVmLHB1c2g6cHVzaCxyZXBsYWNlOnJlcGxhY2UsZ286Z28sZ29CYWNrOmdvQmFjayxnb0ZvcndhcmQ6Z29Gb3J3YXJkLGJsb2NrOmJsb2NrLGxpc3RlbjpsaXN0ZW59O3JldHVybiBoaXN0b3J5O312YXIgSGFzaENoYW5nZUV2ZW50JDE9J2hhc2hjaGFuZ2UnO3ZhciBIYXNoUGF0aENvZGVycz17aGFzaGJhbmc6e2VuY29kZVBhdGg6ZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT0nISc/cGF0aDonIS8nK3N0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO30sZGVjb2RlUGF0aDpmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpe3JldHVybiBwYXRoLmNoYXJBdCgwKT09PSchJz9wYXRoLnN1YnN0cigxKTpwYXRoO319LG5vc2xhc2g6e2VuY29kZVBhdGg6c3RyaXBMZWFkaW5nU2xhc2gsZGVjb2RlUGF0aDphZGRMZWFkaW5nU2xhc2h9LHNsYXNoOntlbmNvZGVQYXRoOmFkZExlYWRpbmdTbGFzaCxkZWNvZGVQYXRoOmFkZExlYWRpbmdTbGFzaH19O2Z1bmN0aW9uIHN0cmlwSGFzaCh1cmwpe3ZhciBoYXNoSW5kZXg9dXJsLmluZGV4T2YoJyMnKTtyZXR1cm4gaGFzaEluZGV4PT09LTE/dXJsOnVybC5zbGljZSgwLGhhc2hJbmRleCk7fWZ1bmN0aW9uIGdldEhhc2hQYXRoKCl7Ly8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbnZhciBocmVmPXdpbmRvdy5sb2NhdGlvbi5ocmVmO3ZhciBoYXNoSW5kZXg9aHJlZi5pbmRleE9mKCcjJyk7cmV0dXJuIGhhc2hJbmRleD09PS0xPycnOmhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCsxKTt9ZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpe3dpbmRvdy5sb2NhdGlvbi5oYXNoPXBhdGg7fWZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKXt3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpKycjJytwYXRoKTt9ZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpe2lmKHByb3BzPT09dm9pZCAwKXtwcm9wcz17fTt9IWNhblVzZURPTT9pbnZhcmlhbnQoZmFsc2UsJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpOnZvaWQgMDt2YXIgZ2xvYmFsSGlzdG9yeT13aW5kb3cuaGlzdG9yeTt2YXIgY2FuR29XaXRob3V0UmVsb2FkPXN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7dmFyIF9wcm9wcz1wcm9wcyxfcHJvcHMkZ2V0VXNlckNvbmZpcm09X3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sZ2V0VXNlckNvbmZpcm1hdGlvbj1fcHJvcHMkZ2V0VXNlckNvbmZpcm09PT12b2lkIDA/Z2V0Q29uZmlybWF0aW9uOl9wcm9wcyRnZXRVc2VyQ29uZmlybSxfcHJvcHMkaGFzaFR5cGU9X3Byb3BzLmhhc2hUeXBlLGhhc2hUeXBlPV9wcm9wcyRoYXNoVHlwZT09PXZvaWQgMD8nc2xhc2gnOl9wcm9wcyRoYXNoVHlwZTt2YXIgYmFzZW5hbWU9cHJvcHMuYmFzZW5hbWU/c3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpOicnO3ZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQ9SGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLGVuY29kZVBhdGg9X0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsZGVjb2RlUGF0aD1fSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpe3ZhciBwYXRoPWRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7d2FybmluZyghYmFzZW5hbWV8fGhhc0Jhc2VuYW1lKHBhdGgsYmFzZW5hbWUpLCdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcrJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJytwYXRoKydcIiB0byBiZWdpbiB3aXRoIFwiJytiYXNlbmFtZSsnXCIuJyk7aWYoYmFzZW5hbWUpcGF0aD1zdHJpcEJhc2VuYW1lKHBhdGgsYmFzZW5hbWUpO3JldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTt9dmFyIHRyYW5zaXRpb25NYW5hZ2VyPWNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7ZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKXtfZXh0ZW5kcyhoaXN0b3J5LG5leHRTdGF0ZSk7aGlzdG9yeS5sZW5ndGg9Z2xvYmFsSGlzdG9yeS5sZW5ndGg7dHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24saGlzdG9yeS5hY3Rpb24pO312YXIgZm9yY2VOZXh0UG9wPWZhbHNlO3ZhciBpZ25vcmVQYXRoPW51bGw7ZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSxiKXtyZXR1cm4gYS5wYXRobmFtZT09PWIucGF0aG5hbWUmJmEuc2VhcmNoPT09Yi5zZWFyY2gmJmEuaGFzaD09PWIuaGFzaDt9ZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpe3ZhciBwYXRoPWdldEhhc2hQYXRoKCk7dmFyIGVuY29kZWRQYXRoPWVuY29kZVBhdGgocGF0aCk7aWYocGF0aCE9PWVuY29kZWRQYXRoKXsvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG5yZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO31lbHNle3ZhciBsb2NhdGlvbj1nZXRET01Mb2NhdGlvbigpO3ZhciBwcmV2TG9jYXRpb249aGlzdG9yeS5sb2NhdGlvbjtpZighZm9yY2VOZXh0UG9wJiZsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sbG9jYXRpb24pKXJldHVybjsvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuaWYoaWdub3JlUGF0aD09PWNyZWF0ZVBhdGgobG9jYXRpb24pKXJldHVybjsvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuaWdub3JlUGF0aD1udWxsO2hhbmRsZVBvcChsb2NhdGlvbik7fX1mdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pe2lmKGZvcmNlTmV4dFBvcCl7Zm9yY2VOZXh0UG9wPWZhbHNlO3NldFN0YXRlKCk7fWVsc2V7dmFyIGFjdGlvbj0nUE9QJzt0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLGFjdGlvbixnZXRVc2VyQ29uZmlybWF0aW9uLGZ1bmN0aW9uKG9rKXtpZihvayl7c2V0U3RhdGUoe2FjdGlvbjphY3Rpb24sbG9jYXRpb246bG9jYXRpb259KTt9ZWxzZXtyZXZlcnRQb3AobG9jYXRpb24pO319KTt9fWZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pe3ZhciB0b0xvY2F0aW9uPWhpc3RvcnkubG9jYXRpb247Ly8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbi8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4vLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cbnZhciB0b0luZGV4PWFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO2lmKHRvSW5kZXg9PT0tMSl0b0luZGV4PTA7dmFyIGZyb21JbmRleD1hbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO2lmKGZyb21JbmRleD09PS0xKWZyb21JbmRleD0wO3ZhciBkZWx0YT10b0luZGV4LWZyb21JbmRleDtpZihkZWx0YSl7Zm9yY2VOZXh0UG9wPXRydWU7Z28oZGVsdGEpO319Ly8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG52YXIgcGF0aD1nZXRIYXNoUGF0aCgpO3ZhciBlbmNvZGVkUGF0aD1lbmNvZGVQYXRoKHBhdGgpO2lmKHBhdGghPT1lbmNvZGVkUGF0aClyZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO3ZhciBpbml0aWFsTG9jYXRpb249Z2V0RE9NTG9jYXRpb24oKTt2YXIgYWxsUGF0aHM9W2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07Ly8gUHVibGljIGludGVyZmFjZVxuZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbil7dmFyIGJhc2VUYWc9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO3ZhciBocmVmPScnO2lmKGJhc2VUYWcmJmJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpe2hyZWY9c3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTt9cmV0dXJuIGhyZWYrJyMnK2VuY29kZVBhdGgoYmFzZW5hbWUrY3JlYXRlUGF0aChsb2NhdGlvbikpO31mdW5jdGlvbiBwdXNoKHBhdGgsc3RhdGUpe3dhcm5pbmcoc3RhdGU9PT11bmRlZmluZWQsJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO3ZhciBhY3Rpb249J1BVU0gnO3ZhciBsb2NhdGlvbj1jcmVhdGVMb2NhdGlvbihwYXRoLHVuZGVmaW5lZCx1bmRlZmluZWQsaGlzdG9yeS5sb2NhdGlvbik7dHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbixhY3Rpb24sZ2V0VXNlckNvbmZpcm1hdGlvbixmdW5jdGlvbihvayl7aWYoIW9rKXJldHVybjt2YXIgcGF0aD1jcmVhdGVQYXRoKGxvY2F0aW9uKTt2YXIgZW5jb2RlZFBhdGg9ZW5jb2RlUGF0aChiYXNlbmFtZStwYXRoKTt2YXIgaGFzaENoYW5nZWQ9Z2V0SGFzaFBhdGgoKSE9PWVuY29kZWRQYXRoO2lmKGhhc2hDaGFuZ2VkKXsvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2Rcbi8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuaWdub3JlUGF0aD1wYXRoO3B1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7dmFyIHByZXZJbmRleD1hbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTt2YXIgbmV4dFBhdGhzPWFsbFBhdGhzLnNsaWNlKDAscHJldkluZGV4KzEpO25leHRQYXRocy5wdXNoKHBhdGgpO2FsbFBhdGhzPW5leHRQYXRocztzZXRTdGF0ZSh7YWN0aW9uOmFjdGlvbixsb2NhdGlvbjpsb2NhdGlvbn0pO31lbHNle3dhcm5pbmcoZmFsc2UsJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO3NldFN0YXRlKCk7fX0pO31mdW5jdGlvbiByZXBsYWNlKHBhdGgsc3RhdGUpe3dhcm5pbmcoc3RhdGU9PT11bmRlZmluZWQsJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO3ZhciBhY3Rpb249J1JFUExBQ0UnO3ZhciBsb2NhdGlvbj1jcmVhdGVMb2NhdGlvbihwYXRoLHVuZGVmaW5lZCx1bmRlZmluZWQsaGlzdG9yeS5sb2NhdGlvbik7dHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbixhY3Rpb24sZ2V0VXNlckNvbmZpcm1hdGlvbixmdW5jdGlvbihvayl7aWYoIW9rKXJldHVybjt2YXIgcGF0aD1jcmVhdGVQYXRoKGxvY2F0aW9uKTt2YXIgZW5jb2RlZFBhdGg9ZW5jb2RlUGF0aChiYXNlbmFtZStwYXRoKTt2YXIgaGFzaENoYW5nZWQ9Z2V0SGFzaFBhdGgoKSE9PWVuY29kZWRQYXRoO2lmKGhhc2hDaGFuZ2VkKXsvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2Rcbi8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuaWdub3JlUGF0aD1wYXRoO3JlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7fXZhciBwcmV2SW5kZXg9YWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtpZihwcmV2SW5kZXghPT0tMSlhbGxQYXRoc1twcmV2SW5kZXhdPXBhdGg7c2V0U3RhdGUoe2FjdGlvbjphY3Rpb24sbG9jYXRpb246bG9jYXRpb259KTt9KTt9ZnVuY3Rpb24gZ28obil7d2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO2dsb2JhbEhpc3RvcnkuZ28obik7fWZ1bmN0aW9uIGdvQmFjaygpe2dvKC0xKTt9ZnVuY3Rpb24gZ29Gb3J3YXJkKCl7Z28oMSk7fXZhciBsaXN0ZW5lckNvdW50PTA7ZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpe2xpc3RlbmVyQ291bnQrPWRlbHRhO2lmKGxpc3RlbmVyQ291bnQ9PT0xJiZkZWx0YT09PTEpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLGhhbmRsZUhhc2hDaGFuZ2UpO31lbHNlIGlmKGxpc3RlbmVyQ291bnQ9PT0wKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSxoYW5kbGVIYXNoQ2hhbmdlKTt9fXZhciBpc0Jsb2NrZWQ9ZmFsc2U7ZnVuY3Rpb24gYmxvY2socHJvbXB0KXtpZihwcm9tcHQ9PT12b2lkIDApe3Byb21wdD1mYWxzZTt9dmFyIHVuYmxvY2s9dHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7aWYoIWlzQmxvY2tlZCl7Y2hlY2tET01MaXN0ZW5lcnMoMSk7aXNCbG9ja2VkPXRydWU7fXJldHVybiBmdW5jdGlvbigpe2lmKGlzQmxvY2tlZCl7aXNCbG9ja2VkPWZhbHNlO2NoZWNrRE9NTGlzdGVuZXJzKC0xKTt9cmV0dXJuIHVuYmxvY2soKTt9O31mdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpe3ZhciB1bmxpc3Rlbj10cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7Y2hlY2tET01MaXN0ZW5lcnMoMSk7cmV0dXJuIGZ1bmN0aW9uKCl7Y2hlY2tET01MaXN0ZW5lcnMoLTEpO3VubGlzdGVuKCk7fTt9dmFyIGhpc3Rvcnk9e2xlbmd0aDpnbG9iYWxIaXN0b3J5Lmxlbmd0aCxhY3Rpb246J1BPUCcsbG9jYXRpb246aW5pdGlhbExvY2F0aW9uLGNyZWF0ZUhyZWY6Y3JlYXRlSHJlZixwdXNoOnB1c2gscmVwbGFjZTpyZXBsYWNlLGdvOmdvLGdvQmFjazpnb0JhY2ssZ29Gb3J3YXJkOmdvRm9yd2FyZCxibG9jazpibG9jayxsaXN0ZW46bGlzdGVufTtyZXR1cm4gaGlzdG9yeTt9ZnVuY3Rpb24gY2xhbXAobixsb3dlckJvdW5kLHVwcGVyQm91bmQpe3JldHVybiBNYXRoLm1pbihNYXRoLm1heChuLGxvd2VyQm91bmQpLHVwcGVyQm91bmQpO30vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcyl7aWYocHJvcHM9PT12b2lkIDApe3Byb3BzPXt9O312YXIgX3Byb3BzPXByb3BzLGdldFVzZXJDb25maXJtYXRpb249X3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sX3Byb3BzJGluaXRpYWxFbnRyaWVzPV9wcm9wcy5pbml0aWFsRW50cmllcyxpbml0aWFsRW50cmllcz1fcHJvcHMkaW5pdGlhbEVudHJpZXM9PT12b2lkIDA/WycvJ106X3Byb3BzJGluaXRpYWxFbnRyaWVzLF9wcm9wcyRpbml0aWFsSW5kZXg9X3Byb3BzLmluaXRpYWxJbmRleCxpbml0aWFsSW5kZXg9X3Byb3BzJGluaXRpYWxJbmRleD09PXZvaWQgMD8wOl9wcm9wcyRpbml0aWFsSW5kZXgsX3Byb3BzJGtleUxlbmd0aD1fcHJvcHMua2V5TGVuZ3RoLGtleUxlbmd0aD1fcHJvcHMka2V5TGVuZ3RoPT09dm9pZCAwPzY6X3Byb3BzJGtleUxlbmd0aDt2YXIgdHJhbnNpdGlvbk1hbmFnZXI9Y3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpe19leHRlbmRzKGhpc3RvcnksbmV4dFN0YXRlKTtoaXN0b3J5Lmxlbmd0aD1oaXN0b3J5LmVudHJpZXMubGVuZ3RoO3RyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLGhpc3RvcnkuYWN0aW9uKTt9ZnVuY3Rpb24gY3JlYXRlS2V5KCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLGtleUxlbmd0aCk7fXZhciBpbmRleD1jbGFtcChpbml0aWFsSW5kZXgsMCxpbml0aWFsRW50cmllcy5sZW5ndGgtMSk7dmFyIGVudHJpZXM9aW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uKGVudHJ5KXtyZXR1cm4gdHlwZW9mIGVudHJ5PT09J3N0cmluZyc/Y3JlYXRlTG9jYXRpb24oZW50cnksdW5kZWZpbmVkLGNyZWF0ZUtleSgpKTpjcmVhdGVMb2NhdGlvbihlbnRyeSx1bmRlZmluZWQsZW50cnkua2V5fHxjcmVhdGVLZXkoKSk7fSk7Ly8gUHVibGljIGludGVyZmFjZVxudmFyIGNyZWF0ZUhyZWY9Y3JlYXRlUGF0aDtmdW5jdGlvbiBwdXNoKHBhdGgsc3RhdGUpe3dhcm5pbmcoISgodHlwZW9mIHBhdGg9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHBhdGgpKT09PSdvYmplY3QnJiZwYXRoLnN0YXRlIT09dW5kZWZpbmVkJiZzdGF0ZSE9PXVuZGVmaW5lZCksJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcrJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO3ZhciBhY3Rpb249J1BVU0gnO3ZhciBsb2NhdGlvbj1jcmVhdGVMb2NhdGlvbihwYXRoLHN0YXRlLGNyZWF0ZUtleSgpLGhpc3RvcnkubG9jYXRpb24pO3RyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sYWN0aW9uLGdldFVzZXJDb25maXJtYXRpb24sZnVuY3Rpb24ob2spe2lmKCFvaylyZXR1cm47dmFyIHByZXZJbmRleD1oaXN0b3J5LmluZGV4O3ZhciBuZXh0SW5kZXg9cHJldkluZGV4KzE7dmFyIG5leHRFbnRyaWVzPWhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtpZihuZXh0RW50cmllcy5sZW5ndGg+bmV4dEluZGV4KXtuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LG5leHRFbnRyaWVzLmxlbmd0aC1uZXh0SW5kZXgsbG9jYXRpb24pO31lbHNle25leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO31zZXRTdGF0ZSh7YWN0aW9uOmFjdGlvbixsb2NhdGlvbjpsb2NhdGlvbixpbmRleDpuZXh0SW5kZXgsZW50cmllczpuZXh0RW50cmllc30pO30pO31mdW5jdGlvbiByZXBsYWNlKHBhdGgsc3RhdGUpe3dhcm5pbmcoISgodHlwZW9mIHBhdGg9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHBhdGgpKT09PSdvYmplY3QnJiZwYXRoLnN0YXRlIT09dW5kZWZpbmVkJiZzdGF0ZSE9PXVuZGVmaW5lZCksJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcrJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO3ZhciBhY3Rpb249J1JFUExBQ0UnO3ZhciBsb2NhdGlvbj1jcmVhdGVMb2NhdGlvbihwYXRoLHN0YXRlLGNyZWF0ZUtleSgpLGhpc3RvcnkubG9jYXRpb24pO3RyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sYWN0aW9uLGdldFVzZXJDb25maXJtYXRpb24sZnVuY3Rpb24ob2spe2lmKCFvaylyZXR1cm47aGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdPWxvY2F0aW9uO3NldFN0YXRlKHthY3Rpb246YWN0aW9uLGxvY2F0aW9uOmxvY2F0aW9ufSk7fSk7fWZ1bmN0aW9uIGdvKG4pe3ZhciBuZXh0SW5kZXg9Y2xhbXAoaGlzdG9yeS5pbmRleCtuLDAsaGlzdG9yeS5lbnRyaWVzLmxlbmd0aC0xKTt2YXIgYWN0aW9uPSdQT1AnO3ZhciBsb2NhdGlvbj1oaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTt0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLGFjdGlvbixnZXRVc2VyQ29uZmlybWF0aW9uLGZ1bmN0aW9uKG9rKXtpZihvayl7c2V0U3RhdGUoe2FjdGlvbjphY3Rpb24sbG9jYXRpb246bG9jYXRpb24saW5kZXg6bmV4dEluZGV4fSk7fWVsc2V7Ly8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbi8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuc2V0U3RhdGUoKTt9fSk7fWZ1bmN0aW9uIGdvQmFjaygpe2dvKC0xKTt9ZnVuY3Rpb24gZ29Gb3J3YXJkKCl7Z28oMSk7fWZ1bmN0aW9uIGNhbkdvKG4pe3ZhciBuZXh0SW5kZXg9aGlzdG9yeS5pbmRleCtuO3JldHVybiBuZXh0SW5kZXg+PTAmJm5leHRJbmRleDxoaXN0b3J5LmVudHJpZXMubGVuZ3RoO31mdW5jdGlvbiBibG9jayhwcm9tcHQpe2lmKHByb21wdD09PXZvaWQgMCl7cHJvbXB0PWZhbHNlO31yZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7fWZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcil7cmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTt9dmFyIGhpc3Rvcnk9e2xlbmd0aDplbnRyaWVzLmxlbmd0aCxhY3Rpb246J1BPUCcsbG9jYXRpb246ZW50cmllc1tpbmRleF0saW5kZXg6aW5kZXgsZW50cmllczplbnRyaWVzLGNyZWF0ZUhyZWY6Y3JlYXRlSHJlZixwdXNoOnB1c2gscmVwbGFjZTpyZXBsYWNlLGdvOmdvLGdvQmFjazpnb0JhY2ssZ29Gb3J3YXJkOmdvRm9yd2FyZCxjYW5HbzpjYW5HbyxibG9jazpibG9jayxsaXN0ZW46bGlzdGVufTtyZXR1cm4gaGlzdG9yeTt9ZXhwb3J0cy5jcmVhdGVCcm93c2VySGlzdG9yeT1jcmVhdGVCcm93c2VySGlzdG9yeTtleHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5PWNyZWF0ZUhhc2hIaXN0b3J5O2V4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeT1jcmVhdGVNZW1vcnlIaXN0b3J5O2V4cG9ydHMuY3JlYXRlTG9jYXRpb249Y3JlYXRlTG9jYXRpb247ZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbD1sb2NhdGlvbnNBcmVFcXVhbDtleHBvcnRzLnBhcnNlUGF0aD1wYXJzZVBhdGg7ZXhwb3J0cy5jcmVhdGVQYXRoPWNyZWF0ZVBhdGg7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2hpc3RvcnkvY2pzL2hpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307dmFyIFJlYWN0PXJlcXVpcmUoJ3JlYWN0JyksX2luaGVyaXRzTG9vc2U9cmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJyksUHJvcFR5cGVzPXJlcXVpcmUoJ3Byb3AtdHlwZXMnKSx3YXJuaW5nPXJlcXVpcmUoJ3Rpbnktd2FybmluZycpO2Z1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeShlKXtyZXR1cm4gZSYmKHR5cGVvZiBlPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihlKSk9PT0nb2JqZWN0JyYmJ2RlZmF1bHQnaW4gZT9lOnsnZGVmYXVsdCc6ZX07fXZhciBSZWFjdF9fZGVmYXVsdD0vKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KFJlYWN0KTt2YXIgX2luaGVyaXRzTG9vc2VfX2RlZmF1bHQ9LyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShfaW5oZXJpdHNMb29zZSk7dmFyIFByb3BUeXBlc19fZGVmYXVsdD0vKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KFByb3BUeXBlcyk7dmFyIHdhcm5pbmdfX2RlZmF1bHQ9LyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeSh3YXJuaW5nKTt2YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UPTEwNzM3NDE4MjM7dmFyIGNvbW1vbmpzR2xvYmFsPXR5cGVvZiBnbG9iYWxUaGlzIT09J3VuZGVmaW5lZCc/Z2xvYmFsVGhpczp0eXBlb2Ygd2luZG93IT09J3VuZGVmaW5lZCc/d2luZG93OnR5cGVvZiBnbG9iYWwhPT0ndW5kZWZpbmVkJz9nbG9iYWw6e307ZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKXt2YXIga2V5PSdfX2dsb2JhbF91bmlxdWVfaWRfXyc7cmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV09KGNvbW1vbmpzR2xvYmFsW2tleV18fDApKzE7fWZ1bmN0aW9uIG9iamVjdElzKHgseSl7aWYoeD09PXkpe3JldHVybiB4IT09MHx8MS94PT09MS95O31lbHNle3JldHVybiB4IT09eCYmeSE9PXk7fX1mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpe3ZhciBoYW5kbGVycz1bXTtyZXR1cm57b246ZnVuY3Rpb24gb24oaGFuZGxlcil7aGFuZGxlcnMucHVzaChoYW5kbGVyKTt9LG9mZjpmdW5jdGlvbiBvZmYoaGFuZGxlcil7aGFuZGxlcnM9aGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uKGgpe3JldHVybiBoIT09aGFuZGxlcjt9KTt9LGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdmFsdWU7fSxzZXQ6ZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLGNoYW5nZWRCaXRzKXt2YWx1ZT1uZXdWYWx1ZTtoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpe3JldHVybiBoYW5kbGVyKHZhbHVlLGNoYW5nZWRCaXRzKTt9KTt9fTt9ZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKXtyZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbik/Y2hpbGRyZW5bMF06Y2hpbGRyZW47fWZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsY2FsY3VsYXRlQ2hhbmdlZEJpdHMpe3ZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsX0NvbnN1bWVyJGNvbnRleHRUeXBlO3ZhciBjb250ZXh0UHJvcD0nX19jcmVhdGUtcmVhY3QtY29udGV4dC0nK2dldFVuaXF1ZUlkKCkrJ19fJzt2YXIgUHJvdmlkZXI9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9Db21wb25lbnQpe19pbmhlcml0c0xvb3NlX19kZWZhdWx0WydkZWZhdWx0J10oUHJvdmlkZXIsX0NvbXBvbmVudCk7ZnVuY3Rpb24gUHJvdmlkZXIoKXt2YXIgX3RoaXM7X3RoaXM9X0NvbXBvbmVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7X3RoaXMuZW1pdHRlcj1jcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO3JldHVybiBfdGhpczt9dmFyIF9wcm90bz1Qcm92aWRlci5wcm90b3R5cGU7X3Byb3RvLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKXt2YXIgX3JlZjtyZXR1cm4gX3JlZj17fSxfcmVmW2NvbnRleHRQcm9wXT10aGlzLmVtaXR0ZXIsX3JlZjt9O19wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXtpZih0aGlzLnByb3BzLnZhbHVlIT09bmV4dFByb3BzLnZhbHVlKXt2YXIgb2xkVmFsdWU9dGhpcy5wcm9wcy52YWx1ZTt2YXIgbmV3VmFsdWU9bmV4dFByb3BzLnZhbHVlO3ZhciBjaGFuZ2VkQml0cztpZihvYmplY3RJcyhvbGRWYWx1ZSxuZXdWYWx1ZSkpe2NoYW5nZWRCaXRzPTA7fWVsc2V7Y2hhbmdlZEJpdHM9dHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzPT09J2Z1bmN0aW9uJz9jYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSxuZXdWYWx1ZSk6TUFYX1NJR05FRF8zMV9CSVRfSU5UO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WIT09J3Byb2R1Y3Rpb24nKXt3YXJuaW5nX19kZWZhdWx0WydkZWZhdWx0J10oKGNoYW5nZWRCaXRzJk1BWF9TSUdORURfMzFfQklUX0lOVCk9PT1jaGFuZ2VkQml0cywnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnKyczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJytjaGFuZ2VkQml0cyk7fWNoYW5nZWRCaXRzfD0wO2lmKGNoYW5nZWRCaXRzIT09MCl7dGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsY2hhbmdlZEJpdHMpO319fX07X3Byb3RvLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjt9O3JldHVybiBQcm92aWRlcjt9KFJlYWN0LkNvbXBvbmVudCk7UHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXM9KF9Qcm92aWRlciRjaGlsZENvbnRleD17fSxfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdPVByb3BUeXBlc19fZGVmYXVsdFsnZGVmYXVsdCddLm9iamVjdC5pc1JlcXVpcmVkLF9Qcm92aWRlciRjaGlsZENvbnRleCk7dmFyIENvbnN1bWVyPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfQ29tcG9uZW50Mil7X2luaGVyaXRzTG9vc2VfX2RlZmF1bHRbJ2RlZmF1bHQnXShDb25zdW1lcixfQ29tcG9uZW50Mik7ZnVuY3Rpb24gQ29uc3VtZXIoKXt2YXIgX3RoaXMyO190aGlzMj1fQ29tcG9uZW50Mi5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7X3RoaXMyLnN0YXRlPXt2YWx1ZTpfdGhpczIuZ2V0VmFsdWUoKX07X3RoaXMyLm9uVXBkYXRlPWZ1bmN0aW9uKG5ld1ZhbHVlLGNoYW5nZWRCaXRzKXt2YXIgb2JzZXJ2ZWRCaXRzPV90aGlzMi5vYnNlcnZlZEJpdHN8MDtpZigob2JzZXJ2ZWRCaXRzJmNoYW5nZWRCaXRzKSE9PTApe190aGlzMi5zZXRTdGF0ZSh7dmFsdWU6X3RoaXMyLmdldFZhbHVlKCl9KTt9fTtyZXR1cm4gX3RoaXMyO312YXIgX3Byb3RvMj1Db25zdW1lci5wcm90b3R5cGU7X3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXt2YXIgb2JzZXJ2ZWRCaXRzPW5leHRQcm9wcy5vYnNlcnZlZEJpdHM7dGhpcy5vYnNlcnZlZEJpdHM9b2JzZXJ2ZWRCaXRzPT09dW5kZWZpbmVkfHxvYnNlcnZlZEJpdHM9PT1udWxsP01BWF9TSUdORURfMzFfQklUX0lOVDpvYnNlcnZlZEJpdHM7fTtfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7aWYodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSl7dGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTt9dmFyIG9ic2VydmVkQml0cz10aGlzLnByb3BzLm9ic2VydmVkQml0czt0aGlzLm9ic2VydmVkQml0cz1vYnNlcnZlZEJpdHM9PT11bmRlZmluZWR8fG9ic2VydmVkQml0cz09PW51bGw/TUFYX1NJR05FRF8zMV9CSVRfSU5UOm9ic2VydmVkQml0czt9O19wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXtpZih0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKXt0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTt9fTtfcHJvdG8yLmdldFZhbHVlPWZ1bmN0aW9uIGdldFZhbHVlKCl7aWYodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSl7cmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7fWVsc2V7cmV0dXJuIGRlZmF1bHRWYWx1ZTt9fTtfcHJvdG8yLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO307cmV0dXJuIENvbnN1bWVyO30oUmVhY3QuQ29tcG9uZW50KTtDb25zdW1lci5jb250ZXh0VHlwZXM9KF9Db25zdW1lciRjb250ZXh0VHlwZT17fSxfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdPVByb3BUeXBlc19fZGVmYXVsdFsnZGVmYXVsdCddLm9iamVjdCxfQ29uc3VtZXIkY29udGV4dFR5cGUpO3JldHVybntQcm92aWRlcjpQcm92aWRlcixDb25zdW1lcjpDb25zdW1lcn07fXZhciBpbmRleD1SZWFjdF9fZGVmYXVsdFsnZGVmYXVsdCddLmNyZWF0ZUNvbnRleHR8fGNyZWF0ZVJlYWN0Q29udGV4dDttb2R1bGUuZXhwb3J0cz1pbmRleDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2Nqcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHNldFByb3RvdHlwZU9mPXJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mLmpzXCIpO2Z1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe3N1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3I9c3ViQ2xhc3M7c2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk7fW1vZHVsZS5leHBvcnRzPV9pbmhlcml0c0xvb3NlO21vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXT1tb2R1bGUuZXhwb3J0cyxtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlPXRydWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7bW9kdWxlLmV4cG9ydHM9X3NldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7by5fX3Byb3RvX189cDtyZXR1cm4gbzt9O21vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXT1tb2R1bGUuZXhwb3J0cyxtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlPXRydWU7cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLHApO31tb2R1bGUuZXhwb3J0cz1fc2V0UHJvdG90eXBlT2Y7bW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdPW1vZHVsZS5leHBvcnRzLG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGU9dHJ1ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTt2YXIgaXNhcnJheT1yZXF1aXJlKCdpc2FycmF5Jyk7LyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9tb2R1bGUuZXhwb3J0cz1wYXRoVG9SZWdleHA7bW9kdWxlLmV4cG9ydHMucGFyc2U9cGFyc2U7bW9kdWxlLmV4cG9ydHMuY29tcGlsZT1jb21waWxlO21vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb249dG9rZW5zVG9GdW5jdGlvbjttb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cD10b2tlbnNUb1JlZ0V4cDsvKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL3ZhciBQQVRIX1JFR0VYUD1uZXcgUmVnRXhwKFsvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbicoXFxcXFxcXFwuKScsLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbi8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4vL1xuLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ10uam9pbignfCcpLCdnJyk7LyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9mdW5jdGlvbiBwYXJzZShzdHIsb3B0aW9ucyl7dmFyIHRva2Vucz1bXTt2YXIga2V5PTA7dmFyIGluZGV4PTA7dmFyIHBhdGg9Jyc7dmFyIGRlZmF1bHREZWxpbWl0ZXI9b3B0aW9ucyYmb3B0aW9ucy5kZWxpbWl0ZXJ8fCcvJzt2YXIgcmVzO3doaWxlKChyZXM9UEFUSF9SRUdFWFAuZXhlYyhzdHIpKSE9bnVsbCl7dmFyIG09cmVzWzBdO3ZhciBlc2NhcGVkPXJlc1sxXTt2YXIgb2Zmc2V0PXJlcy5pbmRleDtwYXRoKz1zdHIuc2xpY2UoaW5kZXgsb2Zmc2V0KTtpbmRleD1vZmZzZXQrbS5sZW5ndGg7Ly8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG5pZihlc2NhcGVkKXtwYXRoKz1lc2NhcGVkWzFdO2NvbnRpbnVlO312YXIgbmV4dD1zdHJbaW5kZXhdO3ZhciBwcmVmaXg9cmVzWzJdO3ZhciBuYW1lPXJlc1szXTt2YXIgY2FwdHVyZT1yZXNbNF07dmFyIGdyb3VwPXJlc1s1XTt2YXIgbW9kaWZpZXI9cmVzWzZdO3ZhciBhc3Rlcmlzaz1yZXNbN107Ly8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbmlmKHBhdGgpe3Rva2Vucy5wdXNoKHBhdGgpO3BhdGg9Jyc7fXZhciBwYXJ0aWFsPXByZWZpeCE9bnVsbCYmbmV4dCE9bnVsbCYmbmV4dCE9PXByZWZpeDt2YXIgcmVwZWF0PW1vZGlmaWVyPT09JysnfHxtb2RpZmllcj09PScqJzt2YXIgb3B0aW9uYWw9bW9kaWZpZXI9PT0nPyd8fG1vZGlmaWVyPT09JyonO3ZhciBkZWxpbWl0ZXI9cmVzWzJdfHxkZWZhdWx0RGVsaW1pdGVyO3ZhciBwYXR0ZXJuPWNhcHR1cmV8fGdyb3VwO3Rva2Vucy5wdXNoKHtuYW1lOm5hbWV8fGtleSsrLHByZWZpeDpwcmVmaXh8fCcnLGRlbGltaXRlcjpkZWxpbWl0ZXIsb3B0aW9uYWw6b3B0aW9uYWwscmVwZWF0OnJlcGVhdCxwYXJ0aWFsOnBhcnRpYWwsYXN0ZXJpc2s6ISFhc3RlcmlzayxwYXR0ZXJuOnBhdHRlcm4/ZXNjYXBlR3JvdXAocGF0dGVybik6YXN0ZXJpc2s/Jy4qJzonW14nK2VzY2FwZVN0cmluZyhkZWxpbWl0ZXIpKyddKz8nfSk7fS8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbmlmKGluZGV4PHN0ci5sZW5ndGgpe3BhdGgrPXN0ci5zdWJzdHIoaW5kZXgpO30vLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuaWYocGF0aCl7dG9rZW5zLnB1c2gocGF0aCk7fXJldHVybiB0b2tlbnM7fS8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9mdW5jdGlvbiBjb21waWxlKHN0cixvcHRpb25zKXtyZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsb3B0aW9ucyksb3B0aW9ucyk7fS8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5KHN0cil7cmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZyxmdW5jdGlvbihjKXtyZXR1cm4nJScrYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO30pO30vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2soc3RyKXtyZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLGZ1bmN0aW9uKGMpe3JldHVybiclJytjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7fSk7fS8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uKHRva2VucyxvcHRpb25zKXsvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbnZhciBtYXRjaGVzPW5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKTsvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuZm9yKHZhciBpPTA7aTx0b2tlbnMubGVuZ3RoO2krKyl7aWYoX3R5cGVvZih0b2tlbnNbaV0pPT09J29iamVjdCcpe21hdGNoZXNbaV09bmV3IFJlZ0V4cCgnXig/OicrdG9rZW5zW2ldLnBhdHRlcm4rJykkJyxmbGFncyhvcHRpb25zKSk7fX1yZXR1cm4gZnVuY3Rpb24ob2JqLG9wdHMpe3ZhciBwYXRoPScnO3ZhciBkYXRhPW9ianx8e307dmFyIG9wdGlvbnM9b3B0c3x8e307dmFyIGVuY29kZT1vcHRpb25zLnByZXR0eT9lbmNvZGVVUklDb21wb25lbnRQcmV0dHk6ZW5jb2RlVVJJQ29tcG9uZW50O2Zvcih2YXIgaT0wO2k8dG9rZW5zLmxlbmd0aDtpKyspe3ZhciB0b2tlbj10b2tlbnNbaV07aWYodHlwZW9mIHRva2VuPT09J3N0cmluZycpe3BhdGgrPXRva2VuO2NvbnRpbnVlO312YXIgdmFsdWU9ZGF0YVt0b2tlbi5uYW1lXTt2YXIgc2VnbWVudDtpZih2YWx1ZT09bnVsbCl7aWYodG9rZW4ub3B0aW9uYWwpey8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuaWYodG9rZW4ucGFydGlhbCl7cGF0aCs9dG9rZW4ucHJlZml4O31jb250aW51ZTt9ZWxzZXt0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicrdG9rZW4ubmFtZSsnXCIgdG8gYmUgZGVmaW5lZCcpO319aWYoaXNhcnJheSh2YWx1ZSkpe2lmKCF0b2tlbi5yZXBlYXQpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyt0b2tlbi5uYW1lKydcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcrSlNPTi5zdHJpbmdpZnkodmFsdWUpKydgJyk7fWlmKHZhbHVlLmxlbmd0aD09PTApe2lmKHRva2VuLm9wdGlvbmFsKXtjb250aW51ZTt9ZWxzZXt0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicrdG9rZW4ubmFtZSsnXCIgdG8gbm90IGJlIGVtcHR5Jyk7fX1mb3IodmFyIGo9MDtqPHZhbHVlLmxlbmd0aDtqKyspe3NlZ21lbnQ9ZW5jb2RlKHZhbHVlW2pdKTtpZighbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInK3Rva2VuLm5hbWUrJ1wiIHRvIG1hdGNoIFwiJyt0b2tlbi5wYXR0ZXJuKydcIiwgYnV0IHJlY2VpdmVkIGAnK0pTT04uc3RyaW5naWZ5KHNlZ21lbnQpKydgJyk7fXBhdGgrPShqPT09MD90b2tlbi5wcmVmaXg6dG9rZW4uZGVsaW1pdGVyKStzZWdtZW50O31jb250aW51ZTt9c2VnbWVudD10b2tlbi5hc3Rlcmlzaz9lbmNvZGVBc3Rlcmlzayh2YWx1ZSk6ZW5jb2RlKHZhbHVlKTtpZighbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicrdG9rZW4ubmFtZSsnXCIgdG8gbWF0Y2ggXCInK3Rva2VuLnBhdHRlcm4rJ1wiLCBidXQgcmVjZWl2ZWQgXCInK3NlZ21lbnQrJ1wiJyk7fXBhdGgrPXRva2VuLnByZWZpeCtzZWdtZW50O31yZXR1cm4gcGF0aDt9O30vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL2Z1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHIpe3JldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywnXFxcXCQxJyk7fS8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL2Z1bmN0aW9uIGVzY2FwZUdyb3VwKGdyb3VwKXtyZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCdcXFxcJDEnKTt9LyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovZnVuY3Rpb24gYXR0YWNoS2V5cyhyZSxrZXlzKXtyZS5rZXlzPWtleXM7cmV0dXJuIHJlO30vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9mdW5jdGlvbiBmbGFncyhvcHRpb25zKXtyZXR1cm4gb3B0aW9ucyYmb3B0aW9ucy5zZW5zaXRpdmU/Jyc6J2knO30vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAocGF0aCxrZXlzKXsvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxudmFyIGdyb3Vwcz1wYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKTtpZihncm91cHMpe2Zvcih2YXIgaT0wO2k8Z3JvdXBzLmxlbmd0aDtpKyspe2tleXMucHVzaCh7bmFtZTppLHByZWZpeDpudWxsLGRlbGltaXRlcjpudWxsLG9wdGlvbmFsOmZhbHNlLHJlcGVhdDpmYWxzZSxwYXJ0aWFsOmZhbHNlLGFzdGVyaXNrOmZhbHNlLHBhdHRlcm46bnVsbH0pO319cmV0dXJuIGF0dGFjaEtleXMocGF0aCxrZXlzKTt9LyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cChwYXRoLGtleXMsb3B0aW9ucyl7dmFyIHBhcnRzPVtdO2Zvcih2YXIgaT0wO2k8cGF0aC5sZW5ndGg7aSsrKXtwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLGtleXMsb3B0aW9ucykuc291cmNlKTt9dmFyIHJlZ2V4cD1uZXcgUmVnRXhwKCcoPzonK3BhcnRzLmpvaW4oJ3wnKSsnKScsZmxhZ3Mob3B0aW9ucykpO3JldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCxrZXlzKTt9LyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAocGF0aCxrZXlzLG9wdGlvbnMpe3JldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLG9wdGlvbnMpLGtleXMsb3B0aW9ucyk7fS8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCh0b2tlbnMsa2V5cyxvcHRpb25zKXtpZighaXNhcnJheShrZXlzKSl7b3B0aW9ucz0vKiogQHR5cGUgeyFPYmplY3R9ICova2V5c3x8b3B0aW9ucztrZXlzPVtdO31vcHRpb25zPW9wdGlvbnN8fHt9O3ZhciBzdHJpY3Q9b3B0aW9ucy5zdHJpY3Q7dmFyIGVuZD1vcHRpb25zLmVuZCE9PWZhbHNlO3ZhciByb3V0ZT0nJzsvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuZm9yKHZhciBpPTA7aTx0b2tlbnMubGVuZ3RoO2krKyl7dmFyIHRva2VuPXRva2Vuc1tpXTtpZih0eXBlb2YgdG9rZW49PT0nc3RyaW5nJyl7cm91dGUrPWVzY2FwZVN0cmluZyh0b2tlbik7fWVsc2V7dmFyIHByZWZpeD1lc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KTt2YXIgY2FwdHVyZT0nKD86Jyt0b2tlbi5wYXR0ZXJuKycpJztrZXlzLnB1c2godG9rZW4pO2lmKHRva2VuLnJlcGVhdCl7Y2FwdHVyZSs9Jyg/OicrcHJlZml4K2NhcHR1cmUrJykqJzt9aWYodG9rZW4ub3B0aW9uYWwpe2lmKCF0b2tlbi5wYXJ0aWFsKXtjYXB0dXJlPScoPzonK3ByZWZpeCsnKCcrY2FwdHVyZSsnKSk/Jzt9ZWxzZXtjYXB0dXJlPXByZWZpeCsnKCcrY2FwdHVyZSsnKT8nO319ZWxzZXtjYXB0dXJlPXByZWZpeCsnKCcrY2FwdHVyZSsnKSc7fXJvdXRlKz1jYXB0dXJlO319dmFyIGRlbGltaXRlcj1lc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJ8fCcvJyk7dmFyIGVuZHNXaXRoRGVsaW1pdGVyPXJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKT09PWRlbGltaXRlcjsvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4vLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4vLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG5pZighc3RyaWN0KXtyb3V0ZT0oZW5kc1dpdGhEZWxpbWl0ZXI/cm91dGUuc2xpY2UoMCwtZGVsaW1pdGVyLmxlbmd0aCk6cm91dGUpKycoPzonK2RlbGltaXRlcisnKD89JCkpPyc7fWlmKGVuZCl7cm91dGUrPSckJzt9ZWxzZXsvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbnJvdXRlKz1zdHJpY3QmJmVuZHNXaXRoRGVsaW1pdGVyPycnOicoPz0nK2RlbGltaXRlcisnfCQpJzt9cmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicrcm91dGUsZmxhZ3Mob3B0aW9ucykpLGtleXMpO30vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL2Z1bmN0aW9uIHBhdGhUb1JlZ2V4cChwYXRoLGtleXMsb3B0aW9ucyl7aWYoIWlzYXJyYXkoa2V5cykpe29wdGlvbnM9LyoqIEB0eXBlIHshT2JqZWN0fSAqL2tleXN8fG9wdGlvbnM7a2V5cz1bXTt9b3B0aW9ucz1vcHRpb25zfHx7fTtpZihwYXRoIGluc3RhbmNlb2YgUmVnRXhwKXtyZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwvKiogQHR5cGUgeyFBcnJheX0gKi9rZXlzKTt9aWYoaXNhcnJheShwYXRoKSl7cmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovcGF0aCwvKiogQHR5cGUgeyFBcnJheX0gKi9rZXlzLG9wdGlvbnMpO31yZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovcGF0aCwvKiogQHR5cGUgeyFBcnJheX0gKi9rZXlzLG9wdGlvbnMpO31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qtcm91dGVyL34vcGF0aC10by1yZWdleHAvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihhcnIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKT09J1tvYmplY3QgQXJyYXldJzt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pc2FycmF5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7LyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL3ZhciBSZWFjdElzPXJlcXVpcmUoJ3JlYWN0LWlzJyk7dmFyIFJFQUNUX1NUQVRJQ1M9e2NoaWxkQ29udGV4dFR5cGVzOnRydWUsY29udGV4dFR5cGU6dHJ1ZSxjb250ZXh0VHlwZXM6dHJ1ZSxkZWZhdWx0UHJvcHM6dHJ1ZSxkaXNwbGF5TmFtZTp0cnVlLGdldERlZmF1bHRQcm9wczp0cnVlLGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjp0cnVlLGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczp0cnVlLG1peGluczp0cnVlLHByb3BUeXBlczp0cnVlLHR5cGU6dHJ1ZX07dmFyIEtOT1dOX1NUQVRJQ1M9e25hbWU6dHJ1ZSxsZW5ndGg6dHJ1ZSxwcm90b3R5cGU6dHJ1ZSxjYWxsZXI6dHJ1ZSxjYWxsZWU6dHJ1ZSxhcmd1bWVudHM6dHJ1ZSxhcml0eTp0cnVlfTt2YXIgRk9SV0FSRF9SRUZfU1RBVElDUz17JyQkdHlwZW9mJzp0cnVlLHJlbmRlcjp0cnVlLGRlZmF1bHRQcm9wczp0cnVlLGRpc3BsYXlOYW1lOnRydWUscHJvcFR5cGVzOnRydWV9O3ZhciBNRU1PX1NUQVRJQ1M9eyckJHR5cGVvZic6dHJ1ZSxjb21wYXJlOnRydWUsZGVmYXVsdFByb3BzOnRydWUsZGlzcGxheU5hbWU6dHJ1ZSxwcm9wVHlwZXM6dHJ1ZSx0eXBlOnRydWV9O3ZhciBUWVBFX1NUQVRJQ1M9e307VFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl09Rk9SV0FSRF9SRUZfU1RBVElDUztmdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCl7aWYoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSl7cmV0dXJuIE1FTU9fU1RBVElDUzt9cmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dfHxSRUFDVF9TVEFUSUNTO312YXIgZGVmaW5lUHJvcGVydHk9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO3ZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczt2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIGdldFByb3RvdHlwZU9mPU9iamVjdC5nZXRQcm90b3R5cGVPZjt2YXIgb2JqZWN0UHJvdG90eXBlPU9iamVjdC5wcm90b3R5cGU7ZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LHNvdXJjZUNvbXBvbmVudCxibGFja2xpc3Qpe2lmKHR5cGVvZiBzb3VyY2VDb21wb25lbnQhPT0nc3RyaW5nJyl7Ly8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbmlmKG9iamVjdFByb3RvdHlwZSl7dmFyIGluaGVyaXRlZENvbXBvbmVudD1nZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO2lmKGluaGVyaXRlZENvbXBvbmVudCYmaW5oZXJpdGVkQ29tcG9uZW50IT09b2JqZWN0UHJvdG90eXBlKXtob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsaW5oZXJpdGVkQ29tcG9uZW50LGJsYWNrbGlzdCk7fX12YXIga2V5cz1nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7aWYoZ2V0T3duUHJvcGVydHlTeW1ib2xzKXtrZXlzPWtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTt9dmFyIHRhcmdldFN0YXRpY3M9Z2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO3ZhciBzb3VyY2VTdGF0aWNzPWdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtmb3IodmFyIGk9MDtpPGtleXMubGVuZ3RoOysraSl7dmFyIGtleT1rZXlzW2ldO2lmKCFLTk9XTl9TVEFUSUNTW2tleV0mJiEoYmxhY2tsaXN0JiZibGFja2xpc3Rba2V5XSkmJiEoc291cmNlU3RhdGljcyYmc291cmNlU3RhdGljc1trZXldKSYmISh0YXJnZXRTdGF0aWNzJiZ0YXJnZXRTdGF0aWNzW2tleV0pKXt2YXIgZGVzY3JpcHRvcj1nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LGtleSk7dHJ5ey8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbmRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCxrZXksZGVzY3JpcHRvcik7fWNhdGNoKGUpe319fXJldHVybiB0YXJnZXRDb21wb25lbnQ7fXJldHVybiB0YXJnZXRDb21wb25lbnQ7fW1vZHVsZS5leHBvcnRzPWhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZXgpe3JldHVybiBleCYmKHR5cGVvZiBleD09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YoZXgpKT09PSdvYmplY3QnJiYnZGVmYXVsdCdpbiBleD9leFsnZGVmYXVsdCddOmV4O312YXIgUmVhY3Q9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3JlYWN0JykpO3ZhciBQcm9wVHlwZXM9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSk7dmFyIGhpc3Rvcnk9cmVxdWlyZSgnaGlzdG9yeScpO3ZhciB3YXJuaW5nPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd0aW55LXdhcm5pbmcnKSk7dmFyIGNyZWF0ZUNvbnRleHQ9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnKSk7dmFyIGludmFyaWFudD1faW50ZXJvcERlZmF1bHQocmVxdWlyZSgndGlueS1pbnZhcmlhbnQnKSk7dmFyIHBhdGhUb1JlZ2V4cD1faW50ZXJvcERlZmF1bHQocmVxdWlyZSgncGF0aC10by1yZWdleHAnKSk7dmFyIHJlYWN0SXM9cmVxdWlyZSgncmVhY3QtaXMnKTt2YXIgaG9pc3RTdGF0aWNzPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdob2lzdC1ub24tcmVhY3Qtc3RhdGljcycpKTtmdW5jdGlvbiBfZXh0ZW5kcygpe19leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTtyZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcyxhcmd1bWVudHMpO31mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcyxzdXBlckNsYXNzKXtzdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7c3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yPXN1YkNsYXNzO19zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTt9ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7X3NldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7by5fX3Byb3RvX189cDtyZXR1cm4gbzt9O3JldHVybiBfc2V0UHJvdG90eXBlT2YobyxwKTt9ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLGV4Y2x1ZGVkKXtpZihzb3VyY2U9PW51bGwpcmV0dXJue307dmFyIHRhcmdldD17fTt2YXIgc291cmNlS2V5cz1PYmplY3Qua2V5cyhzb3VyY2UpO3ZhciBrZXksaTtmb3IoaT0wO2k8c291cmNlS2V5cy5sZW5ndGg7aSsrKXtrZXk9c291cmNlS2V5c1tpXTtpZihleGNsdWRlZC5pbmRleE9mKGtleSk+PTApY29udGludWU7dGFyZ2V0W2tleV09c291cmNlW2tleV07fXJldHVybiB0YXJnZXQ7fS8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcbnZhciBjcmVhdGVOYW1lZENvbnRleHQ9ZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpe3ZhciBjb250ZXh0PWNyZWF0ZUNvbnRleHQoKTtjb250ZXh0LmRpc3BsYXlOYW1lPW5hbWU7cmV0dXJuIGNvbnRleHQ7fTt2YXIgaGlzdG9yeUNvbnRleHQ9LyojX19QVVJFX18qL2NyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO3ZhciBjb250ZXh0PS8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7LyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi92YXIgUm91dGVyPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfUmVhY3QkQ29tcG9uZW50KXtfaW5oZXJpdHNMb29zZShSb3V0ZXIsX1JlYWN0JENvbXBvbmVudCk7Um91dGVyLmNvbXB1dGVSb290TWF0Y2g9ZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSl7cmV0dXJue3BhdGg6XCIvXCIsdXJsOlwiL1wiLHBhcmFtczp7fSxpc0V4YWN0OnBhdGhuYW1lPT09XCIvXCJ9O307ZnVuY3Rpb24gUm91dGVyKHByb3BzKXt2YXIgX3RoaXM7X3RoaXM9X1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMscHJvcHMpfHx0aGlzO190aGlzLnN0YXRlPXtsb2NhdGlvbjpwcm9wcy5oaXN0b3J5LmxvY2F0aW9ufTsvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4vLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbi8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5fdGhpcy5faXNNb3VudGVkPWZhbHNlO190aGlzLl9wZW5kaW5nTG9jYXRpb249bnVsbDtpZighcHJvcHMuc3RhdGljQ29udGV4dCl7X3RoaXMudW5saXN0ZW49cHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24obG9jYXRpb24pe2lmKF90aGlzLl9pc01vdW50ZWQpe190aGlzLnNldFN0YXRlKHtsb2NhdGlvbjpsb2NhdGlvbn0pO31lbHNle190aGlzLl9wZW5kaW5nTG9jYXRpb249bG9jYXRpb247fX0pO31yZXR1cm4gX3RoaXM7fXZhciBfcHJvdG89Um91dGVyLnByb3RvdHlwZTtfcHJvdG8uY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKXt0aGlzLl9pc01vdW50ZWQ9dHJ1ZTtpZih0aGlzLl9wZW5kaW5nTG9jYXRpb24pe3RoaXMuc2V0U3RhdGUoe2xvY2F0aW9uOnRoaXMuX3BlbmRpbmdMb2NhdGlvbn0pO319O19wcm90by5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe2lmKHRoaXMudW5saXN0ZW4pe3RoaXMudW5saXN0ZW4oKTt0aGlzLl9pc01vdW50ZWQ9ZmFsc2U7dGhpcy5fcGVuZGluZ0xvY2F0aW9uPW51bGw7fX07X3Byb3RvLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4oLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlcix7dmFsdWU6e2hpc3Rvcnk6dGhpcy5wcm9wcy5oaXN0b3J5LGxvY2F0aW9uOnRoaXMuc3RhdGUubG9jYXRpb24sbWF0Y2g6Um91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksc3RhdGljQ29udGV4dDp0aGlzLnByb3BzLnN0YXRpY0NvbnRleHR9fSwvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlcix7Y2hpbGRyZW46dGhpcy5wcm9wcy5jaGlsZHJlbnx8bnVsbCx2YWx1ZTp0aGlzLnByb3BzLmhpc3Rvcnl9KSkpO307cmV0dXJuIFJvdXRlcjt9KFJlYWN0LkNvbXBvbmVudCk7e1JvdXRlci5wcm9wVHlwZXM9e2NoaWxkcmVuOlByb3BUeXBlcy5ub2RlLGhpc3Rvcnk6UHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLHN0YXRpY0NvbnRleHQ6UHJvcFR5cGVzLm9iamVjdH07Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24ocHJldlByb3BzKXt3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5PT09dGhpcy5wcm9wcy5oaXN0b3J5LFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKTt9O30vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL3ZhciBNZW1vcnlSb3V0ZXI9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9SZWFjdCRDb21wb25lbnQpe19pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlcixfUmVhY3QkQ29tcG9uZW50KTtmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKXt2YXIgX3RoaXM7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1uZXcgQXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31fdGhpcz1fUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCxbdGhpc10uY29uY2F0KGFyZ3MpKXx8dGhpcztfdGhpcy5oaXN0b3J5PWhpc3RvcnkuY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7cmV0dXJuIF90aGlzO312YXIgX3Byb3RvPU1lbW9yeVJvdXRlci5wcm90b3R5cGU7X3Byb3RvLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4oLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLHtoaXN0b3J5OnRoaXMuaGlzdG9yeSxjaGlsZHJlbjp0aGlzLnByb3BzLmNoaWxkcmVufSkpO307cmV0dXJuIE1lbW9yeVJvdXRlcjt9KFJlYWN0LkNvbXBvbmVudCk7e01lbW9yeVJvdXRlci5wcm9wVHlwZXM9e2luaXRpYWxFbnRyaWVzOlByb3BUeXBlcy5hcnJheSxpbml0aWFsSW5kZXg6UHJvcFR5cGVzLm51bWJlcixnZXRVc2VyQ29uZmlybWF0aW9uOlByb3BUeXBlcy5mdW5jLGtleUxlbmd0aDpQcm9wVHlwZXMubnVtYmVyLGNoaWxkcmVuOlByb3BUeXBlcy5ub2RlfTtNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uKCl7d2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIrXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTt9O312YXIgTGlmZWN5Y2xlPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfUmVhY3QkQ29tcG9uZW50KXtfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsX1JlYWN0JENvbXBvbmVudCk7ZnVuY3Rpb24gTGlmZWN5Y2xlKCl7cmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzO312YXIgX3Byb3RvPUxpZmVjeWNsZS5wcm90b3R5cGU7X3Byb3RvLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7aWYodGhpcy5wcm9wcy5vbk1vdW50KXRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsdGhpcyk7fTtfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpe2lmKHRoaXMucHJvcHMub25VcGRhdGUpdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsdGhpcyxwcmV2UHJvcHMpO307X3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7aWYodGhpcy5wcm9wcy5vblVubW91bnQpdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLHRoaXMpO307X3Byb3RvLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gbnVsbDt9O3JldHVybiBMaWZlY3ljbGU7fShSZWFjdC5Db21wb25lbnQpOy8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9mdW5jdGlvbiBQcm9tcHQoX3JlZil7dmFyIG1lc3NhZ2U9X3JlZi5tZXNzYWdlLF9yZWYkd2hlbj1fcmVmLndoZW4sd2hlbj1fcmVmJHdoZW49PT12b2lkIDA/dHJ1ZTpfcmVmJHdoZW47cmV0dXJuKC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbihjb250ZXh0KXshY29udGV4dD9pbnZhcmlhbnQoZmFsc2UsXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpOnZvaWQgMDtpZighd2hlbnx8Y29udGV4dC5zdGF0aWNDb250ZXh0KXJldHVybiBudWxsO3ZhciBtZXRob2Q9Y29udGV4dC5oaXN0b3J5LmJsb2NrO3JldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUse29uTW91bnQ6ZnVuY3Rpb24gb25Nb3VudChzZWxmKXtzZWxmLnJlbGVhc2U9bWV0aG9kKG1lc3NhZ2UpO30sb25VcGRhdGU6ZnVuY3Rpb24gb25VcGRhdGUoc2VsZixwcmV2UHJvcHMpe2lmKHByZXZQcm9wcy5tZXNzYWdlIT09bWVzc2FnZSl7c2VsZi5yZWxlYXNlKCk7c2VsZi5yZWxlYXNlPW1ldGhvZChtZXNzYWdlKTt9fSxvblVubW91bnQ6ZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpe3NlbGYucmVsZWFzZSgpO30sbWVzc2FnZTptZXNzYWdlfSkpO30pKTt9e3ZhciBtZXNzYWdlVHlwZT1Qcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYyxQcm9wVHlwZXMuc3RyaW5nXSk7UHJvbXB0LnByb3BUeXBlcz17d2hlbjpQcm9wVHlwZXMuYm9vbCxtZXNzYWdlOm1lc3NhZ2VUeXBlLmlzUmVxdWlyZWR9O312YXIgY2FjaGU9e307dmFyIGNhY2hlTGltaXQ9MTAwMDA7dmFyIGNhY2hlQ291bnQ9MDtmdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKXtpZihjYWNoZVtwYXRoXSlyZXR1cm4gY2FjaGVbcGF0aF07dmFyIGdlbmVyYXRvcj1wYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtpZihjYWNoZUNvdW50PGNhY2hlTGltaXQpe2NhY2hlW3BhdGhdPWdlbmVyYXRvcjtjYWNoZUNvdW50Kys7fXJldHVybiBnZW5lcmF0b3I7fS8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL2Z1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLHBhcmFtcyl7aWYocGF0aD09PXZvaWQgMCl7cGF0aD1cIi9cIjt9aWYocGFyYW1zPT09dm9pZCAwKXtwYXJhbXM9e307fXJldHVybiBwYXRoPT09XCIvXCI/cGF0aDpjb21waWxlUGF0aChwYXRoKShwYXJhbXMse3ByZXR0eTp0cnVlfSk7fS8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovZnVuY3Rpb24gUmVkaXJlY3QoX3JlZil7dmFyIGNvbXB1dGVkTWF0Y2g9X3JlZi5jb21wdXRlZE1hdGNoLHRvPV9yZWYudG8sX3JlZiRwdXNoPV9yZWYucHVzaCxwdXNoPV9yZWYkcHVzaD09PXZvaWQgMD9mYWxzZTpfcmVmJHB1c2g7cmV0dXJuKC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbihjb250ZXh0KXshY29udGV4dD9pbnZhcmlhbnQoZmFsc2UsXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik6dm9pZCAwO3ZhciBoaXN0b3J5JDE9Y29udGV4dC5oaXN0b3J5LHN0YXRpY0NvbnRleHQ9Y29udGV4dC5zdGF0aWNDb250ZXh0O3ZhciBtZXRob2Q9cHVzaD9oaXN0b3J5JDEucHVzaDpoaXN0b3J5JDEucmVwbGFjZTt2YXIgbG9jYXRpb249aGlzdG9yeS5jcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoP3R5cGVvZiB0bz09PVwic3RyaW5nXCI/Z2VuZXJhdGVQYXRoKHRvLGNvbXB1dGVkTWF0Y2gucGFyYW1zKTpfZXh0ZW5kcyh7fSx0byx7cGF0aG5hbWU6Z2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLGNvbXB1dGVkTWF0Y2gucGFyYW1zKX0pOnRvKTsvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5pZihzdGF0aWNDb250ZXh0KXttZXRob2QobG9jYXRpb24pO3JldHVybiBudWxsO31yZXR1cm4oLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLHtvbk1vdW50OmZ1bmN0aW9uIG9uTW91bnQoKXttZXRob2QobG9jYXRpb24pO30sb25VcGRhdGU6ZnVuY3Rpb24gb25VcGRhdGUoc2VsZixwcmV2UHJvcHMpe3ZhciBwcmV2TG9jYXRpb249aGlzdG9yeS5jcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO2lmKCFoaXN0b3J5LmxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbixfZXh0ZW5kcyh7fSxsb2NhdGlvbix7a2V5OnByZXZMb2NhdGlvbi5rZXl9KSkpe21ldGhvZChsb2NhdGlvbik7fX0sdG86dG99KSk7fSkpO317UmVkaXJlY3QucHJvcFR5cGVzPXtwdXNoOlByb3BUeXBlcy5ib29sLGZyb206UHJvcFR5cGVzLnN0cmluZyx0bzpQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkfTt9dmFyIGNhY2hlJDE9e307dmFyIGNhY2hlTGltaXQkMT0xMDAwMDt2YXIgY2FjaGVDb3VudCQxPTA7ZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLG9wdGlvbnMpe3ZhciBjYWNoZUtleT1cIlwiK29wdGlvbnMuZW5kK29wdGlvbnMuc3RyaWN0K29wdGlvbnMuc2Vuc2l0aXZlO3ZhciBwYXRoQ2FjaGU9Y2FjaGUkMVtjYWNoZUtleV18fChjYWNoZSQxW2NhY2hlS2V5XT17fSk7aWYocGF0aENhY2hlW3BhdGhdKXJldHVybiBwYXRoQ2FjaGVbcGF0aF07dmFyIGtleXM9W107dmFyIHJlZ2V4cD1wYXRoVG9SZWdleHAocGF0aCxrZXlzLG9wdGlvbnMpO3ZhciByZXN1bHQ9e3JlZ2V4cDpyZWdleHAsa2V5czprZXlzfTtpZihjYWNoZUNvdW50JDE8Y2FjaGVMaW1pdCQxKXtwYXRoQ2FjaGVbcGF0aF09cmVzdWx0O2NhY2hlQ291bnQkMSsrO31yZXR1cm4gcmVzdWx0O30vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL2Z1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSxvcHRpb25zKXtpZihvcHRpb25zPT09dm9pZCAwKXtvcHRpb25zPXt9O31pZih0eXBlb2Ygb3B0aW9ucz09PVwic3RyaW5nXCJ8fEFycmF5LmlzQXJyYXkob3B0aW9ucykpe29wdGlvbnM9e3BhdGg6b3B0aW9uc307fXZhciBfb3B0aW9ucz1vcHRpb25zLHBhdGg9X29wdGlvbnMucGF0aCxfb3B0aW9ucyRleGFjdD1fb3B0aW9ucy5leGFjdCxleGFjdD1fb3B0aW9ucyRleGFjdD09PXZvaWQgMD9mYWxzZTpfb3B0aW9ucyRleGFjdCxfb3B0aW9ucyRzdHJpY3Q9X29wdGlvbnMuc3RyaWN0LHN0cmljdD1fb3B0aW9ucyRzdHJpY3Q9PT12b2lkIDA/ZmFsc2U6X29wdGlvbnMkc3RyaWN0LF9vcHRpb25zJHNlbnNpdGl2ZT1fb3B0aW9ucy5zZW5zaXRpdmUsc2Vuc2l0aXZlPV9vcHRpb25zJHNlbnNpdGl2ZT09PXZvaWQgMD9mYWxzZTpfb3B0aW9ucyRzZW5zaXRpdmU7dmFyIHBhdGhzPVtdLmNvbmNhdChwYXRoKTtyZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uKG1hdGNoZWQscGF0aCl7aWYoIXBhdGgmJnBhdGghPT1cIlwiKXJldHVybiBudWxsO2lmKG1hdGNoZWQpcmV0dXJuIG1hdGNoZWQ7dmFyIF9jb21waWxlUGF0aD1jb21waWxlUGF0aCQxKHBhdGgse2VuZDpleGFjdCxzdHJpY3Q6c3RyaWN0LHNlbnNpdGl2ZTpzZW5zaXRpdmV9KSxyZWdleHA9X2NvbXBpbGVQYXRoLnJlZ2V4cCxrZXlzPV9jb21waWxlUGF0aC5rZXlzO3ZhciBtYXRjaD1yZWdleHAuZXhlYyhwYXRobmFtZSk7aWYoIW1hdGNoKXJldHVybiBudWxsO3ZhciB1cmw9bWF0Y2hbMF0sdmFsdWVzPW1hdGNoLnNsaWNlKDEpO3ZhciBpc0V4YWN0PXBhdGhuYW1lPT09dXJsO2lmKGV4YWN0JiYhaXNFeGFjdClyZXR1cm4gbnVsbDtyZXR1cm57cGF0aDpwYXRoLC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbnVybDpwYXRoPT09XCIvXCImJnVybD09PVwiXCI/XCIvXCI6dXJsLC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuaXNFeGFjdDppc0V4YWN0LC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxucGFyYW1zOmtleXMucmVkdWNlKGZ1bmN0aW9uKG1lbW8sa2V5LGluZGV4KXttZW1vW2tleS5uYW1lXT12YWx1ZXNbaW5kZXhdO3JldHVybiBtZW1vO30se30pfTt9LG51bGwpO31mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pe3JldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbik9PT0wO31mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4scHJvcHMscGF0aCl7dmFyIHZhbHVlPWNoaWxkcmVuKHByb3BzKTt3YXJuaW5nKHZhbHVlIT09dW5kZWZpbmVkLFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIrKFwiPFJvdXRlXCIrKHBhdGg/XCIgcGF0aD1cXFwiXCIrcGF0aCtcIlxcXCJcIjpcIlwiKStcIj4sIGJ1dCB5b3UgXCIpK1wic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKTtyZXR1cm4gdmFsdWV8fG51bGw7fS8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL3ZhciBSb3V0ZT0vKiNfX1BVUkVfXyovZnVuY3Rpb24oX1JlYWN0JENvbXBvbmVudCl7X2luaGVyaXRzTG9vc2UoUm91dGUsX1JlYWN0JENvbXBvbmVudCk7ZnVuY3Rpb24gUm91dGUoKXtyZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7fXZhciBfcHJvdG89Um91dGUucHJvdG90eXBlO19wcm90by5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIF90aGlzPXRoaXM7cmV0dXJuKC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbihjb250ZXh0JDEpeyFjb250ZXh0JDE/aW52YXJpYW50KGZhbHNlLFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpOnZvaWQgMDt2YXIgbG9jYXRpb249X3RoaXMucHJvcHMubG9jYXRpb258fGNvbnRleHQkMS5sb2NhdGlvbjt2YXIgbWF0Y2g9X3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaD9fdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG46X3RoaXMucHJvcHMucGF0aD9tYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsX3RoaXMucHJvcHMpOmNvbnRleHQkMS5tYXRjaDt2YXIgcHJvcHM9X2V4dGVuZHMoe30sY29udGV4dCQxLHtsb2NhdGlvbjpsb2NhdGlvbixtYXRjaDptYXRjaH0pO3ZhciBfdGhpcyRwcm9wcz1fdGhpcy5wcm9wcyxjaGlsZHJlbj1fdGhpcyRwcm9wcy5jaGlsZHJlbixjb21wb25lbnQ9X3RoaXMkcHJvcHMuY29tcG9uZW50LHJlbmRlcj1fdGhpcyRwcm9wcy5yZW5kZXI7Ly8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbi8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cbmlmKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pJiZpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKXtjaGlsZHJlbj1udWxsO31yZXR1cm4oLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlcix7dmFsdWU6cHJvcHN9LHByb3BzLm1hdGNoP2NoaWxkcmVuP3R5cGVvZiBjaGlsZHJlbj09PVwiZnVuY3Rpb25cIj9ldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4scHJvcHMsX3RoaXMucHJvcHMucGF0aCk6Y2hpbGRyZW46Y29tcG9uZW50Py8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCxwcm9wcyk6cmVuZGVyP3JlbmRlcihwcm9wcyk6bnVsbDp0eXBlb2YgY2hpbGRyZW49PT1cImZ1bmN0aW9uXCI/ZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLHByb3BzLF90aGlzLnByb3BzLnBhdGgpOm51bGwpKTt9KSk7fTtyZXR1cm4gUm91dGU7fShSZWFjdC5Db21wb25lbnQpO3tSb3V0ZS5wcm9wVHlwZXM9e2NoaWxkcmVuOlByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLFByb3BUeXBlcy5ub2RlXSksY29tcG9uZW50OmZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcyxwcm9wTmFtZSl7aWYocHJvcHNbcHJvcE5hbWVdJiYhcmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSl7cmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7fX0sZXhhY3Q6UHJvcFR5cGVzLmJvb2wsbG9jYXRpb246UHJvcFR5cGVzLm9iamVjdCxwYXRoOlByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxyZW5kZXI6UHJvcFR5cGVzLmZ1bmMsc2Vuc2l0aXZlOlByb3BUeXBlcy5ib29sLHN0cmljdDpQcm9wVHlwZXMuYm9vbH07Um91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uKCl7d2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4mJiFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikmJnRoaXMucHJvcHMuY29tcG9uZW50KSxcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpO3dhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuJiYhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pJiZ0aGlzLnByb3BzLnJlbmRlciksXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTt3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQmJnRoaXMucHJvcHMucmVuZGVyKSxcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTt9O1JvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24ocHJldlByb3BzKXt3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiYmIXByZXZQcm9wcy5sb2NhdGlvbiksJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTt3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24mJnByZXZQcm9wcy5sb2NhdGlvbiksJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO307fWZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT1cIi9cIj9wYXRoOlwiL1wiK3BhdGg7fWZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLGxvY2F0aW9uKXtpZighYmFzZW5hbWUpcmV0dXJuIGxvY2F0aW9uO3JldHVybiBfZXh0ZW5kcyh7fSxsb2NhdGlvbix7cGF0aG5hbWU6YWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKStsb2NhdGlvbi5wYXRobmFtZX0pO31mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLGxvY2F0aW9uKXtpZighYmFzZW5hbWUpcmV0dXJuIGxvY2F0aW9uO3ZhciBiYXNlPWFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7aWYobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSE9PTApcmV0dXJuIGxvY2F0aW9uO3JldHVybiBfZXh0ZW5kcyh7fSxsb2NhdGlvbix7cGF0aG5hbWU6bG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKX0pO31mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pe3JldHVybiB0eXBlb2YgbG9jYXRpb249PT1cInN0cmluZ1wiP2xvY2F0aW9uOmhpc3RvcnkuY3JlYXRlUGF0aChsb2NhdGlvbik7fWZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSl7cmV0dXJuIGZ1bmN0aW9uKCl7aW52YXJpYW50KGZhbHNlLFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsbWV0aG9kTmFtZSk7fTt9ZnVuY3Rpb24gbm9vcCgpe30vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi92YXIgU3RhdGljUm91dGVyPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfUmVhY3QkQ29tcG9uZW50KXtfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsX1JlYWN0JENvbXBvbmVudCk7ZnVuY3Rpb24gU3RhdGljUm91dGVyKCl7dmFyIF90aGlzO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9bmV3IEFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9X3RoaXM9X1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsW3RoaXNdLmNvbmNhdChhcmdzKSl8fHRoaXM7X3RoaXMuaGFuZGxlUHVzaD1mdW5jdGlvbihsb2NhdGlvbil7cmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sXCJQVVNIXCIpO307X3RoaXMuaGFuZGxlUmVwbGFjZT1mdW5jdGlvbihsb2NhdGlvbil7cmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sXCJSRVBMQUNFXCIpO307X3RoaXMuaGFuZGxlTGlzdGVuPWZ1bmN0aW9uKCl7cmV0dXJuIG5vb3A7fTtfdGhpcy5oYW5kbGVCbG9jaz1mdW5jdGlvbigpe3JldHVybiBub29wO307cmV0dXJuIF90aGlzO312YXIgX3Byb3RvPVN0YXRpY1JvdXRlci5wcm90b3R5cGU7X3Byb3RvLm5hdmlnYXRlVG89ZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbixhY3Rpb24pe3ZhciBfdGhpcyRwcm9wcz10aGlzLnByb3BzLF90aGlzJHByb3BzJGJhc2VuYW1lPV90aGlzJHByb3BzLmJhc2VuYW1lLGJhc2VuYW1lPV90aGlzJHByb3BzJGJhc2VuYW1lPT09dm9pZCAwP1wiXCI6X3RoaXMkcHJvcHMkYmFzZW5hbWUsX3RoaXMkcHJvcHMkY29udGV4dD1fdGhpcyRwcm9wcy5jb250ZXh0LGNvbnRleHQ9X3RoaXMkcHJvcHMkY29udGV4dD09PXZvaWQgMD97fTpfdGhpcyRwcm9wcyRjb250ZXh0O2NvbnRleHQuYWN0aW9uPWFjdGlvbjtjb250ZXh0LmxvY2F0aW9uPWFkZEJhc2VuYW1lKGJhc2VuYW1lLGhpc3RvcnkuY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtjb250ZXh0LnVybD1jcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7fTtfcHJvdG8ucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdGhpcyRwcm9wczI9dGhpcy5wcm9wcyxfdGhpcyRwcm9wczIkYmFzZW5hbWU9X3RoaXMkcHJvcHMyLmJhc2VuYW1lLGJhc2VuYW1lPV90aGlzJHByb3BzMiRiYXNlbmFtZT09PXZvaWQgMD9cIlwiOl90aGlzJHByb3BzMiRiYXNlbmFtZSxfdGhpcyRwcm9wczIkY29udGV4dD1fdGhpcyRwcm9wczIuY29udGV4dCxjb250ZXh0PV90aGlzJHByb3BzMiRjb250ZXh0PT09dm9pZCAwP3t9Ol90aGlzJHByb3BzMiRjb250ZXh0LF90aGlzJHByb3BzMiRsb2NhdGlvbj1fdGhpcyRwcm9wczIubG9jYXRpb24sbG9jYXRpb249X3RoaXMkcHJvcHMyJGxvY2F0aW9uPT09dm9pZCAwP1wiL1wiOl90aGlzJHByb3BzMiRsb2NhdGlvbixyZXN0PV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMixbXCJiYXNlbmFtZVwiLFwiY29udGV4dFwiLFwibG9jYXRpb25cIl0pO3ZhciBoaXN0b3J5JDE9e2NyZWF0ZUhyZWY6ZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKXtyZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lK2NyZWF0ZVVSTChwYXRoKSk7fSxhY3Rpb246XCJQT1BcIixsb2NhdGlvbjpzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLGhpc3RvcnkuY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxwdXNoOnRoaXMuaGFuZGxlUHVzaCxyZXBsYWNlOnRoaXMuaGFuZGxlUmVwbGFjZSxnbzpzdGF0aWNIYW5kbGVyKFwiZ29cIiksZ29CYWNrOnN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksZ29Gb3J3YXJkOnN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksbGlzdGVuOnRoaXMuaGFuZGxlTGlzdGVuLGJsb2NrOnRoaXMuaGFuZGxlQmxvY2t9O3JldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsX2V4dGVuZHMoe30scmVzdCx7aGlzdG9yeTpoaXN0b3J5JDEsc3RhdGljQ29udGV4dDpjb250ZXh0fSkpKTt9O3JldHVybiBTdGF0aWNSb3V0ZXI7fShSZWFjdC5Db21wb25lbnQpO3tTdGF0aWNSb3V0ZXIucHJvcFR5cGVzPXtiYXNlbmFtZTpQcm9wVHlwZXMuc3RyaW5nLGNvbnRleHQ6UHJvcFR5cGVzLm9iamVjdCxsb2NhdGlvbjpQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLFByb3BUeXBlcy5vYmplY3RdKX07U3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbigpe3dhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSxcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiK1widXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7fTt9LyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL3ZhciBTd2l0Y2g9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9SZWFjdCRDb21wb25lbnQpe19pbmhlcml0c0xvb3NlKFN3aXRjaCxfUmVhY3QkQ29tcG9uZW50KTtmdW5jdGlvbiBTd2l0Y2goKXtyZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7fXZhciBfcHJvdG89U3dpdGNoLnByb3RvdHlwZTtfcHJvdG8ucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdGhpcz10aGlzO3JldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLG51bGwsZnVuY3Rpb24oY29udGV4dCl7IWNvbnRleHQ/aW52YXJpYW50KGZhbHNlLFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTp2b2lkIDA7dmFyIGxvY2F0aW9uPV90aGlzLnByb3BzLmxvY2F0aW9ufHxjb250ZXh0LmxvY2F0aW9uO3ZhciBlbGVtZW50LG1hdGNoOy8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbi8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbi8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sZnVuY3Rpb24oY2hpbGQpe2lmKG1hdGNoPT1udWxsJiYvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKXtlbGVtZW50PWNoaWxkO3ZhciBwYXRoPWNoaWxkLnByb3BzLnBhdGh8fGNoaWxkLnByb3BzLmZyb207bWF0Y2g9cGF0aD9tYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsX2V4dGVuZHMoe30sY2hpbGQucHJvcHMse3BhdGg6cGF0aH0pKTpjb250ZXh0Lm1hdGNoO319KTtyZXR1cm4gbWF0Y2g/LyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LHtsb2NhdGlvbjpsb2NhdGlvbixjb21wdXRlZE1hdGNoOm1hdGNofSk6bnVsbDt9KSk7fTtyZXR1cm4gU3dpdGNoO30oUmVhY3QuQ29tcG9uZW50KTt7U3dpdGNoLnByb3BUeXBlcz17Y2hpbGRyZW46UHJvcFR5cGVzLm5vZGUsbG9jYXRpb246UHJvcFR5cGVzLm9iamVjdH07U3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24ocHJldlByb3BzKXt3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiYmIXByZXZQcm9wcy5sb2NhdGlvbiksJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7d2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uJiZwcmV2UHJvcHMubG9jYXRpb24pLCc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7fTt9LyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL2Z1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KXt2YXIgZGlzcGxheU5hbWU9XCJ3aXRoUm91dGVyKFwiKyhDb21wb25lbnQuZGlzcGxheU5hbWV8fENvbXBvbmVudC5uYW1lKStcIilcIjt2YXIgQz1mdW5jdGlvbiBDKHByb3BzKXt2YXIgd3JhcHBlZENvbXBvbmVudFJlZj1wcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLHJlbWFpbmluZ1Byb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO3JldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLG51bGwsZnVuY3Rpb24oY29udGV4dCl7IWNvbnRleHQ/aW52YXJpYW50KGZhbHNlLFwiWW91IHNob3VsZCBub3QgdXNlIDxcIitkaXNwbGF5TmFtZStcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik6dm9pZCAwO3JldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsX2V4dGVuZHMoe30scmVtYWluaW5nUHJvcHMsY29udGV4dCx7cmVmOndyYXBwZWRDb21wb25lbnRSZWZ9KSkpO30pKTt9O0MuZGlzcGxheU5hbWU9ZGlzcGxheU5hbWU7Qy5XcmFwcGVkQ29tcG9uZW50PUNvbXBvbmVudDt7Qy5wcm9wVHlwZXM9e3dyYXBwZWRDb21wb25lbnRSZWY6UHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZyxQcm9wVHlwZXMuZnVuYyxQcm9wVHlwZXMub2JqZWN0XSl9O31yZXR1cm4gaG9pc3RTdGF0aWNzKEMsQ29tcG9uZW50KTt9dmFyIHVzZUNvbnRleHQ9UmVhY3QudXNlQ29udGV4dDtmdW5jdGlvbiB1c2VIaXN0b3J5KCl7eyEodHlwZW9mIHVzZUNvbnRleHQ9PT1cImZ1bmN0aW9uXCIpP2ludmFyaWFudChmYWxzZSxcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIik6dm9pZCAwO31yZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7fWZ1bmN0aW9uIHVzZUxvY2F0aW9uKCl7eyEodHlwZW9mIHVzZUNvbnRleHQ9PT1cImZ1bmN0aW9uXCIpP2ludmFyaWFudChmYWxzZSxcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpOnZvaWQgMDt9cmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247fWZ1bmN0aW9uIHVzZVBhcmFtcygpe3shKHR5cGVvZiB1c2VDb250ZXh0PT09XCJmdW5jdGlvblwiKT9pbnZhcmlhbnQoZmFsc2UsXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIik6dm9pZCAwO312YXIgbWF0Y2g9dXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtyZXR1cm4gbWF0Y2g/bWF0Y2gucGFyYW1zOnt9O31mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpe3shKHR5cGVvZiB1c2VDb250ZXh0PT09XCJmdW5jdGlvblwiKT9pbnZhcmlhbnQoZmFsc2UsXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpOnZvaWQgMDt9dmFyIGxvY2F0aW9uPXVzZUxvY2F0aW9uKCk7dmFyIG1hdGNoPXVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7cmV0dXJuIHBhdGg/bWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLHBhdGgpOm1hdGNoO317aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe3ZhciBnbG9iYWw9d2luZG93O3ZhciBrZXk9XCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7dmFyIGJ1aWxkTmFtZXM9e2NqczpcIkNvbW1vbkpTXCIsZXNtOlwiRVMgbW9kdWxlc1wiLHVtZDpcIlVNRFwifTtpZihnbG9iYWxba2V5XSYmZ2xvYmFsW2tleV0hPT1cImNqc1wiKXt2YXIgaW5pdGlhbEJ1aWxkTmFtZT1idWlsZE5hbWVzW2dsb2JhbFtrZXldXTt2YXIgc2Vjb25kYXJ5QnVpbGROYW1lPWJ1aWxkTmFtZXNbXCJjanNcIl07Ly8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbi8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxudGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIitzZWNvbmRhcnlCdWlsZE5hbWUrXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiKyhcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIraW5pdGlhbEJ1aWxkTmFtZStcIiBcIikrXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO31nbG9iYWxba2V5XT1cImNqc1wiO319ZXhwb3J0cy5NZW1vcnlSb3V0ZXI9TWVtb3J5Um91dGVyO2V4cG9ydHMuUHJvbXB0PVByb21wdDtleHBvcnRzLlJlZGlyZWN0PVJlZGlyZWN0O2V4cG9ydHMuUm91dGU9Um91dGU7ZXhwb3J0cy5Sb3V0ZXI9Um91dGVyO2V4cG9ydHMuU3RhdGljUm91dGVyPVN0YXRpY1JvdXRlcjtleHBvcnRzLlN3aXRjaD1Td2l0Y2g7ZXhwb3J0cy5fX0hpc3RvcnlDb250ZXh0PWhpc3RvcnlDb250ZXh0O2V4cG9ydHMuX19Sb3V0ZXJDb250ZXh0PWNvbnRleHQ7ZXhwb3J0cy5nZW5lcmF0ZVBhdGg9Z2VuZXJhdGVQYXRoO2V4cG9ydHMubWF0Y2hQYXRoPW1hdGNoUGF0aDtleHBvcnRzLnVzZUhpc3Rvcnk9dXNlSGlzdG9yeTtleHBvcnRzLnVzZUxvY2F0aW9uPXVzZUxvY2F0aW9uO2V4cG9ydHMudXNlUGFyYW1zPXVzZVBhcmFtcztleHBvcnRzLnVzZVJvdXRlTWF0Y2g9dXNlUm91dGVNYXRjaDtleHBvcnRzLndpdGhSb3V0ZXI9d2l0aFJvdXRlcjsvLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LXJvdXRlci9janMvcmVhY3Qtcm91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O2Z1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdChleCl7cmV0dXJuIGV4JiYodHlwZW9mIGV4PT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihleCkpPT09J29iamVjdCcmJidkZWZhdWx0J2luIGV4P2V4WydkZWZhdWx0J106ZXg7fXZhciByZWFjdFJvdXRlcj1yZXF1aXJlKCdyZWFjdC1yb3V0ZXInKTt2YXIgUmVhY3Q9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3JlYWN0JykpO3ZhciBoaXN0b3J5PXJlcXVpcmUoJ2hpc3RvcnknKTt2YXIgUHJvcFR5cGVzPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdwcm9wLXR5cGVzJykpO3ZhciB3YXJuaW5nPV9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd0aW55LXdhcm5pbmcnKSk7dmFyIGludmFyaWFudD1faW50ZXJvcERlZmF1bHQocmVxdWlyZSgndGlueS1pbnZhcmlhbnQnKSk7ZnVuY3Rpb24gX2V4dGVuZHMoKXtfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307cmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9ZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO3N1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1zdWJDbGFzcztfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk7fWZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLHApe19zZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLHApe28uX19wcm90b19fPXA7cmV0dXJuIG87fTtyZXR1cm4gX3NldFByb3RvdHlwZU9mKG8scCk7fWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSxleGNsdWRlZCl7aWYoc291cmNlPT1udWxsKXJldHVybnt9O3ZhciB0YXJnZXQ9e307dmFyIHNvdXJjZUtleXM9T2JqZWN0LmtleXMoc291cmNlKTt2YXIga2V5LGk7Zm9yKGk9MDtpPHNvdXJjZUtleXMubGVuZ3RoO2krKyl7a2V5PXNvdXJjZUtleXNbaV07aWYoZXhjbHVkZWQuaW5kZXhPZihrZXkpPj0wKWNvbnRpbnVlO3RhcmdldFtrZXldPXNvdXJjZVtrZXldO31yZXR1cm4gdGFyZ2V0O30vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovdmFyIEJyb3dzZXJSb3V0ZXI9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9SZWFjdCRDb21wb25lbnQpe19pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsX1JlYWN0JENvbXBvbmVudCk7ZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpe3ZhciBfdGhpcztmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPW5ldyBBcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fV90aGlzPV9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LFt0aGlzXS5jb25jYXQoYXJncykpfHx0aGlzO190aGlzLmhpc3Rvcnk9aGlzdG9yeS5jcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7cmV0dXJuIF90aGlzO312YXIgX3Byb3RvPUJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO19wcm90by5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuKC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0Um91dGVyLlJvdXRlcix7aGlzdG9yeTp0aGlzLmhpc3RvcnksY2hpbGRyZW46dGhpcy5wcm9wcy5jaGlsZHJlbn0pKTt9O3JldHVybiBCcm93c2VyUm91dGVyO30oUmVhY3QuQ29tcG9uZW50KTt7QnJvd3NlclJvdXRlci5wcm9wVHlwZXM9e2Jhc2VuYW1lOlByb3BUeXBlcy5zdHJpbmcsY2hpbGRyZW46UHJvcFR5cGVzLm5vZGUsZm9yY2VSZWZyZXNoOlByb3BUeXBlcy5ib29sLGdldFVzZXJDb25maXJtYXRpb246UHJvcFR5cGVzLmZ1bmMsa2V5TGVuZ3RoOlByb3BUeXBlcy5udW1iZXJ9O0Jyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uKCl7d2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiK1widXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO307fS8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovdmFyIEhhc2hSb3V0ZXI9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9SZWFjdCRDb21wb25lbnQpe19pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsX1JlYWN0JENvbXBvbmVudCk7ZnVuY3Rpb24gSGFzaFJvdXRlcigpe3ZhciBfdGhpcztmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPW5ldyBBcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fV90aGlzPV9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LFt0aGlzXS5jb25jYXQoYXJncykpfHx0aGlzO190aGlzLmhpc3Rvcnk9aGlzdG9yeS5jcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7cmV0dXJuIF90aGlzO312YXIgX3Byb3RvPUhhc2hSb3V0ZXIucHJvdG90eXBlO19wcm90by5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuKC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0Um91dGVyLlJvdXRlcix7aGlzdG9yeTp0aGlzLmhpc3RvcnksY2hpbGRyZW46dGhpcy5wcm9wcy5jaGlsZHJlbn0pKTt9O3JldHVybiBIYXNoUm91dGVyO30oUmVhY3QuQ29tcG9uZW50KTt7SGFzaFJvdXRlci5wcm9wVHlwZXM9e2Jhc2VuYW1lOlByb3BUeXBlcy5zdHJpbmcsY2hpbGRyZW46UHJvcFR5cGVzLm5vZGUsZ2V0VXNlckNvbmZpcm1hdGlvbjpQcm9wVHlwZXMuZnVuYyxoYXNoVHlwZTpQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIixcIm5vc2xhc2hcIixcInNsYXNoXCJdKX07SGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24oKXt3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIrXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7fTt9dmFyIHJlc29sdmVUb0xvY2F0aW9uPWZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLGN1cnJlbnRMb2NhdGlvbil7cmV0dXJuIHR5cGVvZiB0bz09PVwiZnVuY3Rpb25cIj90byhjdXJyZW50TG9jYXRpb24pOnRvO307dmFyIG5vcm1hbGl6ZVRvTG9jYXRpb249ZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0byxjdXJyZW50TG9jYXRpb24pe3JldHVybiB0eXBlb2YgdG89PT1cInN0cmluZ1wiP2hpc3RvcnkuY3JlYXRlTG9jYXRpb24odG8sbnVsbCxudWxsLGN1cnJlbnRMb2NhdGlvbik6dG87fTt2YXIgZm9yd2FyZFJlZlNoaW09ZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQyl7cmV0dXJuIEM7fTt2YXIgZm9yd2FyZFJlZj1SZWFjdC5mb3J3YXJkUmVmO2lmKHR5cGVvZiBmb3J3YXJkUmVmPT09XCJ1bmRlZmluZWRcIil7Zm9yd2FyZFJlZj1mb3J3YXJkUmVmU2hpbTt9ZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KXtyZXR1cm4hIShldmVudC5tZXRhS2V5fHxldmVudC5hbHRLZXl8fGV2ZW50LmN0cmxLZXl8fGV2ZW50LnNoaWZ0S2V5KTt9dmFyIExpbmtBbmNob3I9Zm9yd2FyZFJlZihmdW5jdGlvbihfcmVmLGZvcndhcmRlZFJlZil7dmFyIGlubmVyUmVmPV9yZWYuaW5uZXJSZWYsbmF2aWdhdGU9X3JlZi5uYXZpZ2F0ZSxfb25DbGljaz1fcmVmLm9uQ2xpY2sscmVzdD1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLFtcImlubmVyUmVmXCIsXCJuYXZpZ2F0ZVwiLFwib25DbGlja1wiXSk7dmFyIHRhcmdldD1yZXN0LnRhcmdldDt2YXIgcHJvcHM9X2V4dGVuZHMoe30scmVzdCx7b25DbGljazpmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KXt0cnl7aWYoX29uQ2xpY2spX29uQ2xpY2soZXZlbnQpO31jYXRjaChleCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTt0aHJvdyBleDt9aWYoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQmJi8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbmV2ZW50LmJ1dHRvbj09PTAmJigvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiF0YXJnZXR8fHRhcmdldD09PVwiX3NlbGZcIikmJi8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4haXNNb2RpZmllZEV2ZW50KGV2ZW50KS8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4pe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7bmF2aWdhdGUoKTt9fX0pOy8vIFJlYWN0IDE1IGNvbXBhdFxuaWYoZm9yd2FyZFJlZlNoaW0hPT1mb3J3YXJkUmVmKXtwcm9wcy5yZWY9Zm9yd2FyZGVkUmVmfHxpbm5lclJlZjt9ZWxzZXtwcm9wcy5yZWY9aW5uZXJSZWY7fS8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9yZXR1cm4oLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIscHJvcHMpKTt9KTt7TGlua0FuY2hvci5kaXNwbGF5TmFtZT1cIkxpbmtBbmNob3JcIjt9LyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi92YXIgTGluaz1mb3J3YXJkUmVmKGZ1bmN0aW9uKF9yZWYyLGZvcndhcmRlZFJlZil7dmFyIF9yZWYyJGNvbXBvbmVudD1fcmVmMi5jb21wb25lbnQsY29tcG9uZW50PV9yZWYyJGNvbXBvbmVudD09PXZvaWQgMD9MaW5rQW5jaG9yOl9yZWYyJGNvbXBvbmVudCxyZXBsYWNlPV9yZWYyLnJlcGxhY2UsdG89X3JlZjIudG8saW5uZXJSZWY9X3JlZjIuaW5uZXJSZWYscmVzdD1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMixbXCJjb21wb25lbnRcIixcInJlcGxhY2VcIixcInRvXCIsXCJpbm5lclJlZlwiXSk7cmV0dXJuKC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0Um91dGVyLl9fUm91dGVyQ29udGV4dC5Db25zdW1lcixudWxsLGZ1bmN0aW9uKGNvbnRleHQpeyFjb250ZXh0P2ludmFyaWFudChmYWxzZSxcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpOnZvaWQgMDt2YXIgaGlzdG9yeSQxPWNvbnRleHQuaGlzdG9yeTt2YXIgbG9jYXRpb249bm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0byxjb250ZXh0LmxvY2F0aW9uKSxjb250ZXh0LmxvY2F0aW9uKTt2YXIgaHJlZj1sb2NhdGlvbj9oaXN0b3J5JDEuY3JlYXRlSHJlZihsb2NhdGlvbik6XCJcIjt2YXIgcHJvcHM9X2V4dGVuZHMoe30scmVzdCx7aHJlZjpocmVmLG5hdmlnYXRlOmZ1bmN0aW9uIG5hdmlnYXRlKCl7dmFyIGxvY2F0aW9uPXJlc29sdmVUb0xvY2F0aW9uKHRvLGNvbnRleHQubG9jYXRpb24pO3ZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb249aGlzdG9yeS5jcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pPT09aGlzdG9yeS5jcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTt2YXIgbWV0aG9kPXJlcGxhY2V8fGlzRHVwbGljYXRlTmF2aWdhdGlvbj9oaXN0b3J5JDEucmVwbGFjZTpoaXN0b3J5JDEucHVzaDttZXRob2QobG9jYXRpb24pO319KTsvLyBSZWFjdCAxNSBjb21wYXRcbmlmKGZvcndhcmRSZWZTaGltIT09Zm9yd2FyZFJlZil7cHJvcHMucmVmPWZvcndhcmRlZFJlZnx8aW5uZXJSZWY7fWVsc2V7cHJvcHMuaW5uZXJSZWY9aW5uZXJSZWY7fXJldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQscHJvcHMpKTt9KSk7fSk7e3ZhciB0b1R5cGU9UHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZyxQcm9wVHlwZXMub2JqZWN0LFByb3BUeXBlcy5mdW5jXSk7dmFyIHJlZlR5cGU9UHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZyxQcm9wVHlwZXMuZnVuYyxQcm9wVHlwZXMuc2hhcGUoe2N1cnJlbnQ6UHJvcFR5cGVzLmFueX0pXSk7TGluay5kaXNwbGF5TmFtZT1cIkxpbmtcIjtMaW5rLnByb3BUeXBlcz17aW5uZXJSZWY6cmVmVHlwZSxvbkNsaWNrOlByb3BUeXBlcy5mdW5jLHJlcGxhY2U6UHJvcFR5cGVzLmJvb2wsdGFyZ2V0OlByb3BUeXBlcy5zdHJpbmcsdG86dG9UeXBlLmlzUmVxdWlyZWR9O312YXIgZm9yd2FyZFJlZlNoaW0kMT1mdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKXtyZXR1cm4gQzt9O3ZhciBmb3J3YXJkUmVmJDE9UmVhY3QuZm9yd2FyZFJlZjtpZih0eXBlb2YgZm9yd2FyZFJlZiQxPT09XCJ1bmRlZmluZWRcIil7Zm9yd2FyZFJlZiQxPWZvcndhcmRSZWZTaGltJDE7fWZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCl7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsY2xhc3NuYW1lcz1uZXcgQXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2NsYXNzbmFtZXNbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24oaSl7cmV0dXJuIGk7fSkuam9pbihcIiBcIik7fS8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi92YXIgTmF2TGluaz1mb3J3YXJkUmVmJDEoZnVuY3Rpb24oX3JlZixmb3J3YXJkZWRSZWYpe3ZhciBfcmVmJGFyaWFDdXJyZW50PV9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sYXJpYUN1cnJlbnQ9X3JlZiRhcmlhQ3VycmVudD09PXZvaWQgMD9cInBhZ2VcIjpfcmVmJGFyaWFDdXJyZW50LF9yZWYkYWN0aXZlQ2xhc3NOYW1lPV9yZWYuYWN0aXZlQ2xhc3NOYW1lLGFjdGl2ZUNsYXNzTmFtZT1fcmVmJGFjdGl2ZUNsYXNzTmFtZT09PXZvaWQgMD9cImFjdGl2ZVwiOl9yZWYkYWN0aXZlQ2xhc3NOYW1lLGFjdGl2ZVN0eWxlPV9yZWYuYWN0aXZlU3R5bGUsY2xhc3NOYW1lUHJvcD1fcmVmLmNsYXNzTmFtZSxleGFjdD1fcmVmLmV4YWN0LGlzQWN0aXZlUHJvcD1fcmVmLmlzQWN0aXZlLGxvY2F0aW9uUHJvcD1fcmVmLmxvY2F0aW9uLHNlbnNpdGl2ZT1fcmVmLnNlbnNpdGl2ZSxzdHJpY3Q9X3JlZi5zdHJpY3Qsc3R5bGVQcm9wPV9yZWYuc3R5bGUsdG89X3JlZi50byxpbm5lclJlZj1fcmVmLmlubmVyUmVmLHJlc3Q9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbXCJhcmlhLWN1cnJlbnRcIixcImFjdGl2ZUNsYXNzTmFtZVwiLFwiYWN0aXZlU3R5bGVcIixcImNsYXNzTmFtZVwiLFwiZXhhY3RcIixcImlzQWN0aXZlXCIsXCJsb2NhdGlvblwiLFwic2Vuc2l0aXZlXCIsXCJzdHJpY3RcIixcInN0eWxlXCIsXCJ0b1wiLFwiaW5uZXJSZWZcIl0pO3JldHVybigvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdFJvdXRlci5fX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsbnVsbCxmdW5jdGlvbihjb250ZXh0KXshY29udGV4dD9pbnZhcmlhbnQoZmFsc2UsXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTp2b2lkIDA7dmFyIGN1cnJlbnRMb2NhdGlvbj1sb2NhdGlvblByb3B8fGNvbnRleHQubG9jYXRpb247dmFyIHRvTG9jYXRpb249bm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0byxjdXJyZW50TG9jYXRpb24pLGN1cnJlbnRMb2NhdGlvbik7dmFyIHBhdGg9dG9Mb2NhdGlvbi5wYXRobmFtZTsvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxudmFyIGVzY2FwZWRQYXRoPXBhdGgmJnBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csXCJcXFxcJDFcIik7dmFyIG1hdGNoPWVzY2FwZWRQYXRoP3JlYWN0Um91dGVyLm1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUse3BhdGg6ZXNjYXBlZFBhdGgsZXhhY3Q6ZXhhY3Qsc2Vuc2l0aXZlOnNlbnNpdGl2ZSxzdHJpY3Q6c3RyaWN0fSk6bnVsbDt2YXIgaXNBY3RpdmU9ISEoaXNBY3RpdmVQcm9wP2lzQWN0aXZlUHJvcChtYXRjaCxjdXJyZW50TG9jYXRpb24pOm1hdGNoKTt2YXIgY2xhc3NOYW1lPXR5cGVvZiBjbGFzc05hbWVQcm9wPT09XCJmdW5jdGlvblwiP2NsYXNzTmFtZVByb3AoaXNBY3RpdmUpOmNsYXNzTmFtZVByb3A7dmFyIHN0eWxlPXR5cGVvZiBzdHlsZVByb3A9PT1cImZ1bmN0aW9uXCI/c3R5bGVQcm9wKGlzQWN0aXZlKTpzdHlsZVByb3A7aWYoaXNBY3RpdmUpe2NsYXNzTmFtZT1qb2luQ2xhc3NuYW1lcyhjbGFzc05hbWUsYWN0aXZlQ2xhc3NOYW1lKTtzdHlsZT1fZXh0ZW5kcyh7fSxzdHlsZSxhY3RpdmVTdHlsZSk7fXZhciBwcm9wcz1fZXh0ZW5kcyh7XCJhcmlhLWN1cnJlbnRcIjppc0FjdGl2ZSYmYXJpYUN1cnJlbnR8fG51bGwsY2xhc3NOYW1lOmNsYXNzTmFtZSxzdHlsZTpzdHlsZSx0bzp0b0xvY2F0aW9ufSxyZXN0KTsvLyBSZWFjdCAxNSBjb21wYXRcbmlmKGZvcndhcmRSZWZTaGltJDEhPT1mb3J3YXJkUmVmJDEpe3Byb3BzLnJlZj1mb3J3YXJkZWRSZWZ8fGlubmVyUmVmO31lbHNle3Byb3BzLmlubmVyUmVmPWlubmVyUmVmO31yZXR1cm4oLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluayxwcm9wcykpO30pKTt9KTt7TmF2TGluay5kaXNwbGF5TmFtZT1cIk5hdkxpbmtcIjt2YXIgYXJpYUN1cnJlbnRUeXBlPVByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsXCJzdGVwXCIsXCJsb2NhdGlvblwiLFwiZGF0ZVwiLFwidGltZVwiLFwidHJ1ZVwiLFwiZmFsc2VcIl0pO05hdkxpbmsucHJvcFR5cGVzPV9leHRlbmRzKHt9LExpbmsucHJvcFR5cGVzLHtcImFyaWEtY3VycmVudFwiOmFyaWFDdXJyZW50VHlwZSxhY3RpdmVDbGFzc05hbWU6UHJvcFR5cGVzLnN0cmluZyxhY3RpdmVTdHlsZTpQcm9wVHlwZXMub2JqZWN0LGNsYXNzTmFtZTpQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLFByb3BUeXBlcy5mdW5jXSksZXhhY3Q6UHJvcFR5cGVzLmJvb2wsaXNBY3RpdmU6UHJvcFR5cGVzLmZ1bmMsbG9jYXRpb246UHJvcFR5cGVzLm9iamVjdCxzZW5zaXRpdmU6UHJvcFR5cGVzLmJvb2wsc3RyaWN0OlByb3BUeXBlcy5ib29sLHN0eWxlOlByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsUHJvcFR5cGVzLmZ1bmNdKX0pO31PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywnTWVtb3J5Um91dGVyJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIuTWVtb3J5Um91dGVyO319KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywnUHJvbXB0Jyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIuUHJvbXB0O319KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywnUmVkaXJlY3QnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5SZWRpcmVjdDt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsJ1JvdXRlJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIuUm91dGU7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdSb3V0ZXInLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5Sb3V0ZXI7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdTdGF0aWNSb3V0ZXInLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5TdGF0aWNSb3V0ZXI7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdTd2l0Y2gnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5Td2l0Y2g7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdnZW5lcmF0ZVBhdGgnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5nZW5lcmF0ZVBhdGg7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdtYXRjaFBhdGgnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci5tYXRjaFBhdGg7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCd1c2VIaXN0b3J5Jyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIudXNlSGlzdG9yeTt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsJ3VzZUxvY2F0aW9uJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIudXNlTG9jYXRpb247fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCd1c2VQYXJhbXMnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci51c2VQYXJhbXM7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCd1c2VSb3V0ZU1hdGNoJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gcmVhY3RSb3V0ZXIudXNlUm91dGVNYXRjaDt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsJ3dpdGhSb3V0ZXInLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiByZWFjdFJvdXRlci53aXRoUm91dGVyO319KTtleHBvcnRzLkJyb3dzZXJSb3V0ZXI9QnJvd3NlclJvdXRlcjtleHBvcnRzLkhhc2hSb3V0ZXI9SGFzaFJvdXRlcjtleHBvcnRzLkxpbms9TGluaztleHBvcnRzLk5hdkxpbms9TmF2TGluazsvLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1yb3V0ZXItZG9tL2Nqcy9yZWFjdC1yb3V0ZXItZG9tLmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhY3Qtcm91dGVyLWRvbScpLFxuICAgIHdpdGhSb3V0ZXIgPSBfcmVxdWlyZS53aXRoUm91dGVyO1xuXG52YXIgZmV0Y2hEYXRhID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2ZldGNoRGF0YScpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIFRvb2xiYXJDb250YWluZXIgPSByZXF1aXJlKCcuLy4uL3Rvb2xiYXItY29udGFpbmVyL3Rvb2xiYXItY29udGFpbmVyLmpzeCcpLFxuICAgIEJ0blN0YXJ0ID0gcmVxdWlyZSgnLi8uLi9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLXN0YXJ0L2J1dHRvbi1yZWdpc3Rlci1zdGFydC5qc3gnKSxcbiAgICBCdG5BZGQgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1hZGQvYnV0dG9uLXJlZ2lzdGVyLWFkZC5qc3gnKSxcbiAgICBCdG5Mb2dpbiA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1sb2dpbi9idXR0b24tbG9naW4uanN4JyksXG4gICAgQnRuRWRpdCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1lZGl0L2J1dHRvbi1yZWdpc3Rlci1lZGl0LmpzeCcpLFxuICAgIEJ0bkluZm8gPSByZXF1aXJlKCcuLy4uL2J1dHRvbi1yZWdpc3Rlci9idXR0b24taW5mby9pbmRleC5qc3gnKSxcbiAgICBTdGFydE1lbnUgPSByZXF1aXJlKCcuLy4uL3N0YXJ0LW1lbnUvc3RhcnQtbWVudS5qc3gnKSxcbiAgICBTZWxlY3RSZWt2ID0gcmVxdWlyZSgnLi8uLi9zZWxlY3QtcmVrdi9pbmRleC5qc3gnKSxcbiAgICBTZWxlY3QgPSByZXF1aXJlKCcuLy4uL3NlbGVjdC9zZWxlY3QuanN4JyksXG4gICAgQnRuQWNjb3VudCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1hY2NvdW50L2J1dHRvbi1hY2NvdW50LmpzeCcpO1xudmFyIExvZ2luID0gcmVxdWlyZSgnLi8uLi9sb2dpbi9sb2dpbi5qc3gnKTtcbnZhciBTZWFyY2hUZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi9kb2NzL21haW4vc2VhcmNoLWNvbXBvbmVudC5qc3gnKTtcblxudmFyIHN0eWxlID0gcmVxdWlyZSgnLi9tZW51LXRvb2xiYXIuc3R5bGVzJyk7XG52YXIgRG9jUmlnaHRzID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9jb25maWcvZG9jX3JpZ2h0cycpO1xudmFyIGNoZWNrUmlnaHRzID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2NoZWNrUmlnaHRzJyk7XG5cbnZhciBNZW51VG9vbEJhciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKE1lbnVUb29sQmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE1lbnVUb29sQmFyKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51VG9vbEJhcik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1lbnVUb29sQmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTWVudVRvb2xCYXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsb2dlZEluOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dMb2dpbjogZmFsc2UsXG4gICAgICAgICAgICBzdGFydE1lbnVWYWx1ZTogJ3BhcmVudGlkJyxcbiAgICAgICAgICAgIHNob3dTdGFydE1lbnU6IGZhbHNlLFxuICAgICAgICAgICAgaXNPcGVuUmVrdlBhZ2U6IGZhbHNlLFxuICAgICAgICAgICAgcmVrdklkOiBwcm9wcy5yZWt2SWQgPyBwcm9wcy5yZWt2SWQgOiAxLFxuICAgICAgICAgICAga2VlbDogJ0VTVCcsXG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICAgICAga2FzdXRhamE6IG51bGwsXG4gICAgICAgICAgICAgICAgYW1ldG5pazogbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLmJ0blN0YXJ0Q2xpY2sgPSBfdGhpcy5idG5TdGFydENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5idG5BZGRDbGljayA9IF90aGlzLmJ0bkFkZENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5idG5Mb2dpbkNsaWNrID0gX3RoaXMuYnRuTG9naW5DbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMucmVuZGVyU3RhcnRNZW51ID0gX3RoaXMucmVuZGVyU3RhcnRNZW51LmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zdGFydE1lbnVDbGlja0hhbmRsZXIgPSBfdGhpcy5zdGFydE1lbnVDbGlja0hhbmRsZXIuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZUNoYW5nZVNlbGVjdCA9IF90aGlzLmhhbmRsZUNoYW5nZVNlbGVjdC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuYnRuQWNjb3VudENsaWNrID0gX3RoaXMuYnRuQWNjb3VudENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5idG5FZGl0UmVrdkNsaWNrID0gX3RoaXMuYnRuRWRpdFJla3ZDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMucmVuZGVyTG9naW5Db21wb25lbnQgPSBfdGhpcy5yZW5kZXJMb2dpbkNvbXBvbmVudC5iaW5kKF90aGlzKTtcbiAgICAgICAgLy8gICAgICAgIHRoaXMuaGFuZGxlTG9naW5DbGlja0V2ZW50ID0gdGhpcy5oYW5kbGVMb2dpbkNsaWNrRXZlbnQuYmluZCh0aGlzKTtcblxuICAgICAgICAvL9C/0L7QtNC/0LjRgdGL0LLQsNC10LzRgdGPINC90LAg0LjQt9C80LXQvdC10L3QuNGPINCyINGB0YLQvtGA0LVcbiAgICAgICAgdmFyIHN0b3JlID0gX3RoaXMucHJvcHMuc3RvcmU7XG4gICAgICAgIGlmIChzdG9yZSkge1xuICAgICAgICAgICAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHN0YXRlIHdpbGwgYmUgdXBkYXRlZChpbiBvdXIgY2FzZSwgd2hlbiBpdGVtcyB3aWxsIGJlIGZldGNoZWQpLFxuICAgICAgICAgICAgICAgIC8vIHdlIHdpbGwgdXBkYXRlIGxvY2FsIGNvbXBvbmVudCBzdGF0ZSBhbmQgZm9yY2UgY29tcG9uZW50IHRvIHJlcmVuZGVyXG4gICAgICAgICAgICAgICAgLy8gd2l0aCBuZXcgZGF0YS5cblxuICAgICAgICAgICAgICAgIHZhciB1c2VyID0gc3RvcmUuZ2V0U3RhdGUoKS5zdGF0dXNlcy51c2VyO1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgbG9nZWRJbjogdXNlci5pZCA/ICEhdXNlci5pZCA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKE1lbnVUb29sQmFyLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGlzRWRpdE1vZGUgPSB0aGlzLnByb3BzLmVkaXRlZCxcbiAgICAgICAgICAgICAgICB0b29sYmFyUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGJ0blN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMucGFyYW1zWydidG5TdGFydCddLnNob3cgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBpc0VkaXRNb2RlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5BZGQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzRWRpdE1vZGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkxvZ2luOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuQWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnN0YXRlLmxvZ2VkSW4gfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZVsnY29udGFpbmVyJ10gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBUb29sYmFyQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdtZW51VG9vbGJhckNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2xlZnQnIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuU3RhcnQsIHsgcmVmOiAnYnRuU3RhcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmU6IHRoaXMucHJvcHMuc3RvcmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmJ0blN0YXJ0Q2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zWydidG5TdGFydCddLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdG9vbGJhclBhcmFtc1snYnRuU3RhcnQnXS5kaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dlZEluID8gUmVhY3QuY3JlYXRlRWxlbWVudChCdG5BZGQsIHsgb25DbGljazogdGhpcy5idG5BZGRDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0bkFkZCddLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlOiB0b29sYmFyUGFyYW1zWydidG5BZGQnXS5kaXNhYmxlZCB9KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubG9nZWRJbiA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuQWNjb3VudCwgeyByZWY6ICdidG5BY2NvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnVzZXIuYW1ldG5payA/IHRoaXMuc3RhdGUudXNlci5hbWV0bmlrIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmJ0bkFjY291bnRDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0bkFjY291bnQnXS5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRvb2xiYXJQYXJhbXNbJ2J0bkFjY291bnQnXS5kaXNhYmxlZCB9KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuTG9naW4sIHsgcmVmOiAnYnRuTG9naW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUubG9nZWRJbiA/ICdWw6RsanUnIDogJ1Npc3NlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuYnRuTG9naW5DbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0bkxvZ2luJ10uc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0b29sYmFyUGFyYW1zWydidG5Mb2dpbiddLmRpc2FibGVkIH0pLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlYXJjaFRleHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlOiB0aGlzLnByb3BzLnN0b3JlXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlWydzZWxlY3RLZWVsJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUua2VlbCB8fCAnRXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ2tlZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVNlbGVjdCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAnRXN0Jywga2V5OiAnZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnRXN0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRVNUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdSVScsIGtleTogJ1JVJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnUlUnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSVScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAnSU5HJywga2V5OiAnSU5HJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnSU5HJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSU5HJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTdGFydE1lbnUoKSxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNob3dMb2dpbiA/IHRoaXMucmVuZGVyTG9naW5Db21wb25lbnQoKSA6IG51bGxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtGC0YDQuNGB0YPQtdGCINC60L7QvdC80L/QvtC90LXQvdGCINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LrQsNGA0YLQuNC90YtcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyTG9naW5Db21wb25lbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTG9naW5Db21wb25lbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBMb2dpbixcbiAgICAgICAgICAgICAgICB7IHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgICAgICAgICAgICAgbG9naW5DbGlja0V2ZW50OiB0aGlzLmhhbmRsZUxvZ2luQ2xpY2tFdmVudCB9LFxuICAgICAgICAgICAgICAgICdMb2dpbidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUNoYW5nZVNlbGVjdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VTZWxlY3QoZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBmaWVsZFZhbHVlID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBrZWVsOiBmaWVsZFZhbHVlIH0pO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucmVwbGFjZSgnL3JlbG9hZCcpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnByb3BzLmhpc3RvcnkucmVwbGFjZShjdXJyZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJTdGFydE1lbnUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU3RhcnRNZW51KCkge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuICAgICAgICAgICAgdmFyIHVzZXIgPSB7fTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnN0b3JlKSB7XG4gICAgICAgICAgICAgICAgdXNlciA9IHRoaXMucHJvcHMuc3RvcmUuZ2V0U3RhdGUoKS5zdGF0dXNlcy51c2VyO1xuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLnByb3BzLnN0b3JlLmdldFN0YXRlKCkubWVudS5tZW51O1xuXG4gICAgICAgICAgICAgICAgaWYgKCF1c2VyIHx8ICF1c2VyLmlzX2FkbWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQtdGB0LvQuCDQvdC10YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLCDQuNC70Lgg0L7QvSDQvdC1INCw0LTQvNC4LCDQs9GA0YPQt9C40Lwg0YLQvtC70YzQutC+INC00L7RgdGC0YPQv9C90YvQtVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3cucHJvcHMgfHwgIXJvdy5wcm9wcy5pc19hZG1pbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3c7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnNob3dTdGFydE1lbnUpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFN0YXJ0TWVudSwgeyByZWY6ICdzdGFydE1lbnUnLFxuICAgICAgICAgICAgICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuc3RhcnRNZW51VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrSGFuZGxlcjogdGhpcy5zdGFydE1lbnVDbGlja0hhbmRsZXIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5TdGFydENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0blN0YXJ0Q2xpY2soKSB7XG4gICAgICAgICAgICAvLyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4IFN0YXJ0XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93U3RhcnRNZW51OiAhdGhpcy5zdGF0ZS5zaG93U3RhcnRNZW51IH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5BZGRDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5BZGRDbGljaygpIHtcbiAgICAgICAgICAgIC8vINC+0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQutC90L7Qv9C60LggU3RhcnRcblxuICAgICAgICAgICAgLy90aGlzLnNldFN0YXRlKHtzaG93UGljdHVyZTogIXRoaXMuc3RhdGUuc2hvd1BpY3R1cmV9KTtcbiAgICAgICAgICAgIC8vINGB0LjQs9C90LDQuyDQvdC1INC/0LXRgNC10LPRgNGD0LfQutGDINC+0YHQvdC+0LLQvdC+0LPQviDQvtC60L3QsFxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuYnRuQ2xpY2tFdmVudEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmJ0bkNsaWNrRXZlbnRIYW5kbGVyKCdidG5BZGQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC/0L7Qu9GD0YfQuNGCINC+0YIg0YHRgtCw0YDRgtC+0LPQviDQvNC10L3RjiDQtNCw0L3QvdGL0LUsINGB0L/RgNGP0YfQtdGCINC80LXQvdGOXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3N0YXJ0TWVudUNsaWNrSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydE1lbnVDbGlja0hhbmRsZXIodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93U3RhcnRNZW51OiBmYWxzZSB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuc3RvcmUpIHtcbiAgICAgICAgICAgICAgICAvLyBuZXcgYWN0aW9uXG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5wcm9wcy5zdG9yZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gJ1JBQU1BJykge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbignL1JBQU1BL2xvZ2luJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiAnYWN0aXZlUGFnZUNvbXBvbmVudCcsIGFjdGl2ZVBhZ2VDb21wb25lbnQ6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvY1R5cGUgPSBEb2NDb250ZXh0WydtZW51J10uZmluZChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cua29vZCA9PT0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGRvY1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgRG9jQ29udGV4dC5wYWdlTmFtZSA9IGRvY1R5cGUubmFtZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogJy8nICsgRG9jQ29udGV4dC5tb2R1bGUgKyAnLycgKyB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiB7IG1vZHVsZTogRG9jQ29udGV4dC5tb2R1bGUgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSAnLycgKyBEb2NDb250ZXh0Lm1vZHVsZSArICcvJyArIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuTG9naW5DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5Mb2dpbkNsaWNrKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmxvZ2VkSW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0xvZ2luOiAhdGhpcy5zdGF0ZS5zaG93TG9naW4gfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vINGD0LTQsNC70LjQvCDQuNC3INGB0YLQvtGA0LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5wcm9wcy5zdG9yZTtcbiAgICAgICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6ICd1c2VyJywgdXNlcjoge30gfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvZ2VkSW46IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5BY2NvdW50Q2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuQWNjb3VudENsaWNrKCkge1xuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogYC8ke0RvY0NvbnRleHQubW9kdWxlfS91c2VyaWQvJHtEb2NDb250ZXh0LnVzZXJEYXRhLnVzZXJJZH1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZToge21vZHVsZTogRG9jQ29udGV4dC5tb2R1bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkVkaXRSZWt2Q2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuRWRpdFJla3ZDbGljaygpIHtcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IGAvJHtEb2NDb250ZXh0Lm1vZHVsZX0vcmVrdi8ke0RvY0NvbnRleHQudXNlckRhdGEuYXN1dHVzSWR9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHttb2R1bGU6IERvY0NvbnRleHQubW9kdWxlfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAqL1xuXG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTWVudVRvb2xCYXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qXHJcbk1lbnVUb29sQmFyXHJcbiAgICAucHJvcFR5cGVzID0ge1xyXG4gICAgZWRpdGVkOiBQcm9wVHlwZXMuYm9vbCxcclxuICAgIHBhcmFtczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG4gICAgbG9nZWRJbjogUHJvcFR5cGVzLmJvb2xcclxufTtcclxuXHJcblxyXG5NZW51VG9vbEJhclxyXG4gICAgLmRlZmF1bHRQcm9wcyA9IHtcclxuICAgIGVkaXRlZDogZmFsc2UsXHJcbiAgICBsb2dlZEluOiBmYWxzZSxcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIGJ0blN0YXJ0OiB7XHJcbiAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbiovXG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aFJvdXRlcihNZW51VG9vbEJhcik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL21lbnUtdG9vbGJhci9tZW51LXRvb2xiYXIuanN4XG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIGF4aW9zPXJlcXVpcmUoJ2F4aW9zJyk7dmFyIGlzT2s9ZmFsc2U7YXhpb3MuZGVmYXVsdHMuYmFzZVVSTD0nLyc7bW9kdWxlLmV4cG9ydHM9e2ZldGNoRGF0YUdldDpmdW5jdGlvbiBmZXRjaERhdGFHZXQodXJsKXtyZXR1cm4gYXhpb3MuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXMpe3JldHVybiByZXM7fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe2NvbnNvbGUuZXJyb3IoJ2ZldGNoRGF0YSBzdGF0dXMsIGVycm9yJyxlcnJvci5yZXNwb25zZS5zdGF0dXMsZXJyb3IpO3JldHVybntyZXN1bHQ6J2Vycm9yJyxzdGF0dXM6ZXJyb3IucmVzcG9uc2Uuc3RhdHVzfTt9KTt9LGZldGNoRGF0YVBvc3Q6ZnVuY3Rpb24gZmV0Y2hEYXRhUG9zdCh1cmwscGFyYW1zLGZpbGVUeXBlKXt2YXIgaGVhZGVycz17J0NvbnRlbnQtVHlwZSc6J211bHRpcGFydC9mb3JtLWRhdGEnfTtjb25zb2xlLmxvZygnZmV0Y2gnLHVybCxwYXJhbXMpO3JldHVybiBheGlvcy5wb3N0KHVybCxwYXJhbXMsaGVhZGVycykudGhlbihmdW5jdGlvbihyZXMsZXJyKXtjb25zb2xlLmxvZygnZmV0Y2ggbGliIHJlcycscmVzLGVycik7cmV0dXJuIHJlczt9KS5jYXRjaChmdW5jdGlvbihlcnJvcil7Y29uc29sZS5lcnJvcignZmV0Y2hEYXRhIGVycm9yJyxlcnJvci5yZXNwb25zZS5zdGF0dXMsZXJyb3IpO3JldHVybntyZXN1bHQ6J2Vycm9yJyxzdGF0dXM6ZXJyb3IucmVzcG9uc2Uuc3RhdHVzfTt9KTt9LGZldGNoRGF0YVB1dDpmdW5jdGlvbiBmZXRjaERhdGFQdXQodXJsLHBhcmFtcyl7cmV0dXJuIGF4aW9zLnB1dCh1cmwscGFyYW1zLGhlYWRlcnMpLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtjb25zb2xlLmVycm9yKCdmZXRjaERhdGEgZXJyb3InLGVycm9yLnJlc3BvbnNlLnN0YXR1cyxlcnJvcik7cmV0dXJue3Jlc3VsdDonZXJyb3InLHN0YXR1czplcnJvci5yZXNwb25zZS5zdGF0dXN9O30pO319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbGlicy9mZXRjaERhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKCcuL2xpYi9heGlvcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciB1dGlscz1yZXF1aXJlKCcuL3V0aWxzJyk7dmFyIGJpbmQ9cmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTt2YXIgQXhpb3M9cmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7dmFyIG1lcmdlQ29uZmlnPXJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO3ZhciBkZWZhdWx0cz1yZXF1aXJlKCcuL2RlZmF1bHRzJyk7LyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKXt2YXIgY29udGV4dD1uZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7dmFyIGluc3RhbmNlPWJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsY29udGV4dCk7Ly8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbnV0aWxzLmV4dGVuZChpbnN0YW5jZSxBeGlvcy5wcm90b3R5cGUsY29udGV4dCk7Ly8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG51dGlscy5leHRlbmQoaW5zdGFuY2UsY29udGV4dCk7Ly8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuaW5zdGFuY2UuY3JlYXRlPWZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZyl7cmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsaW5zdGFuY2VDb25maWcpKTt9O3JldHVybiBpbnN0YW5jZTt9Ly8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3M9Y3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpOy8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3M9QXhpb3M7Ly8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWw9cmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7YXhpb3MuQ2FuY2VsVG9rZW49cmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtheGlvcy5pc0NhbmNlbD1yZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO2F4aW9zLlZFUlNJT049cmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247Ly8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbD1mdW5jdGlvbiBhbGwocHJvbWlzZXMpe3JldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7fTtheGlvcy5zcHJlYWQ9cmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpOy8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvcj1yZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7bW9kdWxlLmV4cG9ydHM9YXhpb3M7Ly8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0PWF4aW9zO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvYXhpb3MuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307dmFyIGJpbmQ9cmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTsvLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xudmFyIHRvU3RyaW5nPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL2Z1bmN0aW9uIGlzQXJyYXkodmFsKXtyZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpPT09J1tvYmplY3QgQXJyYXldJzt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL2Z1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCl7cmV0dXJuIHR5cGVvZiB2YWw9PT0ndW5kZWZpbmVkJzt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL2Z1bmN0aW9uIGlzQnVmZmVyKHZhbCl7cmV0dXJuIHZhbCE9PW51bGwmJiFpc1VuZGVmaW5lZCh2YWwpJiZ2YWwuY29uc3RydWN0b3IhPT1udWxsJiYhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKSYmdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcj09PSdmdW5jdGlvbicmJnZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO30vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpe3JldHVybiB0b1N0cmluZy5jYWxsKHZhbCk9PT0nW29iamVjdCBBcnJheUJ1ZmZlcl0nO30vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCl7cmV0dXJuIHR5cGVvZiBGb3JtRGF0YSE9PSd1bmRlZmluZWQnJiZ2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YTt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKXt2YXIgcmVzdWx0O2lmKHR5cGVvZiBBcnJheUJ1ZmZlciE9PSd1bmRlZmluZWQnJiZBcnJheUJ1ZmZlci5pc1ZpZXcpe3Jlc3VsdD1BcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTt9ZWxzZXtyZXN1bHQ9dmFsJiZ2YWwuYnVmZmVyJiZ2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7fXJldHVybiByZXN1bHQ7fS8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9mdW5jdGlvbiBpc1N0cmluZyh2YWwpe3JldHVybiB0eXBlb2YgdmFsPT09J3N0cmluZyc7fS8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9mdW5jdGlvbiBpc051bWJlcih2YWwpe3JldHVybiB0eXBlb2YgdmFsPT09J251bWJlcic7fS8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL2Z1bmN0aW9uIGlzT2JqZWN0KHZhbCl7cmV0dXJuIHZhbCE9PW51bGwmJih0eXBlb2YgdmFsPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZih2YWwpKT09PSdvYmplY3QnO30vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCl7aWYodG9TdHJpbmcuY2FsbCh2YWwpIT09J1tvYmplY3QgT2JqZWN0XScpe3JldHVybiBmYWxzZTt9dmFyIHByb3RvdHlwZT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtyZXR1cm4gcHJvdG90eXBlPT09bnVsbHx8cHJvdG90eXBlPT09T2JqZWN0LnByb3RvdHlwZTt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovZnVuY3Rpb24gaXNEYXRlKHZhbCl7cmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKT09PSdbb2JqZWN0IERhdGVdJzt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovZnVuY3Rpb24gaXNGaWxlKHZhbCl7cmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKT09PSdbb2JqZWN0IEZpbGVdJzt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovZnVuY3Rpb24gaXNCbG9iKHZhbCl7cmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKT09PSdbb2JqZWN0IEJsb2JdJzt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCl7cmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKT09PSdbb2JqZWN0IEZ1bmN0aW9uXSc7fS8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9mdW5jdGlvbiBpc1N0cmVhbSh2YWwpe3JldHVybiBpc09iamVjdCh2YWwpJiZpc0Z1bmN0aW9uKHZhbC5waXBlKTt9LyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKXtyZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyE9PSd1bmRlZmluZWQnJiZ2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7fS8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL2Z1bmN0aW9uIHRyaW0oc3RyKXtyZXR1cm4gc3RyLnRyaW0/c3RyLnRyaW0oKTpzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywnJyk7fS8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKXtpZih0eXBlb2YgbmF2aWdhdG9yIT09J3VuZGVmaW5lZCcmJihuYXZpZ2F0b3IucHJvZHVjdD09PSdSZWFjdE5hdGl2ZSd8fG5hdmlnYXRvci5wcm9kdWN0PT09J05hdGl2ZVNjcmlwdCd8fG5hdmlnYXRvci5wcm9kdWN0PT09J05TJykpe3JldHVybiBmYWxzZTt9cmV0dXJuIHR5cGVvZiB3aW5kb3chPT0ndW5kZWZpbmVkJyYmdHlwZW9mIGRvY3VtZW50IT09J3VuZGVmaW5lZCc7fS8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL2Z1bmN0aW9uIGZvckVhY2gob2JqLGZuKXsvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbmlmKG9iaj09PW51bGx8fHR5cGVvZiBvYmo9PT0ndW5kZWZpbmVkJyl7cmV0dXJuO30vLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbmlmKCh0eXBlb2Ygb2JqPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihvYmopKSE9PSdvYmplY3QnKXsvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9vYmo9W29ial07fWlmKGlzQXJyYXkob2JqKSl7Ly8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuZm9yKHZhciBpPTAsbD1vYmoubGVuZ3RoO2k8bDtpKyspe2ZuLmNhbGwobnVsbCxvYmpbaV0saSxvYmopO319ZWxzZXsvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbmZvcih2YXIga2V5IGluIG9iail7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaixrZXkpKXtmbi5jYWxsKG51bGwsb2JqW2tleV0sa2V5LG9iaik7fX19fS8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9mdW5jdGlvbiBtZXJnZSgpLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICove3ZhciByZXN1bHQ9e307ZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLGtleSl7aWYoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkmJmlzUGxhaW5PYmplY3QodmFsKSl7cmVzdWx0W2tleV09bWVyZ2UocmVzdWx0W2tleV0sdmFsKTt9ZWxzZSBpZihpc1BsYWluT2JqZWN0KHZhbCkpe3Jlc3VsdFtrZXldPW1lcmdlKHt9LHZhbCk7fWVsc2UgaWYoaXNBcnJheSh2YWwpKXtyZXN1bHRba2V5XT12YWwuc2xpY2UoKTt9ZWxzZXtyZXN1bHRba2V5XT12YWw7fX1mb3IodmFyIGk9MCxsPWFyZ3VtZW50cy5sZW5ndGg7aTxsO2krKyl7Zm9yRWFjaChhcmd1bWVudHNbaV0sYXNzaWduVmFsdWUpO31yZXR1cm4gcmVzdWx0O30vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL2Z1bmN0aW9uIGV4dGVuZChhLGIsdGhpc0FyZyl7Zm9yRWFjaChiLGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCxrZXkpe2lmKHRoaXNBcmcmJnR5cGVvZiB2YWw9PT0nZnVuY3Rpb24nKXthW2tleV09YmluZCh2YWwsdGhpc0FyZyk7fWVsc2V7YVtrZXldPXZhbDt9fSk7cmV0dXJuIGE7fS8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCl7aWYoY29udGVudC5jaGFyQ29kZUF0KDApPT09MHhGRUZGKXtjb250ZW50PWNvbnRlbnQuc2xpY2UoMSk7fXJldHVybiBjb250ZW50O31tb2R1bGUuZXhwb3J0cz17aXNBcnJheTppc0FycmF5LGlzQXJyYXlCdWZmZXI6aXNBcnJheUJ1ZmZlcixpc0J1ZmZlcjppc0J1ZmZlcixpc0Zvcm1EYXRhOmlzRm9ybURhdGEsaXNBcnJheUJ1ZmZlclZpZXc6aXNBcnJheUJ1ZmZlclZpZXcsaXNTdHJpbmc6aXNTdHJpbmcsaXNOdW1iZXI6aXNOdW1iZXIsaXNPYmplY3Q6aXNPYmplY3QsaXNQbGFpbk9iamVjdDppc1BsYWluT2JqZWN0LGlzVW5kZWZpbmVkOmlzVW5kZWZpbmVkLGlzRGF0ZTppc0RhdGUsaXNGaWxlOmlzRmlsZSxpc0Jsb2I6aXNCbG9iLGlzRnVuY3Rpb246aXNGdW5jdGlvbixpc1N0cmVhbTppc1N0cmVhbSxpc1VSTFNlYXJjaFBhcmFtczppc1VSTFNlYXJjaFBhcmFtcyxpc1N0YW5kYXJkQnJvd3NlckVudjppc1N0YW5kYXJkQnJvd3NlckVudixmb3JFYWNoOmZvckVhY2gsbWVyZ2U6bWVyZ2UsZXh0ZW5kOmV4dGVuZCx0cmltOnRyaW0sc3RyaXBCT006c3RyaXBCT019O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBiaW5kKGZuLHRoaXNBcmcpe3JldHVybiBmdW5jdGlvbiB3cmFwKCl7dmFyIGFyZ3M9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8YXJncy5sZW5ndGg7aSsrKXthcmdzW2ldPWFyZ3VtZW50c1tpXTt9cmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsYXJncyk7fTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4vLi4vdXRpbHMnKTt2YXIgYnVpbGRVUkw9cmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO3ZhciBJbnRlcmNlcHRvck1hbmFnZXI9cmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTt2YXIgZGlzcGF0Y2hSZXF1ZXN0PXJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7dmFyIG1lcmdlQ29uZmlnPXJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTt2YXIgdmFsaWRhdG9yPXJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7dmFyIHZhbGlkYXRvcnM9dmFsaWRhdG9yLnZhbGlkYXRvcnM7LyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL2Z1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKXt0aGlzLmRlZmF1bHRzPWluc3RhbmNlQ29uZmlnO3RoaXMuaW50ZXJjZXB0b3JzPXtyZXF1ZXN0Om5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxyZXNwb25zZTpuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCl9O30vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovQXhpb3MucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24gcmVxdWVzdChjb25maWcpey8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqLy8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbmlmKHR5cGVvZiBjb25maWc9PT0nc3RyaW5nJyl7Y29uZmlnPWFyZ3VtZW50c1sxXXx8e307Y29uZmlnLnVybD1hcmd1bWVudHNbMF07fWVsc2V7Y29uZmlnPWNvbmZpZ3x8e307fWNvbmZpZz1tZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLGNvbmZpZyk7Ly8gU2V0IGNvbmZpZy5tZXRob2RcbmlmKGNvbmZpZy5tZXRob2Qpe2NvbmZpZy5tZXRob2Q9Y29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO31lbHNlIGlmKHRoaXMuZGVmYXVsdHMubWV0aG9kKXtjb25maWcubWV0aG9kPXRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7fWVsc2V7Y29uZmlnLm1ldGhvZD0nZ2V0Jzt9dmFyIHRyYW5zaXRpb25hbD1jb25maWcudHJhbnNpdGlvbmFsO2lmKHRyYW5zaXRpb25hbCE9PXVuZGVmaW5lZCl7dmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLHtzaWxlbnRKU09OUGFyc2luZzp2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLGZvcmNlZEpTT05QYXJzaW5nOnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksY2xhcmlmeVRpbWVvdXRFcnJvcjp2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pfSxmYWxzZSk7fS8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbnZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbj1bXTt2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzPXRydWU7dGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKXtpZih0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbj09PSdmdW5jdGlvbicmJmludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKT09PWZhbHNlKXtyZXR1cm47fXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycz1zeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMmJmludGVyY2VwdG9yLnN5bmNocm9ub3VzO3JlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLGludGVyY2VwdG9yLnJlamVjdGVkKTt9KTt2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluPVtdO3RoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKXtyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsaW50ZXJjZXB0b3IucmVqZWN0ZWQpO30pO3ZhciBwcm9taXNlO2lmKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpe3ZhciBjaGFpbj1bZGlzcGF0Y2hSZXF1ZXN0LHVuZGVmaW5lZF07QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4scmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO2NoYWluPWNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO3Byb21pc2U9UHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7d2hpbGUoY2hhaW4ubGVuZ3RoKXtwcm9taXNlPXByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLGNoYWluLnNoaWZ0KCkpO31yZXR1cm4gcHJvbWlzZTt9dmFyIG5ld0NvbmZpZz1jb25maWc7d2hpbGUocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKXt2YXIgb25GdWxmaWxsZWQ9cmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTt2YXIgb25SZWplY3RlZD1yZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO3RyeXtuZXdDb25maWc9b25GdWxmaWxsZWQobmV3Q29uZmlnKTt9Y2F0Y2goZXJyb3Ipe29uUmVqZWN0ZWQoZXJyb3IpO2JyZWFrO319dHJ5e3Byb21pc2U9ZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7fWNhdGNoKGVycm9yKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO313aGlsZShyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKXtwcm9taXNlPXByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSxyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7fXJldHVybiBwcm9taXNlO307QXhpb3MucHJvdG90eXBlLmdldFVyaT1mdW5jdGlvbiBnZXRVcmkoY29uZmlnKXtjb25maWc9bWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cyxjb25maWcpO3JldHVybiBidWlsZFVSTChjb25maWcudXJsLGNvbmZpZy5wYXJhbXMsY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCcnKTt9Oy8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsJ2dldCcsJ2hlYWQnLCdvcHRpb25zJ10sZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2Qpey8qZXNsaW50IGZ1bmMtbmFtZXM6MCovQXhpb3MucHJvdG90eXBlW21ldGhvZF09ZnVuY3Rpb24odXJsLGNvbmZpZyl7cmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWd8fHt9LHttZXRob2Q6bWV0aG9kLHVybDp1cmwsZGF0YTooY29uZmlnfHx7fSkuZGF0YX0pKTt9O30pO3V0aWxzLmZvckVhY2goWydwb3N0JywncHV0JywncGF0Y2gnXSxmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKXsvKmVzbGludCBmdW5jLW5hbWVzOjAqL0F4aW9zLnByb3RvdHlwZVttZXRob2RdPWZ1bmN0aW9uKHVybCxkYXRhLGNvbmZpZyl7cmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWd8fHt9LHttZXRob2Q6bWV0aG9kLHVybDp1cmwsZGF0YTpkYXRhfSkpO307fSk7bW9kdWxlLmV4cG9ydHM9QXhpb3M7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4vLi4vdXRpbHMnKTtmdW5jdGlvbiBlbmNvZGUodmFsKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkucmVwbGFjZSgvJTNBL2dpLCc6JykucmVwbGFjZSgvJTI0L2csJyQnKS5yZXBsYWNlKC8lMkMvZ2ksJywnKS5yZXBsYWNlKC8lMjAvZywnKycpLnJlcGxhY2UoLyU1Qi9naSwnWycpLnJlcGxhY2UoLyU1RC9naSwnXScpO30vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBidWlsZFVSTCh1cmwscGFyYW1zLHBhcmFtc1NlcmlhbGl6ZXIpey8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL2lmKCFwYXJhbXMpe3JldHVybiB1cmw7fXZhciBzZXJpYWxpemVkUGFyYW1zO2lmKHBhcmFtc1NlcmlhbGl6ZXIpe3NlcmlhbGl6ZWRQYXJhbXM9cGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO31lbHNlIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpe3NlcmlhbGl6ZWRQYXJhbXM9cGFyYW1zLnRvU3RyaW5nKCk7fWVsc2V7dmFyIHBhcnRzPVtdO3V0aWxzLmZvckVhY2gocGFyYW1zLGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsa2V5KXtpZih2YWw9PT1udWxsfHx0eXBlb2YgdmFsPT09J3VuZGVmaW5lZCcpe3JldHVybjt9aWYodXRpbHMuaXNBcnJheSh2YWwpKXtrZXk9a2V5KydbXSc7fWVsc2V7dmFsPVt2YWxdO311dGlscy5mb3JFYWNoKHZhbCxmdW5jdGlvbiBwYXJzZVZhbHVlKHYpe2lmKHV0aWxzLmlzRGF0ZSh2KSl7dj12LnRvSVNPU3RyaW5nKCk7fWVsc2UgaWYodXRpbHMuaXNPYmplY3Qodikpe3Y9SlNPTi5zdHJpbmdpZnkodik7fXBhcnRzLnB1c2goZW5jb2RlKGtleSkrJz0nK2VuY29kZSh2KSk7fSk7fSk7c2VyaWFsaXplZFBhcmFtcz1wYXJ0cy5qb2luKCcmJyk7fWlmKHNlcmlhbGl6ZWRQYXJhbXMpe3ZhciBoYXNobWFya0luZGV4PXVybC5pbmRleE9mKCcjJyk7aWYoaGFzaG1hcmtJbmRleCE9PS0xKXt1cmw9dXJsLnNsaWNlKDAsaGFzaG1hcmtJbmRleCk7fXVybCs9KHVybC5pbmRleE9mKCc/Jyk9PT0tMT8nPyc6JyYnKStzZXJpYWxpemVkUGFyYW1zO31yZXR1cm4gdXJsO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4vLi4vdXRpbHMnKTtmdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKXt0aGlzLmhhbmRsZXJzPVtdO30vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL0ludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlPWZ1bmN0aW9uIHVzZShmdWxmaWxsZWQscmVqZWN0ZWQsb3B0aW9ucyl7dGhpcy5oYW5kbGVycy5wdXNoKHtmdWxmaWxsZWQ6ZnVsZmlsbGVkLHJlamVjdGVkOnJlamVjdGVkLHN5bmNocm9ub3VzOm9wdGlvbnM/b3B0aW9ucy5zeW5jaHJvbm91czpmYWxzZSxydW5XaGVuOm9wdGlvbnM/b3B0aW9ucy5ydW5XaGVuOm51bGx9KTtyZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGgtMTt9Oy8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdD1mdW5jdGlvbiBlamVjdChpZCl7aWYodGhpcy5oYW5kbGVyc1tpZF0pe3RoaXMuaGFuZGxlcnNbaWRdPW51bGw7fX07LyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uIGZvckVhY2goZm4pe3V0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycyxmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKXtpZihoIT09bnVsbCl7Zm4oaCk7fX0pO307bW9kdWxlLmV4cG9ydHM9SW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgdXRpbHM9cmVxdWlyZSgnLi8uLi91dGlscycpO3ZhciB0cmFuc2Zvcm1EYXRhPXJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO3ZhciBpc0NhbmNlbD1yZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTt2YXIgZGVmYXVsdHM9cmVxdWlyZSgnLi4vZGVmYXVsdHMnKTt2YXIgQ2FuY2VsPXJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTsvKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyl7aWYoY29uZmlnLmNhbmNlbFRva2VuKXtjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO31pZihjb25maWcuc2lnbmFsJiZjb25maWcuc2lnbmFsLmFib3J0ZWQpe3Rocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7fX0vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpe3Rocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTsvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuY29uZmlnLmhlYWRlcnM9Y29uZmlnLmhlYWRlcnN8fHt9Oy8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbmNvbmZpZy5kYXRhPXRyYW5zZm9ybURhdGEuY2FsbChjb25maWcsY29uZmlnLmRhdGEsY29uZmlnLmhlYWRlcnMsY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QpOy8vIEZsYXR0ZW4gaGVhZGVyc1xuY29uZmlnLmhlYWRlcnM9dXRpbHMubWVyZ2UoY29uZmlnLmhlYWRlcnMuY29tbW9ufHx7fSxjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXXx8e30sY29uZmlnLmhlYWRlcnMpO3V0aWxzLmZvckVhY2goWydkZWxldGUnLCdnZXQnLCdoZWFkJywncG9zdCcsJ3B1dCcsJ3BhdGNoJywnY29tbW9uJ10sZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKXtkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTt9KTt2YXIgYWRhcHRlcj1jb25maWcuYWRhcHRlcnx8ZGVmYXVsdHMuYWRhcHRlcjtyZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSl7dGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpOy8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG5yZXNwb25zZS5kYXRhPXRyYW5zZm9ybURhdGEuY2FsbChjb25maWcscmVzcG9uc2UuZGF0YSxyZXNwb25zZS5oZWFkZXJzLGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSk7cmV0dXJuIHJlc3BvbnNlO30sZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbil7aWYoIWlzQ2FuY2VsKHJlYXNvbikpe3Rocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTsvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuaWYocmVhc29uJiZyZWFzb24ucmVzcG9uc2Upe3JlYXNvbi5yZXNwb25zZS5kYXRhPXRyYW5zZm9ybURhdGEuY2FsbChjb25maWcscmVhc29uLnJlc3BvbnNlLmRhdGEscmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlKTt9fXJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO30pO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciB1dGlscz1yZXF1aXJlKCcuLy4uL3V0aWxzJyk7dmFyIGRlZmF1bHRzPXJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTsvKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsaGVhZGVycyxmbnMpe3ZhciBjb250ZXh0PXRoaXN8fGRlZmF1bHRzOy8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL3V0aWxzLmZvckVhY2goZm5zLGZ1bmN0aW9uIHRyYW5zZm9ybShmbil7ZGF0YT1mbi5jYWxsKGNvbnRleHQsZGF0YSxoZWFkZXJzKTt9KTtyZXR1cm4gZGF0YTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4vdXRpbHMnKTt2YXIgbm9ybWFsaXplSGVhZGVyTmFtZT1yZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO3ZhciBlbmhhbmNlRXJyb3I9cmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO3ZhciBERUZBVUxUX0NPTlRFTlRfVFlQRT17J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9O2Z1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLHZhbHVlKXtpZighdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykmJnV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSl7aGVhZGVyc1snQ29udGVudC1UeXBlJ109dmFsdWU7fX1mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpe3ZhciBhZGFwdGVyO2lmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCE9PSd1bmRlZmluZWQnKXsvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG5hZGFwdGVyPXJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7fWVsc2UgaWYodHlwZW9mIHByb2Nlc3MhPT0ndW5kZWZpbmVkJyYmT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpPT09J1tvYmplY3QgcHJvY2Vzc10nKXsvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG5hZGFwdGVyPXJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO31yZXR1cm4gYWRhcHRlcjt9ZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLHBhcnNlcixlbmNvZGVyKXtpZih1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpe3RyeXsocGFyc2VyfHxKU09OLnBhcnNlKShyYXdWYWx1ZSk7cmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO31jYXRjaChlKXtpZihlLm5hbWUhPT0nU3ludGF4RXJyb3InKXt0aHJvdyBlO319fXJldHVybihlbmNvZGVyfHxKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO312YXIgZGVmYXVsdHM9e3RyYW5zaXRpb25hbDp7c2lsZW50SlNPTlBhcnNpbmc6dHJ1ZSxmb3JjZWRKU09OUGFyc2luZzp0cnVlLGNsYXJpZnlUaW1lb3V0RXJyb3I6ZmFsc2V9LGFkYXB0ZXI6Z2V0RGVmYXVsdEFkYXB0ZXIoKSx0cmFuc2Zvcm1SZXF1ZXN0OltmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsaGVhZGVycyl7bm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCdBY2NlcHQnKTtub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsJ0NvbnRlbnQtVHlwZScpO2lmKHV0aWxzLmlzRm9ybURhdGEoZGF0YSl8fHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSl8fHV0aWxzLmlzQnVmZmVyKGRhdGEpfHx1dGlscy5pc1N0cmVhbShkYXRhKXx8dXRpbHMuaXNGaWxlKGRhdGEpfHx1dGlscy5pc0Jsb2IoZGF0YSkpe3JldHVybiBkYXRhO31pZih1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSl7cmV0dXJuIGRhdGEuYnVmZmVyO31pZih1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSl7c2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7cmV0dXJuIGRhdGEudG9TdHJpbmcoKTt9aWYodXRpbHMuaXNPYmplY3QoZGF0YSl8fGhlYWRlcnMmJmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddPT09J2FwcGxpY2F0aW9uL2pzb24nKXtzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywnYXBwbGljYXRpb24vanNvbicpO3JldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7fXJldHVybiBkYXRhO31dLHRyYW5zZm9ybVJlc3BvbnNlOltmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKXt2YXIgdHJhbnNpdGlvbmFsPXRoaXMudHJhbnNpdGlvbmFsfHxkZWZhdWx0cy50cmFuc2l0aW9uYWw7dmFyIHNpbGVudEpTT05QYXJzaW5nPXRyYW5zaXRpb25hbCYmdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO3ZhciBmb3JjZWRKU09OUGFyc2luZz10cmFuc2l0aW9uYWwmJnRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZzt2YXIgc3RyaWN0SlNPTlBhcnNpbmc9IXNpbGVudEpTT05QYXJzaW5nJiZ0aGlzLnJlc3BvbnNlVHlwZT09PSdqc29uJztpZihzdHJpY3RKU09OUGFyc2luZ3x8Zm9yY2VkSlNPTlBhcnNpbmcmJnV0aWxzLmlzU3RyaW5nKGRhdGEpJiZkYXRhLmxlbmd0aCl7dHJ5e3JldHVybiBKU09OLnBhcnNlKGRhdGEpO31jYXRjaChlKXtpZihzdHJpY3RKU09OUGFyc2luZyl7aWYoZS5uYW1lPT09J1N5bnRheEVycm9yJyl7dGhyb3cgZW5oYW5jZUVycm9yKGUsdGhpcywnRV9KU09OX1BBUlNFJyk7fXRocm93IGU7fX19cmV0dXJuIGRhdGE7fV0sLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi90aW1lb3V0OjAseHNyZkNvb2tpZU5hbWU6J1hTUkYtVE9LRU4nLHhzcmZIZWFkZXJOYW1lOidYLVhTUkYtVE9LRU4nLG1heENvbnRlbnRMZW5ndGg6LTEsbWF4Qm9keUxlbmd0aDotMSx2YWxpZGF0ZVN0YXR1czpmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpe3JldHVybiBzdGF0dXM+PTIwMCYmc3RhdHVzPDMwMDt9LGhlYWRlcnM6e2NvbW1vbjp7J0FjY2VwdCc6J2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKid9fX07dXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsJ2dldCcsJ2hlYWQnXSxmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCl7ZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdPXt9O30pO3V0aWxzLmZvckVhY2goWydwb3N0JywncHV0JywncGF0Y2gnXSxmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKXtkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF09dXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO30pO21vZHVsZS5leHBvcnRzPWRlZmF1bHRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvZGVmYXVsdHMuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgdXRpbHM9cmVxdWlyZSgnLi4vdXRpbHMnKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsbm9ybWFsaXplZE5hbWUpe3V0aWxzLmZvckVhY2goaGVhZGVycyxmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLG5hbWUpe2lmKG5hbWUhPT1ub3JtYWxpemVkTmFtZSYmbmFtZS50b1VwcGVyQ2FzZSgpPT09bm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSl7aGVhZGVyc1tub3JtYWxpemVkTmFtZV09dmFsdWU7ZGVsZXRlIGhlYWRlcnNbbmFtZV07fX0pO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JzsvKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsY29uZmlnLGNvZGUscmVxdWVzdCxyZXNwb25zZSl7ZXJyb3IuY29uZmlnPWNvbmZpZztpZihjb2RlKXtlcnJvci5jb2RlPWNvZGU7fWVycm9yLnJlcXVlc3Q9cmVxdWVzdDtlcnJvci5yZXNwb25zZT1yZXNwb25zZTtlcnJvci5pc0F4aW9zRXJyb3I9dHJ1ZTtlcnJvci50b0pTT049ZnVuY3Rpb24gdG9KU09OKCl7cmV0dXJuey8vIFN0YW5kYXJkXG5tZXNzYWdlOnRoaXMubWVzc2FnZSxuYW1lOnRoaXMubmFtZSwvLyBNaWNyb3NvZnRcbmRlc2NyaXB0aW9uOnRoaXMuZGVzY3JpcHRpb24sbnVtYmVyOnRoaXMubnVtYmVyLC8vIE1vemlsbGFcbmZpbGVOYW1lOnRoaXMuZmlsZU5hbWUsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsY29sdW1uTnVtYmVyOnRoaXMuY29sdW1uTnVtYmVyLHN0YWNrOnRoaXMuc3RhY2ssLy8gQXhpb3NcbmNvbmZpZzp0aGlzLmNvbmZpZyxjb2RlOnRoaXMuY29kZSxzdGF0dXM6dGhpcy5yZXNwb25zZSYmdGhpcy5yZXNwb25zZS5zdGF0dXM/dGhpcy5yZXNwb25zZS5zdGF0dXM6bnVsbH07fTtyZXR1cm4gZXJyb3I7fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4vLi4vdXRpbHMnKTt2YXIgc2V0dGxlPXJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTt2YXIgY29va2llcz1yZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO3ZhciBidWlsZFVSTD1yZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTt2YXIgYnVpbGRGdWxsUGF0aD1yZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTt2YXIgcGFyc2VIZWFkZXJzPXJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTt2YXIgaXNVUkxTYW1lT3JpZ2luPXJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTt2YXIgY3JlYXRlRXJyb3I9cmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO3ZhciBkZWZhdWx0cz1yZXF1aXJlKCcuLi9kZWZhdWx0cycpO3ZhciBDYW5jZWw9cmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUscmVqZWN0KXt2YXIgcmVxdWVzdERhdGE9Y29uZmlnLmRhdGE7dmFyIHJlcXVlc3RIZWFkZXJzPWNvbmZpZy5oZWFkZXJzO3ZhciByZXNwb25zZVR5cGU9Y29uZmlnLnJlc3BvbnNlVHlwZTt2YXIgb25DYW5jZWxlZDtmdW5jdGlvbiBkb25lKCl7aWYoY29uZmlnLmNhbmNlbFRva2VuKXtjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7fWlmKGNvbmZpZy5zaWduYWwpe2NvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLG9uQ2FuY2VsZWQpO319aWYodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpe2RlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107Ly8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxufXZhciByZXF1ZXN0PW5ldyBYTUxIdHRwUmVxdWVzdCgpOy8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbmlmKGNvbmZpZy5hdXRoKXt2YXIgdXNlcm5hbWU9Y29uZmlnLmF1dGgudXNlcm5hbWV8fCcnO3ZhciBwYXNzd29yZD1jb25maWcuYXV0aC5wYXNzd29yZD91bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKTonJztyZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uPSdCYXNpYyAnK2J0b2EodXNlcm5hbWUrJzonK3Bhc3N3b3JkKTt9dmFyIGZ1bGxQYXRoPWJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsY29uZmlnLnVybCk7cmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSxidWlsZFVSTChmdWxsUGF0aCxjb25maWcucGFyYW1zLGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSx0cnVlKTsvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xucmVxdWVzdC50aW1lb3V0PWNvbmZpZy50aW1lb3V0O2Z1bmN0aW9uIG9ubG9hZGVuZCgpe2lmKCFyZXF1ZXN0KXtyZXR1cm47fS8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG52YXIgcmVzcG9uc2VIZWFkZXJzPSdnZXRBbGxSZXNwb25zZUhlYWRlcnMnaW4gcmVxdWVzdD9wYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk6bnVsbDt2YXIgcmVzcG9uc2VEYXRhPSFyZXNwb25zZVR5cGV8fHJlc3BvbnNlVHlwZT09PSd0ZXh0J3x8cmVzcG9uc2VUeXBlPT09J2pzb24nP3JlcXVlc3QucmVzcG9uc2VUZXh0OnJlcXVlc3QucmVzcG9uc2U7dmFyIHJlc3BvbnNlPXtkYXRhOnJlc3BvbnNlRGF0YSxzdGF0dXM6cmVxdWVzdC5zdGF0dXMsc3RhdHVzVGV4dDpyZXF1ZXN0LnN0YXR1c1RleHQsaGVhZGVyczpyZXNwb25zZUhlYWRlcnMsY29uZmlnOmNvbmZpZyxyZXF1ZXN0OnJlcXVlc3R9O3NldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSl7cmVzb2x2ZSh2YWx1ZSk7ZG9uZSgpO30sZnVuY3Rpb24gX3JlamVjdChlcnIpe3JlamVjdChlcnIpO2RvbmUoKTt9LHJlc3BvbnNlKTsvLyBDbGVhbiB1cCByZXF1ZXN0XG5yZXF1ZXN0PW51bGw7fWlmKCdvbmxvYWRlbmQnaW4gcmVxdWVzdCl7Ly8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbnJlcXVlc3Qub25sb2FkZW5kPW9ubG9hZGVuZDt9ZWxzZXsvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG5yZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbiBoYW5kbGVMb2FkKCl7aWYoIXJlcXVlc3R8fHJlcXVlc3QucmVhZHlTdGF0ZSE9PTQpe3JldHVybjt9Ly8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4vLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbi8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbmlmKHJlcXVlc3Quc3RhdHVzPT09MCYmIShyZXF1ZXN0LnJlc3BvbnNlVVJMJiZyZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6Jyk9PT0wKSl7cmV0dXJuO30vLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4vLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG5zZXRUaW1lb3V0KG9ubG9hZGVuZCk7fTt9Ly8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxucmVxdWVzdC5vbmFib3J0PWZ1bmN0aW9uIGhhbmRsZUFib3J0KCl7aWYoIXJlcXVlc3Qpe3JldHVybjt9cmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLGNvbmZpZywnRUNPTk5BQk9SVEVEJyxyZXF1ZXN0KSk7Ly8gQ2xlYW4gdXAgcmVxdWVzdFxucmVxdWVzdD1udWxsO307Ly8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xucmVxdWVzdC5vbmVycm9yPWZ1bmN0aW9uIGhhbmRsZUVycm9yKCl7Ly8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4vLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbnJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsY29uZmlnLG51bGwscmVxdWVzdCkpOy8vIENsZWFuIHVwIHJlcXVlc3RcbnJlcXVlc3Q9bnVsbDt9Oy8vIEhhbmRsZSB0aW1lb3V0XG5yZXF1ZXN0Lm9udGltZW91dD1mdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCl7dmFyIHRpbWVvdXRFcnJvck1lc3NhZ2U9Y29uZmlnLnRpbWVvdXQ/J3RpbWVvdXQgb2YgJytjb25maWcudGltZW91dCsnbXMgZXhjZWVkZWQnOid0aW1lb3V0IGV4Y2VlZGVkJzt2YXIgdHJhbnNpdGlvbmFsPWNvbmZpZy50cmFuc2l0aW9uYWx8fGRlZmF1bHRzLnRyYW5zaXRpb25hbDtpZihjb25maWcudGltZW91dEVycm9yTWVzc2FnZSl7dGltZW91dEVycm9yTWVzc2FnZT1jb25maWcudGltZW91dEVycm9yTWVzc2FnZTt9cmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsY29uZmlnLHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yPydFVElNRURPVVQnOidFQ09OTkFCT1JURUQnLHJlcXVlc3QpKTsvLyBDbGVhbiB1cCByZXF1ZXN0XG5yZXF1ZXN0PW51bGw7fTsvLyBBZGQgeHNyZiBoZWFkZXJcbi8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbmlmKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpey8vIEFkZCB4c3JmIGhlYWRlclxudmFyIHhzcmZWYWx1ZT0oY29uZmlnLndpdGhDcmVkZW50aWFsc3x8aXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkmJmNvbmZpZy54c3JmQ29va2llTmFtZT9jb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTp1bmRlZmluZWQ7aWYoeHNyZlZhbHVlKXtyZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdPXhzcmZWYWx1ZTt9fS8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG5pZignc2V0UmVxdWVzdEhlYWRlcidpbiByZXF1ZXN0KXt1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLGtleSl7aWYodHlwZW9mIHJlcXVlc3REYXRhPT09J3VuZGVmaW5lZCcmJmtleS50b0xvd2VyQ2FzZSgpPT09J2NvbnRlbnQtdHlwZScpey8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbmRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO31lbHNley8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG5yZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LHZhbCk7fX0pO30vLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG5pZighdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpe3JlcXVlc3Qud2l0aENyZWRlbnRpYWxzPSEhY29uZmlnLndpdGhDcmVkZW50aWFsczt9Ly8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuaWYocmVzcG9uc2VUeXBlJiZyZXNwb25zZVR5cGUhPT0nanNvbicpe3JlcXVlc3QucmVzcG9uc2VUeXBlPWNvbmZpZy5yZXNwb25zZVR5cGU7fS8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbmlmKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzPT09J2Z1bmN0aW9uJyl7cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7fS8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG5pZih0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3M9PT0nZnVuY3Rpb24nJiZyZXF1ZXN0LnVwbG9hZCl7cmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTt9aWYoY29uZmlnLmNhbmNlbFRva2VufHxjb25maWcuc2lnbmFsKXsvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xub25DYW5jZWxlZD1mdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCl7aWYoIXJlcXVlc3Qpe3JldHVybjt9cmVqZWN0KCFjYW5jZWx8fGNhbmNlbCYmY2FuY2VsLnR5cGU/bmV3IENhbmNlbCgnY2FuY2VsZWQnKTpjYW5jZWwpO3JlcXVlc3QuYWJvcnQoKTtyZXF1ZXN0PW51bGw7fTtjb25maWcuY2FuY2VsVG9rZW4mJmNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7aWYoY29uZmlnLnNpZ25hbCl7Y29uZmlnLnNpZ25hbC5hYm9ydGVkP29uQ2FuY2VsZWQoKTpjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JyxvbkNhbmNlbGVkKTt9fWlmKCFyZXF1ZXN0RGF0YSl7cmVxdWVzdERhdGE9bnVsbDt9Ly8gU2VuZCB0aGUgcmVxdWVzdFxucmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTt9KTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIGNyZWF0ZUVycm9yPXJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTsvKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUscmVqZWN0LHJlc3BvbnNlKXt2YXIgdmFsaWRhdGVTdGF0dXM9cmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO2lmKCFyZXNwb25zZS5zdGF0dXN8fCF2YWxpZGF0ZVN0YXR1c3x8dmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSl7cmVzb2x2ZShyZXNwb25zZSk7fWVsc2V7cmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcrcmVzcG9uc2Uuc3RhdHVzLHJlc3BvbnNlLmNvbmZpZyxudWxsLHJlc3BvbnNlLnJlcXVlc3QscmVzcG9uc2UpKTt9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzXG4vLyBtb2R1bGUgaWQgPSA1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIGVuaGFuY2VFcnJvcj1yZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpOy8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSxjb25maWcsY29kZSxyZXF1ZXN0LHJlc3BvbnNlKXt2YXIgZXJyb3I9bmV3IEVycm9yKG1lc3NhZ2UpO3JldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsY29uZmlnLGNvZGUscmVxdWVzdCxyZXNwb25zZSk7fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgdXRpbHM9cmVxdWlyZSgnLi8uLi91dGlscycpO21vZHVsZS5leHBvcnRzPXV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCk/Ly8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG5mdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKXtyZXR1cm57d3JpdGU6ZnVuY3Rpb24gd3JpdGUobmFtZSx2YWx1ZSxleHBpcmVzLHBhdGgsZG9tYWluLHNlY3VyZSl7dmFyIGNvb2tpZT1bXTtjb29raWUucHVzaChuYW1lKyc9JytlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtpZih1dGlscy5pc051bWJlcihleHBpcmVzKSl7Y29va2llLnB1c2goJ2V4cGlyZXM9JytuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTt9aWYodXRpbHMuaXNTdHJpbmcocGF0aCkpe2Nvb2tpZS5wdXNoKCdwYXRoPScrcGF0aCk7fWlmKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpe2Nvb2tpZS5wdXNoKCdkb21haW49Jytkb21haW4pO31pZihzZWN1cmU9PT10cnVlKXtjb29raWUucHVzaCgnc2VjdXJlJyk7fWRvY3VtZW50LmNvb2tpZT1jb29raWUuam9pbignOyAnKTt9LHJlYWQ6ZnVuY3Rpb24gcmVhZChuYW1lKXt2YXIgbWF0Y2g9ZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcrbmFtZSsnKT0oW147XSopJykpO3JldHVybiBtYXRjaD9kZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pOm51bGw7fSxyZW1vdmU6ZnVuY3Rpb24gcmVtb3ZlKG5hbWUpe3RoaXMud3JpdGUobmFtZSwnJyxEYXRlLm5vdygpLTg2NDAwMDAwKTt9fTt9KCk6Ly8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCl7cmV0dXJue3dyaXRlOmZ1bmN0aW9uIHdyaXRlKCl7fSxyZWFkOmZ1bmN0aW9uIHJlYWQoKXtyZXR1cm4gbnVsbDt9LHJlbW92ZTpmdW5jdGlvbiByZW1vdmUoKXt9fTt9KCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgaXNBYnNvbHV0ZVVSTD1yZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTt2YXIgY29tYmluZVVSTHM9cmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpOy8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwscmVxdWVzdGVkVVJMKXtpZihiYXNlVVJMJiYhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKXtyZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCxyZXF1ZXN0ZWRVUkwpO31yZXR1cm4gcmVxdWVzdGVkVVJMO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JzsvKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCl7Ly8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4vLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbnJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSA1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7LyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCxyZWxhdGl2ZVVSTCl7cmV0dXJuIHJlbGF0aXZlVVJMP2Jhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCcnKSsnLycrcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCcnKTpiYXNlVVJMO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4vLi4vdXRpbHMnKTsvLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mPVsnYWdlJywnYXV0aG9yaXphdGlvbicsJ2NvbnRlbnQtbGVuZ3RoJywnY29udGVudC10eXBlJywnZXRhZycsJ2V4cGlyZXMnLCdmcm9tJywnaG9zdCcsJ2lmLW1vZGlmaWVkLXNpbmNlJywnaWYtdW5tb2RpZmllZC1zaW5jZScsJ2xhc3QtbW9kaWZpZWQnLCdsb2NhdGlvbicsJ21heC1mb3J3YXJkcycsJ3Byb3h5LWF1dGhvcml6YXRpb24nLCdyZWZlcmVyJywncmV0cnktYWZ0ZXInLCd1c2VyLWFnZW50J107LyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKXt2YXIgcGFyc2VkPXt9O3ZhciBrZXk7dmFyIHZhbDt2YXIgaTtpZighaGVhZGVycyl7cmV0dXJuIHBhcnNlZDt9dXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSxmdW5jdGlvbiBwYXJzZXIobGluZSl7aT1saW5lLmluZGV4T2YoJzonKTtrZXk9dXRpbHMudHJpbShsaW5lLnN1YnN0cigwLGkpKS50b0xvd2VyQ2FzZSgpO3ZhbD11dGlscy50cmltKGxpbmUuc3Vic3RyKGkrMSkpO2lmKGtleSl7aWYocGFyc2VkW2tleV0mJmlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KT49MCl7cmV0dXJuO31pZihrZXk9PT0nc2V0LWNvb2tpZScpe3BhcnNlZFtrZXldPShwYXJzZWRba2V5XT9wYXJzZWRba2V5XTpbXSkuY29uY2F0KFt2YWxdKTt9ZWxzZXtwYXJzZWRba2V5XT1wYXJzZWRba2V5XT9wYXJzZWRba2V5XSsnLCAnK3ZhbDp2YWw7fX19KTtyZXR1cm4gcGFyc2VkO307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciB1dGlscz1yZXF1aXJlKCcuLy4uL3V0aWxzJyk7bW9kdWxlLmV4cG9ydHM9dXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKT8vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCl7dmFyIG1zaWU9Lyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTt2YXIgdXJsUGFyc2luZ05vZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO3ZhciBvcmlnaW5VUkw7LyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpe3ZhciBocmVmPXVybDtpZihtc2llKXsvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG51cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLGhyZWYpO2hyZWY9dXJsUGFyc2luZ05vZGUuaHJlZjt9dXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJyxocmVmKTsvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG5yZXR1cm57aHJlZjp1cmxQYXJzaW5nTm9kZS5ocmVmLHByb3RvY29sOnVybFBhcnNpbmdOb2RlLnByb3RvY29sP3VybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywnJyk6JycsaG9zdDp1cmxQYXJzaW5nTm9kZS5ob3N0LHNlYXJjaDp1cmxQYXJzaW5nTm9kZS5zZWFyY2g/dXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCcnKTonJyxoYXNoOnVybFBhcnNpbmdOb2RlLmhhc2g/dXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sJycpOicnLGhvc3RuYW1lOnVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLHBvcnQ6dXJsUGFyc2luZ05vZGUucG9ydCxwYXRobmFtZTp1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCk9PT0nLyc/dXJsUGFyc2luZ05vZGUucGF0aG5hbWU6Jy8nK3VybFBhcnNpbmdOb2RlLnBhdGhuYW1lfTt9b3JpZ2luVVJMPXJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOy8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL3JldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCl7dmFyIHBhcnNlZD11dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKT9yZXNvbHZlVVJMKHJlcXVlc3RVUkwpOnJlcXVlc3RVUkw7cmV0dXJuIHBhcnNlZC5wcm90b2NvbD09PW9yaWdpblVSTC5wcm90b2NvbCYmcGFyc2VkLmhvc3Q9PT1vcmlnaW5VUkwuaG9zdDt9O30oKTovLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCl7cmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpe3JldHVybiB0cnVlO307fSgpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JzsvKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2Upe3RoaXMubWVzc2FnZT1tZXNzYWdlO31DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uIHRvU3RyaW5nKCl7cmV0dXJuJ0NhbmNlbCcrKHRoaXMubWVzc2FnZT8nOiAnK3RoaXMubWVzc2FnZTonJyk7fTtDYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX189dHJ1ZTttb2R1bGUuZXhwb3J0cz1DYW5jZWw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5fX0NBTkNFTF9fKTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIHV0aWxzPXJlcXVpcmUoJy4uL3V0aWxzJyk7LyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLGNvbmZpZzIpey8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuY29uZmlnMj1jb25maWcyfHx7fTt2YXIgY29uZmlnPXt9O2Z1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCxzb3VyY2Upe2lmKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSYmdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKXtyZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LHNvdXJjZSk7fWVsc2UgaWYodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKXtyZXR1cm4gdXRpbHMubWVyZ2Uoe30sc291cmNlKTt9ZWxzZSBpZih1dGlscy5pc0FycmF5KHNvdXJjZSkpe3JldHVybiBzb3VyY2Uuc2xpY2UoKTt9cmV0dXJuIHNvdXJjZTt9Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5mdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3Ape2lmKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSl7cmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sY29uZmlnMltwcm9wXSk7fWVsc2UgaWYoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKXtyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLGNvbmZpZzFbcHJvcF0pO319Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5mdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3Ape2lmKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSl7cmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCxjb25maWcyW3Byb3BdKTt9fS8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKXtpZighdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpe3JldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsY29uZmlnMltwcm9wXSk7fWVsc2UgaWYoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKXtyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLGNvbmZpZzFbcHJvcF0pO319Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5mdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCl7aWYocHJvcCBpbiBjb25maWcyKXtyZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSxjb25maWcyW3Byb3BdKTt9ZWxzZSBpZihwcm9wIGluIGNvbmZpZzEpe3JldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsY29uZmlnMVtwcm9wXSk7fX12YXIgbWVyZ2VNYXA9eyd1cmwnOnZhbHVlRnJvbUNvbmZpZzIsJ21ldGhvZCc6dmFsdWVGcm9tQ29uZmlnMiwnZGF0YSc6dmFsdWVGcm9tQ29uZmlnMiwnYmFzZVVSTCc6ZGVmYXVsdFRvQ29uZmlnMiwndHJhbnNmb3JtUmVxdWVzdCc6ZGVmYXVsdFRvQ29uZmlnMiwndHJhbnNmb3JtUmVzcG9uc2UnOmRlZmF1bHRUb0NvbmZpZzIsJ3BhcmFtc1NlcmlhbGl6ZXInOmRlZmF1bHRUb0NvbmZpZzIsJ3RpbWVvdXQnOmRlZmF1bHRUb0NvbmZpZzIsJ3RpbWVvdXRNZXNzYWdlJzpkZWZhdWx0VG9Db25maWcyLCd3aXRoQ3JlZGVudGlhbHMnOmRlZmF1bHRUb0NvbmZpZzIsJ2FkYXB0ZXInOmRlZmF1bHRUb0NvbmZpZzIsJ3Jlc3BvbnNlVHlwZSc6ZGVmYXVsdFRvQ29uZmlnMiwneHNyZkNvb2tpZU5hbWUnOmRlZmF1bHRUb0NvbmZpZzIsJ3hzcmZIZWFkZXJOYW1lJzpkZWZhdWx0VG9Db25maWcyLCdvblVwbG9hZFByb2dyZXNzJzpkZWZhdWx0VG9Db25maWcyLCdvbkRvd25sb2FkUHJvZ3Jlc3MnOmRlZmF1bHRUb0NvbmZpZzIsJ2RlY29tcHJlc3MnOmRlZmF1bHRUb0NvbmZpZzIsJ21heENvbnRlbnRMZW5ndGgnOmRlZmF1bHRUb0NvbmZpZzIsJ21heEJvZHlMZW5ndGgnOmRlZmF1bHRUb0NvbmZpZzIsJ3RyYW5zcG9ydCc6ZGVmYXVsdFRvQ29uZmlnMiwnaHR0cEFnZW50JzpkZWZhdWx0VG9Db25maWcyLCdodHRwc0FnZW50JzpkZWZhdWx0VG9Db25maWcyLCdjYW5jZWxUb2tlbic6ZGVmYXVsdFRvQ29uZmlnMiwnc29ja2V0UGF0aCc6ZGVmYXVsdFRvQ29uZmlnMiwncmVzcG9uc2VFbmNvZGluZyc6ZGVmYXVsdFRvQ29uZmlnMiwndmFsaWRhdGVTdGF0dXMnOm1lcmdlRGlyZWN0S2V5c307dXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKXt2YXIgbWVyZ2U9bWVyZ2VNYXBbcHJvcF18fG1lcmdlRGVlcFByb3BlcnRpZXM7dmFyIGNvbmZpZ1ZhbHVlPW1lcmdlKHByb3ApO3V0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSYmbWVyZ2UhPT1tZXJnZURpcmVjdEtleXN8fChjb25maWdbcHJvcF09Y29uZmlnVmFsdWUpO30pO3JldHVybiBjb25maWc7fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307dmFyIFZFUlNJT049cmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO3ZhciB2YWxpZGF0b3JzPXt9Oy8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsJ2Jvb2xlYW4nLCdudW1iZXInLCdmdW5jdGlvbicsJ3N0cmluZycsJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSxpKXt2YWxpZGF0b3JzW3R5cGVdPWZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZyl7cmV0dXJuKHR5cGVvZiB0aGluZz09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YodGhpbmcpKT09PXR5cGV8fCdhJysoaTwxPyduICc6JyAnKSt0eXBlO307fSk7dmFyIGRlcHJlY2F0ZWRXYXJuaW5ncz17fTsvKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL3ZhbGlkYXRvcnMudHJhbnNpdGlvbmFsPWZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsdmVyc2lvbixtZXNzYWdlKXtmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCxkZXNjKXtyZXR1cm4nW0F4aW9zIHYnK1ZFUlNJT04rJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnK29wdCsnXFwnJytkZXNjKyhtZXNzYWdlPycuICcrbWVzc2FnZTonJyk7fS8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5yZXR1cm4gZnVuY3Rpb24odmFsdWUsb3B0LG9wdHMpe2lmKHZhbGlkYXRvcj09PWZhbHNlKXt0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsJyBoYXMgYmVlbiByZW1vdmVkJysodmVyc2lvbj8nIGluICcrdmVyc2lvbjonJykpKTt9aWYodmVyc2lvbiYmIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKXtkZXByZWNhdGVkV2FybmluZ3Nbb3B0XT10cnVlOy8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5jb25zb2xlLndhcm4oZm9ybWF0TWVzc2FnZShvcHQsJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnK3ZlcnNpb24rJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZScpKTt9cmV0dXJuIHZhbGlkYXRvcj92YWxpZGF0b3IodmFsdWUsb3B0LG9wdHMpOnRydWU7fTt9Oy8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLHNjaGVtYSxhbGxvd1Vua25vd24pe2lmKCh0eXBlb2Ygb3B0aW9ucz09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2Yob3B0aW9ucykpIT09J29iamVjdCcpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTt9dmFyIGtleXM9T2JqZWN0LmtleXMob3B0aW9ucyk7dmFyIGk9a2V5cy5sZW5ndGg7d2hpbGUoaS0tPjApe3ZhciBvcHQ9a2V5c1tpXTt2YXIgdmFsaWRhdG9yPXNjaGVtYVtvcHRdO2lmKHZhbGlkYXRvcil7dmFyIHZhbHVlPW9wdGlvbnNbb3B0XTt2YXIgcmVzdWx0PXZhbHVlPT09dW5kZWZpbmVkfHx2YWxpZGF0b3IodmFsdWUsb3B0LG9wdGlvbnMpO2lmKHJlc3VsdCE9PXRydWUpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnK29wdCsnIG11c3QgYmUgJytyZXN1bHQpO31jb250aW51ZTt9aWYoYWxsb3dVbmtub3duIT09dHJ1ZSl7dGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcrb3B0KTt9fX1tb2R1bGUuZXhwb3J0cz17YXNzZXJ0T3B0aW9uczphc3NlcnRPcHRpb25zLHZhbGlkYXRvcnM6dmFsaWRhdG9yc307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7bW9kdWxlLmV4cG9ydHM9e1widmVyc2lvblwiOlwiMC4yMy4wXCJ9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvZW52L2RhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgQ2FuY2VsPXJlcXVpcmUoJy4vQ2FuY2VsJyk7LyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3Ipe2lmKHR5cGVvZiBleGVjdXRvciE9PSdmdW5jdGlvbicpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTt9dmFyIHJlc29sdmVQcm9taXNlO3RoaXMucHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSl7cmVzb2x2ZVByb21pc2U9cmVzb2x2ZTt9KTt2YXIgdG9rZW49dGhpczsvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKXtpZighdG9rZW4uX2xpc3RlbmVycylyZXR1cm47dmFyIGk7dmFyIGw9dG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7Zm9yKGk9MDtpPGw7aSsrKXt0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7fXRva2VuLl9saXN0ZW5lcnM9bnVsbDt9KTsvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudGhpcy5wcm9taXNlLnRoZW49ZnVuY3Rpb24ob25mdWxmaWxsZWQpe3ZhciBfcmVzb2x2ZTsvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIHByb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSl7dG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO19yZXNvbHZlPXJlc29sdmU7fSkudGhlbihvbmZ1bGZpbGxlZCk7cHJvbWlzZS5jYW5jZWw9ZnVuY3Rpb24gcmVqZWN0KCl7dG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO307cmV0dXJuIHByb21pc2U7fTtleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSl7aWYodG9rZW4ucmVhc29uKXsvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbnJldHVybjt9dG9rZW4ucmVhc29uPW5ldyBDYW5jZWwobWVzc2FnZSk7cmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTt9KTt9LyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQ9ZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpe2lmKHRoaXMucmVhc29uKXt0aHJvdyB0aGlzLnJlYXNvbjt9fTsvKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpe2lmKHRoaXMucmVhc29uKXtsaXN0ZW5lcih0aGlzLnJlYXNvbik7cmV0dXJuO31pZih0aGlzLl9saXN0ZW5lcnMpe3RoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTt9ZWxzZXt0aGlzLl9saXN0ZW5lcnM9W2xpc3RlbmVyXTt9fTsvKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL0NhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZT1mdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcil7aWYoIXRoaXMuX2xpc3RlbmVycyl7cmV0dXJuO312YXIgaW5kZXg9dGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO2lmKGluZGV4IT09LTEpe3RoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsMSk7fX07LyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovQ2FuY2VsVG9rZW4uc291cmNlPWZ1bmN0aW9uIHNvdXJjZSgpe3ZhciBjYW5jZWw7dmFyIHRva2VuPW5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKXtjYW5jZWw9Yzt9KTtyZXR1cm57dG9rZW46dG9rZW4sY2FuY2VsOmNhbmNlbH07fTttb2R1bGUuZXhwb3J0cz1DYW5jZWxUb2tlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnOy8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKXtyZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpe3JldHVybiBjYWxsYmFjay5hcHBseShudWxsLGFycik7fTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JzsvKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi92YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpe3JldHVybih0eXBlb2YgcGF5bG9hZD09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YocGF5bG9hZCkpPT09J29iamVjdCcmJnBheWxvYWQuaXNBeGlvc0Vycm9yPT09dHJ1ZTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDcwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgc3R5bGVzID0gcmVxdWlyZSgnLi90b29sYmFyLWNvbnRhaW5lci1zdHlsZXMnKSxcbiAgICBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBUb29sQmFyQ29udGFpbmVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoVG9vbEJhckNvbnRhaW5lciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBUb29sQmFyQ29udGFpbmVyKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sQmFyQ29udGFpbmVyKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvb2xCYXJDb250YWluZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb29sQmFyQ29udGFpbmVyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUb29sQmFyQ29udGFpbmVyLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLnRvb2xCYXJDb250YWluZXJTdHlsZSwgc3R5bGVzW3RoaXMucHJvcHMucG9zaXRpb25dLCBzdHlsZXNbdGhpcy5wcm9wcy5jb250YWluZXJdKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgaWQ6ICd0b29sQmFyQ29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAndG9vbEJhckNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZSB9LFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9vbEJhckNvbnRhaW5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVG9vbEJhckNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gICAgcG9zaXRpb246IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cblRvb2xCYXJDb250YWluZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHBvc2l0aW9uOiAncmlnaHQnLFxuICAgIGNvbnRhaW5lcjoge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbEJhckNvbnRhaW5lcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvdG9vbGJhci1jb250YWluZXIvdG9vbGJhci1jb250YWluZXIuanN4XG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e3Rvb2xCYXJDb250YWluZXJTdHlsZTp7ZGlzcGxheTonZmxleCcsd2lkdGg6JzEwMCUnLGhlaWdodDonQXV0bycsbWFyZ2luQm90dG9tOic1cHgnLG1hcmdpbkhlaWdodDonNXB4Jyxib3JkZXJSYWRpdXM6JzVweCd9LHJpZ2h0OntqdXN0aWZ5Q29udGVudDonZmxleC1lbmQnfSxsZWZ0OntqdXN0aWZ5Q29udGVudDonZmxleC1zdGFydCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvdG9vbGJhci1jb250YWluZXIvdG9vbGJhci1jb250YWluZXItc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLmpzeCcpLFxuICAgIElDT04gPSAnc3RhcnQnO1xuXG52YXIgQnV0dG9uUmVnaXN0ZXJTdGFydCA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25SZWdpc3RlclN0YXJ0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uUmVnaXN0ZXJTdGFydChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uUmVnaXN0ZXJTdGFydCk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCdXR0b25SZWdpc3RlclN0YXJ0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uUmVnaXN0ZXJTdGFydCkpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uUmVnaXN0ZXJTdGFydCwgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub25DbGljaygnc3RhcnQnKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0blN0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5idXR0b24sXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b25SZWdpc3RlclN0YXJ0O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuQnV0dG9uUmVnaXN0ZXJTdGFydC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHNob3c6IHRydWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVnaXN0ZXJTdGFydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1zdGFydC9idXR0b24tcmVnaXN0ZXItc3RhcnQuanN4XG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2J1dHRvbjp7YmFja2dyb3VuZDond2hpdGUnLG1hcmdpbjonNXB4IDJweCcsYm9yZGVyUmFkaXVzOic1cHgnLGhlaWdodDonMzBweCcsZGlzcGxheTonZmxleCcsYm9yZGVyOicxcHggc29saWQgZ3JheSd9LGJ1dHRvbkFjY291bnQ6e3dpZHRoOic1MCUnfSxidXR0b25Mb2dpbjp7d2lkdGg6JzEwMHB4J30sYnV0dG9uRWRpdDp7ZGlzcGxheTonZmxleCd9LGljb25zOnthZGQ6Jy9pbWFnZXMvaWNvbnMvYWRkLnBuZycsZWRpdDonL2ltYWdlcy9pY29ucy9lZGl0LnBuZycsZGVsZXRlOicvaW1hZ2VzL2ljb25zL2RlbGV0ZS5wbmcnLGZpbHRlcjonL2ltYWdlcy9pY29ucy9maWx0ZXIucG5nJyxwcmludDonL2ltYWdlcy9pY29ucy9wcmludC5wbmcnLG9rOicvaW1hZ2VzL2ljb25zL29rLnBuZycsY2FuY2VsOicvaW1hZ2VzL2ljb25zL2NhbmNlbC5wbmcnLHNhdmU6Jy9pbWFnZXMvaWNvbnMvc2F2ZS5wbmcnLGV4ZWN1dGU6Jy9pbWFnZXMvaWNvbnMvZXhlY3V0ZS5wbmcnLHN0YXJ0OicvaW1hZ2VzL2ljb25zL3N0YXJ0LnBuZycsbG9naW46Jy9pbWFnZXMvaWNvbnMvbG9naW4ucG5nJyxhY2NvdW50OicvaW1hZ2VzL2ljb25zL2FjY291bnQucG5nJyxyZWt2OicvaW1hZ2VzL2ljb25zL3Jla3YucG5nJyxpbmZvOicvaW1hZ2VzL2ljb25zL2luZm8ucG5nJyxzZXR0aW5nczonL2ltYWdlcy9pY29ucy9zZXR0aW5ncy5wbmcnLG1haWw6Jy9pbWFnZXMvaWNvbnMvbWFpbC5wbmcnLHNlbGVjdDonL2ltYWdlcy9pY29ucy9zZWxlY3QucG5nJyxyZWZyZXNoOicvaW1hZ2VzL2ljb25zL3JlZnJlc2gucG5nJyxhdHRhY2htZW50OicvaW1hZ2VzL2ljb25zL2F0dGFjaG1lbnQucG5nJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgc3R5bGVzID0gcmVxdWlyZSgnLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyk7XG52YXIgZ2V0VGV4dFZhbHVlID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2dldFRleHRWYWx1ZScpO1xuXG52YXIgQnV0dG9uID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvbiwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgLy8g0LrQvdC+0L/QutCwINGB0L7Qt9C00LDQvdC40Y8g0LTQvtC60YPQvNC10L3RgtCwINCyINGA0LXQs9C40YHRgtGA0LDRhVxuICAgIGZ1bmN0aW9uIEJ1dHRvbihwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IF90aGlzLnByb3BzLmRpc2FibGVkXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b24sIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjbGljayc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGJsY2xpY2snOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2sodGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1bmhhbmRsZWQnLCBldmVudC50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIC8vIHZpc2liaWxpdHlcbiAgICAgICAgICAgIHZhciB2aXNpYmlsaXR5ID0gdGhpcy5wcm9wcy5zaG93ID8gJ2luaXRpYWwnIDogJ2hpZGRlbic7XG5cbiAgICAgICAgICAgIHZhciBwcm9wU3R5bGUgPSAnc3R5bGUnIGluIHRoaXMucHJvcHMgPyB0aGlzLnByb3BzLnN0eWxlIDoge30sXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuYnV0dG9uLCBwcm9wU3R5bGUsIHsgdmlzaWJpbGl0eTogdmlzaWJpbGl0eSB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5zdGF0ZS5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBvbkRvdWJsZUNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICBnZXRUZXh0VmFsdWUodGhpcy5wcm9wcy52YWx1ZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5kaXNhYmxlZCAhPT0gcHJldlN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZCB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci5qc3hcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JzsvLyB3aWxsIGNhbGN1bGF0ZSBzdW0gb2Ygc29tZSBmaWVsZFxudmFyIGxhbmdGaWxlPXJlcXVpcmUoJy4vLi4vY29uZmlnL2xhbmcnKTt2YXIgRG9jQ29udGV4dD1yZXF1aXJlKCcuLy4uL2Zyb250ZW5kL2RvYy1jb250ZXh0Jyk7dmFyIGdldFRleHRWYWx1ZT1mdW5jdGlvbiBnZXRUZXh0VmFsdWUodmFsdWUsbGFuZyl7aWYoIURvY0NvbnRleHQua2VlbCl7RG9jQ29udGV4dC5rZWVsPSdFU1QnO312YXIga2VlbD1Eb2NDb250ZXh0LmtlZWwudG9VcHBlckNhc2UoKT09PSdFU1QnPzE6RG9jQ29udGV4dC5rZWVsLnRvVXBwZXJDYXNlKCk9PT0nUlUnPzI6MDtsYW5nPWxhbmc/bGFuZzprZWVsO3JldHVybiBsYW5nRmlsZVt2YWx1ZV0/bGFuZ0ZpbGVbdmFsdWVdW2xhbmddOnZhbHVlO307bW9kdWxlLmV4cG9ydHM9Z2V0VGV4dFZhbHVlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbGlicy9nZXRUZXh0VmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgX21vZHVsZSRleHBvcnRzO2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHZhbHVlKXtpZihrZXkgaW4gb2JqKXtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7dmFsdWU6dmFsdWUsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOnRydWV9KTt9ZWxzZXtvYmpba2V5XT12YWx1ZTt9cmV0dXJuIG9iajt9bW9kdWxlLmV4cG9ydHM9KF9tb2R1bGUkZXhwb3J0cz17XCJMaXNhIGFuZG1lZFwiOlsnQWRkIGRhdGEnLCdMaXNhIGFuZG1lZCcsJ9CU0L7QsdCw0LLQuNGC0Ywg0L/QvtC60LDQt9Cw0L3QuNGPJ10sXCJMaXNhXCI6W1wiQWRkXCIsXCJMaXNhXCIsXCLQlNC+0LHQsNCy0LjRgtGMXCJdLFwiTXV1ZGFcIjpbXCJFZGl0XCIsXCJNdXVkYVwiLFwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0YxcIl0sXCJLdXN0dXRhXCI6W1wiRGVsZXRlXCIsXCJLdXN0dXRhXCIsXCLQo9C00LDQu9C40YLRjFwiXSxcIlRyw7xra1wiOltcIlByaW50XCIsXCJUcsO8a2tcIixcItCf0LXRh9Cw0YLRjFwiXSxcIkZpbHRlclwiOltcIkZpbHRlclwiLFwiRmlsdGVyXCIsXCLQpNC40LvRjNGC0YBcIl0sXCJVdWVuZGFcIjpbXCJSZWZyZXNoXCIsXCJVdWVuZGFcIixcItCe0LHQvdC+0LLQuNGC0YxcIl0sXCJTYXZlXCI6W1wiU2F2ZVwiLFwiU2FsdmVzdGFcIixcItCh0L7RhdGA0LDQvdC40YLRjFwiXSxcIkNhbmNlbFwiOltcIkNhbmNlbFwiLFwiS2F0a2VzdGFcIixcItCe0YLQvNC10L3QsFwiXSxcIkxpbWlpdDpcIjpbXCJMaW1pdDpcIixcIkxpbWlpdDpcIixcItCb0LjQvNC40YI6XCJdLFwiVsOkbGp1XCI6W1wiRXhpdFwiLFwiVsOkbGp1XCIsXCLQktGL0YXQvtC0XCJdLFwiU2lzc2VcIjpbXCJMb2dpblwiLFwiU2lzc2VcIixcItCS0YXQvtC0XCJdLFwiSnVoZW5kXCI6W1wiSGVscFwiLFwiSnVoZW5kXCIsXCLQn9C+0LzQvtGJ0YxcIl0sXCJEb2t1bWVudFwiOltcIkRvY3VtZW50XCIsXCJEb2t1bWVudFwiLFwi0JTQvtC60YPQvNC10L3RglwiXSxcIkt1dXDDpGV2XCI6W1wiRGF0ZVwiLFwiS3V1cMOkZXZcIixcItCU0LDRgtCwXCJdLFwiS29yci5rb250b1wiOltcIkNvcnJlc3BvbmRlbnQgYWNjb3VudFwiLFwiS29yci5rb250b1wiLFwi0JrQvtGALtGB0YfQtdGCXCJdLFwiVHVubnVzXCI6W1wiSW5kZW50aWZpY2F0b3JcIixcIlR1bm51c1wiLFwi0J/RgNC40LfQvdCw0LpcIl0sXCJUdW5udXM6XCI6W1wiSW5kZW50aWZpY2F0b3I6XCIsXCJUdW5udXM6XCIsXCLQn9GA0LjQt9C90LDQujpcIl0sXCLDnGtzdXM6XCI6W1wiSW5kZW50aWZpY2F0b3I6XCIsXCJUdW5udXM6XCIsXCLQn9GA0LjQt9C90LDQujpcIl0sXCJQcm9qZWt0XCI6W1wiUHJvamVjdFwiLFwiUHJvamVrdFwiLFwi0J/RgNC+0LXQutGCXCJdLFwiUHJvamVrdDpcIjpbXCJQcm9qZWN0OlwiLFwiUHJvamVrdDpcIixcItCf0YDQvtC10LrRgjpcIl0sXCJPYmpla3RcIjpbXCJPYmplY3RcIixcIk9iamVrdFwiLFwi0J7QsdGM0LXQutGCXCJdLFwiS29ydGVyaW9tYW5pa1wiOltcIk93bmVyXCIsXCJLb3J0ZXJpb21hbmlrXCIsXCLQktC70LDQtNC10LvQtdGGXCJdLFwicmFhbWFcIjpbXCJBY2NvdW50aW5nXCIsXCJyYWFtYVwiLFwi0JHRg9GFLtGD0YfQtdGCXCJdLFwiQXJ1YW5uZWRcIjpbXCJSZXBvcnRzXCIsXCJBcnVhbm5lZFwiLFwi0J7RgtGH0LXRgtGLXCJdLFwiS8OkaWJlYXJ1YW5uZVwiOltcIlR1cm5vdmVyIHJlcG9ydFwiLFwiS8OkaWJlYXJ1YW5uZVwiLFwi0J7QsdC+0YDQvtGC0L3QsNGPINCy0LXQtNC+0LzQvtGB0YLRjFwiXSxcIkFydmVkIGtvb2RpIGrDpHJnaVwiOltcIkJpbGxzXCIsXCJBcnZlZCBrb29kaSBqw6RyZ2lcIixcItCh0YfQtdGC0LAg0LIg0YDQsNC30YDQtdC30LUg0YPRgdC70YPQs1wiXSxcIkRva3VtZW5kaWRcIjpbXCJEb2N1bWVudHNcIixcIkRva3VtZW5kaWRcIixcItCU0L7QutGD0LzQtdC90YLRi1wiXSxcIkxlcGluZ3VkXCI6W1wiQ29udHJhY3RzXCIsXCJMZXBpbmd1ZFwiLFwi0JTQvtCz0L7QstC+0YDQsFwiXSxcIk3DtcO1ZHVraXJpIGFuZG1lZFwiOltcIkRhdGFcIixcIkFuZG1lZFwiLFwi0J/QvtC60LDQt9Cw0L3QuNGPXCJdLFwiTcO1w7VkdSBhbmRtZWRcIjpbXCJEYXRhXCIsXCJBbmRtZWRcIixcItCf0L7QutCw0LfQsNC90LjRj1wiXSxcIlNpc3NlbWFrc2Uga29ycmFsZHVzZWRcIjpbXCJJbmNvbWUgb3JkZXJzXCIsXCJTaXNzZW1ha3NlIGtvcnJhbGR1c2VkXCIsXCLQktGF0L7QtNGP0YnQuNC1INC/0LvQsNGC0LXQttC90YvQtSDQv9C+0YDRg9GH0LXQvdC40Y9cIl0sXCJWw6RsamFtYWtzZSBrb3JyYWxkdXNlZFwiOltcIk91dGNvbWUgb3JkZXJzXCIsXCJWw6RsamFtYWtzZSBrb3JyYWxkdXNlZFwiLFwi0JjRgdGF0L7QtNGP0YnQuNC1INC/0LvQsNGC0LXQttC90YvQtSDQv9C+0YDRg9GH0LXQvdC40Y9cIl0sXCJTaXNzZW1ha3NlIGthc3Nhb3JkZXJcIjpbXCJJbmNvbWUgY2FzaCBvcmRlcnNcIixcIlNpc3NlbWFrc2Uga2Fzc2FvcmRlclwiLFwi0J/RgNC40YXQvtC00L3Ri9C1INC60LDRgdGB0L7QstGL0LUg0L7RgNC00LXRgNCwXCJdLFwiVsOkbGphbWFrc2Uga2Fzc2FvcmRlclwiOltcIk91dGNvbWUgY2FzaCBvcmRlcnNcIixcIlbDpGxqYW1ha3NlIGthc3Nhb3JkZXJcIixcItCg0LDRgdGF0L7QtNC90YvQtSDQutCw0YHRgdC+0LLRi9C1INC+0YDQtNC10YDQsFwiXSxcIkFydmVkXCI6W1wiQmlsbHMgcmVnaXN0ZXJcIixcIkFydmVkXCIsXCLQoNC10LXRgdGC0YAg0YHRh9C10YLQvtCyXCJdLFwiUMO8c2lhbmRtZWRcIjpbXCJMaWJyYXJ5XCIsXCJQw7xzaWFuZG1lZFwiLFwi0KHQv9GA0LDQstC+0YfQvdC40LrQuFwiXSxcIktsaWVuZGlkXCI6W1wiQ2xpZW50c1wiLCdLbGllbmRpZCcsXCLQmtC70LjQtdC90YLRi1wiXSxcIlRlZW51c2VkXCI6W1wiU2VydmljZXNcIixcIlRlZW51c2VkXCIsXCLQodC/0YDQsNCy0L7Rh9C90LjQuiDRg9GB0LvRg9CzXCJdLFwiT2JqZWt0aWRcIjpbXCJPYmplY3RzXCIsXCJPYmpla3RpZFwiLFwi0J7QsdGM0LXQutGC0YtcIl0sXCJIw6TDpGxlc3RhbWluZVwiOltcIlByb3BlcnRpZXNcIixcIkjDpMOkbGVzdGFtaW5lXCIsXCLQndCw0YHRgtGA0L7QudC60LhcIl0sXCJPbWEgYXN1dHVzZSBhbmRtZWRcIjpbXCJCYXNlIGRhdGFcIixcIk9tYSBhc3V0dXNlIGFuZG1lZFwiLFwi0JTQsNC90L3Ri9C1INGD0YfRgNC10LbQtNC10L3QuNGPXCJdLFwiS29uZmlndXJhdHNpb29uXCI6W1wiQ29uZmlnXCIsXCJLb25maWd1cmF0c2lvb25cIixcItCa0L7QvdGE0LjQs9GD0YDQsNGG0LjRj1wiXSxcIlNhYXRqYVwiOltcIlNlbmRlclwiLFwiU2FhdGphXCIsXCLQntGC0L/RgNCw0LLQuNGC0LXQu9GMXCJdLFwiU3RhYXR1c1wiOltcIlN0YXR1c1wiLFwiU3RhYXR1c1wiLFwi0KHRgtCw0YLRg9GBXCJdLFwiTnVtYmVyXCI6W1wiTnVtYmVyXCIsXCJOdW1iZXJcIixcItCd0L7QvNC10YBcIl0sXCJBc3V0dXNcIjpbXCJDbGllbnRcIixcIkFzdXR1c1wiLFwi0JrQu9C40LXQvdGCXCJdLFwiU2VsZ2l0dXNcIjpbXCJEZXNjcmlwdGlvblwiLFwiU2VsZ2l0dXNcIixcItCe0L/QuNGB0LDQvdC40LVcIl0sXCJUw6RodGFlZ1wiOltcIkRlYWRsaW5lXCIsXCJUw6RodGFlZ1wiLFwi0KHRgNC+0LpcIl0sXCJIaW5kXCI6W1wiUHJpY2VcIixcIkhpbmRcIixcItCm0LXQvdCwXCJdLFwiSGluZDpcIjpbXCJQcmljZTpcIixcIkhpbmQ6XCIsXCLQptC10L3QsDpcIl0sXCJSYWhhIHNhYWphXCI6W1wiQmVuZWZpY2lhcnlcIixcIlJhaGEgc2FhamFcIixcItCf0L7Qu9GD0YfQsNGC0LXQu9GMXCJdLFwiS2Fzc2FcIjpbXCJDYXNoIGFjY291bnRcIixcIkthc3NhXCIsXCLQmtCw0YHRgdCwXCJdLFwiQXJ2ZSBuclwiOltcIkJpbGwgbnIuXCIsXCJBcnZlIG5yLlwiLFwi0KHRh9C10YIg0L3QvtC8LlwiXSxcIlZhbGl0dWRcIjpbXCJTZWxlY3RlZFwiLFwiVmFsaXR1ZFwiLFwi0JLRi9Cx0YDQsNC90L5cIl0sXCJWYWxpZGFcIjpbXCJTZWxlY3RcIixcIlZhbGl0dWRcIixcItCS0YvQsdGA0LDRgtGMXCJdLFwiS29vc3RhIGFydmVkXCI6W1wiQ3JlYXRlIGJpbGxcIixcIktvb3N0YSBhcnZlZFwiLFwi0KHQvtC30LTQsNGC0Ywg0YHRh9C10YJcIl0sXCJUw6RpdG1pbmVcIjpbXCJFeGVjdXRlXCIsXCJUw6RpdG1pbmVcIixcItCS0YvQv9C+0LvQvdC40YLRjFwiXSxcIkxlcGluZyBOci5cIjpbXCJDb250cmFjdCBOci5cIixcIkxlcGluZyBOci5cIixcItCU0L7Qs9C+0LLQvtGAINC90L7QvNC10YBcIl0sXCJBbmRtZWRcIjpbXCJEYXRhXCIsXCJBbmRtZWRcIixcItCf0L7QutCw0LfQsNC90LjRj1wiXSxcIk3DpHJrdXNlZFwiOltcIkRlc2NyaXB0aW9uXCIsXCJNw6Rya3VzZWRcIixcItCf0YDQuNC80LXRh9Cw0L3QuNGPXCJdLFwiTcOkcmt1c2VkOlwiOltcIkRlc2NyaXB0aW9uOlwiLFwiTcOkcmt1c2VkOlwiLFwi0J/RgNC40LzQtdGH0LDQvdC40Y86XCJdLFwiS29ydGVlcmlvbWFuaWtcIjpbXCJPd25lclwiLFwiS29ydGVlcmlvbWFuaWtcIixcItCS0LvQsNC00LXQu9C10YZcIl0sXCJrb2d1c1wiOltcIlF1YW50aXR5XCIsXCJLb2d1c1wiLFwi0JrQvtC70LjRh9C10YHRgtCy0L5cIl0sXCJLb2d1czpcIjpbXCJRdWFudGl0eTpcIixcIktvZ3VzOlwiLFwi0JrQvtC70LjRh9C10YHRgtCy0L46XCJdLFwiQXJ2ZWxkdXNhcnZlXCI6W1wiQmFuYyBhY2NvdW50XCIsXCJBcnZlbGR1c2FydmVcIixcItCg0LDRgdGHLiDRgdGH0LXRglwiXX0sX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cywnTVxceEY1XFx4RjVkdSBhbmRtZWQnLFtcIkRhdGFcIixcIk3DtcO1ZHUgYW5kbWVkXCIsXCLQn9C+0LrQsNC30LDQvdC40Y9cIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLYXN1dGFqYSBvYmpla3RpZFwiLFtcIlVzZXIgb2JqZWN0c1wiLFwiS2FzdXRhamEgb2JqZWt0aWRcIixcItCe0LHRjNC10LrRgtGLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1wiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkthc3V0YWphIGFuZG1lZFwiLFtcIlVzZXIgZGF0YVwiLFwiS2FzdXRhamEgYW5kbWVkXCIsXCLQlNCw0L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiRWVsbWlzZSBrb2d1c1wiLFtcIlByZXZpb3VzIHF1YW50aXR5XCIsXCJFZWxtaXNlIGtvZ3VzXCIsXCLQn9GA0LXQtNGL0LTRg9GJ0LXQtSDQutC+0Lst0LLQvlwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkxvZ2dpZFwiLFtcIkxvZ3NcIixcIkxvZ2dpZFwiLFwi0JvQvtCz0LhcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJNYWtzamFcIixbXCJQYXllclwiLFwiTWFrc2phXCIsXCLQn9C70LDRgtC10LvRjNGJ0LjQulwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkFydmVsZHVzIGFydmVcIixbXCJBY2NvdW50IG5yLlwiLFwiQXJ2ZWxkdXMgYXJ2ZVwiLFwi0KDQsNGB0YfQtdGC0L3Ri9C5INGB0YfQtdGCXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiVmlpdGUgbnVtYmVyXCIsW1wiUmVmZXJhbmNlXCIsXCJWaWl0ZSBudW1iZXJcIixcItCh0YHRi9C70LrQsFwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIk1ha3NlcMOkZXZcIixbXCJQYXltZW50IGRheVwiLFwiTWFrc2Vww6RldlwiLFwi0JTQsNGC0LAg0L/Qu9Cw0YLQtdC20LBcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLw6RpYmVtYWtzXCIsW1wiVGF4XCIsXCJLw6RpYmVtYWtzXCIsXCLQndCw0LvQvtCzINGBINC+0LHQvtGA0L7RgtCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiU3VtbWFcIixbXCJTdW1tYVwiLFwiU3VtbWFcIixcItCh0YPQvNC80LBcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJTdW1tYTpcIixbXCJTdW1tYTpcIixcIlN1bW1hOlwiLFwi0KHRg9C80LzQsDpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLb29zdGEgdGFnYXNpbWFrc2VcIixbXCJDcmVhdGUgcmV0dXJuIHBheW1lbnRcIixcIktvb3N0YSB0YWdhc2ltYWtzZVwiLFwi0KHQtNC10LvQsNGC0Ywg0LLQvtC30LLRgNCw0YJcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJQYW5nYSBWViBsb2dpZFwiLFtcIkJhbmsgc3RhdGVtZW50XCIsXCJQYW5nYSBWViBsb2dpZFwiLFwi0JLRi9C/0LjRgdC60LAg0LjQtyDQsdCw0L3QutCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiU2FhbWEgWE1MIChTRVBBKSBrw7VpayB2YWxpdHVkIG1ha3NlZFwiLFtcIkdldCBYTUwgKFNFUEEpIGFsbCBzZWxlY3RlZCBkb2NzXCIsXCJTYWFtYSBYTUwgKFNFUEEpIGvDtWlrIHZhbGl0dWQgbWFrc2VkXCIsXCLQn9C+0LvRg9GH0LjRgtGMIFhNTCAoU0VQQSkg0LLRgdC10YUg0LLRi9C00LXQu9C10L3QvdGL0YUg0L/Qu9Cw0YLQtdC20LXQuVwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIk5pbWlcIixbXCJOYW1lXCIsXCJOaW1pXCIsXCLQmNC80Y9cIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLb250YWt0XCIsW1wi0KFvbnRh0YF0XCIsXCJLb250YWt0XCIsXCLQmtC+0L3RgtCw0LrRglwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIklzaWt1a29vZFwiLFtcIlJlZy5jb2RlXCIsXCJJc2lrdWtvb2RcIixcItCb0LjRh9C90YvQuSDQutC+0LRcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJOaW1ldHVzXCIsW1wiTmFtZVwiLFwiTmltZXR1c1wiLFwi0J3QsNC40LzQtdC90L7QstCw0L3QuNC1XCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiQWFkcmVzc1wiLFtcIkFkZHJlc3NcIixcIkFhZHJlc3NcIixcItCQ0LTRgNC10YFcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJBbHVzXCIsW1wiQmFzZVwiLFwiQWx1c1wiLFwi0J7RgdC90L7QstCw0L3QuNC1XCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiS29vZFwiLFtcIkNvZGVcIixcIktvb2RcIixcItCa0L7QtFwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkxhYWRpbWluZS4uLlwiLFtcIkxvYWRpbmcuLi5cIixcIkxhYWRpbWluZS4uLlwiLFwi0JfQsNCz0YDRg9C20LDRji4uLlwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIk9tYW5pa1wiLFtcIk93bmVyXCIsXCJPbWFuaWtcIixcItCh0L7QsdGB0YLQstC10L3QvdC40LpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJPbS52b3JtXCIsW1wiT3duZXJzaGlwXCIsXCJPbS52b3JtXCIsXCLQpNC+0YDQvNCwINGB0L7QsdGB0YLQstC10L3QvdC+0YHRgtC4XCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiVGVsZWZvblwiLFtcIlBob25lXCIsXCJUZWxlZm9uXCIsXCLQotC10LvQtdGE0L7QvVwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIlRhc3VkXCIsW1wiUGF5ZWRcIixcIlRhc3VkXCIsXCLQntC/0LvQsNGH0LXQvVwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkrDpMOka1wiLFtcIlNhbGRvXCIsXCJKw6TDpGtcIixcItCh0LDQu9GM0LTQvlwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIlRyw7xrayBrw7VpayB2YWxpdHVkIGFydmVkXCIsW1wiUHJpbnQgYWxsIHNlbGVjdGVkIGJpbGxzXCIsXCJUcsO8a2sga8O1aWsgdmFsaXR1ZCBhcnZlZFwiLFwi0J/QtdGH0LDRgtGMINCy0YHQtdGFINCy0YvQsdGA0LDQvdC90YvRhSDRgdGH0LXRgtC+0LJcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJFbWFpbCBrw7VpayB2YWxpdHVkIGFydmVkXCIsW1wiRW1haWwgYWxsIHNlbGVjdGVkIGJpbGxzXCIsXCJFbWFpbCBrw7VpayB2YWxpdHVkIGFydmVkXCIsXCLQntGC0L/RgNCw0LLQuNGC0Ywg0Y3Quy4g0L/QvtGH0YLQvtC5INCy0YvQsdGA0LDQvdC90YvQtSDRgdGH0LXRgtCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiU2FhZGEgRS1BcnZlZCAoT21uaXZhKSBrw7VpayB2YWxpdHVkIGFydmVkXCIsW1wiU2VuZCB0byBPbW5pdmEgYWxsIHNlbGVjdGVkIGJpbGxzXCIsXCJTYWFkYSBFLUFydmVkIChPbW5pdmEpIGvDtWlrIHZhbGl0dWQgYXJ2ZWRcIixcItCe0YLQv9GA0LDQstC40YLRjCDQsiDQntC80L3QuNCy0LAg0LLRgdC1INCy0YvQsdGA0LDQvdC90YvQtSDRgdGH0LXRgtCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiU2FhbWEgWE1MIGUtYXJ2ZWQga8O1aWsgdmFsaXR1ZCBhcnZlZFwiLFtcImdldCBYTWwgZS1hcnZlIGZpbGVcIixcIlNhYW1hIFhNTCBlLWFydmVkIGvDtWlrIHZhbGl0dWQgYXJ2ZWRcIixcItCf0L7Qu9GD0YfQuNGC0YwgWE1MINGE0LDQudC7IGUtYXJ2ZVwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIlNhYW1hIFhNTCBlLWFydmVkIChTRUIpIGvDtWlrIHZhbGl0dWQgYXJ2ZWRcIixbXCJnZXQgWE1MIGZpbGUgZm9yIFNFQlwiLFwiU2FhbWEgWE1MIGUtYXJ2ZWQgKFNFQikga8O1aWsgdmFsaXR1ZCBhcnZlZFwiLFwi0J/QvtC70YPRh9C40YLRjCBYTUwg0LTQu9GPINCx0LDQvdC60LAgU0VCXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiU2FhbWEgWE1MIGUtYXJ2ZWQgKFNXRUQpIGvDtWlrIHZhbGl0dWQgYXJ2ZWRcIixbXCJnZXQgWE1MIGZpbGUgZm9yIFNXRURcIixcIlNhYW1hIFhNTCBlLWFydmVkIChTV0VEKSBrw7VpayB2YWxpdHVkIGFydmVkXCIsXCLQn9C+0LvRg9GH0LjRgtGMIFhNTCDQtNC70Y8g0LHQsNC90LrQsCBTRUJcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJSZWFkIGtva2t1OlwiLFtcIlJvd3MgdG90YWw6XCIsXCJSZWFkIGtva2t1OlwiLFwi0JLRgdC10LPQviDRgdGC0YDQvtC6OlwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIlN1bW1hIGtva2t1OlwiLFtcIlN1bW1hIHRvdGFsOlwiLFwiU3VtbWEga29ra3U6XCIsXCLQodGD0LzQvNCwINCy0YHQtdCz0L46XCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiSsOkw6RrIGtva2t1OlwiLFtcIlNhbGRvIHRvdGFsOlwiLFwiSsOkw6RrIGtva2t1OlwiLFwi0JTQvtC70LMg0LLRgdC10LPQvjpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLb2trdTpcIixbXCJUb3RhbDpcIixcIktva2t1OlwiLFwi0JLRgdC10LPQvjpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJNw6TDpHJhbWF0YSBzdW1tYTpcIixbXCJVbmRlZmluZWQgc3VtbWE6XCIsXCJNw6TDpHJhbWF0YSBzdW1tYTpcIixcItCd0LXRgNCw0YHQv9GA0LXQtNC10LvQtdC90L3QsNGPINC+0L/Qu9Cw0YLQsDpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsJ0FydmVkJyxbXCJCaWxsc1wiLFwiQXJ2ZWRcIixcItCh0YfQtdGC0LBcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJWaWl0ZW51bWJlclwiLFtcIlJlZmVyZW5jZVwiLFwiVmlpdGVudW1iZXJcIixcItCh0YHRi9C70LrQsFwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIlTDtsO2dGFuXCIsW1wiV29ya2luZ1wiLFwiVMO2w7Z0YW5cIixcItCg0LDQsdC+0YLQsNGOXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiVGVra2lzIHZpZ2FcIixbXCJHb3QgZXJyb3JcIixcIlRla2tpcyB2aWdhXCIsXCLQntGI0LjQsdC60LBcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLYXMga29vc3RhIFNNS1wiLFtcIkNyZWF0ZSBwYXltZW50IG9yZGVyP1wiLFwiS2FzIGtvb3N0YSBTTUs/XCIsXCLQodC+0LfQtNCw0YLRjCDQv9C70LDRgtC10LbQvdC+0LUg0L/QvtGA0YPRh9C10L3QuNC1P1wiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkVkdWthbHRcIixbXCJPa1wiLFwiRWR1a2FsdFwiLFwi0J7QulwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIlRla2tpcyB2aWdhOiBrdXN0dXRhbWluZSBlYmHDtW5uZXN0dXNcIixbXCJFcnJvciwgZGVsZXRlIG5vdCBzdWNjZXNzXCIsXCJUZWtraXMgdmlnYToga3VzdHV0YW1pbmUgZWJhw7VubmVzdHVzXCIsXCLQntGI0LjQsdC60LAsINGD0LTQsNC70LXQvdC40LUg0L3QtSDQv9GA0L7RiNC70L5cIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJTSVNBTERBQlwiLFtcIkNPTlRBSU5TXCIsXCJTSVNBTERBQlwiLFwi0KHQntCU0JXQoNCW0JjQolwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkVJIFNJU0FMREFcIixbXCJETyBOT1QgQ09OVEFJTlwiLFwiRUkgU0lTQUxEQVwiLFwi0J3QlSDQodCe0JTQldCg0JbQmNCiXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiUmVnLmtvb2QvIElzaWt1a29vZFwiLFtcIlJlZy5jb2RlLyBQcml2YXRlIGNvZGVcIixcIlJlZy5rb29kL0lzaWt1a29vZFwiLFwi0KDQtdCzLtC60L7QtC/Qm9C40YfQvS7QutC+0LQgXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiS2xpZW50XCIsW1wiQ2xpZW50XCIsXCJLbGllbnRcIixcItCa0LvQuNC10L3RglwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkthc3V0YWphIHR1bm51c1wiLFtcIkxvZ2luXCIsXCJLYXN1dGFqYSB0dW5udXNcIixcItCf0YDQuNC30L3QsNC6INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1wiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkthc3V0YWphIG5pbWlcIixbXCJVc2VyIG5hbWVcIixcIkthc3V0YWphIG5pbWlcIixcItCY0LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJOaW1pOlwiLFtcIk5hbWU6XCIsXCJOaW1pOlwiLFwi0JjQvNGPOlwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIk11dWRcIixbXCJBZGRpdGlvbmFsXCIsXCJNdXVkXCIsXCLQn9GA0L7Rh9C10LVcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJFbWFpbDpcIixbXCJFbWFpbDpcIixcIkVtYWlsOlwiLFwi0K3Quy4g0L/QvtGH0YLQsDpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJFbWFpbFwiLFtcIkVtYWlsXCIsXCJFbWFpbFwiLFwi0K3Quy4g0L/QvtGH0YLQsFwiXSksX2RlZmluZVByb3BlcnR5KF9tb2R1bGUkZXhwb3J0cyxcIkFydmVsZHVzdGUgYXJ2ZWRcIixbXCJCYW5jIGFjY291bnRcIixcIkFydmVsZHVzdGUgYXJ2ZWRcIixcItCg0LDRgdGHLiDRgdGH0LXRgtCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiU210cDpcIixbXCJTbXRwOlwiLFwiU210cDpcIixcItC00LDQvdC90YvQtSDQv9C+0YfRgtC+0LLQvtCz0L4g0YHQtdGA0LLQtdGA0LBcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJQb3J0OlwiLFtcIlBvcnQ6XCIsXCJQb3J0OlwiLFwi0J/QvtGA0YIg0L/QvtGH0YLQvtCy0L7Qs9C+INGB0LXRgNCy0LXRgNCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiRW1haWwga2FzdXRhamE6XCIsW1wiRW1haWwgbG9naW46XCIsXCJFbWFpbCBrYXN1dGFqYTpcIixcItCY0LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L/QvtGH0YLQvtCy0L7Qs9C+INGB0LXRgNCy0LXRgNCwXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiRW1haWwgcGFyb29sOlwiLFtcIkVtYWlsIHBhc3N3b3JkOlwiLFwiRW1haWwgcGFyb29sOlwiLFwi0J/QsNGA0L7Qu9GMICDQv9C+0YfRgtC+0LLQvtCz0L4g0YHQtdGA0LLQtdGA0LBcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLYXMga2FzdXRhamFcIixbXCJJcyB1c2VyP1wiLFwiS2FzIGthc3V0YWphP1wiLFwi0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMXCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiS2FzIGp1aGF0YWphXCIsW1wiSXMgbWFuYWdlcj9cIixcIkthcyBqdWhhdGFqYT9cIixcItCg0YPQutC+0LLQvtC00LjRgtC10LvRjD9cIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLYXMgYWRtaW5pc3RyYWF0b3JcIixbXCJJcyBhZG1pbmlzdHJhdG9yP1wiLFwiS2FzIGFkbWluaXN0cmFhdG9yP1wiLFwi0JDQtNC80LjQvdC40YHRgtGA0LDRgtC+0YA/XCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiS2FzIHJhYW1hdHVwaWRhamFcIixbXCJJcyBhY2NvdW50ZXI/XCIsXCJLYXMgcmFhbWF0dXBpZGFqYT9cIixcItCR0YPRhdCz0LDQu9GC0LXRgD9cIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJUZWVudXM6XCIsW1wiSXRlbTpcIixcIlRlZW51czpcIixcItCj0YHQu9GD0LPQsDpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJTb29kdXN0dXM6XCIsW1wiQm9udXM6XCIsXCJTb29kdXN0dXM6XCIsXCLQm9GM0LPQvtGC0LA6XCJdKSxfZGVmaW5lUHJvcGVydHkoX21vZHVsZSRleHBvcnRzLFwiS2JtLXRhOlwiLFtcIldpdGhvdXQgdGF4OlwiLFwiS2JtLXRhOlwiLFwi0JHQtdC3INC90LDQu9C+0LPQsDpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJLYm06XCIsW1wiVGF4OlwiLFwiS2JtOlwiLFwi0J3QsNC70L7QszpcIl0pLF9kZWZpbmVQcm9wZXJ0eShfbW9kdWxlJGV4cG9ydHMsXCJSZWEgbGlzYW1pbmUgLyBwYXJhbmRhbWluZVwiLFtcIlJvdyBhcHBlbmQgLyB1cGRhdGVcIixcIlJlYSBsaXNhbWluZSAvIHBhcmFuZGFtaW5lXCIsXCLQlNC+0LHQsNCy0LjRgtGMIC8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Ywg0YHRgtGA0L7QutGDXCJdKSxfbW9kdWxlJGV4cG9ydHMpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29uZmlnL2xhbmcuanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci1zdHlsZXMnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgSUNPTiA9ICdhZGQnO1xuXG52YXIgQnV0dG9uUmVnaXN0ZXJBZGQgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQnV0dG9uUmVnaXN0ZXJBZGQsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25SZWdpc3RlckFkZChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uUmVnaXN0ZXJBZGQpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uUmVnaXN0ZXJBZGQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWdpc3RlckFkZCkpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uUmVnaXN0ZXJBZGQsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2xpY2soJ2FkZCcpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnTGlzYScsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkFkZCcsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuYnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbnNbSUNPTl0gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQnV0dG9uUmVnaXN0ZXJBZGQ7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG4vKlxyXG5CdXR0b25SZWdpc3RlckFkZC5wcm9wVHlwZXMgPSB7XHJcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXHJcbn1cclxuKi9cblxuQnV0dG9uUmVnaXN0ZXJBZGQuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvblJlZ2lzdGVyQWRkO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWFkZC9idXR0b24tcmVnaXN0ZXItYWRkLmpzeFxuLy8gbW9kdWxlIGlkID0gNzhcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci1zdHlsZXMnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgSUNPTiA9ICdsb2dpbic7XG5cbnZhciBCdXR0b25Mb2dpbiA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25Mb2dpbiwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgLy8g0LrQvdC+0L/QutCwINGB0L7Qt9C00LDQvdC40Y8g0LTQvtC60YPQvNC10L3RgtCwINCyINGA0LXQs9C40YHRgtGA0LDRhVxuICAgIGZ1bmN0aW9uIEJ1dHRvbkxvZ2luKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25Mb2dpbik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvbkxvZ2luLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uTG9naW4pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWUgfHwgJ1Npc3NlJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25Mb2dpbiwgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub25DbGljaygnbG9naW4nKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRUZXh0VmFsdWUodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgICB2YXIgYnV0dG9uU3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuYnV0dG9uLCBzdHlsZXMuYnV0dG9uTG9naW4pO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkxvZ2luJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGJ1dHRvblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbnNbSUNPTl0gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gcHJldlN0YXRlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbkxvZ2luO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuQnV0dG9uTG9naW4ucHJvcFR5cGVzID0ge1xuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbkJ1dHRvbkxvZ2luLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZSxcbiAgICB2YWx1ZTogJ1bDpGxqdSdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uTG9naW47XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tbG9naW4vYnV0dG9uLWxvZ2luLmpzeFxuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJQ09OID0gJ2VkaXQnO1xuXG52YXIgQnV0dG9uUmVnaXN0ZXJFZGl0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvblJlZ2lzdGVyRWRpdCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgLy8g0LrQvdC+0L/QutCwINGB0L7Qt9C00LDQvdC40Y8g0LTQvtC60YPQvNC10L3RgtCwINCyINGA0LXQs9C40YHRgtGA0LDRhVxuICAgIGZ1bmN0aW9uIEJ1dHRvblJlZ2lzdGVyRWRpdChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uUmVnaXN0ZXJFZGl0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uUmVnaXN0ZXJFZGl0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uUmVnaXN0ZXJFZGl0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IF90aGlzLnByb3BzLmRpc2FibGVkXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uUmVnaXN0ZXJFZGl0LCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2lsbCB1cGRhdGUgc3RhdGUgaWYgcHJvcHMgY2hhbmdlZFxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBidG5TdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcy5idXR0b25FZGl0LCB0aGlzLnByb3BzLnN0eWxlID8gdGhpcy5wcm9wcy5zdHlsZSA6IHt9KTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkVkaXQnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogYnRuU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuc3RhdGUuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLmRpc2FibGVkICE9PSBwcmV2U3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkaXNhYmxlZDogbmV4dFByb3BzLmRpc2FibGVkIH07XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQnV0dG9uUmVnaXN0ZXJFZGl0O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuLypcclxuQnV0dG9uUmVnaXN0ZXJFZGl0LnByb3BUeXBlcyA9IHtcclxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2xcclxufVxyXG4qL1xuXG5CdXR0b25SZWdpc3RlckVkaXQuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlLFxuICAgIHZhbHVlOiAnRWRpdCdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVnaXN0ZXJFZGl0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWVkaXQvYnV0dG9uLXJlZ2lzdGVyLWVkaXQuanN4XG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLmpzeCcpLFxuICAgIElDT04gPSAnaW5mbyc7XG52YXIgZ2V0VGV4dFZhbHVlID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL2dldFRleHRWYWx1ZScpO1xuXG52YXIgRG9jQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vZG9jLWNvbnRleHQuanMnKTtcblxudmFyIEJ1dHRvbkluZm8gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25JbmZvLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25JbmZvKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25JbmZvKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uSW5mby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1dHRvbkluZm8pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0YHQvtCx0YvRgtC40Y8g0LrQu9C40LosINC+0YLQutGA0L7QtdGCINC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QvlxyXG4gICAgICogQHBhcmFtIGVcclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uSW5mbywgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gICAgICAgICAgICB2YXIgZG9jVHlwZUlkID0gdGhpcy5wcm9wcy5kb2NUeXBlSWQgPyB0aGlzLnByb3BzLmRvY1R5cGVJZCA6IERvY0NvbnRleHQuZG9jVHlwZUlkO1xuICAgICAgICAgICAgdmFyIHVybCA9ICcvaGVscC8nICsgZG9jVHlwZUlkO1xuICAgICAgICAgICAgd2luZG93Lm9wZW4oJycgKyB1cmwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkluZm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGdldFRleHRWYWx1ZSh0aGlzLnByb3BzLnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbnNbSUNPTl0gfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbkluZm87XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qXHJcbkJ1dHRvblJlZ2lzdGVyUHJpbnQucHJvcFR5cGVzID0ge1xyXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxyXG59XHJcbiovXG5cbkJ1dHRvbkluZm8uZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlLFxuICAgIHZhbHVlOiAnJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b25JbmZvO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLWluZm8vaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSA4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3RhcnQtbWVudS5zdHlsZXMnKSxcbiAgICBfZmV0Y2hEYXRhID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2ZldGNoRGF0YScpLFxuICAgIFRyZWVMaXN0ID0gcmVxdWlyZSgnLi8uLi90cmVlL3RyZWUuanN4Jyk7XG5cbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi9kb2MtY29udGV4dC5qcycpO1xuXG52YXIgVVJMID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9jb25maWcvY29uc3RhbnRzJykuU1RBUlRfTUVOVS5VUkw7XG5cbnZhciBTdGFydE1lbnUgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoU3RhcnRNZW51LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTdGFydE1lbnUocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXJ0TWVudSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFN0YXJ0TWVudS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFN0YXJ0TWVudSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgICAgIGRhdGE6IHByb3BzLmRhdGFcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy50cmVlRGF0YSA9IHByb3BzLmRhdGE7XG4gICAgICAgIF90aGlzLmNsaWNrSGFuZGxlciA9IF90aGlzLmNsaWNrSGFuZGxlci5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZmV0Y2hEYXRhID0gX3RoaXMuZmV0Y2hEYXRhLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiDQv9C40YjQtdC8INC00LXQu9Cw0LXQvCDQt9Cw0L/RgNC+0YEg0L/QviDQuNGC0L7Qs9GDINC30LDQs9GA0YPQt9C60LhcclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoU3RhcnRNZW51LCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnN0b3JlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnByb3BzLnN0b3JlLmdldFN0YXRlKCkubWVudS5tZW51O1xuICAgICAgICAgICAgICAgIHZhciB1c2VyID0gdGhpcy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpLnN0YXR1c2VzLnVzZXI7XG4gICAgICAgICAgICAgICAgaWYgKCF1c2VyIHx8ICF1c2VyLmlzX2FkbWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQtdGB0LvQuCDQvdC10YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLCDQuNC70Lgg0L7QvSDQvdC1INCw0LTQvNC4LCDQs9GA0YPQt9C40Lwg0YLQvtC70YzQutC+INC00L7RgdGC0YPQv9C90YvQtVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3cucHJvcHMgfHwgIXJvdy5wcm9wcy5pc19hZG1pbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3c7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVEYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGF0YTogZGF0YSB9KTtcbiAgICAgICAgICAgICAgICBEb2NDb250ZXh0WydtZW51J10gPSBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudHJlZURhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v0LTQtdC70LDQtdC8INC30LDQv9GA0L7RgSDQvdCwINC/0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaERhdGEodGhpcy5wcm9wcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRhaW5lciB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJlZUxpc3QsIHsgcmVmOiAndHJlZUxpc3QnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLnVsLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLnRyZWVEYXRhLFxuICAgICAgICAgICAgICAgICAgICBiaW5kRGF0YUZpZWxkOiAna29vZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrQWN0aW9uOiB0aGlzLmNsaWNrSGFuZGxlclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjbGlja0hhbmRsZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xpY2tIYW5kbGVyKGFjdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNsaWNrSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQktGL0L/QvtC70L3QuNGCINC30LDQv9GA0L7RgdGLXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2ZldGNoRGF0YScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaERhdGEocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3RhdHIgZmV0Y2gnKTtcbiAgICAgICAgICAgIHZhciBtb2R1bGUgPSBEb2NDb250ZXh0Lm1vZHVsZSA/IERvY0NvbnRleHQubW9kdWxlIDogJ21haW4nO1xuICAgICAgICAgICAgdmFyIHVybCA9IFVSTCArICgnLycgKyBtb2R1bGUpO1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zdG9yZSkge1xuICAgICAgICAgICAgICAgIC8vINCx0LXRgNC10Lwg0LTQsNC90L3Ri9C1INC40Lcg0YHRgtC+0YDQsFxuICAgICAgICAgICAgICAgIHZhciB1c2VyID0gdGhpcy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpLnN0YXR1c2VzLnVzZXI7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0geyB1c2VySWQ6IHVzZXIuaWQsIHV1aWQ6ICcnIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHsgdXNlcklkOiBEb2NDb250ZXh0LnVzZXJEYXRhLnVzZXJJZCwgdXVpZDogRG9jQ29udGV4dC51c2VyRGF0YS51dWlkIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbWVudScsIHVybCwgcGFyYW1zKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGNoZWNrIGluIGNhY2hlXG4gICAgICAgICAgICAgICAgaWYgKCFEb2NDb250ZXh0WydtZW51J10gfHwgRG9jQ29udGV4dFsnbWVudSddLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhLmZldGNoRGF0YVBvc3QodXJsLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLnN0YXR1cyA9PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciA0MDEsIHJlZGlyZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSAnL2xvZ2luJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnRyZWVEYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINC30LDQv9C+0LzQvdC40Lwg0YHQvtC00LXRgNC20LjQvNC+0LVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb2NDb250ZXh0Lm1lbnUgPSBfdGhpczIudHJlZURhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigncmVjZWl2ZWQgZXJyb3ItPiAnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9ICcvbG9naW4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVEYXRhID0gRG9jQ29udGV4dFsnbWVudSddO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3RhcnRNZW51O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuU3RhcnRNZW51LnByb3BUeXBlcyA9IHtcbiAgICBkYXRhOiBQcm9wVHlwZXMuYXJyYXlcbn07XG5cblN0YXJ0TWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGF0YTogW11cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhcnRNZW51O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zdGFydC1tZW51L3N0YXJ0LW1lbnUuanN4XG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2NvbnRhaW5lcjp7d2lkdGg6J2F1dG8nLG1pbkhlaWdodDonMzUwcHgnLHBvc2l0aW9uOidhYnNvbHV0ZScsbGVmdDonMjBweCcsdG9wOic1MHB4JyxvdmVyZmxvdzonYXV0bycsekluZGV4Oic5OTk5OTknfSx1bDp7b3ZlcmZsb3c6J2F1dG8nfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL3N0YXJ0LW1lbnUvc3RhcnQtbWVudS5zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vdHJlZS1zdHlsZXMuanMnKTtcbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi9kb2MtY29udGV4dC5qcycpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIFRyZWUgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoVHJlZSwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gVHJlZShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJlZSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRyZWUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUcmVlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaW5kZXg6IF90aGlzLmdldEluZGV4KHByb3BzLnZhbHVlKSxcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgICAgIGhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcmVudElkOiAnbWFpbidcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlTGlDbGljayA9IF90aGlzLmhhbmRsZUxpQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLnRvZ2dsZUhvdmVyID0gX3RoaXMudG9nZ2xlSG92ZXIuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmdldFRyZWUgPSBfdGhpcy5nZXRUcmVlLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRyZWUsIFt7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLmdldEluZGV4KG5leHRQcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW5kZXg6IHRoaXMuZ2V0SW5kZXgobmV4dFByb3BzLnZhbHVlKSwgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHJlZjogJ3RyZWUnIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRUcmVlKCcwJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQu9C40LrQsFxyXG4gICAgICAgICAqIEBwYXJhbSBzZWxlY3RlZEluZGV4XHJcbiAgICAgICAgICogQHBhcmFtIHNlbGVjdGVkSWRcclxuICAgICAgICAgKiBAcGFyYW0gaXNOb2RlXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUxpQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlTGlDbGljayhzZWxlY3RlZEluZGV4LCBzZWxlY3RlZElkLCBpc05vZGUpIHtcbiAgICAgICAgICAgIGlmICghaXNOb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihzZWxlY3RlZElkKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyDQvdC1INC90L7QtNCwLCDQsCDQtNC+0LrRg9C80LXQvdGCXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5wcm9wcy5kYXRhICYmIHRoaXMucHJvcHMuZGF0YS5maWx0ZXIgPyB0aGlzLnByb3BzLmRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3cuaWQgPT09IHNlbGVjdGVkSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSA6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRhWzBdW3RoaXMucHJvcHMuYmluZERhdGFGaWVsZF07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2tBY3Rpb24odGhpcy5wcm9wcy5uYW1lICsgJ0NoYW5nZScsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vINC/0YDQvtC10LrRgiBib3JzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVDb21wb25lbnQ6IHNlbGVjdGVkSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbGlja0FjdGlvbih0aGlzLnByb3BzLm5hbWUgKyAnQ2hhbmdlJywgc2VsZWN0ZWRJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vaXNOb2RlXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSWQgIT09ICcwJyAmJiBzZWxlY3RlZElkICE9PSBEb2NDb250ZXh0Lm1vZHVsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcGFyZW50SWQ6IHNlbGVjdGVkSWQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0LLQtdGA0L3QtdGCINC00LDQvdC90YvQtSDQtNC70Y8g0L3QvtC00YsgPSBwYXJlbnRJZFxyXG4gICAgICAgICAqIEBwYXJhbSBwYXJlbnRJZFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRDaGlsZHJlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZHJlbihwYXJlbnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgIGlmIChyb3cucGFyZW50aWQgPT0gcGFyZW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCf0L7RgdGC0YDQvtC10YIg0LTQtdGA0LXQstC+INC00LvRjyDQvdC+0LTRiyA9IHBhcmVudElkXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmVudElkXHJcbiAgICAgICAgICogQHJldHVybnMge1hNTH1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0VHJlZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmVlKHBhcmVudElkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldENoaWxkcmVuKHBhcmVudElkKSxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWU7XG5cbiAgICAgICAgICAgIHZhciBsaW5rU3R5bGUgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5ob3Zlcikge1xuICAgICAgICAgICAgICAgIGxpbmtTdHlsZSA9IHsgYmFja2dyb3VuZENvbG9yOiAncmVkJyB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW5rU3R5bGUgPSB7IGJhY2tncm91bmRDb2xvcjogJ2JsdWUnIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcy51bCwgdGhpcy5wcm9wcy5zdHlsZSA/IHRoaXMucHJvcHMuc3R5bGUgOiB7fSk7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAndWwnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICd0cmVlLXVsJyB9LFxuICAgICAgICAgICAgICAgIGRhdGEubWFwKGZ1bmN0aW9uIChzdWJSb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcy5saSwgdmFsdWUgPT09IHN1YlJvd1tfdGhpczIucHJvcHMuYmluZERhdGFGaWVsZF0gJiYgIXN1YlJvdy5pc19ub2RlID8gc3R5bGVzLmZvY3VzZWQgOiB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZJZCA9ICdsaS0nICsgaW5kZXggKyBNYXRoLnJhbmRvbSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc19oaWRkZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1YlJvdy5pc19ub2RlICYmIF90aGlzMi5zdGF0ZS5wYXJlbnRJZCAhPT0gc3ViUm93LnBhcmVudGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc19oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBnZXRUZXh0VmFsdWUoc3ViUm93Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBzdWJSb3cuaXNfbm9kZSA/ICdub2RlJyA6ICdtZW51JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXMyLmhhbmRsZUxpQ2xpY2suYmluZChfdGhpczIsIGluZGV4LCBzdWJSb3cuaWQsIHN1YlJvdy5pc19ub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHJlZklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdWJSb3cuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiBpc19oaWRkZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiByZWZJZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViUm93LmlzX25vZGUgPyBfdGhpczIuc3RhdGUucGFyZW50SWQgPT0gc3ViUm93LmlkID8gJy0nIDogJysnIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tzdWJSb3cua29vZC50b0xvd2VyQ2FzZSgpXSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuZ2V0VHJlZShzdWJSb3cuaWQpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3RvZ2dsZUhvdmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZUhvdmVyKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiAhdGhpcy5zdGF0ZS5ob3ZlciB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCS0LXRgNC90LXRgiDQuNC90LTQtdC60YEg0YHRgtGA0L7QutC4INCz0LTQtSDQt9Cw0LTQsNC90L3QvtC1INC/0L7Qu9C1INC40LzQtdC10YIg0LfQvdCw0YfQtdC90LjQtSB2YWx1ZVxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEluZGV4JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluZGV4KHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdHJlZUluZGV4ID0gMDtcbiAgICAgICAgICAgIC8vIHdlIGdvdCB2YWx1ZSwgd2Ugc2hvdWxkIGZpbmQgaW5kZXggYW5kIGluaXRpbGl6ZSBpZHggZmllbGRcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpKys7IGkgPCB0aGlzLnByb3BzLmRhdGFbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0YVswXS5kYXRhW2ldW3RoaXMucHJvcHMuYmluZERhdGFGaWVsZF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cmVlSW5kZXg7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVHJlZTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cblRyZWUucHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRhdGE6IFByb3BUeXBlcy5hcnJheSxcbiAgICBiaW5kRGF0YUZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbn07XG5cblRyZWUuZGVmYXVsdFByb3BzID0ge1xuICAgIGRhdGE6IFt7XG4gICAgICAgIGlkOiAwLFxuICAgICAgICBwYXJlbnRJZDogMCxcbiAgICAgICAgbmFtZTogJycsXG4gICAgICAgIGtvb2Q6ICcnLFxuICAgICAgICBzZWxlY3RlZDogZmFsc2VcbiAgICB9XSxcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBiaW5kRGF0YUZpZWxkOiAnaWQnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyZWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL3RyZWUvdHJlZS5qc3hcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17dWw6e2JhY2tncm91bmRDb2xvcjond2hpdGUnLC8vICAgICAgICBtYXJnaW5SaWdodDogJzIwcHgnLFxucGFkZGluZ0xlZnQ6JzE1cHgnLGRpc3BsYXk6J3RhYmxlLXJvdy1ncm91cCcsd2lkdGg6J2F1dG8nfSxsaTp7Ly8gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbm1hcmdpblJpZ2h0OicyMHB4JyxtYXJnaW46JzEwcHggMTBweCd9LGljb25zOntfbGFwczonL2ltYWdlcy9pY29ucy9sYXBzLnBuZycsX3ZhbmVtOicvaW1hZ2VzL2ljb25zL3ZhbmVtLnBuZycsc2V0dGluZ3M6Jy9pbWFnZXMvaWNvbnMvc2V0dGluZ3MucG5nJyxfcmVrdjonL2ltYWdlcy9pY29ucy9yZWt2LnBuZycsYXJ1YW5uZTonL2ltYWdlcy9pY29ucy9yZXBvcnRzLnBuZycsX2xhcHNlX2thYXJ0OicvaW1hZ2VzL2ljb25zL3NlcnZpY2VzLnBuZycsbGlicmFyeTonL2ltYWdlcy9pY29ucy9saWJyYXJpZXMucG5nJyxfYXN1dHVzZWQ6Jy9pbWFnZXMvaWNvbnMvY29udGFjdHMucG5nJyxfbm9tZW5jbGF0dXJlOicvaW1hZ2VzL2ljb25zL25vbWVuY2xhdHVyZS5wbmcnLF9sYXBzZV9ncnVwcDonL2ltYWdlcy9pY29ucy9ncm91cHMucG5nJyxfbGFwc2VfdGFhYmVsOicvaW1hZ2VzL2ljb25zL2pvdXJuYWwucG5nJyxfdHVubnVzOicvaW1hZ2VzL2ljb25zL2F0cmlidXRlLnBuZycsZG9jdW1lbnQ6Jy9pbWFnZXMvaWNvbnMvZG9jdW1lbnRzLnBuZycsX2FydjonL2ltYWdlcy9pY29ucy9iaWxsLnBuZycsX3NvcmRlcjonL2ltYWdlcy9pY29ucy9zb3JkZXIucG5nJyxfc21rOicvaW1hZ2VzL2ljb25zL3Ntay5wbmcnfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL3RyZWUvdHJlZS1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO21vZHVsZS5leHBvcnRzPXtSRUNPUkRTX0xJTUlUOjEwMDAsLy8g0YLQsNGB0LrQuFxuLy8g0LvQvtCz0LhcbmxvZ3M6e2dyaWRDb25maWc6W3tpZDpcImthc3V0YWphXCIsbmFtZTpcIkthc3V0YWphXCIsd2lkdGg6XCIyMCVcIixzaG93OnRydWV9LHtpZDpcImtvb3N0YXR1ZFwiLG5hbWU6XCJLb29zdGF0dWRcIix3aWR0aDpcIjE1JVwifSx7aWQ6XCJtdXVkYXR1ZFwiLG5hbWU6XCJNdXVkYXR1ZFwiLHdpZHRoOlwiMTUlXCJ9LHtpZDpcInByaW5kaXR1ZFwiLG5hbWU6XCJQcmluZGl0dWRcIix3aWR0aDpcIjE1JVwifSx7aWQ6XCJlbWFpbFwiLG5hbWU6XCJNZWlsaXR1ZFwiLHdpZHRoOlwiMTUlXCJ9LHtpZDpcImVhcnZlXCIsbmFtZTpcImUtQXJ2ZVwiLHdpZHRoOlwiMTUlXCJ9LHtpZDpcImt1c3R1dGF0dWRcIixuYW1lOlwiS3VzdHV0YXR1ZFwiLHdpZHRoOlwiMTUlXCJ9XX0sLy8g0L7RgtGH0LXRgiDQvtCxINC40YHQv9C+0LvQvdC10L3QuNC4XG50dWxlbXVzZWQ6e2dyaWRDb25maWc6W3tpZDpcImlkXCIsbmFtZTpcImlkXCIsd2lkdGg6XCI1JVwiLHNob3c6ZmFsc2V9LHtpZDona2FzX3ZpZ2FuZScsbmFtZTonU3RhYXR1cycsd2lkdGg6JzUlJyxzaG93OnRydWUseWVzQmFja2dyb3VuZENvbG9yOidyZWQnLG5vQmFja2dyb3VuZENvbG9yOidncmVlbid9LHtpZDpcInJlc3VsdFwiLG5hbWU6XCJUdWxlbXVzZWRcIix3aWR0aDpcIjEwJVwiLHNob3c6ZmFsc2V9LHtpZDpcImVycm9yX21lc3NhZ2VcIixuYW1lOlwiVGVhdGlzXCIsd2lkdGg6XCI3MCVcIixzaG93OnRydWV9LHtpZDpcInZpaXRlbnJcIixuYW1lOlwiVmlpdGVudW1iZXJcIix3aWR0aDpcIjE1JVwiLHNob3c6dHJ1ZX1dfSxTVEFSVF9NRU5VOntVUkw6Jy9uZXdBcGkvc3RhcnRNZW51J30sUkVLTDp7TElCX09CSlM6W3tpZDonYXN1dHVzZWQnLGZpbHRlcjpcIlwifV0sVVJMOicvbmV3QXBpL3N0YXJ0TWVudSd9LFRFQVRJUzp7dG9vbGJhclByb3BzOntidG5BZGQ6e3Nob3c6ZmFsc2UsZGlzYWJsZWQ6ZmFsc2V9fX0sVk9SREVSOntMSUJfT0JKUzpbe2lkOidrYXNzYScsZmlsdGVyOicnfSx7aWQ6J2FzdXR1c2VkJyxmaWx0ZXI6XCJ3aGVyZSBpZCBpbiAoc2VsZWN0IGFzdXR1c2lkIGZyb20gbGFwc2VkLnZhbmVtYWQpXCJ9LHtpZDonbm9tZW5jbGF0dXJlJyxmaWx0ZXI6XCJ3aGVyZSBkb2sgaW4gKCdWT1JERVInKVwifV19LC8vINGB0YfQtdGC0LBcbkxFUElORzp7TElCX09CSlM6W3tpZDonbm9tZW5jbGF0dXJlJyxmaWx0ZXI6XCJ3aGVyZSBkb2sgPSAnQVJWJ1wifSx7aWQ6J2FzdXR1c2VkJyxmaWx0ZXI6XCJcIn0se2lkOidvYmpla3QnLGZpbHRlcjpcIlwifV19LEFORE1FRDp7TElCX09CSlM6W3tpZDonbm9tZW5jbGF0dXJlJyxmaWx0ZXI6XCJ3aGVyZSBkb2sgPSAnQVJWJ1wifSx7aWQ6J2xlcGluZycsZmlsdGVyOlwiXCJ9XX0sLy8gc29yZGVyXG5TT1JERVI6e0xJQl9PQkpTOlt7aWQ6J25vbWVuY2xhdHVyZScsZmlsdGVyOlwid2hlcmUgZG9rID0gJ1NPUkRFUidcIn0se2lkOidhc3V0dXNlZCcsZmlsdGVyOlwiXCJ9LHtpZDona2Fzc2EnLGZpbHRlcjpcIlwifSx7aWQ6J2FydicsZmlsdGVyOlwiXCJ9XX0sLy8g0YHRh9C10YLQsFxuQVJWOntMSUJfT0JKUzpbe2lkOidub21lbmNsYXR1cmUnLGZpbHRlcjpcIndoZXJlIGRvayA9ICdBUlYnXCJ9LHtpZDonYXN1dHVzZWQnLGZpbHRlcjpcIlwifV0sRVZFTlRTOlt7bmFtZTonSMOkw6RsZXN0YW1pbmUnLG1ldGhvZDpudWxsLGRvY1R5cGVJZDpudWxsfSx7bmFtZTonVHLDvGtrIGvDtWlrIHZhbGl0dWQgYXJ2ZWQnLG1ldGhvZDpudWxsLGRvY1R5cGVJZDpudWxsfSx7bmFtZTonRW1haWwga8O1aWsgdmFsaXR1ZCBhcnZlZCcsbWV0aG9kOm51bGwsZG9jVHlwZUlkOm51bGx9LHtuYW1lOidTYWFkYSBFLUFydmVkIChPbW5pdmEpIGvDtWlrIHZhbGl0dWQgYXJ2ZWQnLG1ldGhvZDpudWxsLGRvY1R5cGVJZDpudWxsfSx7bmFtZTonU2FhbWEgWE1MIGUtYXJ2ZWQga8O1aWsgdmFsaXR1ZCBhcnZlZCcsbWV0aG9kOm51bGwsZG9jVHlwZUlkOm51bGx9LHtuYW1lOidTYWFtYSBYTUwgZS1hcnZlZCAoU0VCKSBrw7VpayB2YWxpdHVkIGFydmVkJyxtZXRob2Q6bnVsbCxkb2NUeXBlSWQ6bnVsbH0se25hbWU6J1NhYW1hIFhNTCBlLWFydmVkIChTV0VEKSBrw7VpayB2YWxpdHVkIGFydmVkJyxtZXRob2Q6bnVsbCxkb2NUeXBlSWQ6bnVsbH1dfSxOT01FTkNMQVRVUkU6e0xJQlJBUklFUzpbXSxUQVhJRVM6W3tpZDoyLGtvb2Q6JzAnLG5hbWU6JzAlJ30se2lkOjMsa29vZDonNScsbmFtZTonNSUnfSx7aWQ6NCxrb29kOicxMCcsbmFtZTonMTAlJ30se2lkOjYsa29vZDonMjAnLG5hbWU6JzIwJSd9XSxVSElLOlt7aWQ6MSxrb29kOidtdXVkJyxuYW1lOidNdXVkJ30se2lkOjIsa29vZDondGsnLG5hbWU6J1TDvGtrJ30se2lkOjMsa29vZDoncMOkZXYnLG5hbWU6J1DDpGV2J30se2lkOjQsa29vZDona3V1JyxuYW1lOidLdXUnfSx7aWQ6NSxrb29kOidhYXN0YScsbmFtZTonQWFzdGEnfSx7aWQ6Nixrb29kOidtMycsbmFtZTonTTMnfV0sQUxHT1JJVE1JRDpbe2lkOjEsa29vZDoncMOkZXYnLG5hbWU6J1DDpGV2J30se2lkOjIsa29vZDona29uc3RhbnRuZScsbmFtZTonS29uc3RhbnRuZSd9LHtpZDozLGtvb2Q6J2vDvGxhc3RhbWluZScsbmFtZTonS8O8bGFzdGFtaW5lJ31dLFRZWVA6W3tpZDoyLGtvb2Q6J1NPT0RVU1RVUycsbmFtZTonICd9XX0sUkVLVjp7TElCX09CSlM6W3tpZDona29udG9kJyxmaWx0ZXI6XCJcIn0se2lkOidhc3V0dXNlX2xpaWsnLGZpbHRlcjonJ31dfSwvLyDQvdC+0LTQsCDQtNC70Y8g0YHQv9GA0LDQstC+0YfQvdC40LrQvtCyXG5MSUJTOntQT1NUX0xPQURfTElCU19VUkw6Jy9uZXdBcGkvbG9hZExpYnMnfSwvLyDQvdC+0LTQsCDQtNC70Y8g0LTQvtC60YPQvNC10L3RgtC+0LJcbkRPQ1M6e1BPU1RfTE9BRF9ET0NTX1VSTDonL25ld0FwaS9kb2N1bWVudCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvbmZpZy9jb25zdGFudHMuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xudmFyIHJhZGl1bSA9IHJlcXVpcmUoJ3JhZGl1bScpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vc2VsZWN0LXN0eWxlcycpO1xuXG52YXIgSW5kZXggPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoSW5kZXgsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIEluZGV4KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEluZGV4Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW5kZXgpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWUgPyBwcm9wcy52YWx1ZSA6IDAgLyog0LfQtNC10YHRjCDQv9C+INC30L3QsNGH0LXQvdC40Y4g0JjQlCAqL1xuICAgICAgICAgICAgLCByZWFkT25seTogcHJvcHMucmVhZE9ubHksXG4gICAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICBmaWVsZFZhbHVlOiBwcm9wcy5kZWZhdWx0VmFsdWUgPyBwcm9wcy5kZWZhdWx0VmFsdWUgOiAnJyAvKtC30LTQtdGB0Ywg0L/QviDQt9C90LDRh9C10L3QuCDQv9C+0LvRjyBjb2xsSWQgKi9cbiAgICAgICAgICAgICwgYnRuRGVsZXRlOiBwcm9wcy5idG5EZWxldGUgLyog0LXRgdC70Lgg0LjRgdGC0LjQvdGDLCDRgtC+INGA0LjRgdGD0LXQvCDRgNGP0LTQvtC8INC60L3QvtC/0LrRgyDQtNC70Y8g0L7Rh9C40YHRgtC60Lgg0LfQvdCw0YfQtdC90LjRjyovXG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMub25DaGFuZ2UgPSBfdGhpcy5vbkNoYW5nZS5iaW5kKF90aGlzKTtcblxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiDQv9GA0LjQstGP0LbQtdGCINC6INC30L3QsNGH0LXQvdGOINC/0L7Qu9GPXHJcbiAgICAgKiBAcGFyYW0gZGF0YSAtINC60L7Qu9C70LXQutGG0LjRj1xyXG4gICAgICogQHBhcmFtIGNvbGxJZCAtINC/0L7Qu9C1XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSDQt9C90LDRh9C10L3QuNC1XHJcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKEluZGV4LCBbe1xuICAgICAgICBrZXk6ICdmaW5kRmllbGRWYWx1ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kRmllbGRWYWx1ZShkYXRhLCBjb2xsSWQsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgLy8g0L3QsNC00L4g0L/RgNC40LLRj9C30LDRgtGMINC00LDQvdC90YvQtVxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAocm93W2NvbGxJZF0gPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmFsdWU6IHJvd1tjb2xsSWRdLCBmaWVsZFZhbHVlOiByb3dbY29sbElkXSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvbGxJZFxyXG4gICAgICAgICAqIEBwYXJhbSByb3dJZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRWYWx1ZUJ5SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVCeUlkKGNvbGxJZCwgcm93SWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyDQstC10YDQvdC10YIg0LfQvdCw0YfQtdC90LjRjyDQv9C+0LvRjyDQv9C+INCy0YvQsdGA0LDQvdC90L7QvNGDINCY0JRcblxuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMucHJvcHMuZGF0YTtcblxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAocm93W2NvbGxJZF0gPT0gcm93SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IHJvd1tjb2xsSWRdO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2V0U3RhdGUoeyBmaWVsZFZhbHVlOiBmaWVsZFZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmllbGRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdpbGwgdXBkYXRlIHN0YXRlIGlmIHByb3BzIGNoYW5nZWRcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5jb2xsSWQgJiYgdGhpcy5wcm9wcy5jb2xsSWQgIT09ICdpZCcpIHtcbiAgICAgICAgICAgICAgICAvLyDQuNGJ0LXQvCDQmNCUINC/0L4g0LfQvdCw0YfQtdC90LjRjiDQv9C+0LvRj1xuICAgICAgICAgICAgICAgIHRoaXMuZmluZEZpZWxkVmFsdWUodGhpcy5wcm9wcy5kYXRhLCB0aGlzLnByb3BzLmNvbGxJZCwgdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZFZhbHVlID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaWVsZFZhbHVlID09ICcnKSB7XG4gICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNvbGxJZCkge1xuICAgICAgICAgICAgICAgIC8vINC90LDQudC00LXQvCDQv9C+INC40LQg0LfQvdCw0YfQtdC90LjQtSDQv9C+0LvRjyDQsiBjb2xsSWRcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5SWQodGhpcy5wcm9wcy5jb2xsSWQsIGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g0YHQvtGF0YDQsNC90LjQvCDQuNC0INC60LDQuiB2YWx1ZVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBlLnRhcmdldC52YWx1ZSwgZmllbGRWYWx1ZTogZmllbGRWYWx1ZSB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAvLyDRgdC80L7RgtGA0LjQvCDQuiDRh9C10LzRgyDQv9GA0LjQstGP0LfQsNC9INGB0LXQu9C10LrRgiDQuCDQvtGC0LTQsNC40Lwg0LXQs9C+INC90LDQstC10YDRhVxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5wcm9wcy5uYW1lLCBmaWVsZFZhbHVlKTsgLy8g0LIg0YHQu9GD0YfQsNC1INC10YHQu9C4INC30LDQtNCw0L0g0L7QsdGA0LDQsdC+0YLRh9C40Log0L3QsCDQstC10YDRhdC90LXQvCDRg9GA0L7QstC90LUsINC+0YLQtNCw0LTQuNC8INC+0LHRgNCw0LHQvtGC0LrRgyDRgtGD0LTQsFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGlucHV0UmVhZE9ubHkgPSB0aGlzLnN0YXRlLnJlYWRPbmx5IHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlucHV0RGVmYXVsdFZhbHVlID0gdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgPyB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSA6IHRoaXMucHJvcHMudmFsdWUgfHwgJyc7IC8vINCU0LDQtNC40Lwg0LTQtdGE0L7Qu9GC0L3QvtC1INC30L3QsNGH0LXQvdC40LUg0LTQu9GPINCy0LjQtNC20LXRgtCwLCDRh9GC0L7QsSDQv9C+0LrQsNGC0Ywg0LXQs9C+INGB0YDQsNC30YMsINC00L4g0L/QvtC00LPRgNGD0LfQutC4INCx0LjQsdC70LjQvtGC0LXQutC4XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vINC00L7QsdCw0LLQuNC8INC/0YPRgdGC0YPRjiDRgdGC0YDQvtC60YMg0LIg0LzQsNGB0YHQuNCyXG5cbiAgICAgICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQuNC8INC90LDQu9C40YfQuNC1INC/0YPRgdGC0L7QuSDRgdGC0YDQvtC60Lgg0LIg0LzQsNGB0YHQuNCy0LVcbiAgICAgICAgICAgICAgICB2YXIgZW1wdHlPYmogPSB0aGlzLnByb3BzLmRhdGEuZmlsdGVyKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5pZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2VsZWN0U3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuc2VsZWN0LCBpbnB1dFJlYWRPbmx5ID8gc3R5bGVzLmhpZGUgOiB7fSwgaW5wdXRSZWFkT25seSA/IHN0eWxlcy5yZWFkT25seSA6IHt9KTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgeyByZWY6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc2VsZWN0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwYWlyZURhdGFPcHRpb25zKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQn9C+0LTQs9C+0YLQvtCy0LjRgiDQtNCw0YLQsNGB0LXRgiDQtNC70Y8g0YHQtdC70LXQutGC0LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJlcGFpcmVEYXRhT3B0aW9ucycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYWlyZURhdGFPcHRpb25zKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdm9pZCAwO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnByb3BzLmRhdGEubGVuZ3RoID8gdGhpcy5wcm9wcy5kYXRhIDogW107XG5cbiAgICAgICAgICAgIC8vICAgICAgICBkYXRhLnVuc2hpZnQoe2lkOjAsIGtvb2Q6JycsIG5hbWU6Jyd9KTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCkge1xuXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gJ29wdGlvbi0nICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnICc7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dWYWx1ZSA9IChpdGVtLmtvb2QgPyBpdGVtLmtvb2QgOiAnJykgKyAnICcgKyBzZXBhcmF0b3IgKyAnICcgKyBpdGVtLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzNC5wcm9wcy5kYXRhLmxlbmd0aCA/IGl0ZW1bX3RoaXM0LnByb3BzLmNvbGxJZF0gOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjoga2V5IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dWYWx1ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnb3B0aW9uJywgeyB2YWx1ZTogMCwga2V5OiBNYXRoLnJhbmRvbSgpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDRg9GB0YLQsNC90L7QstC40YIg0YTQvtC60YPRgSDQvdCwINGN0LvQtdC80LXQvdGC0YtcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9jdXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnNbJ3NlbGVjdCddLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuXG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLnZhbHVlICE9PSBwcmV2U3RhdGUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbmV4dFByb3BzLnZhbHVlIH07XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSW5kZXg7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5JbmRleC5wcm9wVHlwZXMgPSB7XG4gICAgZGF0YTogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgaWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIGtvb2Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIG5pbWV0dXM6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KSksXG4gICAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBidG5EZWxldGU6IFByb3BUeXBlcy5ib29sLFxuICAgIGxpYnM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbElkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5JbmRleC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICBidG5EZWxldGU6IGZhbHNlLFxuICAgIGNvbGxJZDogJ2lkJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVmYXVsdFZhbHVlOiAnJyxcbiAgICBkYXRhOiBbeyBpZDogMCwga29vZDogJycsIG5pbWV0dXM6ICcnIH1dXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJhZGl1bShJbmRleCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL3NlbGVjdC1yZWt2L2luZGV4LmpzeFxuLy8gbW9kdWxlIGlkID0gODdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoJy4vbGliJykuZGVmYXVsdDttb2R1bGUuZXhwb3J0cy5kZWZhdWx0PW1vZHVsZS5leHBvcnRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJQbHVnaW5zXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIF9wbHVnaW5zW1wiZGVmYXVsdFwiXTt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJTdHlsZVwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBfc3R5bGVbXCJkZWZhdWx0XCJdO319KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIlN0eWxlUm9vdFwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBfc3R5bGVSb290W1wiZGVmYXVsdFwiXTt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJnZXRTdGF0ZVwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBfZ2V0U3RhdGVbXCJkZWZhdWx0XCJdO319KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcImtleWZyYW1lc1wiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBfa2V5ZnJhbWVzW1wiZGVmYXVsdFwiXTt9fSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfZW5oYW5jZXI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9lbmhhbmNlclwiKSk7dmFyIF9wbHVnaW5zPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGx1Z2luc1wiKSk7dmFyIF9zdHlsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvc3R5bGVcIikpO3ZhciBfc3R5bGVSb290PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9zdHlsZS1yb290XCIpKTt2YXIgX2dldFN0YXRlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0LXN0YXRlXCIpKTt2YXIgX2tleWZyYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2tleWZyYW1lc1wiKSk7dmFyIF9yZXNvbHZlU3R5bGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVzb2x2ZS1zdHlsZXNcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian07fWZ1bmN0aW9uIFJhZGl1bShDb21wb3NlZENvbXBvbmVudCl7cmV0dXJuKDAsX2VuaGFuY2VyW1wiZGVmYXVsdFwiXSkoQ29tcG9zZWRDb21wb25lbnQpO30vLyBMZWdhY3kgb2JqZWN0IHN1cHBvcnQuXG4vL1xuLy8gTm9ybWFsbHkgaXQgd291bGQgYmUgZGlzZmF2b3JlZCB0byBhdHRhY2ggdGhlc2UgdG8gdGhlIGBSYWRpdW1gIG9iamVjdFxuLy8gYmVjYXVzZSBpdCBkZWZlYXRzIHRyZWUtc2hha2luZywgdXNpbmcgaW5zdGVhZCB0aGUgRVNNIGV4cG9ydHMuIEJ1dCxcbi8vIHRoZSBgUmFkaXVtYCBgRW5oYW5jZXJgIHVzZXMgKiphbGwqKiBvZiB0aGVzZSwgc28gdGhlcmUncyBubyBleHRyYSBcImNvc3RcIlxuLy8gdG8gdGhlbSBiZWluZyBleHBsaWNpdGx5IG9uIHRoZSBgUmFkaXVtYCBvYmplY3QuXG5SYWRpdW0uUGx1Z2lucz1fcGx1Z2luc1tcImRlZmF1bHRcIl07UmFkaXVtLlN0eWxlPV9zdHlsZVtcImRlZmF1bHRcIl07UmFkaXVtLlN0eWxlUm9vdD1fc3R5bGVSb290W1wiZGVmYXVsdFwiXTtSYWRpdW0uZ2V0U3RhdGU9X2dldFN0YXRlW1wiZGVmYXVsdFwiXTtSYWRpdW0ua2V5ZnJhbWVzPV9rZXlmcmFtZXNbXCJkZWZhdWx0XCJdO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WIT09J3Byb2R1Y3Rpb24nKXtSYWRpdW0uVGVzdE1vZGU9e2NsZWFyU3RhdGU6X3Jlc29sdmVTdHlsZXNbXCJkZWZhdWx0XCJdLl9fY2xlYXJTdGF0ZUZvclRlc3RzLGRpc2FibGU6X3Jlc29sdmVTdHlsZXNbXCJkZWZhdWx0XCJdLl9fc2V0VGVzdE1vZGUuYmluZChudWxsLGZhbHNlKSxlbmFibGU6X3Jlc29sdmVTdHlsZXNbXCJkZWZhdWx0XCJdLl9fc2V0VGVzdE1vZGUuYmluZChudWxsLHRydWUpfTt9dmFyIF9kZWZhdWx0PVJhZGl1bTsvLyBFU00gcmUtZXhwb3J0c1xuZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDg5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO3ZhciBfdHlwZW9mMj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT1lbmhhbmNlV2l0aFJhZGl1bTt2YXIgX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7dmFyIF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7dmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiKSk7dmFyIF9yZXNvbHZlU3R5bGVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Jlc29sdmUtc3R5bGVzXCIpKTt2YXIgX2dldFJhZGl1bVN0eWxlU3RhdGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXQtcmFkaXVtLXN0eWxlLXN0YXRlXCIpKTt2YXIgX2NvbnRleHQ9cmVxdWlyZShcIi4vY29udGV4dFwiKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9O31mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmope2lmKG9iaiYmb2JqLl9fZXNNb2R1bGUpe3JldHVybiBvYmo7fWVsc2V7dmFyIG5ld09iaj17fTtpZihvYmohPW51bGwpe2Zvcih2YXIga2V5IGluIG9iail7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaixrZXkpKXt2YXIgZGVzYz1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosa2V5KTp7fTtpZihkZXNjLmdldHx8ZGVzYy5zZXQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosa2V5LGRlc2MpO31lbHNle25ld09ialtrZXldPW9ialtrZXldO319fX1uZXdPYmpbXCJkZWZhdWx0XCJdPW9iajtyZXR1cm4gbmV3T2JqO319ZnVuY3Rpb24gX3R5cGVvZihvYmope2lmKHR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJl90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcik9PT1cInN5bWJvbFwiKXtfdHlwZW9mPWZ1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gdHlwZW9mIG9iaj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihvYmopO307fWVsc2V7X3R5cGVvZj1mdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iaj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihvYmopO307fXJldHVybiBfdHlwZW9mKG9iaik7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZihjYWxsJiYoX3R5cGVvZihjYWxsKT09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKSl7cmV0dXJuIGNhbGw7fXJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO31mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpe2lmKHNlbGY9PT12b2lkIDApe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIHNlbGY7fWZ1bmN0aW9uIF9nZXQodGFyZ2V0LHByb3BlcnR5LHJlY2VpdmVyKXtpZih0eXBlb2YgUmVmbGVjdCE9PVwidW5kZWZpbmVkXCImJlJlZmxlY3QuZ2V0KXtfZ2V0PVJlZmxlY3QuZ2V0O31lbHNle19nZXQ9ZnVuY3Rpb24gX2dldCh0YXJnZXQscHJvcGVydHkscmVjZWl2ZXIpe3ZhciBiYXNlPV9zdXBlclByb3BCYXNlKHRhcmdldCxwcm9wZXJ0eSk7aWYoIWJhc2UpcmV0dXJuO3ZhciBkZXNjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSxwcm9wZXJ0eSk7aWYoZGVzYy5nZXQpe3JldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTt9cmV0dXJuIGRlc2MudmFsdWU7fTt9cmV0dXJuIF9nZXQodGFyZ2V0LHByb3BlcnR5LHJlY2VpdmVyfHx0YXJnZXQpO31mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QscHJvcGVydHkpe3doaWxlKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LHByb3BlcnR5KSl7b2JqZWN0PV9nZXRQcm90b3R5cGVPZihvYmplY3QpO2lmKG9iamVjdD09PW51bGwpYnJlYWs7fXJldHVybiBvYmplY3Q7fWZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKXtfZ2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobyl7cmV0dXJuIG8uX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7fTtyZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3Msd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTt9ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7X3NldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7by5fX3Byb3RvX189cDtyZXR1cm4gbzt9O3JldHVybiBfc2V0UHJvdG90eXBlT2YobyxwKTt9ZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLGkpe3JldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKXx8X2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFycixpKXx8X25vbkl0ZXJhYmxlUmVzdCgpO31mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7fWZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsaSl7dmFyIF9hcnI9W107dmFyIF9uPXRydWU7dmFyIF9kPWZhbHNlO3ZhciBfZT11bmRlZmluZWQ7dHJ5e2Zvcih2YXIgX2k9YXJyW1N5bWJvbC5pdGVyYXRvcl0oKSxfczshKF9uPShfcz1faS5uZXh0KCkpLmRvbmUpO19uPXRydWUpe19hcnIucHVzaChfcy52YWx1ZSk7aWYoaSYmX2Fyci5sZW5ndGg9PT1pKWJyZWFrO319Y2F0Y2goZXJyKXtfZD10cnVlO19lPWVycjt9ZmluYWxseXt0cnl7aWYoIV9uJiZfaVtcInJldHVyblwiXSE9bnVsbClfaVtcInJldHVyblwiXSgpO31maW5hbGx5e2lmKF9kKXRocm93IF9lO319cmV0dXJuIF9hcnI7fWZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpe2lmKEFycmF5LmlzQXJyYXkoYXJyKSlyZXR1cm4gYXJyO31mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV0hPW51bGw/YXJndW1lbnRzW2ldOnt9O3ZhciBvd25LZXlzPU9iamVjdC5rZXlzKHNvdXJjZSk7aWYodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM9PT0nZnVuY3Rpb24nKXtvd25LZXlzPW93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2Usc3ltKS5lbnVtZXJhYmxlO30pKTt9b3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7X2RlZmluZVByb3BlcnR5KHRhcmdldCxrZXksc291cmNlW2tleV0pO30pO31yZXR1cm4gdGFyZ2V0O31mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLGtleSx2YWx1ZSl7aWYoa2V5IGluIG9iail7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse3ZhbHVlOnZhbHVlLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSk7fWVsc2V7b2JqW2tleV09dmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsZXhjbHVkZWQpe2lmKHNvdXJjZT09bnVsbClyZXR1cm57fTt2YXIgdGFyZ2V0PV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSxleGNsdWRlZCk7dmFyIGtleSxpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBzb3VyY2VTeW1ib2xLZXlzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtmb3IoaT0wO2k8c291cmNlU3ltYm9sS2V5cy5sZW5ndGg7aSsrKXtrZXk9c291cmNlU3ltYm9sS2V5c1tpXTtpZihleGNsdWRlZC5pbmRleE9mKGtleSk+PTApY29udGludWU7aWYoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2Usa2V5KSljb250aW51ZTt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fXJldHVybiB0YXJnZXQ7fWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSxleGNsdWRlZCl7aWYoc291cmNlPT1udWxsKXJldHVybnt9O3ZhciB0YXJnZXQ9e307dmFyIHNvdXJjZUtleXM9T2JqZWN0LmtleXMoc291cmNlKTt2YXIga2V5LGk7Zm9yKGk9MDtpPHNvdXJjZUtleXMubGVuZ3RoO2krKyl7a2V5PXNvdXJjZUtleXNbaV07aWYoZXhjbHVkZWQuaW5kZXhPZihrZXkpPj0wKWNvbnRpbnVlO3RhcmdldFtrZXldPXNvdXJjZVtrZXldO31yZXR1cm4gdGFyZ2V0O31mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpe3ZhciBrZXk9X3RvUHJpbWl0aXZlKGFyZyxcInN0cmluZ1wiKTtyZXR1cm4gX3R5cGVvZihrZXkpPT09XCJzeW1ib2xcIj9rZXk6U3RyaW5nKGtleSk7fWZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCxoaW50KXtpZihfdHlwZW9mKGlucHV0KSE9PVwib2JqZWN0XCJ8fGlucHV0PT09bnVsbClyZXR1cm4gaW5wdXQ7dmFyIHByaW09aW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZihwcmltIT09dW5kZWZpbmVkKXt2YXIgcmVzPXByaW0uY2FsbChpbnB1dCxoaW50fHxcImRlZmF1bHRcIik7aWYoX3R5cGVvZihyZXMpIT09XCJvYmplY3RcIilyZXR1cm4gcmVzO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTt9cmV0dXJuKGhpbnQ9PT1cInN0cmluZ1wiP1N0cmluZzpOdW1iZXIpKGlucHV0KTt9dmFyIEtFWVNfVE9fSUdOT1JFX1dIRU5fQ09QWUlOR19QUk9QRVJUSUVTPVsnYXJndW1lbnRzJywnY2FsbGVlJywnY2FsbGVyJywnbGVuZ3RoJywnbmFtZScsJ3Byb3RvdHlwZScsJ3R5cGUnXTt2YXIgUkFESVVNX1BST1RPO3ZhciBSQURJVU1fTUVUSE9EUztmdW5jdGlvbiBjb3B5UHJvcGVydGllcyhzb3VyY2UsdGFyZ2V0KXtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtpZihLRVlTX1RPX0lHTk9SRV9XSEVOX0NPUFlJTkdfUFJPUEVSVElFUy5pbmRleE9mKGtleSk8MCYmIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKXt2YXIgZGVzY3JpcHRvcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSxrZXkpO2Rlc2NyaXB0b3ImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsa2V5LGRlc2NyaXB0b3IpO319KTt9Ly8gSGFuZGxlIHNjZW5hcmlvcyBvZjpcbi8vIC0gSW5oZXJpdCBmcm9tIGBSZWFjdC5Db21wb25lbnRgIGluIGFueSBmYXNoaW9uXG4vLyAgIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL0Zvcm1pZGFibGVMYWJzL3JhZGl1bS9pc3N1ZXMvNzM4XG4vLyAtIFRoZXJlJ3MgYW4gZXhwbGljaXQgYHJlbmRlcmAgZmllbGQgZGVmaW5lZFxuZnVuY3Rpb24gaXNTdGF0ZWxlc3MoY29tcG9uZW50KXt2YXIgcHJvdG89Y29tcG9uZW50LnByb3RvdHlwZXx8e307cmV0dXJuIWNvbXBvbmVudC5pc1JlYWN0Q29tcG9uZW50JiYhcHJvdG8uaXNSZWFjdENvbXBvbmVudCYmIWNvbXBvbmVudC5yZW5kZXImJiFwcm90by5yZW5kZXI7fS8vIENoZWNrIGlmIHZhbHVlIGlzIGEgcmVhbCBFUyBjbGFzcyBpbiBOYXRpdmUgLyBOb2RlIGNvZGUuXG4vLyBTZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMDc2MDIzNlxuZnVuY3Rpb24gaXNOYXRpdmVDbGFzcyhjb21wb25lbnQpe3JldHVybiB0eXBlb2YgY29tcG9uZW50PT09J2Z1bmN0aW9uJyYmL15cXHMqY2xhc3NcXHMrLy50ZXN0KGNvbXBvbmVudC50b1N0cmluZygpKTt9Ly8gSGFuZGxlIGVzNyBhcnJvdyBmdW5jdGlvbnMgb24gUmVhY3QgY2xhc3MgbWV0aG9kIG5hbWVzIGJ5IGRldGVjdGluZ1xuLy8gYW5kIHRyYW5zZmVyaW5nIHRoZSBpbnN0YW5jZSBtZXRob2QgdG8gb3JpZ2luYWwgY2xhc3MgcHJvdG90eXBlLlxuLy8gKFVzaW5nIGEgY29weSBvZiB0aGUgY2xhc3MpLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vRm9ybWlkYWJsZUxhYnMvcmFkaXVtL2lzc3Vlcy83MzhcbmZ1bmN0aW9uIGNvcHlBcnJvd0Z1bmNzKGVuaGFuY2VkU2VsZixDb21wb3NlZENvbXBvbmVudCl7UkFESVVNX01FVEhPRFMuZm9yRWFjaChmdW5jdGlvbihuYW1lKXt2YXIgdGhpc0Rlc2M9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlbmhhbmNlZFNlbGYsbmFtZSk7dmFyIHRoaXNNZXRob2Q9KHRoaXNEZXNjfHx7fSkudmFsdWU7Ly8gT25seSBjYXJlIGlmIGhhdmUgaW5zdGFuY2UgbWV0aG9kLlxuaWYoIXRoaXNNZXRob2Qpe3JldHVybjt9dmFyIHJhZGl1bURlc2M9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihSQURJVU1fUFJPVE8sbmFtZSk7dmFyIHJhZGl1bVByb3RvTWV0aG9kPShyYWRpdW1EZXNjfHx7fSkudmFsdWU7dmFyIHN1cGVyUHJvdG9NZXRob2Q9Q29tcG9zZWRDb21wb25lbnQucHJvdG90eXBlW25hbWVdOy8vIEFsbG93IHRyYW5zZmVyIHdoZW46XG4vLyAxLiBoYXZlIGFuIGluc3RhbmNlIG1ldGhvZFxuLy8gMi4gdGhlIHN1cGVyIGNsYXNzIHByb3RvdHlwZSBkb2Vzbid0IGhhdmUgYW55IG1ldGhvZFxuLy8gMy4gaXQgaXMgbm90IGFscmVhZHkgdGhlIHJhZGl1bSBwcm90b3R5cGUnc1xuaWYoIXN1cGVyUHJvdG9NZXRob2QmJnRoaXNNZXRob2QhPT1yYWRpdW1Qcm90b01ldGhvZCl7Ly8gVHJhbnNmZXIgZHluYW1pYyByZW5kZXIgY29tcG9uZW50IHRvIENvbXBvbmVudCBwcm90b3R5cGUgKGNvcHkpLlxudGhpc0Rlc2MmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb3NlZENvbXBvbmVudC5wcm90b3R5cGUsbmFtZSx0aGlzRGVzYyk7Ly8gUmVtb3ZlIGluc3RhbmNlIHByb3BlcnR5LCBsZWF2aW5nIHVzIHRvIGhhdmUgYSBjb250cml2ZWRcbi8vIGluaGVyaXRhbmNlIGNoYWluIG9mICgxKSByYWRpdW0sICgyKSBzdXBlcmNsYXNzLlxuZGVsZXRlIGVuaGFuY2VkU2VsZltuYW1lXTt9fSk7fWZ1bmN0aW9uIHRyaW1SYWRpdW1TdGF0ZShlbmhhbmNlcil7aWYoZW5oYW5jZXIuX2V4dHJhUmFkaXVtU3RhdGVLZXlzJiZlbmhhbmNlci5fZXh0cmFSYWRpdW1TdGF0ZUtleXMubGVuZ3RoPjApe3ZhciB0cmltbWVkUmFkaXVtU3RhdGU9ZW5oYW5jZXIuX2V4dHJhUmFkaXVtU3RhdGVLZXlzLnJlZHVjZShmdW5jdGlvbihzdGF0ZSxrZXkpey8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xudmFyIGV4dHJhU3RhdGVLZXk9c3RhdGVba2V5XSxyZW1haW5pbmdTdGF0ZT1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsW2tleV0ubWFwKF90b1Byb3BlcnR5S2V5KSk7cmV0dXJuIHJlbWFpbmluZ1N0YXRlO30sKDAsX2dldFJhZGl1bVN0eWxlU3RhdGVbXCJkZWZhdWx0XCJdKShlbmhhbmNlcikpO2VuaGFuY2VyLl9sYXN0UmFkaXVtU3RhdGU9dHJpbW1lZFJhZGl1bVN0YXRlO2VuaGFuY2VyLnNldFN0YXRlKHtfcmFkaXVtU3R5bGVTdGF0ZTp0cmltbWVkUmFkaXVtU3RhdGV9KTt9fWZ1bmN0aW9uIGNsZWFuVXBFbmhhbmNlcihlbmhhbmNlcil7dmFyIF9yYWRpdW1Nb3VzZVVwTGlzdGVuZXI9ZW5oYW5jZXIuX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcixfcmFkaXVtTWVkaWFRdWVyeUxpc3RlbmVyc0J5UXVlcnk9ZW5oYW5jZXIuX3JhZGl1bU1lZGlhUXVlcnlMaXN0ZW5lcnNCeVF1ZXJ5O2VuaGFuY2VyLl9yYWRpdW1Jc01vdW50ZWQ9ZmFsc2U7aWYoX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcil7X3JhZGl1bU1vdXNlVXBMaXN0ZW5lci5yZW1vdmUoKTt9aWYoX3JhZGl1bU1lZGlhUXVlcnlMaXN0ZW5lcnNCeVF1ZXJ5KXtPYmplY3Qua2V5cyhfcmFkaXVtTWVkaWFRdWVyeUxpc3RlbmVyc0J5UXVlcnkpLmZvckVhY2goZnVuY3Rpb24ocXVlcnkpe19yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeVtxdWVyeV0ucmVtb3ZlKCk7fSxlbmhhbmNlcik7fX1mdW5jdGlvbiByZXNvbHZlQ29uZmlnKHByb3BDb25maWcsY29udGV4dENvbmZpZyxob2NDb25maWcpe3ZhciBjb25maWc9cHJvcENvbmZpZ3x8Y29udGV4dENvbmZpZ3x8aG9jQ29uZmlnO2lmKGhvY0NvbmZpZyYmY29uZmlnIT09aG9jQ29uZmlnKXtjb25maWc9X29iamVjdFNwcmVhZCh7fSxob2NDb25maWcsY29uZmlnKTt9cmV0dXJuIGNvbmZpZzt9ZnVuY3Rpb24gcmVuZGVyUmFkaXVtQ29tcG9uZW50KGVuaGFuY2VyLHJlbmRlcmVkRWxlbWVudCxyZXNvbHZlZENvbmZpZyxwcm9wQ29uZmlnKXt2YXIgX3Jlc29sdmVTdHlsZXM9KDAsX3Jlc29sdmVTdHlsZXMyW1wiZGVmYXVsdFwiXSkoZW5oYW5jZXIscmVuZGVyZWRFbGVtZW50LHJlc29sdmVkQ29uZmlnKSxleHRyYVN0YXRlS2V5TWFwPV9yZXNvbHZlU3R5bGVzLmV4dHJhU3RhdGVLZXlNYXAsZWxlbWVudD1fcmVzb2x2ZVN0eWxlcy5lbGVtZW50O2VuaGFuY2VyLl9leHRyYVJhZGl1bVN0YXRlS2V5cz1PYmplY3Qua2V5cyhleHRyYVN0YXRlS2V5TWFwKTtpZihwcm9wQ29uZmlnKXtyZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9jb250ZXh0LlJhZGl1bUNvbmZpZ0NvbnRleHQuUHJvdmlkZXIse3ZhbHVlOnByb3BDb25maWd9LGVsZW1lbnQpO31yZXR1cm4gZWxlbWVudDt9ZnVuY3Rpb24gY3JlYXRlRW5oYW5jZWRGdW5jdGlvbkNvbXBvbmVudChvcmlnQ29tcG9uZW50LGNvbmZpZyl7dmFyIFJhZGl1bUVuaGFuY2VyPV9yZWFjdFtcImRlZmF1bHRcIl0uZm9yd2FyZFJlZihmdW5jdGlvbihwcm9wcyxyZWYpe3ZhciByYWRpdW1Db25maWc9cHJvcHMucmFkaXVtQ29uZmlnLG90aGVyUHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLFtcInJhZGl1bUNvbmZpZ1wiXSk7dmFyIHJhZGl1bUNvbmZpZ0NvbnRleHQ9KDAsX3JlYWN0LnVzZUNvbnRleHQpKF9jb250ZXh0LlJhZGl1bUNvbmZpZ0NvbnRleHQpO3ZhciBzdHlsZUtlZXBlckNvbnRleHQ9KDAsX3JlYWN0LnVzZUNvbnRleHQpKF9jb250ZXh0LlN0eWxlS2VlcGVyQ29udGV4dCk7dmFyIF91c2VTdGF0ZT0oMCxfcmVhY3QudXNlU3RhdGUpKHtfcmFkaXVtU3R5bGVTdGF0ZTp7fX0pLF91c2VTdGF0ZTI9X3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLDIpLHN0YXRlPV91c2VTdGF0ZTJbMF0sc2V0U3RhdGU9X3VzZVN0YXRlMlsxXTt2YXIgZW5oYW5jZXJBcGk9KDAsX3JlYWN0LnVzZVJlZikoe3N0YXRlOnN0YXRlLHNldFN0YXRlOnNldFN0YXRlLF9yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeTp1bmRlZmluZWQsX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcjp1bmRlZmluZWQsX3JhZGl1bUlzTW91bnRlZDp0cnVlLF9sYXN0UmFkaXVtU3RhdGU6dW5kZWZpbmVkLF9leHRyYVJhZGl1bVN0YXRlS2V5czp1bmRlZmluZWQsX3JhZGl1bVN0eWxlS2VlcGVyOnN0eWxlS2VlcGVyQ29udGV4dH0pLmN1cnJlbnQ7Ly8gcmVzdWx0IG9mIHVzZVJlZiBpcyBuZXZlciByZWNyZWF0ZWQgYW5kIGlzIGRlc2lnbmVkIHRvIGJlIG11dGFibGVcbi8vIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSBsYXRlc3Qgc3RhdGUgaXMgYXR0YWNoZWQgdG8gaXRcbmVuaGFuY2VyQXBpLnN0YXRlPXN0YXRlOygwLF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7Y2xlYW5VcEVuaGFuY2VyKGVuaGFuY2VyQXBpKTt9O30sW2VuaGFuY2VyQXBpXSk7dmFyIGhhc0V4dHJhU3RhdGVLZXlzPWVuaGFuY2VyQXBpLl9leHRyYVJhZGl1bVN0YXRlS2V5cyYmZW5oYW5jZXJBcGkuX2V4dHJhUmFkaXVtU3RhdGVLZXlzLmxlbmd0aD4wOygwLF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uKCl7dHJpbVJhZGl1bVN0YXRlKGVuaGFuY2VyQXBpKTt9LFtoYXNFeHRyYVN0YXRlS2V5cyxlbmhhbmNlckFwaV0pO3ZhciByZW5kZXJlZEVsZW1lbnQ9b3JpZ0NvbXBvbmVudChvdGhlclByb3BzLHJlZik7dmFyIGN1cnJlbnRDb25maWc9cmVzb2x2ZUNvbmZpZyhyYWRpdW1Db25maWcscmFkaXVtQ29uZmlnQ29udGV4dCxjb25maWcpO3JldHVybiByZW5kZXJSYWRpdW1Db21wb25lbnQoZW5oYW5jZXJBcGkscmVuZGVyZWRFbGVtZW50LGN1cnJlbnRDb25maWcscmFkaXVtQ29uZmlnKTt9KTtSYWRpdW1FbmhhbmNlci5faXNSYWRpdW1FbmhhbmNlZD10cnVlO1JhZGl1bUVuaGFuY2VyLmRlZmF1bHRQcm9wcz1vcmlnQ29tcG9uZW50LmRlZmF1bHRQcm9wcztyZXR1cm4oMCxfaG9pc3ROb25SZWFjdFN0YXRpY3NbXCJkZWZhdWx0XCJdKShSYWRpdW1FbmhhbmNlcixvcmlnQ29tcG9uZW50KTt9ZnVuY3Rpb24gY3JlYXRlRW5oYW5jZWRDbGFzc0NvbXBvbmVudChvcmlnQ29tcG9uZW50LENvbXBvc2VkQ29tcG9uZW50LGNvbmZpZyl7dmFyIFJhZGl1bUVuaGFuY2VyPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfQ29tcG9zZWRDb21wb25lbnQpe19pbmhlcml0cyhSYWRpdW1FbmhhbmNlcixfQ29tcG9zZWRDb21wb25lbnQpOy8vIG5lZWQgdG8gYXR0ZW1wdCB0byBhc3NpZ24gdG8gdGhpcy5zdGF0ZSBpbiBjYXNlXG4vLyBzdXBlciBjb21wb25lbnQgaXMgc2V0dGluZyBzdGF0ZSBvbiBjb25zdHJ1Y3Rpb24sXG4vLyBvdGhlcndpc2UgY2xhc3MgcHJvcGVydGllcyByZWluaXRpYWxpemUgdG8gdW5kZWZpbmVkXG4vLyBuZWVkIHRvIGFzc2lnbiB0aGUgZm9sbG93aW5nIG1ldGhvZHMgdG8gdGhpcy54eHggYXNcbi8vIHRlc3RzIGF0dGVtcHQgdG8gc2V0IHRoaXMgb24gdGhlIG9yaWdpbmFsIGNvbXBvbmVudFxuZnVuY3Rpb24gUmFkaXVtRW5oYW5jZXIoKXt2YXIgX3RoaXM7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUmFkaXVtRW5oYW5jZXIpO190aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsX2dldFByb3RvdHlwZU9mKFJhZGl1bUVuaGFuY2VyKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpO190aGlzLnN0YXRlPV90aGlzLnN0YXRlfHx7fTtfdGhpcy5fcmFkaXVtU3R5bGVLZWVwZXI9X3RoaXMucHJvcHMuc3R5bGVLZWVwZXJDb250ZXh0O190aGlzLl9yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeT1fdGhpcy5fcmFkaXVtTWVkaWFRdWVyeUxpc3RlbmVyc0J5UXVlcnk7X3RoaXMuX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcj1fdGhpcy5fcmFkaXVtTW91c2VVcExpc3RlbmVyO190aGlzLl9yYWRpdW1Jc01vdW50ZWQ9dHJ1ZTtfdGhpcy5fbGFzdFJhZGl1bVN0YXRlPXZvaWQgMDtfdGhpcy5fZXh0cmFSYWRpdW1TdGF0ZUtleXM9dm9pZCAwO190aGlzLnN0YXRlLl9yYWRpdW1TdHlsZVN0YXRlPXt9O3ZhciBzZWxmPV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpOy8vIEhhbmRsZSBlczcgYXJyb3cgZnVuY3Rpb25zIG9uIFJlYWN0IGNsYXNzIG1ldGhvZFxuY29weUFycm93RnVuY3Moc2VsZixDb21wb3NlZENvbXBvbmVudCk7cmV0dXJuIF90aGlzO31fY3JlYXRlQ2xhc3MoUmFkaXVtRW5oYW5jZXIsW3trZXk6XCJjb21wb25lbnREaWRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLHByZXZTdGF0ZSxzbmFwc2hvdCl7aWYoX2dldChfZ2V0UHJvdG90eXBlT2YoUmFkaXVtRW5oYW5jZXIucHJvdG90eXBlKSxcImNvbXBvbmVudERpZFVwZGF0ZVwiLHRoaXMpKXtfZ2V0KF9nZXRQcm90b3R5cGVPZihSYWRpdW1FbmhhbmNlci5wcm90b3R5cGUpLFwiY29tcG9uZW50RGlkVXBkYXRlXCIsdGhpcykuY2FsbCh0aGlzLHByZXZQcm9wcyxwcmV2U3RhdGUsc25hcHNob3QpO310cmltUmFkaXVtU3RhdGUodGhpcyk7fX0se2tleTpcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXtpZihfZ2V0KF9nZXRQcm90b3R5cGVPZihSYWRpdW1FbmhhbmNlci5wcm90b3R5cGUpLFwiY29tcG9uZW50V2lsbFVubW91bnRcIix0aGlzKSl7X2dldChfZ2V0UHJvdG90eXBlT2YoUmFkaXVtRW5oYW5jZXIucHJvdG90eXBlKSxcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsdGhpcykuY2FsbCh0aGlzKTt9Y2xlYW5VcEVuaGFuY2VyKHRoaXMpO319LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgcmVuZGVyZWRFbGVtZW50PV9nZXQoX2dldFByb3RvdHlwZU9mKFJhZGl1bUVuaGFuY2VyLnByb3RvdHlwZSksXCJyZW5kZXJcIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBjdXJyZW50Q29uZmlnPXJlc29sdmVDb25maWcodGhpcy5wcm9wcy5yYWRpdW1Db25maWcsdGhpcy5wcm9wcy5yYWRpdW1Db25maWdDb250ZXh0LGNvbmZpZyk7cmV0dXJuIHJlbmRlclJhZGl1bUNvbXBvbmVudCh0aGlzLHJlbmRlcmVkRWxlbWVudCxjdXJyZW50Q29uZmlnLHRoaXMucHJvcHMucmFkaXVtQ29uZmlnKTt9fV0pO3JldHVybiBSYWRpdW1FbmhhbmNlcjt9KENvbXBvc2VkQ29tcG9uZW50KTsvLyBMYXp5IGluZmVyIHRoZSBtZXRob2QgbmFtZXMgb2YgdGhlIEVuaGFuY2VyLlxuUmFkaXVtRW5oYW5jZXIuX2lzUmFkaXVtRW5oYW5jZWQ9dHJ1ZTtSQURJVU1fUFJPVE89UmFkaXVtRW5oYW5jZXIucHJvdG90eXBlO1JBRElVTV9NRVRIT0RTPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFJBRElVTV9QUk9UTykuZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBuIT09J2NvbnN0cnVjdG9yJyYmdHlwZW9mIFJBRElVTV9QUk9UT1tuXT09PSdmdW5jdGlvbic7fSk7Ly8gQ2xhc3MgaW5oZXJpdGFuY2UgdXNlcyBPYmplY3QuY3JlYXRlIGFuZCBiZWNhdXNlIG9mIF9fcHJvdG9fXyBpc3N1ZXNcbi8vIHdpdGggSUUgPDEwIGFueSBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgc3VwZXJjbGFzcyBhcmVuJ3QgaW5oZXJpdGVkIGFuZFxuLy8gc28gbmVlZCB0byBiZSBtYW51YWxseSBwb3B1bGF0ZWQuXG4vLyBTZWUgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9hZHZhbmNlZC9jYXZlYXRzLyNjbGFzc2VzLTEwLWFuZC1iZWxvdy1cbmNvcHlQcm9wZXJ0aWVzKG9yaWdDb21wb25lbnQsUmFkaXVtRW5oYW5jZXIpO2lmKHByb2Nlc3MuZW52Lk5PREVfRU5WIT09J3Byb2R1Y3Rpb24nKXsvLyBUaGlzIGFsc28gZml4ZXMgUmVhY3QgSG90IExvYWRlciBieSBleHBvc2luZyB0aGUgb3JpZ2luYWwgY29tcG9uZW50cyB0b3Bcbi8vIGxldmVsIHByb3RvdHlwZSBtZXRob2RzIG9uIHRoZSBSYWRpdW0gZW5oYW5jZWQgcHJvdG90eXBlIGFzIGRpc2N1c3NlZCBpblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0Zvcm1pZGFibGVMYWJzL3JhZGl1bS9pc3N1ZXMvMjE5LlxuY29weVByb3BlcnRpZXMoQ29tcG9zZWRDb21wb25lbnQucHJvdG90eXBlLFJhZGl1bUVuaGFuY2VyLnByb3RvdHlwZSk7fS8vIGFkZCBSYWRpdW0gcHJvcFR5cGVzIHRvIGVuaGFuY2VkIGNvbXBvbmVudCdzIHByb3BUeXBlc1xuaWYoUmFkaXVtRW5oYW5jZXIucHJvcFR5cGVzJiZSYWRpdW1FbmhhbmNlci5wcm9wVHlwZXMuc3R5bGUpe1JhZGl1bUVuaGFuY2VyLnByb3BUeXBlcz1fb2JqZWN0U3ByZWFkKHt9LFJhZGl1bUVuaGFuY2VyLnByb3BUeXBlcyx7c3R5bGU6X3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5hcnJheSxfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3RdKX0pO30vLyBjb3B5IGRpc3BsYXkgbmFtZSB0byBlbmhhbmNlZCBjb21wb25lbnRcblJhZGl1bUVuaGFuY2VyLmRpc3BsYXlOYW1lPW9yaWdDb21wb25lbnQuZGlzcGxheU5hbWV8fG9yaWdDb21wb25lbnQubmFtZXx8J0NvbXBvbmVudCc7cmV0dXJuKDAsX2NvbnRleHQud2l0aFJhZGl1bUNvbnRleHRzKShSYWRpdW1FbmhhbmNlcik7fWZ1bmN0aW9uIGNyZWF0ZUNvbXBvc2VkRnJvbU5hdGl2ZUNsYXNzKENvbXBvc2VkQ29tcG9uZW50KXtDb21wb3NlZENvbXBvbmVudD1mdW5jdGlvbihPcmlnQ29tcG9uZW50KXtmdW5jdGlvbiBOZXdDb21wb25lbnQoKXsvLyBVc2UgUmVmbGVjdC5jb25zdHJ1Y3QgdG8gc2ltdWxhdGUgJ25ldydcbnZhciBvYmo9UmVmbGVjdC5jb25zdHJ1Y3QoT3JpZ0NvbXBvbmVudCxhcmd1bWVudHMsdGhpcy5jb25zdHJ1Y3Rvcik7cmV0dXJuIG9iajt9Ly8gJEZsb3dGaXhNZVxuUmVmbGVjdC5zZXRQcm90b3R5cGVPZihOZXdDb21wb25lbnQucHJvdG90eXBlLE9yaWdDb21wb25lbnQucHJvdG90eXBlKTsvLyAkRmxvd0ZpeE1lXG5SZWZsZWN0LnNldFByb3RvdHlwZU9mKE5ld0NvbXBvbmVudCxPcmlnQ29tcG9uZW50KTtyZXR1cm4gTmV3Q29tcG9uZW50O30oQ29tcG9zZWRDb21wb25lbnQpO3JldHVybiBDb21wb3NlZENvbXBvbmVudDt9dmFyIFJlYWN0Rm9yd2FyZFJlZlN5bWJvbD0oMCxfcmVhY3QuZm9yd2FyZFJlZikoZnVuY3Rpb24oKXtyZXR1cm4gbnVsbDt9KS4kJHR5cGVvZjtmdW5jdGlvbiBlbmhhbmNlV2l0aFJhZGl1bShjb25maWdPckNvbXBvc2VkQ29tcG9uZW50KXt2YXIgY29uZmlnPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTp7fTtpZihSZWFjdEZvcndhcmRSZWZTeW1ib2wmJmNvbmZpZ09yQ29tcG9zZWRDb21wb25lbnQuJCR0eXBlb2Y9PT1SZWFjdEZvcndhcmRSZWZTeW1ib2wpe3JldHVybiBjcmVhdGVFbmhhbmNlZEZ1bmN0aW9uQ29tcG9uZW50KGNvbmZpZ09yQ29tcG9zZWRDb21wb25lbnQucmVuZGVyLGNvbmZpZyk7fWlmKHR5cGVvZiBjb25maWdPckNvbXBvc2VkQ29tcG9uZW50IT09J2Z1bmN0aW9uJyl7cmV0dXJuIGNyZWF0ZUZhY3RvcnlGcm9tQ29uZmlnKGNvbmZpZyxjb25maWdPckNvbXBvc2VkQ29tcG9uZW50KTt9dmFyIG9yaWdDb21wb25lbnQ9Y29uZmlnT3JDb21wb3NlZENvbXBvbmVudDsvLyBIYW5kbGUgc3RhdGVsZXNzIGNvbXBvbmVudHNcbmlmKGlzU3RhdGVsZXNzKG9yaWdDb21wb25lbnQpKXtyZXR1cm4gY3JlYXRlRW5oYW5jZWRGdW5jdGlvbkNvbXBvbmVudChvcmlnQ29tcG9uZW50LGNvbmZpZyk7fXZhciBfQ29tcG9zZWRDb21wb25lbnQyPW9yaWdDb21wb25lbnQ7Ly8gUmFkaXVtIGlzIHRyYW5zcGlsZWQgaW4gbnBtLCBzbyBpdCBpc24ndCByZWFsbHkgdXNpbmcgZXM2IGNsYXNzZXMgYXRcbi8vIHJ1bnRpbWUuICBIb3dldmVyLCB0aGUgdXNlciBvZiBSYWRpdW0gbWlnaHQgYmUuICBJbiB0aGlzIGNhc2Ugd2UgaGF2ZVxuLy8gdG8gbWFpbnRhaW4gZm9yd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggbmF0aXZlIGVzIGNsYXNzZXMuXG5pZihpc05hdGl2ZUNsYXNzKF9Db21wb3NlZENvbXBvbmVudDIpKXtfQ29tcG9zZWRDb21wb25lbnQyPWNyZWF0ZUNvbXBvc2VkRnJvbU5hdGl2ZUNsYXNzKF9Db21wb3NlZENvbXBvbmVudDIpO30vLyBTaGFsbG93IGNvcHkgY29tcG9zZWQgaWYgc3RpbGwgb3JpZ2luYWwgKHdlIG1heSBtdXRhdGUgbGF0ZXIpLlxuaWYoX0NvbXBvc2VkQ29tcG9uZW50Mj09PW9yaWdDb21wb25lbnQpe19Db21wb3NlZENvbXBvbmVudDI9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9Db21wb3NlZENvbXBvbmVudDMpe19pbmhlcml0cyhDb21wb3NlZENvbXBvbmVudCxfQ29tcG9zZWRDb21wb25lbnQzKTtmdW5jdGlvbiBDb21wb3NlZENvbXBvbmVudCgpe19jbGFzc0NhbGxDaGVjayh0aGlzLENvbXBvc2VkQ29tcG9uZW50KTtyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxfZ2V0UHJvdG90eXBlT2YoQ29tcG9zZWRDb21wb25lbnQpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSk7fXJldHVybiBDb21wb3NlZENvbXBvbmVudDt9KF9Db21wb3NlZENvbXBvbmVudDIpO31yZXR1cm4gY3JlYXRlRW5oYW5jZWRDbGFzc0NvbXBvbmVudChvcmlnQ29tcG9uZW50LF9Db21wb3NlZENvbXBvbmVudDIsY29uZmlnKTt9ZnVuY3Rpb24gY3JlYXRlRmFjdG9yeUZyb21Db25maWcoY29uZmlnLGNvbmZpZ09yQ29tcG9zZWRDb21wb25lbnQpe3ZhciBuZXdDb25maWc9X29iamVjdFNwcmVhZCh7fSxjb25maWcsY29uZmlnT3JDb21wb3NlZENvbXBvbmVudCk7cmV0dXJuIGZ1bmN0aW9uKGNvbmZpZ09yQ29tcG9uZW50KXtyZXR1cm4gZW5oYW5jZVdpdGhSYWRpdW0oY29uZmlnT3JDb21wb25lbnQsbmV3Q29uZmlnKTt9O31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9lbmhhbmNlci5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF90eXBlb2YyPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2FwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYXBwZW5kLWltcG9ydGFudC10by1lYWNoLXZhbHVlXCIpKTt2YXIgX2Nzc1J1bGVTZXRUb1N0cmluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Nzcy1ydWxlLXNldC10by1zdHJpbmdcIikpO3ZhciBfZ2V0U3RhdGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXQtc3RhdGVcIikpO3ZhciBfZ2V0U3RhdGVLZXk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXQtc3RhdGUta2V5XCIpKTt2YXIgX2NsZWFuU3RhdGVLZXk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jbGVhbi1zdGF0ZS1rZXlcIikpO3ZhciBfZ2V0UmFkaXVtU3R5bGVTdGF0ZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldC1yYWRpdW0tc3R5bGUtc3RhdGVcIikpO3ZhciBfaGFzaD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc2hcIikpO3ZhciBfbWVyZ2VTdHlsZXM9cmVxdWlyZShcIi4vbWVyZ2Utc3R5bGVzXCIpO3ZhciBfcGx1Z2lucz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BsdWdpbnMvXCIpKTt2YXIgX2V4ZW52PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImV4ZW52XCIpKTt2YXIgX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTt2YXIgX3N0eWxlS2VlcGVyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGUta2VlcGVyXCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9O31mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV0hPW51bGw/YXJndW1lbnRzW2ldOnt9O3ZhciBvd25LZXlzPU9iamVjdC5rZXlzKHNvdXJjZSk7aWYodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM9PT0nZnVuY3Rpb24nKXtvd25LZXlzPW93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2Usc3ltKS5lbnVtZXJhYmxlO30pKTt9b3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7X2RlZmluZVByb3BlcnR5KHRhcmdldCxrZXksc291cmNlW2tleV0pO30pO31yZXR1cm4gdGFyZ2V0O31mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLGtleSx2YWx1ZSl7aWYoa2V5IGluIG9iail7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse3ZhbHVlOnZhbHVlLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSk7fWVsc2V7b2JqW2tleV09dmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF90eXBlb2Yob2JqKXtpZih0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpPT09XCJzeW1ib2xcIil7X3R5cGVvZj1mdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIHR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9O31lbHNle190eXBlb2Y9ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9O31yZXR1cm4gX3R5cGVvZihvYmopO312YXIgREVGQVVMVF9DT05GSUc9e3BsdWdpbnM6W19wbHVnaW5zW1wiZGVmYXVsdFwiXS5tZXJnZVN0eWxlQXJyYXksX3BsdWdpbnNbXCJkZWZhdWx0XCJdLmNoZWNrUHJvcHMsX3BsdWdpbnNbXCJkZWZhdWx0XCJdLnJlc29sdmVNZWRpYVF1ZXJpZXMsX3BsdWdpbnNbXCJkZWZhdWx0XCJdLnJlc29sdmVJbnRlcmFjdGlvblN0eWxlcyxfcGx1Z2luc1tcImRlZmF1bHRcIl0ua2V5ZnJhbWVzLF9wbHVnaW5zW1wiZGVmYXVsdFwiXS52aXNpdGVkLF9wbHVnaW5zW1wiZGVmYXVsdFwiXS5yZW1vdmVOZXN0ZWRTdHlsZXMsX3BsdWdpbnNbXCJkZWZhdWx0XCJdLnByZWZpeCxfcGx1Z2luc1tcImRlZmF1bHRcIl0uY2hlY2tQcm9wc119Oy8vIEdyb3NzXG52YXIgZ2xvYmFsU3RhdGU9e307Ly8gT25seSBmb3IgdXNlIGJ5IHRlc3RzXG52YXIgX19pc1Rlc3RNb2RlRW5hYmxlZD1mYWxzZTsvLyBEZWNsYXJlIGVhcmx5IGZvciByZWN1cnNpdmUgaGVscGVycy5cbnZhciBfcmVzb2x2ZVN0eWxlczU9bnVsbDt2YXIgX3Nob3VsZFJlc29sdmVTdHlsZXM9ZnVuY3Rpb24gX3Nob3VsZFJlc29sdmVTdHlsZXMoY29tcG9uZW50KXtyZXR1cm4gY29tcG9uZW50LnR5cGUmJiFjb21wb25lbnQudHlwZS5faXNSYWRpdW1FbmhhbmNlZDt9O3ZhciBfcmVzb2x2ZUNoaWxkcmVuPWZ1bmN0aW9uIF9yZXNvbHZlQ2hpbGRyZW4oX3JlZil7dmFyIGNoaWxkcmVuPV9yZWYuY2hpbGRyZW4sY29tcG9uZW50PV9yZWYuY29tcG9uZW50LGNvbmZpZz1fcmVmLmNvbmZpZyxleGlzdGluZ0tleU1hcD1fcmVmLmV4aXN0aW5nS2V5TWFwLGV4dHJhU3RhdGVLZXlNYXA9X3JlZi5leHRyYVN0YXRlS2V5TWFwO2lmKCFjaGlsZHJlbil7cmV0dXJuIGNoaWxkcmVuO312YXIgY2hpbGRyZW5UeXBlPV90eXBlb2YoY2hpbGRyZW4pO2lmKGNoaWxkcmVuVHlwZT09PSdzdHJpbmcnfHxjaGlsZHJlblR5cGU9PT0nbnVtYmVyJyl7Ly8gRG9uJ3QgZG8gYW55dGhpbmcgd2l0aCBhIHNpbmdsZSBwcmltaXRpdmUgY2hpbGRcbnJldHVybiBjaGlsZHJlbjt9aWYoY2hpbGRyZW5UeXBlPT09J2Z1bmN0aW9uJyl7Ly8gV3JhcCB0aGUgZnVuY3Rpb24sIHJlc29sdmluZyBzdHlsZXMgb24gdGhlIHJlc3VsdFxucmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHJlc3VsdD1jaGlsZHJlbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoX3JlYWN0W1wiZGVmYXVsdFwiXS5pc1ZhbGlkRWxlbWVudChyZXN1bHQpKXt2YXIgX2tleT0oMCxfZ2V0U3RhdGVLZXlbXCJkZWZhdWx0XCJdKShyZXN1bHQpO2RlbGV0ZSBleHRyYVN0YXRlS2V5TWFwW19rZXldO3ZhciBfcmVzb2x2ZVN0eWxlcz1fcmVzb2x2ZVN0eWxlczUoY29tcG9uZW50LHJlc3VsdCxjb25maWcsZXhpc3RpbmdLZXlNYXAsdHJ1ZSxleHRyYVN0YXRlS2V5TWFwKSxlbGVtZW50PV9yZXNvbHZlU3R5bGVzLmVsZW1lbnQ7cmV0dXJuIGVsZW1lbnQ7fXJldHVybiByZXN1bHQ7fTt9aWYoX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChjaGlsZHJlbik9PT0xJiZjaGlsZHJlbi50eXBlKXsvLyBJZiBhIFJlYWN0IEVsZW1lbnQgaXMgYW4gb25seSBjaGlsZCwgZG9uJ3Qgd3JhcCBpdCBpbiBhbiBhcnJheSBmb3Jcbi8vIFJlYWN0LkNoaWxkcmVuLm1hcCgpIGZvciBSZWFjdC5DaGlsZHJlbi5vbmx5KCkgY29tcGF0aWJpbGl0eS5cbnZhciBvbmx5Q2hpbGQ9X3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTt2YXIgX2tleTI9KDAsX2dldFN0YXRlS2V5W1wiZGVmYXVsdFwiXSkob25seUNoaWxkKTtkZWxldGUgZXh0cmFTdGF0ZUtleU1hcFtfa2V5Ml07dmFyIF9yZXNvbHZlU3R5bGVzMj1fcmVzb2x2ZVN0eWxlczUoY29tcG9uZW50LG9ubHlDaGlsZCxjb25maWcsZXhpc3RpbmdLZXlNYXAsdHJ1ZSxleHRyYVN0YXRlS2V5TWFwKSxlbGVtZW50PV9yZXNvbHZlU3R5bGVzMi5lbGVtZW50O3JldHVybiBlbGVtZW50O31yZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sZnVuY3Rpb24oY2hpbGQpe2lmKF9yZWFjdFtcImRlZmF1bHRcIl0uaXNWYWxpZEVsZW1lbnQoY2hpbGQpKXt2YXIgX2tleTM9KDAsX2dldFN0YXRlS2V5W1wiZGVmYXVsdFwiXSkoY2hpbGQpO2RlbGV0ZSBleHRyYVN0YXRlS2V5TWFwW19rZXkzXTt2YXIgX3Jlc29sdmVTdHlsZXMzPV9yZXNvbHZlU3R5bGVzNShjb21wb25lbnQsY2hpbGQsY29uZmlnLGV4aXN0aW5nS2V5TWFwLHRydWUsZXh0cmFTdGF0ZUtleU1hcCksX2VsZW1lbnQ9X3Jlc29sdmVTdHlsZXMzLmVsZW1lbnQ7cmV0dXJuIF9lbGVtZW50O31yZXR1cm4gY2hpbGQ7fSk7fTsvLyBSZWN1cnNlIG92ZXIgcHJvcHMsIGp1c3QgbGlrZSBjaGlsZHJlblxudmFyIF9yZXNvbHZlUHJvcHM9ZnVuY3Rpb24gX3Jlc29sdmVQcm9wcyhfcmVmMil7dmFyIGNvbXBvbmVudD1fcmVmMi5jb21wb25lbnQsY29uZmlnPV9yZWYyLmNvbmZpZyxleGlzdGluZ0tleU1hcD1fcmVmMi5leGlzdGluZ0tleU1hcCxwcm9wcz1fcmVmMi5wcm9wcyxleHRyYVN0YXRlS2V5TWFwPV9yZWYyLmV4dHJhU3RhdGVLZXlNYXA7dmFyIG5ld1Byb3BzPXByb3BzO09iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3Apey8vIFdlIGFscmVhZHkgcmVjdXJzZSBvdmVyIGNoaWxkcmVuIGFib3ZlXG5pZihwcm9wPT09J2NoaWxkcmVuJyl7cmV0dXJuO312YXIgcHJvcFZhbHVlPXByb3BzW3Byb3BdO2lmKF9yZWFjdFtcImRlZmF1bHRcIl0uaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSl7dmFyIF9rZXk0PSgwLF9nZXRTdGF0ZUtleVtcImRlZmF1bHRcIl0pKHByb3BWYWx1ZSk7ZGVsZXRlIGV4dHJhU3RhdGVLZXlNYXBbX2tleTRdO25ld1Byb3BzPV9vYmplY3RTcHJlYWQoe30sbmV3UHJvcHMpO3ZhciBfcmVzb2x2ZVN0eWxlczQ9X3Jlc29sdmVTdHlsZXM1KGNvbXBvbmVudCxwcm9wVmFsdWUsY29uZmlnLGV4aXN0aW5nS2V5TWFwLHRydWUsZXh0cmFTdGF0ZUtleU1hcCksZWxlbWVudD1fcmVzb2x2ZVN0eWxlczQuZWxlbWVudDtuZXdQcm9wc1twcm9wXT1lbGVtZW50O319KTtyZXR1cm4gbmV3UHJvcHM7fTt2YXIgX2J1aWxkR2V0S2V5PWZ1bmN0aW9uIF9idWlsZEdldEtleShfcmVmMyl7dmFyIGNvbXBvbmVudE5hbWU9X3JlZjMuY29tcG9uZW50TmFtZSxleGlzdGluZ0tleU1hcD1fcmVmMy5leGlzdGluZ0tleU1hcCxyZW5kZXJlZEVsZW1lbnQ9X3JlZjMucmVuZGVyZWRFbGVtZW50Oy8vIFdlIG5lZWQgYSB1bmlxdWUga2V5IHRvIGNvcnJlbGF0ZSBzdGF0ZSBjaGFuZ2VzIGR1ZSB0byB1c2VyIGludGVyYWN0aW9uXG4vLyB3aXRoIHRoZSByZW5kZXJlZCBlbGVtZW50LCBzbyB3ZSBrbm93IHRvIGFwcGx5IHRoZSBwcm9wZXIgaW50ZXJhY3RpdmVcbi8vIHN0eWxlcy5cbnZhciBvcmlnaW5hbEtleT0oMCxfZ2V0U3RhdGVLZXlbXCJkZWZhdWx0XCJdKShyZW5kZXJlZEVsZW1lbnQpO3ZhciBrZXk9KDAsX2NsZWFuU3RhdGVLZXlbXCJkZWZhdWx0XCJdKShvcmlnaW5hbEtleSk7dmFyIGFscmVhZHlHb3RLZXk9ZmFsc2U7dmFyIGdldEtleT1mdW5jdGlvbiBnZXRLZXkoKXtpZihhbHJlYWR5R290S2V5KXtyZXR1cm4ga2V5O31hbHJlYWR5R290S2V5PXRydWU7aWYoZXhpc3RpbmdLZXlNYXBba2V5XSl7dmFyIGVsZW1lbnROYW1lO2lmKHR5cGVvZiByZW5kZXJlZEVsZW1lbnQudHlwZT09PSdzdHJpbmcnKXtlbGVtZW50TmFtZT1yZW5kZXJlZEVsZW1lbnQudHlwZTt9ZWxzZSBpZihyZW5kZXJlZEVsZW1lbnQudHlwZS5jb25zdHJ1Y3Rvcil7ZWxlbWVudE5hbWU9cmVuZGVyZWRFbGVtZW50LnR5cGUuY29uc3RydWN0b3IuZGlzcGxheU5hbWV8fHJlbmRlcmVkRWxlbWVudC50eXBlLmNvbnN0cnVjdG9yLm5hbWU7fXRocm93IG5ldyBFcnJvcignUmFkaXVtIHJlcXVpcmVzIGVhY2ggZWxlbWVudCB3aXRoIGludGVyYWN0aXZlIHN0eWxlcyB0byBoYXZlIGEgdW5pcXVlICcrJ2tleSwgc2V0IHVzaW5nIGVpdGhlciB0aGUgcmVmIG9yIGtleSBwcm9wLiAnKyhvcmlnaW5hbEtleT8nS2V5IFwiJytvcmlnaW5hbEtleSsnXCIgaXMgYSBkdXBsaWNhdGUuJzonTXVsdGlwbGUgZWxlbWVudHMgaGF2ZSBubyBrZXkgc3BlY2lmaWVkLicpKycgJysnQ29tcG9uZW50OiBcIicrY29tcG9uZW50TmFtZSsnXCIuICcrKGVsZW1lbnROYW1lPydFbGVtZW50OiBcIicrZWxlbWVudE5hbWUrJ1wiLic6JycpKTt9ZXhpc3RpbmdLZXlNYXBba2V5XT10cnVlO3JldHVybiBrZXk7fTtyZXR1cm4gZ2V0S2V5O307dmFyIF9zZXRTdHlsZVN0YXRlPWZ1bmN0aW9uIF9zZXRTdHlsZVN0YXRlKGNvbXBvbmVudCxrZXksc3RhdGVLZXksdmFsdWUpe2lmKCFjb21wb25lbnQuX3JhZGl1bUlzTW91bnRlZCl7cmV0dXJuO312YXIgZXhpc3Rpbmc9KDAsX2dldFJhZGl1bVN0eWxlU3RhdGVbXCJkZWZhdWx0XCJdKShjb21wb25lbnQpO3ZhciBzdGF0ZT17X3JhZGl1bVN0eWxlU3RhdGU6X29iamVjdFNwcmVhZCh7fSxleGlzdGluZyl9O3N0YXRlLl9yYWRpdW1TdHlsZVN0YXRlW2tleV09X29iamVjdFNwcmVhZCh7fSxzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZVtrZXldKTtzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZVtrZXldW3N0YXRlS2V5XT12YWx1ZTtjb21wb25lbnQuX2xhc3RSYWRpdW1TdGF0ZT1zdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZTtjb21wb25lbnQuc2V0U3RhdGUoc3RhdGUpO307dmFyIF9ydW5QbHVnaW5zPWZ1bmN0aW9uIF9ydW5QbHVnaW5zKF9yZWY0KXt2YXIgY29tcG9uZW50PV9yZWY0LmNvbXBvbmVudCxjb25maWc9X3JlZjQuY29uZmlnLGV4aXN0aW5nS2V5TWFwPV9yZWY0LmV4aXN0aW5nS2V5TWFwLHByb3BzPV9yZWY0LnByb3BzLHJlbmRlcmVkRWxlbWVudD1fcmVmNC5yZW5kZXJlZEVsZW1lbnQ7Ly8gRG9uJ3QgcnVuIHBsdWdpbnMgaWYgcmVuZGVyZWRFbGVtZW50IGlzIG5vdCBhIHNpbXBsZSBSZWFjdERPTUVsZW1lbnQgb3IgaGFzXG4vLyBubyBzdHlsZS5cbmlmKCFfcmVhY3RbXCJkZWZhdWx0XCJdLmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkRWxlbWVudCl8fHR5cGVvZiByZW5kZXJlZEVsZW1lbnQudHlwZSE9PSdzdHJpbmcnfHwhcHJvcHMuc3R5bGUpe3JldHVybiBwcm9wczt9dmFyIG5ld1Byb3BzPXByb3BzO3ZhciBwbHVnaW5zPWNvbmZpZy5wbHVnaW5zfHxERUZBVUxUX0NPTkZJRy5wbHVnaW5zO3ZhciBjb21wb25lbnROYW1lPWNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8Y29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWU7dmFyIGdldEtleT1fYnVpbGRHZXRLZXkoe3JlbmRlcmVkRWxlbWVudDpyZW5kZXJlZEVsZW1lbnQsZXhpc3RpbmdLZXlNYXA6ZXhpc3RpbmdLZXlNYXAsY29tcG9uZW50TmFtZTpjb21wb25lbnROYW1lfSk7dmFyIGdldENvbXBvbmVudEZpZWxkPWZ1bmN0aW9uIGdldENvbXBvbmVudEZpZWxkKGtleSl7cmV0dXJuIGNvbXBvbmVudFtrZXldO307dmFyIGdldEdsb2JhbFN0YXRlPWZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlKGtleSl7cmV0dXJuIGdsb2JhbFN0YXRlW2tleV07fTt2YXIgY29tcG9uZW50R2V0U3RhdGU9ZnVuY3Rpb24gY29tcG9uZW50R2V0U3RhdGUoc3RhdGVLZXksZWxlbWVudEtleSl7cmV0dXJuKDAsX2dldFN0YXRlW1wiZGVmYXVsdFwiXSkoY29tcG9uZW50LnN0YXRlLGVsZW1lbnRLZXl8fGdldEtleSgpLHN0YXRlS2V5KTt9O3ZhciBzZXRTdGF0ZT1mdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZUtleSx2YWx1ZSxlbGVtZW50S2V5KXtyZXR1cm4gX3NldFN0eWxlU3RhdGUoY29tcG9uZW50LGVsZW1lbnRLZXl8fGdldEtleSgpLHN0YXRlS2V5LHZhbHVlKTt9O3ZhciBhZGRDU1M9ZnVuY3Rpb24gYWRkQ1NTKGNzcyl7dmFyIHN0eWxlS2VlcGVyPWNvbXBvbmVudC5fcmFkaXVtU3R5bGVLZWVwZXI7aWYoIXN0eWxlS2VlcGVyKXtpZihfX2lzVGVzdE1vZGVFbmFibGVkKXtyZXR1cm57cmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe319O310aHJvdyBuZXcgRXJyb3IoJ1RvIHVzZSBwbHVnaW5zIHJlcXVpcmluZyBgYWRkQ1NTYCAoZS5nLiBrZXlmcmFtZXMsIG1lZGlhIHF1ZXJpZXMpLCAnKydwbGVhc2Ugd3JhcCB5b3VyIGFwcGxpY2F0aW9uIGluIHRoZSBTdHlsZVJvb3QgY29tcG9uZW50LiBDb21wb25lbnQgJysnbmFtZTogYCcrY29tcG9uZW50TmFtZSsnYC4nKTt9cmV0dXJuIHN0eWxlS2VlcGVyLmFkZENTUyhjc3MpO307dmFyIG5ld1N0eWxlPXByb3BzLnN0eWxlO3BsdWdpbnMuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pe3ZhciByZXN1bHQ9cGx1Z2luKHtFeGVjdXRpb25FbnZpcm9ubWVudDpfZXhlbnZbXCJkZWZhdWx0XCJdLGFkZENTUzphZGRDU1MsYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWU6X2FwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlW1wiZGVmYXVsdFwiXSxjb21wb25lbnROYW1lOmNvbXBvbmVudE5hbWUsY29uZmlnOmNvbmZpZyxjc3NSdWxlU2V0VG9TdHJpbmc6X2Nzc1J1bGVTZXRUb1N0cmluZ1tcImRlZmF1bHRcIl0sZ2V0Q29tcG9uZW50RmllbGQ6Z2V0Q29tcG9uZW50RmllbGQsZ2V0R2xvYmFsU3RhdGU6Z2V0R2xvYmFsU3RhdGUsZ2V0U3RhdGU6Y29tcG9uZW50R2V0U3RhdGUsaGFzaDpfaGFzaFtcImRlZmF1bHRcIl0sbWVyZ2VTdHlsZXM6X21lcmdlU3R5bGVzLm1lcmdlU3R5bGVzLHByb3BzOm5ld1Byb3BzLHNldFN0YXRlOnNldFN0YXRlLGlzTmVzdGVkU3R5bGU6X21lcmdlU3R5bGVzLmlzTmVzdGVkU3R5bGUsc3R5bGU6bmV3U3R5bGV9KXx8e307bmV3U3R5bGU9cmVzdWx0LnN0eWxlfHxuZXdTdHlsZTtuZXdQcm9wcz1yZXN1bHQucHJvcHMmJk9iamVjdC5rZXlzKHJlc3VsdC5wcm9wcykubGVuZ3RoP19vYmplY3RTcHJlYWQoe30sbmV3UHJvcHMscmVzdWx0LnByb3BzKTpuZXdQcm9wczt2YXIgbmV3Q29tcG9uZW50RmllbGRzPXJlc3VsdC5jb21wb25lbnRGaWVsZHN8fHt9O09iamVjdC5rZXlzKG5ld0NvbXBvbmVudEZpZWxkcykuZm9yRWFjaChmdW5jdGlvbihmaWVsZE5hbWUpe2NvbXBvbmVudFtmaWVsZE5hbWVdPW5ld0NvbXBvbmVudEZpZWxkc1tmaWVsZE5hbWVdO30pO3ZhciBuZXdHbG9iYWxTdGF0ZT1yZXN1bHQuZ2xvYmFsU3RhdGV8fHt9O09iamVjdC5rZXlzKG5ld0dsb2JhbFN0YXRlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7Z2xvYmFsU3RhdGVba2V5XT1uZXdHbG9iYWxTdGF0ZVtrZXldO30pO30pO2lmKG5ld1N0eWxlIT09cHJvcHMuc3R5bGUpe25ld1Byb3BzPV9vYmplY3RTcHJlYWQoe30sbmV3UHJvcHMse3N0eWxlOm5ld1N0eWxlfSk7fXJldHVybiBuZXdQcm9wczt9Oy8vIFdyYXBwZXIgYXJvdW5kIFJlYWN0LmNsb25lRWxlbWVudC4gVG8gYXZvaWQgcHJvY2Vzc2luZyB0aGUgc2FtZSBlbGVtZW50XG4vLyB0d2ljZSwgd2hlbmV2ZXIgd2UgY2xvbmUgYW4gZWxlbWVudCBhZGQgYSBzcGVjaWFsIHByb3AgdG8gbWFrZSBzdXJlIHdlIGRvbid0XG4vLyBwcm9jZXNzIHRoaXMgZWxlbWVudCBhZ2Fpbi5cbnZhciBfY2xvbmVFbGVtZW50PWZ1bmN0aW9uIF9jbG9uZUVsZW1lbnQocmVuZGVyZWRFbGVtZW50LG5ld1Byb3BzLG5ld0NoaWxkcmVuKXsvLyBPbmx5IGFkZCBmbGFnIGlmIHRoaXMgaXMgYSBub3JtYWwgRE9NIGVsZW1lbnRcbmlmKHR5cGVvZiByZW5kZXJlZEVsZW1lbnQudHlwZT09PSdzdHJpbmcnKXtuZXdQcm9wcz1fb2JqZWN0U3ByZWFkKHt9LG5ld1Byb3BzLHsnZGF0YS1yYWRpdW0nOnRydWV9KTt9cmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY2xvbmVFbGVtZW50KHJlbmRlcmVkRWxlbWVudCxuZXdQcm9wcyxuZXdDaGlsZHJlbik7fTsvL1xuLy8gVGhlIG51Y2xldXMgb2YgUmFkaXVtLiByZXNvbHZlU3R5bGVzIGlzIGNhbGxlZCBvbiB0aGUgcmVuZGVyZWQgZWxlbWVudHNcbi8vIGJlZm9yZSB0aGV5IGFyZSByZXR1cm5lZCBpbiByZW5kZXIuIEl0IGl0ZXJhdGVzIG92ZXIgdGhlIGVsZW1lbnRzIGFuZFxuLy8gY2hpbGRyZW4sIHJld3JpdGluZyBwcm9wcyB0byBhZGQgZXZlbnQgaGFuZGxlcnMgcmVxdWlyZWQgdG8gY2FwdHVyZSB1c2VyXG4vLyBpbnRlcmFjdGlvbnMgKGUuZy4gbW91c2Ugb3ZlcikuIEl0IGFsc28gcmVwbGFjZXMgdGhlIHN0eWxlIHByb3AgYmVjYXVzZSBpdFxuLy8gYWRkcyBpbiB0aGUgdmFyaW91cyBpbnRlcmFjdGlvbiBzdHlsZXMgKGUuZy4gOmhvdmVyKS5cbi8vXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovX3Jlc29sdmVTdHlsZXM1PWZ1bmN0aW9uIHJlc29sdmVTdHlsZXMoY29tcG9uZW50LHJlbmRlcmVkRWxlbWVudCl7dmFyIGNvbmZpZz1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMl06REVGQVVMVF9DT05GSUc7dmFyIGV4aXN0aW5nS2V5TWFwPWFyZ3VtZW50cy5sZW5ndGg+MyYmYXJndW1lbnRzWzNdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1szXTp7fTt2YXIgc2hvdWxkQ2hlY2tCZWZvcmVSZXNvbHZlPWFyZ3VtZW50cy5sZW5ndGg+NCYmYXJndW1lbnRzWzRdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1s0XTpmYWxzZTt2YXIgZXh0cmFTdGF0ZUtleU1hcD1hcmd1bWVudHMubGVuZ3RoPjU/YXJndW1lbnRzWzVdOnVuZGVmaW5lZDsvLyBUaGUgZXh0cmFTdGF0ZUtleU1hcCBpcyBmb3IgZGV0ZXJtaW5pbmcgd2hpY2gga2V5cyBzaG91bGQgYmUgZXJhc2VkIGZyb21cbi8vIHRoZSBzdGF0ZSAoaS5lLiB3aGljaCBjaGlsZCBjb21wb25lbnRzIGFyZSB1bm1vdW50ZWQgYW5kIHNob3VsZCBubyBsb25nZXJcbi8vIGhhdmUgYSBzdHlsZSBzdGF0ZSkuXG5pZighZXh0cmFTdGF0ZUtleU1hcCl7dmFyIHN0YXRlPSgwLF9nZXRSYWRpdW1TdHlsZVN0YXRlW1wiZGVmYXVsdFwiXSkoY29tcG9uZW50KTtleHRyYVN0YXRlS2V5TWFwPU9iamVjdC5rZXlzKHN0YXRlKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLGtleSl7Ly8gJ21haW4nIGlzIHRoZSBhdXRvLWdlbmVyYXRlZCBrZXkgd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSBlbGVtZW50IHdpdGhcbi8vIGludGVyYWN0aXZlIHN0eWxlcyBhbmQgaWYgYSBjdXN0b20ga2V5IGlzIG5vdCBhc3NpZ25lZC4gQmVjYXVzZSBvZlxuLy8gdGhpcywgaXQgaXMgaW1wb3NzaWJsZSB0byBrbm93IHdoaWNoIGNoaWxkIGlzICdtYWluJywgc28gd2Ugd29uJ3Rcbi8vIGNvdW50IHRoaXMga2V5IHdoZW4gZ2VuZXJhdGluZyBvdXIgZXh0cmFTdGF0ZUtleU1hcC5cbmlmKGtleSE9PSdtYWluJyl7YWNjW2tleV09dHJ1ZTt9cmV0dXJuIGFjYzt9LHt9KTt9aWYoQXJyYXkuaXNBcnJheShyZW5kZXJlZEVsZW1lbnQpJiYhcmVuZGVyZWRFbGVtZW50LnByb3BzKXt2YXIgZWxlbWVudHM9cmVuZGVyZWRFbGVtZW50Lm1hcChmdW5jdGlvbihlbGVtZW50KXsvLyBlbGVtZW50IGlzIGluLXVzZSwgc28gcmVtb3ZlIGZyb20gdGhlIGV4dHJhU3RhdGVLZXlNYXBcbmlmKGV4dHJhU3RhdGVLZXlNYXApe3ZhciBfa2V5NT0oMCxfZ2V0U3RhdGVLZXlbXCJkZWZhdWx0XCJdKShlbGVtZW50KTtkZWxldGUgZXh0cmFTdGF0ZUtleU1hcFtfa2V5NV07fS8vIHRoaXMgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyxcbi8vIHNvIHJldHVybiBhbiBhcnJheSBvZiBlbGVtZW50cyB3aXRoIHJlc29sdmVkIHN0eWxlc1xucmV0dXJuIF9yZXNvbHZlU3R5bGVzNShjb21wb25lbnQsZWxlbWVudCxjb25maWcsZXhpc3RpbmdLZXlNYXAsc2hvdWxkQ2hlY2tCZWZvcmVSZXNvbHZlLGV4dHJhU3RhdGVLZXlNYXApLmVsZW1lbnQ7fSk7cmV0dXJue2V4dHJhU3RhdGVLZXlNYXA6ZXh0cmFTdGF0ZUtleU1hcCxlbGVtZW50OmVsZW1lbnRzfTt9Ly8gUmVhY3RFbGVtZW50XG5pZighcmVuZGVyZWRFbGVtZW50fHwvLyBCYWlsIGlmIHdlJ3ZlIGFscmVhZHkgcHJvY2Vzc2VkIHRoaXMgZWxlbWVudC4gVGhpcyBlbnN1cmVzIHRoYXQgb25seSB0aGVcbi8vIG93bmVyIG9mIGFuIGVsZW1lbnQgcHJvY2Vzc2VzIHRoYXQgZWxlbWVudCwgc2luY2UgdGhlIG93bmVyJ3MgcmVuZGVyXG4vLyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBmaXJzdCAod2hpY2ggd2lsbCBhbHdheXMgYmUgdGhlIGNhc2UsIHNpbmNlIHlvdVxuLy8gY2FuJ3Qga25vdyB3aGF0IGVsc2UgdG8gcmVuZGVyIHVudGlsIHlvdSByZW5kZXIgdGhlIHBhcmVudCBjb21wb25lbnQpLlxucmVuZGVyZWRFbGVtZW50LnByb3BzJiZyZW5kZXJlZEVsZW1lbnQucHJvcHNbJ2RhdGEtcmFkaXVtJ118fC8vIEJhaWwgaWYgdGhpcyBlbGVtZW50IGlzIGEgcmFkaXVtIGVuaGFuY2VkIGVsZW1lbnQsIGJlY2F1c2UgaWYgaXQgaXMsXG4vLyB0aGVuIGl0IHdpbGwgdGFrZSBjYXJlIG9mIHJlc29sdmluZyBpdHMgb3duIHN0eWxlcy5cbnNob3VsZENoZWNrQmVmb3JlUmVzb2x2ZSYmIV9zaG91bGRSZXNvbHZlU3R5bGVzKHJlbmRlcmVkRWxlbWVudCkpe3JldHVybntleHRyYVN0YXRlS2V5TWFwOmV4dHJhU3RhdGVLZXlNYXAsZWxlbWVudDpyZW5kZXJlZEVsZW1lbnR9O312YXIgY2hpbGRyZW49cmVuZGVyZWRFbGVtZW50LnByb3BzLmNoaWxkcmVuO3ZhciBuZXdDaGlsZHJlbj1fcmVzb2x2ZUNoaWxkcmVuKHtjaGlsZHJlbjpjaGlsZHJlbixjb21wb25lbnQ6Y29tcG9uZW50LGNvbmZpZzpjb25maWcsZXhpc3RpbmdLZXlNYXA6ZXhpc3RpbmdLZXlNYXAsZXh0cmFTdGF0ZUtleU1hcDpleHRyYVN0YXRlS2V5TWFwfSk7dmFyIG5ld1Byb3BzPV9yZXNvbHZlUHJvcHMoe2NvbXBvbmVudDpjb21wb25lbnQsY29uZmlnOmNvbmZpZyxleGlzdGluZ0tleU1hcDpleGlzdGluZ0tleU1hcCxleHRyYVN0YXRlS2V5TWFwOmV4dHJhU3RhdGVLZXlNYXAscHJvcHM6cmVuZGVyZWRFbGVtZW50LnByb3BzfSk7bmV3UHJvcHM9X3J1blBsdWdpbnMoe2NvbXBvbmVudDpjb21wb25lbnQsY29uZmlnOmNvbmZpZyxleGlzdGluZ0tleU1hcDpleGlzdGluZ0tleU1hcCxwcm9wczpuZXdQcm9wcyxyZW5kZXJlZEVsZW1lbnQ6cmVuZGVyZWRFbGVtZW50fSk7Ly8gSWYgbm90aGluZyBjaGFuZ2VkLCBkb24ndCBib3RoZXIgY2xvbmluZyB0aGUgZWxlbWVudC4gTWlnaHQgYmUgYSBiaXRcbi8vIHdhc3RlZnVsLCBhcyB3ZSBhZGQgdGhlIHNlbnRpbmVsIHRvIHN0b3AgZG91YmxlLXByb2Nlc3Npbmcgd2hlbiB3ZSBjbG9uZS5cbi8vIEFzc3VtZSBiZW5pZ24gZG91YmxlLXByb2Nlc3NpbmcgaXMgYmV0dGVyIHRoYW4gdW5uZWVkZWQgY2xvbmluZy5cbmlmKG5ld0NoaWxkcmVuPT09Y2hpbGRyZW4mJm5ld1Byb3BzPT09cmVuZGVyZWRFbGVtZW50LnByb3BzKXtyZXR1cm57ZXh0cmFTdGF0ZUtleU1hcDpleHRyYVN0YXRlS2V5TWFwLGVsZW1lbnQ6cmVuZGVyZWRFbGVtZW50fTt9dmFyIGVsZW1lbnQ9X2Nsb25lRWxlbWVudChyZW5kZXJlZEVsZW1lbnQsbmV3UHJvcHMhPT1yZW5kZXJlZEVsZW1lbnQucHJvcHM/bmV3UHJvcHM6e30sbmV3Q2hpbGRyZW4pO3JldHVybntleHRyYVN0YXRlS2V5TWFwOmV4dHJhU3RhdGVLZXlNYXAsZWxlbWVudDplbGVtZW50fTt9Oy8qIGVzbGludC1lbmFibGUgbWF4LXBhcmFtcyAqLy8vIE9ubHkgZm9yIHVzZSBieSB0ZXN0c1xuaWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYhPT0ncHJvZHVjdGlvbicpe19yZXNvbHZlU3R5bGVzNS5fX2NsZWFyU3RhdGVGb3JUZXN0cz1mdW5jdGlvbigpe2dsb2JhbFN0YXRlPXt9O307X3Jlc29sdmVTdHlsZXM1Ll9fc2V0VGVzdE1vZGU9ZnVuY3Rpb24oaXNFbmFibGVkKXtfX2lzVGVzdE1vZGVFbmFibGVkPWlzRW5hYmxlZDt9O312YXIgX2RlZmF1bHQ9X3Jlc29sdmVTdHlsZXM1O2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL3Jlc29sdmUtc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPWFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlO3ZhciBfYXBwZW5kUHhJZk5lZWRlZD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FwcGVuZC1weC1pZi1uZWVkZWRcIikpO3ZhciBfbWFwT2JqZWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWFwLW9iamVjdFwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfTt9ZnVuY3Rpb24gYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWUoc3R5bGUpe3JldHVybigwLF9tYXBPYmplY3RbXCJkZWZhdWx0XCJdKShzdHlsZSxmdW5jdGlvbihyZXN1bHQsa2V5KXtyZXR1cm4oMCxfYXBwZW5kUHhJZk5lZWRlZFtcImRlZmF1bHRcIl0pKGtleSxzdHlsZVtrZXldKSsnICFpbXBvcnRhbnQnO30pO31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9hcHBlbmQtaW1wb3J0YW50LXRvLWVhY2gtdmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09YXBwZW5kUHhJZk5lZWRlZDsvLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9cbi8vIGI4N2FhYmRmZTFiNzQ2MWU3MzMxYWJiMzYwMWQ5ZTZiYjI3NTQ0YmMvXG4vLyBwYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9DU1NQcm9wZXJ0eS5qc1xudmFyIGlzVW5pdGxlc3NOdW1iZXI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OnRydWUsYm9yZGVySW1hZ2VPdXRzZXQ6dHJ1ZSxib3JkZXJJbWFnZVNsaWNlOnRydWUsYm9yZGVySW1hZ2VXaWR0aDp0cnVlLGJveEZsZXg6dHJ1ZSxib3hGbGV4R3JvdXA6dHJ1ZSxib3hPcmRpbmFsR3JvdXA6dHJ1ZSxjb2x1bW5Db3VudDp0cnVlLGNvbHVtbnM6dHJ1ZSxmbGV4OnRydWUsZmxleEdyb3c6dHJ1ZSxmbGV4UG9zaXRpdmU6dHJ1ZSxmbGV4U2hyaW5rOnRydWUsZmxleE5lZ2F0aXZlOnRydWUsZmxleE9yZGVyOnRydWUsZ3JpZEFyZWE6dHJ1ZSxncmlkUm93OnRydWUsZ3JpZFJvd0VuZDp0cnVlLGdyaWRSb3dTcGFuOnRydWUsZ3JpZFJvd1N0YXJ0OnRydWUsZ3JpZENvbHVtbjp0cnVlLGdyaWRDb2x1bW5FbmQ6dHJ1ZSxncmlkQ29sdW1uU3Bhbjp0cnVlLGdyaWRDb2x1bW5TdGFydDp0cnVlLGZvbnRXZWlnaHQ6dHJ1ZSxsaW5lQ2xhbXA6dHJ1ZSxsaW5lSGVpZ2h0OnRydWUsb3BhY2l0eTp0cnVlLG9yZGVyOnRydWUsb3JwaGFuczp0cnVlLHRhYlNpemU6dHJ1ZSx3aWRvd3M6dHJ1ZSx6SW5kZXg6dHJ1ZSx6b29tOnRydWUsLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuZmlsbE9wYWNpdHk6dHJ1ZSxmbG9vZE9wYWNpdHk6dHJ1ZSxzdG9wT3BhY2l0eTp0cnVlLHN0cm9rZURhc2hhcnJheTp0cnVlLHN0cm9rZURhc2hvZmZzZXQ6dHJ1ZSxzdHJva2VNaXRlcmxpbWl0OnRydWUsc3Ryb2tlT3BhY2l0eTp0cnVlLHN0cm9rZVdpZHRoOnRydWV9O2Z1bmN0aW9uIGFwcGVuZFB4SWZOZWVkZWQocHJvcGVydHlOYW1lLHZhbHVlKXt2YXIgbmVlZHNQeFN1ZmZpeD0haXNVbml0bGVzc051bWJlcltwcm9wZXJ0eU5hbWVdJiZ0eXBlb2YgdmFsdWU9PT0nbnVtYmVyJyYmdmFsdWUhPT0wO3JldHVybiBuZWVkc1B4U3VmZml4P3ZhbHVlKydweCc6dmFsdWU7fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL2FwcGVuZC1weC1pZi1uZWVkZWQuanNcbi8vIG1vZHVsZSBpZCA9IDkzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09bWFwT2JqZWN0O2Z1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsbWFwcGVyKXtyZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LGtleSl7cmVzdWx0W2tleV09bWFwcGVyKG9iamVjdFtrZXldLGtleSk7cmV0dXJuIHJlc3VsdDt9LHt9KTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvbWFwLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT1jc3NSdWxlU2V0VG9TdHJpbmc7dmFyIF9hcHBlbmRQeElmTmVlZGVkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYXBwZW5kLXB4LWlmLW5lZWRlZFwiKSk7dmFyIF9jYW1lbENhc2VQcm9wc1RvRGFzaENhc2U9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYW1lbC1jYXNlLXByb3BzLXRvLWRhc2gtY2FzZVwiKSk7dmFyIF9tYXBPYmplY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tYXAtb2JqZWN0XCIpKTt2YXIgX3ByZWZpeGVyPXJlcXVpcmUoXCIuL3ByZWZpeGVyXCIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian07fWZ1bmN0aW9uIGNyZWF0ZU1hcmt1cEZvclN0eWxlcyhzdHlsZSl7cmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlKS5tYXAoZnVuY3Rpb24ocHJvcGVydHkpe3JldHVybiBwcm9wZXJ0eSsnOiAnK3N0eWxlW3Byb3BlcnR5XSsnOyc7fSkuam9pbignXFxuJyk7fWZ1bmN0aW9uIGNzc1J1bGVTZXRUb1N0cmluZyhzZWxlY3RvcixydWxlcyx1c2VyQWdlbnQpe2lmKCFydWxlcyl7cmV0dXJuJyc7fXZhciBydWxlc1dpdGhQeD0oMCxfbWFwT2JqZWN0W1wiZGVmYXVsdFwiXSkocnVsZXMsZnVuY3Rpb24odmFsdWUsa2V5KXtyZXR1cm4oMCxfYXBwZW5kUHhJZk5lZWRlZFtcImRlZmF1bHRcIl0pKGtleSx2YWx1ZSk7fSk7dmFyIHByZWZpeGVkUnVsZXM9KDAsX3ByZWZpeGVyLmdldFByZWZpeGVkU3R5bGUpKHJ1bGVzV2l0aFB4LHVzZXJBZ2VudCk7dmFyIGNzc1ByZWZpeGVkUnVsZXM9KDAsX2NhbWVsQ2FzZVByb3BzVG9EYXNoQ2FzZVtcImRlZmF1bHRcIl0pKHByZWZpeGVkUnVsZXMpO3ZhciBzZXJpYWxpemVkUnVsZXM9Y3JlYXRlTWFya3VwRm9yU3R5bGVzKGNzc1ByZWZpeGVkUnVsZXMpO3JldHVybiBzZWxlY3Rvcisneycrc2VyaWFsaXplZFJ1bGVzKyd9Jzt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvY3NzLXJ1bGUtc2V0LXRvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT1leHBvcnRzLmNhbWVsQ2FzZVRvRGFzaENhc2U9dm9pZCAwO3ZhciBfY2FtZWxDYXNlUmVnZXg9LyhbYS16XSk/KFtBLVpdKS9nO3ZhciBfY2FtZWxDYXNlUmVwbGFjZXI9ZnVuY3Rpb24gX2NhbWVsQ2FzZVJlcGxhY2VyKG1hdGNoLHAxLHAyKXtyZXR1cm4ocDF8fCcnKSsnLScrcDIudG9Mb3dlckNhc2UoKTt9O3ZhciBjYW1lbENhc2VUb0Rhc2hDYXNlPWZ1bmN0aW9uIGNhbWVsQ2FzZVRvRGFzaENhc2Uocyl7cmV0dXJuIHMucmVwbGFjZShfY2FtZWxDYXNlUmVnZXgsX2NhbWVsQ2FzZVJlcGxhY2VyKTt9O2V4cG9ydHMuY2FtZWxDYXNlVG9EYXNoQ2FzZT1jYW1lbENhc2VUb0Rhc2hDYXNlO3ZhciBjYW1lbENhc2VQcm9wc1RvRGFzaENhc2U9ZnVuY3Rpb24gY2FtZWxDYXNlUHJvcHNUb0Rhc2hDYXNlKHByZWZpeGVkU3R5bGUpey8vIFNpbmNlIHByZWZpeCBpcyBleHBlY3RlZCB0byB3b3JrIG9uIGlubGluZSBzdHlsZSBvYmplY3RzLCB3ZSBtdXN0XG4vLyB0cmFuc2xhdGUgdGhlIGtleXMgdG8gZGFzaCBjYXNlIGZvciByZW5kZXJpbmcgdG8gQ1NTLlxucmV0dXJuIE9iamVjdC5rZXlzKHByZWZpeGVkU3R5bGUpLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsa2V5KXt2YXIgZGFzaENhc2VLZXk9Y2FtZWxDYXNlVG9EYXNoQ2FzZShrZXkpOy8vIEZpeCBJRSB2ZW5kb3IgcHJlZml4XG5pZigvXm1zLS8udGVzdChkYXNoQ2FzZUtleSkpe2Rhc2hDYXNlS2V5PVwiLVwiLmNvbmNhdChkYXNoQ2FzZUtleSk7fXJlc3VsdFtkYXNoQ2FzZUtleV09cHJlZml4ZWRTdHlsZVtrZXldO3JldHVybiByZXN1bHQ7fSx7fSk7fTt2YXIgX2RlZmF1bHQ9Y2FtZWxDYXNlUHJvcHNUb0Rhc2hDYXNlO2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL2NhbWVsLWNhc2UtcHJvcHMtdG8tZGFzaC1jYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3R5cGVvZjI9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5nZXRQcmVmaXhlZEtleWZyYW1lcz1nZXRQcmVmaXhlZEtleWZyYW1lcztleHBvcnRzLmdldFByZWZpeGVkU3R5bGU9Z2V0UHJlZml4ZWRTdHlsZTt2YXIgX2NyZWF0ZVByZWZpeGVyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvY3JlYXRlUHJlZml4ZXJcIikpO3ZhciBfY3JlYXRlUHJlZml4ZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL2NyZWF0ZVByZWZpeGVyXCIpKTt2YXIgX2V4ZW52PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImV4ZW52XCIpKTt2YXIgX3N0YXRpYz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3ByZWZpeC1kYXRhL3N0YXRpY1wiKSk7dmFyIF9keW5hbWljPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcHJlZml4LWRhdGEvZHluYW1pY1wiKSk7dmFyIF9jYW1lbENhc2VQcm9wc1RvRGFzaENhc2U9cmVxdWlyZShcIi4vY2FtZWwtY2FzZS1wcm9wcy10by1kYXNoLWNhc2VcIik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfTt9ZnVuY3Rpb24gX3R5cGVvZihvYmope2lmKHR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJl90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcik9PT1cInN5bWJvbFwiKXtfdHlwZW9mPWZ1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gdHlwZW9mIG9iaj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihvYmopO307fWVsc2V7X3R5cGVvZj1mdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iaj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihvYmopO307fXJldHVybiBfdHlwZW9mKG9iaik7fXZhciBwcmVmaXhBbGw9KDAsX2NyZWF0ZVByZWZpeGVyW1wiZGVmYXVsdFwiXSkoX3N0YXRpY1tcImRlZmF1bHRcIl0pO3ZhciBJbmxpbmVTdHlsZVByZWZpeGVyPSgwLF9jcmVhdGVQcmVmaXhlcjJbXCJkZWZhdWx0XCJdKShfZHluYW1pY1tcImRlZmF1bHRcIl0scHJlZml4QWxsKTtmdW5jdGlvbiB0cmFuc2Zvcm1WYWx1ZXMoc3R5bGUpe3JldHVybiBPYmplY3Qua2V5cyhzdHlsZSkucmVkdWNlKGZ1bmN0aW9uKG5ld1N0eWxlLGtleSl7dmFyIHZhbHVlPXN0eWxlW2tleV07aWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpe3ZhbHVlPXZhbHVlLmpvaW4oJzsnK2tleSsnOicpO31lbHNlIGlmKHZhbHVlJiZfdHlwZW9mKHZhbHVlKT09PSdvYmplY3QnJiZ0eXBlb2YgdmFsdWUudG9TdHJpbmc9PT0nZnVuY3Rpb24nKXt2YWx1ZT12YWx1ZS50b1N0cmluZygpO31uZXdTdHlsZVtrZXldPXZhbHVlO3JldHVybiBuZXdTdHlsZTt9LHt9KTt9Ly8gRmxhdHRlbiBwcmVmaXhlZCB2YWx1ZXMgdGhhdCBhcmUgYXJyYXlzIHRvIHN0cmluZ3MuXG4vL1xuLy8gV2UgZ2V0IHByZWZpeGVkIHN0eWxlcyBiYWNrIGluIHRoZSBmb3JtIG9mOlxuLy8gLSBgZGlzcGxheTogXCJmbGV4XCJgIE9SXG4vLyAtIGBkaXNwbGF5OiBcIi13ZWJraXQtZmxleFwiYCBPUlxuLy8gLSBgZGlzcGxheTogWy8qIC4uLiAqLywgXCItd2Via2l0LWZsZXhcIiwgXCJmbGV4XCJdXG4vL1xuLy8gVGhlIGxhc3QgZm9ybSBpcyBwcm9ibGVtYXRpYyBmb3IgZXZlbnR1YWwgdXNlIGluIHRoZSBicm93c2VyIGFuZCBzZXJ2ZXJcbi8vIHJlbmRlci4gTW9yZSBjb25mdXNpbmdseSwgd2UgaGF2ZSB0byBkbyAqKmRpZmZlcmVudCoqIHRoaW5ncyBvbiB0aGVcbi8vIGJyb3dzZXIgYW5kIHNlcnZlciAobm90ZWQgaW5saW5lIGJlbG93KS5cbi8vXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRm9ybWlkYWJsZUxhYnMvcmFkaXVtL2lzc3Vlcy85NThcbmZ1bmN0aW9uIGZsYXR0ZW5TdHlsZVZhbHVlcyhzdHlsZSl7cmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlKS5yZWR1Y2UoZnVuY3Rpb24obmV3U3R5bGUsa2V5KXt2YXIgdmFsPXN0eWxlW2tleV07aWYoQXJyYXkuaXNBcnJheSh2YWwpKXtpZihfZXhlbnZbXCJkZWZhdWx0XCJdLmNhblVzZURPTSl7Ly8gRm9yIHRoZSAqKmJyb3dzZXIqKiwgd2hlbiBmYWNlZCB3aXRoIG11bHRpcGxlIHZhbHVlcywgd2UganVzdCB0YWtlXG4vLyB0aGUgKipsYXN0Kiogb25lLCB3aGljaCBpcyB0aGUgb3JpZ2luYWwgcGFzc2VkIGluIHZhbHVlIGJlZm9yZVxuLy8gcHJlZml4aW5nLiBUaGlzIF9zaG91bGRfIHdvcmssIGJlY2F1c2UgYGlubGluZS1zdHlsZS1wcmVmaXhlcmBcbi8vIHdlJ3JlIGp1c3QgcGFzc2luZyB0aHJvdWdoIHdoYXQgd291bGQgaGFwcGVuIHdpdGhvdXQgSVNQLlxudmFsPXZhbFt2YWwubGVuZ3RoLTFdLnRvU3RyaW5nKCk7fWVsc2V7Ly8gRm9yIHRoZSAqKnNlcnZlcioqLCB3ZSBqdXN0IGNvbmNhdGVuYXRlIHRoaW5ncyB0b2dldGhlciBhbmQgY29udmVydFxuLy8gdGhlIHN0eWxlIG9iamVjdCB2YWx1ZXMgaW50byBhIGhhY2tlZC11cCBzdHJpbmcgb2YgbGlrZSBgZGlzcGxheTpcbi8vIFwiLXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleFwiYCB0aGF0IHdpbGwgU1NSIHJlbmRlciBjb3JyZWN0bHkgdG8gbGlrZVxuLy8gYFwiZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTpmbGV4XCJgIGJ1dCB3b3VsZCBvdGhlcndpc2UgYmVcbi8vIHRvdGFsbHkgaW52YWxpZCB2YWx1ZXMuXG4vLyBXZSBjb252ZXJ0IGtleXMgdG8gZGFzaC1jYXNlIG9ubHkgZm9yIHRoZSBzZXJpYWxpemUgdmFsdWVzIGFuZFxuLy8gbGVhdmUgdGhlIHJlYWwga2V5IGNhbWVsLWNhc2VkIHNvIGl0J3MgYXMgZXhwZWN0ZWQgdG8gUmVhY3QgYW5kXG4vLyBvdGhlciBwYXJ0cyBvZiB0aGUgcHJvY2Vzc2luZyBjaGFpbi5cbnZhbD12YWwuam9pbihcIjtcIi5jb25jYXQoKDAsX2NhbWVsQ2FzZVByb3BzVG9EYXNoQ2FzZS5jYW1lbENhc2VUb0Rhc2hDYXNlKShrZXkpLFwiOlwiKSk7fX1uZXdTdHlsZVtrZXldPXZhbDtyZXR1cm4gbmV3U3R5bGU7fSx7fSk7fXZhciBfaGFzV2FybmVkQWJvdXRVc2VyQWdlbnQ9ZmFsc2U7dmFyIF9sYXN0VXNlckFnZW50O3ZhciBfY2FjaGVkUHJlZml4ZXI7ZnVuY3Rpb24gZ2V0UHJlZml4ZXIodXNlckFnZW50KXt2YXIgYWN0dWFsVXNlckFnZW50PXVzZXJBZ2VudHx8Z2xvYmFsJiZnbG9iYWwubmF2aWdhdG9yJiZnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudDtpZihwcm9jZXNzLmVudi5OT0RFX0VOViE9PSdwcm9kdWN0aW9uJyl7aWYoIWFjdHVhbFVzZXJBZ2VudCYmIV9oYXNXYXJuZWRBYm91dFVzZXJBZ2VudCl7LyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL2NvbnNvbGUud2FybignUmFkaXVtOiB1c2VyQWdlbnQgc2hvdWxkIGJlIHN1cHBsaWVkIGZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFNlZSAnKydodHRwczovL2dpdGh1Yi5jb20vRm9ybWlkYWJsZUxhYnMvcmFkaXVtL3RyZWUvbWFzdGVyL2RvY3MvYXBpI3JhZGl1bSAnKydmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTsvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9faGFzV2FybmVkQWJvdXRVc2VyQWdlbnQ9dHJ1ZTt9fWlmKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Rlc3QnfHwhX2NhY2hlZFByZWZpeGVyfHxhY3R1YWxVc2VyQWdlbnQhPT1fbGFzdFVzZXJBZ2VudCl7aWYoYWN0dWFsVXNlckFnZW50PT09J2FsbCcpe19jYWNoZWRQcmVmaXhlcj17cHJlZml4OnByZWZpeEFsbCxwcmVmaXhlZEtleWZyYW1lczona2V5ZnJhbWVzJ307fWVsc2V7X2NhY2hlZFByZWZpeGVyPW5ldyBJbmxpbmVTdHlsZVByZWZpeGVyKHt1c2VyQWdlbnQ6YWN0dWFsVXNlckFnZW50fSk7fV9sYXN0VXNlckFnZW50PWFjdHVhbFVzZXJBZ2VudDt9cmV0dXJuIF9jYWNoZWRQcmVmaXhlcjt9ZnVuY3Rpb24gZ2V0UHJlZml4ZWRLZXlmcmFtZXModXNlckFnZW50KXtyZXR1cm4gZ2V0UHJlZml4ZXIodXNlckFnZW50KS5wcmVmaXhlZEtleWZyYW1lc3x8J2tleWZyYW1lcyc7fS8vIFJldHVybnMgYSBuZXcgc3R5bGUgb2JqZWN0IHdpdGggdmVuZG9yIHByZWZpeGVzIGFkZGVkIHRvIHByb3BlcnR5IG5hbWVzIGFuZFxuLy8gdmFsdWVzLlxuZnVuY3Rpb24gZ2V0UHJlZml4ZWRTdHlsZShzdHlsZSx1c2VyQWdlbnQpe3ZhciBzdHlsZVdpdGhGYWxsYmFja3M9dHJhbnNmb3JtVmFsdWVzKHN0eWxlKTt2YXIgcHJlZml4ZXI9Z2V0UHJlZml4ZXIodXNlckFnZW50KTt2YXIgcHJlZml4ZWRTdHlsZT1wcmVmaXhlci5wcmVmaXgoc3R5bGVXaXRoRmFsbGJhY2tzKTt2YXIgZmxhdHRlbmVkU3R5bGU9ZmxhdHRlblN0eWxlVmFsdWVzKHByZWZpeGVkU3R5bGUpO3JldHVybiBmbGF0dGVuZWRTdHlsZTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcHJlZml4ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1jcmVhdGVQcmVmaXhlcjt2YXIgX3ByZWZpeFByb3BlcnR5PXJlcXVpcmUoJy4uL3V0aWxzL3ByZWZpeFByb3BlcnR5Jyk7dmFyIF9wcmVmaXhQcm9wZXJ0eTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4UHJvcGVydHkpO3ZhciBfcHJlZml4VmFsdWU9cmVxdWlyZSgnLi4vdXRpbHMvcHJlZml4VmFsdWUnKTt2YXIgX3ByZWZpeFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhWYWx1ZSk7dmFyIF9hZGROZXdWYWx1ZXNPbmx5PXJlcXVpcmUoJy4uL3V0aWxzL2FkZE5ld1ZhbHVlc09ubHknKTt2YXIgX2FkZE5ld1ZhbHVlc09ubHkyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZE5ld1ZhbHVlc09ubHkpO3ZhciBfaXNPYmplY3Q9cmVxdWlyZSgnLi4vdXRpbHMvaXNPYmplY3QnKTt2YXIgX2lzT2JqZWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09iamVjdCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBjcmVhdGVQcmVmaXhlcihfcmVmKXt2YXIgcHJlZml4TWFwPV9yZWYucHJlZml4TWFwLHBsdWdpbnM9X3JlZi5wbHVnaW5zO2Z1bmN0aW9uIHByZWZpeEFsbChzdHlsZSl7Zm9yKHZhciBwcm9wZXJ0eSBpbiBzdHlsZSl7dmFyIHZhbHVlPXN0eWxlW3Byb3BlcnR5XTsvLyBoYW5kbGUgbmVzdGVkIG9iamVjdHNcbmlmKCgwLF9pc09iamVjdDIuZGVmYXVsdCkodmFsdWUpKXtzdHlsZVtwcm9wZXJ0eV09cHJlZml4QWxsKHZhbHVlKTsvLyBoYW5kbGUgYXJyYXkgdmFsdWVzXG59ZWxzZSBpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7dmFyIGNvbWJpbmVkVmFsdWU9W107Zm9yKHZhciBpPTAsbGVuPXZhbHVlLmxlbmd0aDtpPGxlbjsrK2kpe3ZhciBwcm9jZXNzZWRWYWx1ZT0oMCxfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMscHJvcGVydHksdmFsdWVbaV0sc3R5bGUscHJlZml4TWFwKTsoMCxfYWRkTmV3VmFsdWVzT25seTIuZGVmYXVsdCkoY29tYmluZWRWYWx1ZSxwcm9jZXNzZWRWYWx1ZXx8dmFsdWVbaV0pO30vLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbi8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbmlmKGNvbWJpbmVkVmFsdWUubGVuZ3RoPjApe3N0eWxlW3Byb3BlcnR5XT1jb21iaW5lZFZhbHVlO319ZWxzZXt2YXIgX3Byb2Nlc3NlZFZhbHVlPSgwLF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucyxwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxwcmVmaXhNYXApOy8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuaWYoX3Byb2Nlc3NlZFZhbHVlKXtzdHlsZVtwcm9wZXJ0eV09X3Byb2Nlc3NlZFZhbHVlO31zdHlsZT0oMCxfcHJlZml4UHJvcGVydHkyLmRlZmF1bHQpKHByZWZpeE1hcCxwcm9wZXJ0eSxzdHlsZSk7fX1yZXR1cm4gc3R5bGU7fXJldHVybiBwcmVmaXhBbGw7fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9jcmVhdGVQcmVmaXhlci5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PXByZWZpeFByb3BlcnR5O3ZhciBfY2FwaXRhbGl6ZVN0cmluZz1yZXF1aXJlKCcuL2NhcGl0YWxpemVTdHJpbmcnKTt2YXIgX2NhcGl0YWxpemVTdHJpbmcyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gcHJlZml4UHJvcGVydHkocHJlZml4UHJvcGVydGllcyxwcm9wZXJ0eSxzdHlsZSl7aWYocHJlZml4UHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpe3ZhciBuZXdTdHlsZT17fTt2YXIgcmVxdWlyZWRQcmVmaXhlcz1wcmVmaXhQcm9wZXJ0aWVzW3Byb3BlcnR5XTt2YXIgY2FwaXRhbGl6ZWRQcm9wZXJ0eT0oMCxfY2FwaXRhbGl6ZVN0cmluZzIuZGVmYXVsdCkocHJvcGVydHkpO3ZhciBrZXlzPU9iamVjdC5rZXlzKHN0eWxlKTtmb3IodmFyIGk9MDtpPGtleXMubGVuZ3RoO2krKyl7dmFyIHN0eWxlUHJvcGVydHk9a2V5c1tpXTtpZihzdHlsZVByb3BlcnR5PT09cHJvcGVydHkpe2Zvcih2YXIgaj0wO2o8cmVxdWlyZWRQcmVmaXhlcy5sZW5ndGg7aisrKXtuZXdTdHlsZVtyZXF1aXJlZFByZWZpeGVzW2pdK2NhcGl0YWxpemVkUHJvcGVydHldPXN0eWxlW3Byb3BlcnR5XTt9fW5ld1N0eWxlW3N0eWxlUHJvcGVydHldPXN0eWxlW3N0eWxlUHJvcGVydHldO31yZXR1cm4gbmV3U3R5bGU7fXJldHVybiBzdHlsZTt9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvcHJlZml4UHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDk5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWNhcGl0YWxpemVTdHJpbmc7ZnVuY3Rpb24gY2FwaXRhbGl6ZVN0cmluZyhzdHIpe3JldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrc3RyLnNsaWNlKDEpO31tb2R1bGUuZXhwb3J0cz1leHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1wcmVmaXhWYWx1ZTtmdW5jdGlvbiBwcmVmaXhWYWx1ZShwbHVnaW5zLHByb3BlcnR5LHZhbHVlLHN0eWxlLG1ldGFEYXRhKXtmb3IodmFyIGk9MCxsZW49cGx1Z2lucy5sZW5ndGg7aTxsZW47KytpKXt2YXIgcHJvY2Vzc2VkVmFsdWU9cGx1Z2luc1tpXShwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxtZXRhRGF0YSk7Ly8gd2UgY2FuIHN0b3AgcHJvY2Vzc2luZyBpZiBhIHZhbHVlIGlzIHJldHVybmVkXG4vLyBhcyBhbGwgcGx1Z2luIGNyaXRlcmlhIGFyZSB1bmlxdWVcbmlmKHByb2Nlc3NlZFZhbHVlKXtyZXR1cm4gcHJvY2Vzc2VkVmFsdWU7fX19bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhWYWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWFkZE5ld1ZhbHVlc09ubHk7ZnVuY3Rpb24gYWRkSWZOZXcobGlzdCx2YWx1ZSl7aWYobGlzdC5pbmRleE9mKHZhbHVlKT09PS0xKXtsaXN0LnB1c2godmFsdWUpO319ZnVuY3Rpb24gYWRkTmV3VmFsdWVzT25seShsaXN0LHZhbHVlcyl7aWYoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKXtmb3IodmFyIGk9MCxsZW49dmFsdWVzLmxlbmd0aDtpPGxlbjsrK2kpe2FkZElmTmV3KGxpc3QsdmFsdWVzW2ldKTt9fWVsc2V7YWRkSWZOZXcobGlzdCx2YWx1ZXMpO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9hZGROZXdWYWx1ZXNPbmx5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9aXNPYmplY3Q7ZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCYmIUFycmF5LmlzQXJyYXkodmFsdWUpO31tb2R1bGUuZXhwb3J0cz1leHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2lzT2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtleHBvcnRzLmRlZmF1bHQ9Y3JlYXRlUHJlZml4ZXI7dmFyIF9nZXRCcm93c2VySW5mb3JtYXRpb249cmVxdWlyZSgnLi4vdXRpbHMvZ2V0QnJvd3NlckluZm9ybWF0aW9uJyk7dmFyIF9nZXRCcm93c2VySW5mb3JtYXRpb24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEJyb3dzZXJJbmZvcm1hdGlvbik7dmFyIF9nZXRQcmVmaXhlZEtleWZyYW1lcz1yZXF1aXJlKCcuLi91dGlscy9nZXRQcmVmaXhlZEtleWZyYW1lcycpO3ZhciBfZ2V0UHJlZml4ZWRLZXlmcmFtZXMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkS2V5ZnJhbWVzKTt2YXIgX2NhcGl0YWxpemVTdHJpbmc9cmVxdWlyZSgnLi4vdXRpbHMvY2FwaXRhbGl6ZVN0cmluZycpO3ZhciBfY2FwaXRhbGl6ZVN0cmluZzI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FwaXRhbGl6ZVN0cmluZyk7dmFyIF9hZGROZXdWYWx1ZXNPbmx5PXJlcXVpcmUoJy4uL3V0aWxzL2FkZE5ld1ZhbHVlc09ubHknKTt2YXIgX2FkZE5ld1ZhbHVlc09ubHkyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZE5ld1ZhbHVlc09ubHkpO3ZhciBfaXNPYmplY3Q9cmVxdWlyZSgnLi4vdXRpbHMvaXNPYmplY3QnKTt2YXIgX2lzT2JqZWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09iamVjdCk7dmFyIF9wcmVmaXhWYWx1ZT1yZXF1aXJlKCcuLi91dGlscy9wcmVmaXhWYWx1ZScpO3ZhciBfcHJlZml4VmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIGNyZWF0ZVByZWZpeGVyKF9yZWYpe3ZhciBwcmVmaXhNYXA9X3JlZi5wcmVmaXhNYXAscGx1Z2lucz1fcmVmLnBsdWdpbnM7dmFyIGZhbGxiYWNrPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTpmdW5jdGlvbihzdHlsZSl7cmV0dXJuIHN0eWxlO307cmV0dXJuIGZ1bmN0aW9uKCl7LyoqXG4gICAgICogSW5zdGFudGlhbnRlIGEgbmV3IHByZWZpeGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJBZ2VudCAtIHVzZXJBZ2VudCB0byBnYXRoZXIgcHJlZml4IGluZm9ybWF0aW9uIGFjY29yZGluZyB0byBjYW5pdXNlLmNvbVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZWVwVW5wcmVmaXhlZCAtIGtlZXBzIHVucHJlZml4ZWQgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gICAgICovZnVuY3Rpb24gUHJlZml4ZXIoKXt2YXIgb3B0aW9ucz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06e307X2NsYXNzQ2FsbENoZWNrKHRoaXMsUHJlZml4ZXIpO3ZhciBkZWZhdWx0VXNlckFnZW50PXR5cGVvZiBuYXZpZ2F0b3IhPT0ndW5kZWZpbmVkJz9uYXZpZ2F0b3IudXNlckFnZW50OnVuZGVmaW5lZDt0aGlzLl91c2VyQWdlbnQ9b3B0aW9ucy51c2VyQWdlbnR8fGRlZmF1bHRVc2VyQWdlbnQ7dGhpcy5fa2VlcFVucHJlZml4ZWQ9b3B0aW9ucy5rZWVwVW5wcmVmaXhlZHx8ZmFsc2U7aWYodGhpcy5fdXNlckFnZW50KXt0aGlzLl9icm93c2VySW5mbz0oMCxfZ2V0QnJvd3NlckluZm9ybWF0aW9uMi5kZWZhdWx0KSh0aGlzLl91c2VyQWdlbnQpO30vLyBDaGVja3MgaWYgdGhlIHVzZXJBZ2VudCB3YXMgcmVzb2x2ZWQgY29ycmVjdGx5XG5pZih0aGlzLl9icm93c2VySW5mbyYmdGhpcy5fYnJvd3NlckluZm8uY3NzUHJlZml4KXt0aGlzLnByZWZpeGVkS2V5ZnJhbWVzPSgwLF9nZXRQcmVmaXhlZEtleWZyYW1lczIuZGVmYXVsdCkodGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlck5hbWUsdGhpcy5fYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24sdGhpcy5fYnJvd3NlckluZm8uY3NzUHJlZml4KTt9ZWxzZXt0aGlzLl91c2VGYWxsYmFjaz10cnVlO3JldHVybiBmYWxzZTt9dmFyIHByZWZpeERhdGE9dGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlck5hbWUmJnByZWZpeE1hcFt0aGlzLl9icm93c2VySW5mby5icm93c2VyTmFtZV07aWYocHJlZml4RGF0YSl7dGhpcy5fcmVxdWlyZXNQcmVmaXg9e307Zm9yKHZhciBwcm9wZXJ0eSBpbiBwcmVmaXhEYXRhKXtpZihwcmVmaXhEYXRhW3Byb3BlcnR5XT49dGhpcy5fYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24pe3RoaXMuX3JlcXVpcmVzUHJlZml4W3Byb3BlcnR5XT10cnVlO319dGhpcy5faGFzUHJvcHNSZXF1aXJpbmdQcmVmaXg9T2JqZWN0LmtleXModGhpcy5fcmVxdWlyZXNQcmVmaXgpLmxlbmd0aD4wO31lbHNle3RoaXMuX3VzZUZhbGxiYWNrPXRydWU7fXRoaXMuX21ldGFEYXRhPXticm93c2VyVmVyc2lvbjp0aGlzLl9icm93c2VySW5mby5icm93c2VyVmVyc2lvbixicm93c2VyTmFtZTp0aGlzLl9icm93c2VySW5mby5icm93c2VyTmFtZSxjc3NQcmVmaXg6dGhpcy5fYnJvd3NlckluZm8uY3NzUHJlZml4LGpzUHJlZml4OnRoaXMuX2Jyb3dzZXJJbmZvLmpzUHJlZml4LGtlZXBVbnByZWZpeGVkOnRoaXMuX2tlZXBVbnByZWZpeGVkLHJlcXVpcmVzUHJlZml4OnRoaXMuX3JlcXVpcmVzUHJlZml4fTt9X2NyZWF0ZUNsYXNzKFByZWZpeGVyLFt7a2V5OidwcmVmaXgnLHZhbHVlOmZ1bmN0aW9uIHByZWZpeChzdHlsZSl7Ly8gdXNlIHN0YXRpYyBwcmVmaXhlciBhcyBmYWxsYmFjayBpZiB1c2VyQWdlbnQgY2FuIG5vdCBiZSByZXNvbHZlZFxuaWYodGhpcy5fdXNlRmFsbGJhY2spe3JldHVybiBmYWxsYmFjayhzdHlsZSk7fS8vIG9ubHkgYWRkIHByZWZpeGVzIGlmIG5lZWRlZFxuaWYoIXRoaXMuX2hhc1Byb3BzUmVxdWlyaW5nUHJlZml4KXtyZXR1cm4gc3R5bGU7fXJldHVybiB0aGlzLl9wcmVmaXhTdHlsZShzdHlsZSk7fX0se2tleTonX3ByZWZpeFN0eWxlJyx2YWx1ZTpmdW5jdGlvbiBfcHJlZml4U3R5bGUoc3R5bGUpe2Zvcih2YXIgcHJvcGVydHkgaW4gc3R5bGUpe3ZhciB2YWx1ZT1zdHlsZVtwcm9wZXJ0eV07Ly8gaGFuZGxlIG5lc3RlZCBvYmplY3RzXG5pZigoMCxfaXNPYmplY3QyLmRlZmF1bHQpKHZhbHVlKSl7c3R5bGVbcHJvcGVydHldPXRoaXMucHJlZml4KHZhbHVlKTsvLyBoYW5kbGUgYXJyYXkgdmFsdWVzXG59ZWxzZSBpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7dmFyIGNvbWJpbmVkVmFsdWU9W107Zm9yKHZhciBpPTAsbGVuPXZhbHVlLmxlbmd0aDtpPGxlbjsrK2kpe3ZhciBwcm9jZXNzZWRWYWx1ZT0oMCxfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMscHJvcGVydHksdmFsdWVbaV0sc3R5bGUsdGhpcy5fbWV0YURhdGEpOygwLF9hZGROZXdWYWx1ZXNPbmx5Mi5kZWZhdWx0KShjb21iaW5lZFZhbHVlLHByb2Nlc3NlZFZhbHVlfHx2YWx1ZVtpXSk7fS8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuaWYoY29tYmluZWRWYWx1ZS5sZW5ndGg+MCl7c3R5bGVbcHJvcGVydHldPWNvbWJpbmVkVmFsdWU7fX1lbHNle3ZhciBfcHJvY2Vzc2VkVmFsdWU9KDAsX3ByZWZpeFZhbHVlMi5kZWZhdWx0KShwbHVnaW5zLHByb3BlcnR5LHZhbHVlLHN0eWxlLHRoaXMuX21ldGFEYXRhKTsvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbi8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbmlmKF9wcm9jZXNzZWRWYWx1ZSl7c3R5bGVbcHJvcGVydHldPV9wcm9jZXNzZWRWYWx1ZTt9Ly8gYWRkIHByZWZpeGVzIHRvIHByb3BlcnRpZXNcbmlmKHRoaXMuX3JlcXVpcmVzUHJlZml4Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSl7c3R5bGVbdGhpcy5fYnJvd3NlckluZm8uanNQcmVmaXgrKDAsX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV09dmFsdWU7aWYoIXRoaXMuX2tlZXBVbnByZWZpeGVkKXtkZWxldGUgc3R5bGVbcHJvcGVydHldO319fX1yZXR1cm4gc3R5bGU7fS8qKlxuICAgICAgICogUmV0dXJucyBhIHByZWZpeGVkIHZlcnNpb24gb2YgdGhlIHN0eWxlIG9iamVjdCB1c2luZyBhbGwgdmVuZG9yIHByZWZpeGVzXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVzIC0gU3R5bGUgb2JqZWN0IHRoYXQgZ2V0cyBwcmVmaXhlZCBwcm9wZXJ0aWVzIGFkZGVkXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFN0eWxlIG9iamVjdCB3aXRoIHByZWZpeGVkIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgICAgICovfV0sW3trZXk6J3ByZWZpeEFsbCcsdmFsdWU6ZnVuY3Rpb24gcHJlZml4QWxsKHN0eWxlcyl7cmV0dXJuIGZhbGxiYWNrKHN0eWxlcyk7fX1dKTtyZXR1cm4gUHJlZml4ZXI7fSgpO31tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL2NyZWF0ZVByZWZpeGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWdldEJyb3dzZXJJbmZvcm1hdGlvbjt2YXIgX2Jvd3Nlcj1yZXF1aXJlKCdib3dzZXInKTt2YXIgX2Jvd3NlcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm93c2VyKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fXZhciBwcmVmaXhCeUJyb3dzZXI9e2Nocm9tZTonV2Via2l0JyxzYWZhcmk6J1dlYmtpdCcsaW9zOidXZWJraXQnLGFuZHJvaWQ6J1dlYmtpdCcscGhhbnRvbTonV2Via2l0JyxvcGVyYTonV2Via2l0Jyx3ZWJvczonV2Via2l0JyxibGFja2JlcnJ5OidXZWJraXQnLGJhZGE6J1dlYmtpdCcsdGl6ZW46J1dlYmtpdCcsY2hyb21pdW06J1dlYmtpdCcsdml2YWxkaTonV2Via2l0JyxmaXJlZm94OidNb3onLHNlYW1vbmV5OidNb3onLHNhaWxmaXNoOidNb3onLG1zaWU6J21zJyxtc2VkZ2U6J21zJ307dmFyIGJyb3dzZXJCeUNhbkl1c2VBbGlhcz17Y2hyb21lOidjaHJvbWUnLGNocm9taXVtOidjaHJvbWUnLHNhZmFyaTonc2FmYXJpJyxmaXJmb3g6J2ZpcmVmb3gnLG1zZWRnZTonZWRnZScsb3BlcmE6J29wZXJhJyx2aXZhbGRpOidvcGVyYScsbXNpZTonaWUnfTtmdW5jdGlvbiBnZXRCcm93c2VyTmFtZShicm93c2VySW5mbyl7aWYoYnJvd3NlckluZm8uZmlyZWZveCl7cmV0dXJuJ2ZpcmVmb3gnO31pZihicm93c2VySW5mby5tb2JpbGV8fGJyb3dzZXJJbmZvLnRhYmxldCl7aWYoYnJvd3NlckluZm8uaW9zKXtyZXR1cm4naW9zX3NhZic7fWVsc2UgaWYoYnJvd3NlckluZm8uYW5kcm9pZCl7cmV0dXJuJ2FuZHJvaWQnO31lbHNlIGlmKGJyb3dzZXJJbmZvLm9wZXJhKXtyZXR1cm4nb3BfbWluaSc7fX1mb3IodmFyIGJyb3dzZXIgaW4gYnJvd3NlckJ5Q2FuSXVzZUFsaWFzKXtpZihicm93c2VySW5mby5oYXNPd25Qcm9wZXJ0eShicm93c2VyKSl7cmV0dXJuIGJyb3dzZXJCeUNhbkl1c2VBbGlhc1ticm93c2VyXTt9fX0vKipcbiAqIFVzZXMgYm93c2VyIHRvIGdldCBkZWZhdWx0IGJyb3dzZXIgYnJvd3NlckluZm9ybWF0aW9uIHN1Y2ggYXMgdmVyc2lvbiBhbmQgbmFtZVxuICogRXZhbHVhdGVzIGJvd3NlciBicm93c2VySW5mbyBhbmQgYWRkcyB2ZW5kb3JQcmVmaXggYnJvd3NlckluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlckFnZW50IC0gdXNlckFnZW50IHRoYXQgZ2V0cyBldmFsdWF0ZWRcbiAqL2Z1bmN0aW9uIGdldEJyb3dzZXJJbmZvcm1hdGlvbih1c2VyQWdlbnQpe3ZhciBicm93c2VySW5mbz1fYm93c2VyMi5kZWZhdWx0Ll9kZXRlY3QodXNlckFnZW50KTtpZihicm93c2VySW5mby55YW5kZXhicm93c2VyKXticm93c2VySW5mbz1fYm93c2VyMi5kZWZhdWx0Ll9kZXRlY3QodXNlckFnZW50LnJlcGxhY2UoL1lhQnJvd3NlclxcL1swLTkuXSovLCcnKSk7fWZvcih2YXIgYnJvd3NlciBpbiBwcmVmaXhCeUJyb3dzZXIpe2lmKGJyb3dzZXJJbmZvLmhhc093blByb3BlcnR5KGJyb3dzZXIpKXt2YXIgcHJlZml4PXByZWZpeEJ5QnJvd3Nlclticm93c2VyXTticm93c2VySW5mby5qc1ByZWZpeD1wcmVmaXg7YnJvd3NlckluZm8uY3NzUHJlZml4PSctJytwcmVmaXgudG9Mb3dlckNhc2UoKSsnLSc7YnJlYWs7fX1icm93c2VySW5mby5icm93c2VyTmFtZT1nZXRCcm93c2VyTmFtZShicm93c2VySW5mbyk7Ly8gRm9yIGNvcmRvdmEgSU9TIDggdGhlIHZlcnNpb24gaXMgbWlzc2luZywgc2V0IHRydW5jYXRlZCBvc3ZlcnNpb24gdG8gcHJldmVudCBOYU5cbmlmKGJyb3dzZXJJbmZvLnZlcnNpb24pe2Jyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uPXBhcnNlRmxvYXQoYnJvd3NlckluZm8udmVyc2lvbik7fWVsc2V7YnJvd3NlckluZm8uYnJvd3NlclZlcnNpb249cGFyc2VJbnQocGFyc2VGbG9hdChicm93c2VySW5mby5vc3ZlcnNpb24pLDEwKTt9YnJvd3NlckluZm8ub3NWZXJzaW9uPXBhcnNlRmxvYXQoYnJvd3NlckluZm8ub3N2ZXJzaW9uKTsvLyBpT1MgZm9yY2VzIGFsbCBicm93c2VycyB0byB1c2UgU2FmYXJpIHVuZGVyIHRoZSBob29kXG4vLyBhcyB0aGUgU2FmYXJpIHZlcnNpb24gc2VlbXMgdG8gbWF0Y2ggdGhlIGlPUyB2ZXJzaW9uXG4vLyB3ZSBqdXN0IGV4cGxpY2l0ZWx5IHVzZSB0aGUgb3N2ZXJzaW9uIGluc3RlYWRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2ZyaXNjaG1hbm4vaW5saW5lLXN0eWxlLXByZWZpeGVyL2lzc3Vlcy83MlxuaWYoYnJvd3NlckluZm8uYnJvd3Nlck5hbWU9PT0naW9zX3NhZicmJmJyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uPmJyb3dzZXJJbmZvLm9zVmVyc2lvbil7YnJvd3NlckluZm8uYnJvd3NlclZlcnNpb249YnJvd3NlckluZm8ub3NWZXJzaW9uO30vLyBzZXBlcmF0ZSBuYXRpdmUgYW5kcm9pZCBjaHJvbWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2ZyaXNjaG1hbm4vaW5saW5lLXN0eWxlLXByZWZpeGVyL2lzc3Vlcy80NVxuaWYoYnJvd3NlckluZm8uYnJvd3Nlck5hbWU9PT0nYW5kcm9pZCcmJmJyb3dzZXJJbmZvLmNocm9tZSYmYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24+Mzcpe2Jyb3dzZXJJbmZvLmJyb3dzZXJOYW1lPSdhbmRfY2hyJzt9Ly8gRm9yIGFuZHJvaWQgPCA0LjQgd2Ugd2FudCB0byBjaGVjayB0aGUgb3N2ZXJzaW9uXG4vLyBub3QgdGhlIGNocm9tZSB2ZXJzaW9uLCBzZWUgaXNzdWUgIzI2XG4vLyBodHRwczovL2dpdGh1Yi5jb20vcm9mcmlzY2htYW5uL2lubGluZS1zdHlsZS1wcmVmaXhlci9pc3N1ZXMvMjZcbmlmKGJyb3dzZXJJbmZvLmJyb3dzZXJOYW1lPT09J2FuZHJvaWQnJiZicm93c2VySW5mby5vc1ZlcnNpb248NSl7YnJvd3NlckluZm8uYnJvd3NlclZlcnNpb249YnJvd3NlckluZm8ub3NWZXJzaW9uO30vLyBTYW1zdW5nIGJyb3dzZXIgYXJlIGJhc2ljYWxseSBidWlsZCBvbiBDaHJvbWUgPiA0NFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzEwMlxuaWYoYnJvd3NlckluZm8uYnJvd3Nlck5hbWU9PT0nYW5kcm9pZCcmJmJyb3dzZXJJbmZvLnNhbXN1bmdCcm93c2VyKXticm93c2VySW5mby5icm93c2VyTmFtZT0nYW5kX2Nocic7YnJvd3NlckluZm8uYnJvd3NlclZlcnNpb249NDQ7fXJldHVybiBicm93c2VySW5mbzt9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvZ2V0QnJvd3NlckluZm9ybWF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnOy8qIVxuICogQm93c2VyIC0gYSBicm93c2VyIGRldGVjdG9yXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL2Jvd3NlclxuICogTUlUIExpY2Vuc2UgfCAoYykgRHVzdGluIERpYXogMjAxNVxuICovIWZ1bmN0aW9uKHJvb3QsbmFtZSxkZWZpbml0aW9uKXtpZih0eXBlb2YgbW9kdWxlIT0ndW5kZWZpbmVkJyYmbW9kdWxlLmV4cG9ydHMpbW9kdWxlLmV4cG9ydHM9ZGVmaW5pdGlvbigpO2Vsc2UgaWYodHlwZW9mIGRlZmluZT09J2Z1bmN0aW9uJyYmZGVmaW5lLmFtZClkZWZpbmUobmFtZSxkZWZpbml0aW9uKTtlbHNlIHJvb3RbbmFtZV09ZGVmaW5pdGlvbigpO30odW5kZWZpbmVkLCdib3dzZXInLGZ1bmN0aW9uKCl7LyoqXG4gICAgKiBTZWUgdXNlcmFnZW50cy5qcyBmb3IgZXhhbXBsZXMgb2YgbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICovdmFyIHQ9dHJ1ZTtmdW5jdGlvbiBkZXRlY3QodWEpe2Z1bmN0aW9uIGdldEZpcnN0TWF0Y2gocmVnZXgpe3ZhciBtYXRjaD11YS5tYXRjaChyZWdleCk7cmV0dXJuIG1hdGNoJiZtYXRjaC5sZW5ndGg+MSYmbWF0Y2hbMV18fCcnO31mdW5jdGlvbiBnZXRTZWNvbmRNYXRjaChyZWdleCl7dmFyIG1hdGNoPXVhLm1hdGNoKHJlZ2V4KTtyZXR1cm4gbWF0Y2gmJm1hdGNoLmxlbmd0aD4xJiZtYXRjaFsyXXx8Jyc7fXZhciBpb3NkZXZpY2U9Z2V0Rmlyc3RNYXRjaCgvKGlwb2R8aXBob25lfGlwYWQpL2kpLnRvTG93ZXJDYXNlKCksbGlrZUFuZHJvaWQ9L2xpa2UgYW5kcm9pZC9pLnRlc3QodWEpLGFuZHJvaWQ9IWxpa2VBbmRyb2lkJiYvYW5kcm9pZC9pLnRlc3QodWEpLG5leHVzTW9iaWxlPS9uZXh1c1xccypbMC02XVxccyovaS50ZXN0KHVhKSxuZXh1c1RhYmxldD0hbmV4dXNNb2JpbGUmJi9uZXh1c1xccypbMC05XSsvaS50ZXN0KHVhKSxjaHJvbWVvcz0vQ3JPUy8udGVzdCh1YSksc2lsaz0vc2lsay9pLnRlc3QodWEpLHNhaWxmaXNoPS9zYWlsZmlzaC9pLnRlc3QodWEpLHRpemVuPS90aXplbi9pLnRlc3QodWEpLHdlYm9zPS8od2VifGhwdykob3wwKXMvaS50ZXN0KHVhKSx3aW5kb3dzcGhvbmU9L3dpbmRvd3MgcGhvbmUvaS50ZXN0KHVhKSxzYW1zdW5nQnJvd3Nlcj0vU2Ftc3VuZ0Jyb3dzZXIvaS50ZXN0KHVhKSx3aW5kb3dzPSF3aW5kb3dzcGhvbmUmJi93aW5kb3dzL2kudGVzdCh1YSksbWFjPSFpb3NkZXZpY2UmJiFzaWxrJiYvbWFjaW50b3NoL2kudGVzdCh1YSksbGludXg9IWFuZHJvaWQmJiFzYWlsZmlzaCYmIXRpemVuJiYhd2Vib3MmJi9saW51eC9pLnRlc3QodWEpLGVkZ2VWZXJzaW9uPWdldFNlY29uZE1hdGNoKC9lZGcoW2VhXXxpb3MpXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSx2ZXJzaW9uSWRlbnRpZmllcj1nZXRGaXJzdE1hdGNoKC92ZXJzaW9uXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSx0YWJsZXQ9L3RhYmxldC9pLnRlc3QodWEpJiYhL3RhYmxldCBwYy9pLnRlc3QodWEpLG1vYmlsZT0hdGFibGV0JiYvW14tXW1vYmkvaS50ZXN0KHVhKSx4Ym94PS94Ym94L2kudGVzdCh1YSkscmVzdWx0O2lmKC9vcGVyYS9pLnRlc3QodWEpKXsvLyAgYW4gb2xkIE9wZXJhXG5yZXN1bHQ9e25hbWU6J09wZXJhJyxvcGVyYTp0LHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ8fGdldEZpcnN0TWF0Y2goLyg/Om9wZXJhfG9wcnxvcGlvcylbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9vcHJcXC98b3Bpb3MvaS50ZXN0KHVhKSl7Ly8gYSBuZXcgT3BlcmFcbnJlc3VsdD17bmFtZTonT3BlcmEnLG9wZXJhOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzpvcHJ8b3Bpb3MpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpfHx2ZXJzaW9uSWRlbnRpZmllcn07fWVsc2UgaWYoL1NhbXN1bmdCcm93c2VyL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZCcsc2Ftc3VuZ0Jyb3dzZXI6dCx2ZXJzaW9uOnZlcnNpb25JZGVudGlmaWVyfHxnZXRGaXJzdE1hdGNoKC8oPzpTYW1zdW5nQnJvd3NlcilbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9XaGFsZS9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J05BVkVSIFdoYWxlIGJyb3dzZXInLHdoYWxlOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzp3aGFsZSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKX07fWVsc2UgaWYoL01aQnJvd3Nlci9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J01aIEJyb3dzZXInLG16YnJvd3Nlcjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86TVpCcm93c2VyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpfTt9ZWxzZSBpZigvY29hc3QvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidPcGVyYSBDb2FzdCcsY29hc3Q6dCx2ZXJzaW9uOnZlcnNpb25JZGVudGlmaWVyfHxnZXRGaXJzdE1hdGNoKC8oPzpjb2FzdClbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9mb2N1cy9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0ZvY3VzJyxmb2N1czp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86Zm9jdXMpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKC95YWJyb3dzZXIvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidZYW5kZXggQnJvd3NlcicseWFuZGV4YnJvd3Nlcjp0LHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ8fGdldEZpcnN0TWF0Y2goLyg/OnlhYnJvd3NlcilbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC91Y2Jyb3dzZXIvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidVQyBCcm93c2VyJyx1Y2Jyb3dzZXI6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnVjYnJvd3NlcilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKX07fWVsc2UgaWYoL214aW9zL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonTWF4dGhvbicsbWF4dGhvbjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86bXhpb3MpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKC9lcGlwaGFueS9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0VwaXBoYW55JyxlcGlwaGFueTp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86ZXBpcGhhbnkpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKC9wdWZmaW4vaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidQdWZmaW4nLHB1ZmZpbjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86cHVmZmluKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvc2xlaXBuaXIvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidTbGVpcG5pcicsc2xlaXBuaXI6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnNsZWlwbmlyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpfTt9ZWxzZSBpZigvay1tZWxlb24vaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidLLU1lbGVvbicsa01lbGVvbjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvKD86ay1tZWxlb24pW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSl9O31lbHNlIGlmKHdpbmRvd3NwaG9uZSl7cmVzdWx0PXtuYW1lOidXaW5kb3dzIFBob25lJyxvc25hbWU6J1dpbmRvd3MgUGhvbmUnLHdpbmRvd3NwaG9uZTp0fTtpZihlZGdlVmVyc2lvbil7cmVzdWx0Lm1zZWRnZT10O3Jlc3VsdC52ZXJzaW9uPWVkZ2VWZXJzaW9uO31lbHNle3Jlc3VsdC5tc2llPXQ7cmVzdWx0LnZlcnNpb249Z2V0Rmlyc3RNYXRjaCgvaWVtb2JpbGVcXC8oXFxkKyhcXC5cXGQrKT8pL2kpO319ZWxzZSBpZigvbXNpZXx0cmlkZW50L2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonSW50ZXJuZXQgRXhwbG9yZXInLG1zaWU6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/Om1zaWUgfHJ2OikoXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZihjaHJvbWVvcyl7cmVzdWx0PXtuYW1lOidDaHJvbWUnLG9zbmFtZTonQ2hyb21lIE9TJyxjaHJvbWVvczp0LGNocm9tZUJvb2s6dCxjaHJvbWU6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9lZGcoW2VhXXxpb3MpL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonTWljcm9zb2Z0IEVkZ2UnLG1zZWRnZTp0LHZlcnNpb246ZWRnZVZlcnNpb259O31lbHNlIGlmKC92aXZhbGRpL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonVml2YWxkaScsdml2YWxkaTp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvdml2YWxkaVxcLyhcXGQrKFxcLlxcZCspPykvaSl8fHZlcnNpb25JZGVudGlmaWVyfTt9ZWxzZSBpZihzYWlsZmlzaCl7cmVzdWx0PXtuYW1lOidTYWlsZmlzaCcsb3NuYW1lOidTYWlsZmlzaCBPUycsc2FpbGZpc2g6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goL3NhaWxmaXNoXFxzP2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvc2VhbW9ua2V5XFwvL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonU2VhTW9ua2V5JyxzZWFtb25rZXk6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goL3NlYW1vbmtleVxcLyhcXGQrKFxcLlxcZCspPykvaSl9O31lbHNlIGlmKC9maXJlZm94fGljZXdlYXNlbHxmeGlvcy9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0ZpcmVmb3gnLGZpcmVmb3g6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OmZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zKVsgXFwvXShcXGQrKFxcLlxcZCspPykvaSl9O2lmKC9cXCgobW9iaWxlfHRhYmxldCk7W15cXCldKnJ2OltcXGRcXC5dK1xcKS9pLnRlc3QodWEpKXtyZXN1bHQuZmlyZWZveG9zPXQ7cmVzdWx0Lm9zbmFtZT0nRmlyZWZveCBPUyc7fX1lbHNlIGlmKHNpbGspe3Jlc3VsdD17bmFtZTonQW1hem9uIFNpbGsnLHNpbGs6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goL3NpbGtcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvcGhhbnRvbS9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J1BoYW50b21KUycscGhhbnRvbTp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvcGhhbnRvbWpzXFwvKFxcZCsoXFwuXFxkKyk/KS9pKX07fWVsc2UgaWYoL3NsaW1lcmpzL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonU2xpbWVySlMnLHNsaW1lcjp0LHZlcnNpb246Z2V0Rmlyc3RNYXRjaCgvc2xpbWVyanNcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZigvYmxhY2tiZXJyeXxcXGJiYlxcZCsvaS50ZXN0KHVhKXx8L3JpbVxcc3RhYmxldC9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0JsYWNrQmVycnknLG9zbmFtZTonQmxhY2tCZXJyeSBPUycsYmxhY2tiZXJyeTp0LHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ8fGdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZih3ZWJvcyl7cmVzdWx0PXtuYW1lOidXZWJPUycsb3NuYW1lOidXZWJPUycsd2Vib3M6dCx2ZXJzaW9uOnZlcnNpb25JZGVudGlmaWVyfHxnZXRGaXJzdE1hdGNoKC93KD86ZWIpP29zYnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSl9Oy90b3VjaHBhZFxcLy9pLnRlc3QodWEpJiYocmVzdWx0LnRvdWNocGFkPXQpO31lbHNlIGlmKC9iYWRhL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonQmFkYScsb3NuYW1lOidCYWRhJyxiYWRhOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC9kb2xmaW5cXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZih0aXplbil7cmVzdWx0PXtuYW1lOidUaXplbicsb3NuYW1lOidUaXplbicsdGl6ZW46dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnRpemVuXFxzPyk/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSl8fHZlcnNpb25JZGVudGlmaWVyfTt9ZWxzZSBpZigvcXVwemlsbGEvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidRdXBaaWxsYScscXVwemlsbGE6dCx2ZXJzaW9uOmdldEZpcnN0TWF0Y2goLyg/OnF1cHppbGxhKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpfHx2ZXJzaW9uSWRlbnRpZmllcn07fWVsc2UgaWYoL2Nocm9taXVtL2kudGVzdCh1YSkpe3Jlc3VsdD17bmFtZTonQ2hyb21pdW0nLGNocm9taXVtOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWl1bSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKyk/KS9pKXx8dmVyc2lvbklkZW50aWZpZXJ9O31lbHNlIGlmKC9jaHJvbWV8Y3Jpb3N8Y3Jtby9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0Nocm9tZScsY2hyb21lOnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWV8Y3Jpb3N8Y3JtbylcXC8oXFxkKyhcXC5cXGQrKT8pL2kpfTt9ZWxzZSBpZihhbmRyb2lkKXtyZXN1bHQ9e25hbWU6J0FuZHJvaWQnLHZlcnNpb246dmVyc2lvbklkZW50aWZpZXJ9O31lbHNlIGlmKC9zYWZhcml8YXBwbGV3ZWJraXQvaS50ZXN0KHVhKSl7cmVzdWx0PXtuYW1lOidTYWZhcmknLHNhZmFyaTp0fTtpZih2ZXJzaW9uSWRlbnRpZmllcil7cmVzdWx0LnZlcnNpb249dmVyc2lvbklkZW50aWZpZXI7fX1lbHNlIGlmKGlvc2RldmljZSl7cmVzdWx0PXtuYW1lOmlvc2RldmljZT09J2lwaG9uZSc/J2lQaG9uZSc6aW9zZGV2aWNlPT0naXBhZCc/J2lQYWQnOidpUG9kJy8vIFdURjogdmVyc2lvbiBpcyBub3QgcGFydCBvZiB1c2VyIGFnZW50IGluIHdlYiBhcHBzXG59O2lmKHZlcnNpb25JZGVudGlmaWVyKXtyZXN1bHQudmVyc2lvbj12ZXJzaW9uSWRlbnRpZmllcjt9fWVsc2UgaWYoL2dvb2dsZWJvdC9pLnRlc3QodWEpKXtyZXN1bHQ9e25hbWU6J0dvb2dsZWJvdCcsZ29vZ2xlYm90OnQsdmVyc2lvbjpnZXRGaXJzdE1hdGNoKC9nb29nbGVib3RcXC8oXFxkKyhcXC5cXGQrKSkvaSl8fHZlcnNpb25JZGVudGlmaWVyfTt9ZWxzZXtyZXN1bHQ9e25hbWU6Z2V0Rmlyc3RNYXRjaCgvXiguKilcXC8oLiopIC8pLHZlcnNpb246Z2V0U2Vjb25kTWF0Y2goL14oLiopXFwvKC4qKSAvKX07fS8vIHNldCB3ZWJraXQgb3IgZ2Vja28gZmxhZyBmb3IgYnJvd3NlcnMgYmFzZWQgb24gdGhlc2UgZW5naW5lc1xuaWYoIXJlc3VsdC5tc2VkZ2UmJi8oYXBwbGUpP3dlYmtpdC9pLnRlc3QodWEpKXtpZigvKGFwcGxlKT93ZWJraXRcXC81MzdcXC4zNi9pLnRlc3QodWEpKXtyZXN1bHQubmFtZT1yZXN1bHQubmFtZXx8XCJCbGlua1wiO3Jlc3VsdC5ibGluaz10O31lbHNle3Jlc3VsdC5uYW1lPXJlc3VsdC5uYW1lfHxcIldlYmtpdFwiO3Jlc3VsdC53ZWJraXQ9dDt9aWYoIXJlc3VsdC52ZXJzaW9uJiZ2ZXJzaW9uSWRlbnRpZmllcil7cmVzdWx0LnZlcnNpb249dmVyc2lvbklkZW50aWZpZXI7fX1lbHNlIGlmKCFyZXN1bHQub3BlcmEmJi9nZWNrb1xcLy9pLnRlc3QodWEpKXtyZXN1bHQubmFtZT1yZXN1bHQubmFtZXx8XCJHZWNrb1wiO3Jlc3VsdC5nZWNrbz10O3Jlc3VsdC52ZXJzaW9uPXJlc3VsdC52ZXJzaW9ufHxnZXRGaXJzdE1hdGNoKC9nZWNrb1xcLyhcXGQrKFxcLlxcZCspPykvaSk7fS8vIHNldCBPUyBmbGFncyBmb3IgcGxhdGZvcm1zIHRoYXQgaGF2ZSBtdWx0aXBsZSBicm93c2Vyc1xuaWYoIXJlc3VsdC53aW5kb3dzcGhvbmUmJihhbmRyb2lkfHxyZXN1bHQuc2lsaykpe3Jlc3VsdC5hbmRyb2lkPXQ7cmVzdWx0Lm9zbmFtZT0nQW5kcm9pZCc7fWVsc2UgaWYoIXJlc3VsdC53aW5kb3dzcGhvbmUmJmlvc2RldmljZSl7cmVzdWx0W2lvc2RldmljZV09dDtyZXN1bHQuaW9zPXQ7cmVzdWx0Lm9zbmFtZT0naU9TJzt9ZWxzZSBpZihtYWMpe3Jlc3VsdC5tYWM9dDtyZXN1bHQub3NuYW1lPSdtYWNPUyc7fWVsc2UgaWYoeGJveCl7cmVzdWx0Lnhib3g9dDtyZXN1bHQub3NuYW1lPSdYYm94Jzt9ZWxzZSBpZih3aW5kb3dzKXtyZXN1bHQud2luZG93cz10O3Jlc3VsdC5vc25hbWU9J1dpbmRvd3MnO31lbHNlIGlmKGxpbnV4KXtyZXN1bHQubGludXg9dDtyZXN1bHQub3NuYW1lPSdMaW51eCc7fWZ1bmN0aW9uIGdldFdpbmRvd3NWZXJzaW9uKHMpe3N3aXRjaChzKXtjYXNlJ05UJzpyZXR1cm4nTlQnO2Nhc2UnWFAnOnJldHVybidYUCc7Y2FzZSdOVCA1LjAnOnJldHVybicyMDAwJztjYXNlJ05UIDUuMSc6cmV0dXJuJ1hQJztjYXNlJ05UIDUuMic6cmV0dXJuJzIwMDMnO2Nhc2UnTlQgNi4wJzpyZXR1cm4nVmlzdGEnO2Nhc2UnTlQgNi4xJzpyZXR1cm4nNyc7Y2FzZSdOVCA2LjInOnJldHVybic4JztjYXNlJ05UIDYuMyc6cmV0dXJuJzguMSc7Y2FzZSdOVCAxMC4wJzpyZXR1cm4nMTAnO2RlZmF1bHQ6cmV0dXJuIHVuZGVmaW5lZDt9fS8vIE9TIHZlcnNpb24gZXh0cmFjdGlvblxudmFyIG9zVmVyc2lvbj0nJztpZihyZXN1bHQud2luZG93cyl7b3NWZXJzaW9uPWdldFdpbmRvd3NWZXJzaW9uKGdldEZpcnN0TWF0Y2goL1dpbmRvd3MgKChOVHxYUCkoIFxcZFxcZD8uXFxkKT8pL2kpKTt9ZWxzZSBpZihyZXN1bHQud2luZG93c3Bob25lKXtvc1ZlcnNpb249Z2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSk7fWVsc2UgaWYocmVzdWx0Lm1hYyl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL01hYyBPUyBYIChcXGQrKFtfXFwuXFxzXVxcZCspKikvaSk7b3NWZXJzaW9uPW9zVmVyc2lvbi5yZXBsYWNlKC9bX1xcc10vZywnLicpO31lbHNlIGlmKGlvc2RldmljZSl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL29zIChcXGQrKFtfXFxzXVxcZCspKikgbGlrZSBtYWMgb3MgeC9pKTtvc1ZlcnNpb249b3NWZXJzaW9uLnJlcGxhY2UoL1tfXFxzXS9nLCcuJyk7fWVsc2UgaWYoYW5kcm9pZCl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL2FuZHJvaWRbIFxcLy1dKFxcZCsoXFwuXFxkKykqKS9pKTt9ZWxzZSBpZihyZXN1bHQud2Vib3Mpe29zVmVyc2lvbj1nZXRGaXJzdE1hdGNoKC8oPzp3ZWJ8aHB3KW9zXFwvKFxcZCsoXFwuXFxkKykqKS9pKTt9ZWxzZSBpZihyZXN1bHQuYmxhY2tiZXJyeSl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL3JpbVxcc3RhYmxldFxcc29zXFxzKFxcZCsoXFwuXFxkKykqKS9pKTt9ZWxzZSBpZihyZXN1bHQuYmFkYSl7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL2JhZGFcXC8oXFxkKyhcXC5cXGQrKSopL2kpO31lbHNlIGlmKHJlc3VsdC50aXplbil7b3NWZXJzaW9uPWdldEZpcnN0TWF0Y2goL3RpemVuW1xcL1xcc10oXFxkKyhcXC5cXGQrKSopL2kpO31pZihvc1ZlcnNpb24pe3Jlc3VsdC5vc3ZlcnNpb249b3NWZXJzaW9uO30vLyBkZXZpY2UgdHlwZSBleHRyYWN0aW9uXG52YXIgb3NNYWpvclZlcnNpb249IXJlc3VsdC53aW5kb3dzJiZvc1ZlcnNpb24uc3BsaXQoJy4nKVswXTtpZih0YWJsZXR8fG5leHVzVGFibGV0fHxpb3NkZXZpY2U9PSdpcGFkJ3x8YW5kcm9pZCYmKG9zTWFqb3JWZXJzaW9uPT0zfHxvc01ham9yVmVyc2lvbj49NCYmIW1vYmlsZSl8fHJlc3VsdC5zaWxrKXtyZXN1bHQudGFibGV0PXQ7fWVsc2UgaWYobW9iaWxlfHxpb3NkZXZpY2U9PSdpcGhvbmUnfHxpb3NkZXZpY2U9PSdpcG9kJ3x8YW5kcm9pZHx8bmV4dXNNb2JpbGV8fHJlc3VsdC5ibGFja2JlcnJ5fHxyZXN1bHQud2Vib3N8fHJlc3VsdC5iYWRhKXtyZXN1bHQubW9iaWxlPXQ7fS8vIEdyYWRlZCBCcm93c2VyIFN1cHBvcnRcbi8vIGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9hcnRpY2xlcy9nYnNcbmlmKHJlc3VsdC5tc2VkZ2V8fHJlc3VsdC5tc2llJiZyZXN1bHQudmVyc2lvbj49MTB8fHJlc3VsdC55YW5kZXhicm93c2VyJiZyZXN1bHQudmVyc2lvbj49MTV8fHJlc3VsdC52aXZhbGRpJiZyZXN1bHQudmVyc2lvbj49MS4wfHxyZXN1bHQuY2hyb21lJiZyZXN1bHQudmVyc2lvbj49MjB8fHJlc3VsdC5zYW1zdW5nQnJvd3NlciYmcmVzdWx0LnZlcnNpb24+PTR8fHJlc3VsdC53aGFsZSYmY29tcGFyZVZlcnNpb25zKFtyZXN1bHQudmVyc2lvbiwnMS4wJ10pPT09MXx8cmVzdWx0Lm16YnJvd3NlciYmY29tcGFyZVZlcnNpb25zKFtyZXN1bHQudmVyc2lvbiwnNi4wJ10pPT09MXx8cmVzdWx0LmZvY3VzJiZjb21wYXJlVmVyc2lvbnMoW3Jlc3VsdC52ZXJzaW9uLCcxLjAnXSk9PT0xfHxyZXN1bHQuZmlyZWZveCYmcmVzdWx0LnZlcnNpb24+PTIwLjB8fHJlc3VsdC5zYWZhcmkmJnJlc3VsdC52ZXJzaW9uPj02fHxyZXN1bHQub3BlcmEmJnJlc3VsdC52ZXJzaW9uPj0xMC4wfHxyZXN1bHQuaW9zJiZyZXN1bHQub3N2ZXJzaW9uJiZyZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXT49Nnx8cmVzdWx0LmJsYWNrYmVycnkmJnJlc3VsdC52ZXJzaW9uPj0xMC4xfHxyZXN1bHQuY2hyb21pdW0mJnJlc3VsdC52ZXJzaW9uPj0yMCl7cmVzdWx0LmE9dDt9ZWxzZSBpZihyZXN1bHQubXNpZSYmcmVzdWx0LnZlcnNpb248MTB8fHJlc3VsdC5jaHJvbWUmJnJlc3VsdC52ZXJzaW9uPDIwfHxyZXN1bHQuZmlyZWZveCYmcmVzdWx0LnZlcnNpb248MjAuMHx8cmVzdWx0LnNhZmFyaSYmcmVzdWx0LnZlcnNpb248Nnx8cmVzdWx0Lm9wZXJhJiZyZXN1bHQudmVyc2lvbjwxMC4wfHxyZXN1bHQuaW9zJiZyZXN1bHQub3N2ZXJzaW9uJiZyZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXTw2fHxyZXN1bHQuY2hyb21pdW0mJnJlc3VsdC52ZXJzaW9uPDIwKXtyZXN1bHQuYz10O31lbHNlIHJlc3VsdC54PXQ7cmV0dXJuIHJlc3VsdDt9dmFyIGJvd3Nlcj1kZXRlY3QodHlwZW9mIG5hdmlnYXRvciE9PSd1bmRlZmluZWQnP25hdmlnYXRvci51c2VyQWdlbnR8fCcnOicnKTtib3dzZXIudGVzdD1mdW5jdGlvbihicm93c2VyTGlzdCl7Zm9yKHZhciBpPTA7aTxicm93c2VyTGlzdC5sZW5ndGg7KytpKXt2YXIgYnJvd3Nlckl0ZW09YnJvd3Nlckxpc3RbaV07aWYodHlwZW9mIGJyb3dzZXJJdGVtPT09J3N0cmluZycpe2lmKGJyb3dzZXJJdGVtIGluIGJvd3Nlcil7cmV0dXJuIHRydWU7fX19cmV0dXJuIGZhbHNlO307LyoqXG4gICAqIEdldCB2ZXJzaW9uIHByZWNpc2lvbnMgY291bnRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBnZXRWZXJzaW9uUHJlY2lzaW9uKFwiMS4xMC4zXCIpIC8vIDNcbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovZnVuY3Rpb24gZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uKXtyZXR1cm4gdmVyc2lvbi5zcGxpdChcIi5cIikubGVuZ3RoO30vKipcbiAgICogQXJyYXk6Om1hcCBwb2x5ZmlsbFxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheX0gYXJyXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBpdGVyYXRvclxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovZnVuY3Rpb24gbWFwKGFycixpdGVyYXRvcil7dmFyIHJlc3VsdD1bXSxpO2lmKEFycmF5LnByb3RvdHlwZS5tYXApe3JldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYXJyLGl0ZXJhdG9yKTt9Zm9yKGk9MDtpPGFyci5sZW5ndGg7aSsrKXtyZXN1bHQucHVzaChpdGVyYXRvcihhcnJbaV0pKTt9cmV0dXJuIHJlc3VsdDt9LyoqXG4gICAqIENhbGN1bGF0ZSBicm93c2VyIHZlcnNpb24gd2VpZ2h0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuOC4yLjEuOTAnXSkgICAgLy8gMVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucyhbJzEuMDEwLjIuMScsICcxLjA5LjIuMS45MCddKTsgIC8vIDFcbiAgICogICBjb21wYXJlVmVyc2lvbnMoWycxLjEwLjIuMScsICAnMS4xMC4yLjEnXSk7ICAgICAvLyAwXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuMDgwMC4yJ10pOyAgICAgLy8gLTFcbiAgICpcbiAgICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gdmVyc2lvbnMgdmVyc2lvbnMgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGNvbXBhcmlzb24gcmVzdWx0XG4gICAqL2Z1bmN0aW9uIGNvbXBhcmVWZXJzaW9ucyh2ZXJzaW9ucyl7Ly8gMSkgZ2V0IGNvbW1vbiBwcmVjaXNpb24gZm9yIGJvdGggdmVyc2lvbnMsIGZvciBleGFtcGxlIGZvciBcIjEwLjBcIiBhbmQgXCI5XCIgaXQgc2hvdWxkIGJlIDJcbnZhciBwcmVjaXNpb249TWF0aC5tYXgoZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uc1swXSksZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uc1sxXSkpO3ZhciBjaHVua3M9bWFwKHZlcnNpb25zLGZ1bmN0aW9uKHZlcnNpb24pe3ZhciBkZWx0YT1wcmVjaXNpb24tZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uKTsvLyAyKSBcIjlcIiAtPiBcIjkuMFwiIChmb3IgcHJlY2lzaW9uID0gMilcbnZlcnNpb249dmVyc2lvbituZXcgQXJyYXkoZGVsdGErMSkuam9pbihcIi4wXCIpOy8vIDMpIFwiOS4wXCIgLT4gW1wiMDAwMDAwMDAwXCJcIiwgXCIwMDAwMDAwMDlcIl1cbnJldHVybiBtYXAodmVyc2lvbi5zcGxpdChcIi5cIiksZnVuY3Rpb24oY2h1bmspe3JldHVybiBuZXcgQXJyYXkoMjAtY2h1bmsubGVuZ3RoKS5qb2luKFwiMFwiKStjaHVuazt9KS5yZXZlcnNlKCk7fSk7Ly8gaXRlcmF0ZSBpbiByZXZlcnNlIG9yZGVyIGJ5IHJldmVyc2VkIGNodW5rcyBhcnJheVxud2hpbGUoLS1wcmVjaXNpb24+PTApey8vIDQpIGNvbXBhcmU6IFwiMDAwMDAwMDA5XCIgPiBcIjAwMDAwMDAxMFwiID0gZmFsc2UgKGJ1dCBcIjlcIiA+IFwiMTBcIiA9IHRydWUpXG5pZihjaHVua3NbMF1bcHJlY2lzaW9uXT5jaHVua3NbMV1bcHJlY2lzaW9uXSl7cmV0dXJuIDE7fWVsc2UgaWYoY2h1bmtzWzBdW3ByZWNpc2lvbl09PT1jaHVua3NbMV1bcHJlY2lzaW9uXSl7aWYocHJlY2lzaW9uPT09MCl7Ly8gYWxsIHZlcnNpb24gY2h1bmtzIGFyZSBzYW1lXG5yZXR1cm4gMDt9fWVsc2V7cmV0dXJuLTE7fX19LyoqXG4gICAqIENoZWNrIGlmIGJyb3dzZXIgaXMgdW5zdXBwb3J0ZWRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBib3dzZXIuaXNVbnN1cHBvcnRlZEJyb3dzZXIoe1xuICAgKiAgICAgbXNpZTogXCIxMFwiLFxuICAgKiAgICAgZmlyZWZveDogXCIyM1wiLFxuICAgKiAgICAgY2hyb21lOiBcIjI5XCIsXG4gICAqICAgICBzYWZhcmk6IFwiNS4xXCIsXG4gICAqICAgICBvcGVyYTogXCIxNlwiLFxuICAgKiAgICAgcGhhbnRvbTogXCI1MzRcIlxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICBtaW5WZXJzaW9ucyBtYXAgb2YgbWluaW1hbCB2ZXJzaW9uIHRvIGJyb3dzZXJcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3N0cmljdE1vZGUgPSBmYWxzZV0gZmxhZyB0byByZXR1cm4gZmFsc2UgaWYgYnJvd3NlciB3YXNuJ3QgZm91bmQgaW4gbWFwXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIFt1YV0gdXNlciBhZ2VudCBzdHJpbmdcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovZnVuY3Rpb24gaXNVbnN1cHBvcnRlZEJyb3dzZXIobWluVmVyc2lvbnMsc3RyaWN0TW9kZSx1YSl7dmFyIF9ib3dzZXI9Ym93c2VyOy8vIG1ha2Ugc3RyaWN0TW9kZSBwYXJhbSBvcHRpb25hbCB3aXRoIHVhIHBhcmFtIHVzYWdlXG5pZih0eXBlb2Ygc3RyaWN0TW9kZT09PSdzdHJpbmcnKXt1YT1zdHJpY3RNb2RlO3N0cmljdE1vZGU9dm9pZCAwO31pZihzdHJpY3RNb2RlPT09dm9pZCAwKXtzdHJpY3RNb2RlPWZhbHNlO31pZih1YSl7X2Jvd3Nlcj1kZXRlY3QodWEpO312YXIgdmVyc2lvbj1cIlwiK19ib3dzZXIudmVyc2lvbjtmb3IodmFyIGJyb3dzZXIgaW4gbWluVmVyc2lvbnMpe2lmKG1pblZlcnNpb25zLmhhc093blByb3BlcnR5KGJyb3dzZXIpKXtpZihfYm93c2VyW2Jyb3dzZXJdKXtpZih0eXBlb2YgbWluVmVyc2lvbnNbYnJvd3Nlcl0hPT0nc3RyaW5nJyl7dGhyb3cgbmV3IEVycm9yKCdCcm93c2VyIHZlcnNpb24gaW4gdGhlIG1pblZlcnNpb24gbWFwIHNob3VsZCBiZSBhIHN0cmluZzogJyticm93c2VyKyc6ICcrU3RyaW5nKG1pblZlcnNpb25zKSk7fS8vIGJyb3dzZXIgdmVyc2lvbiBhbmQgbWluIHN1cHBvcnRlZCB2ZXJzaW9uLlxucmV0dXJuIGNvbXBhcmVWZXJzaW9ucyhbdmVyc2lvbixtaW5WZXJzaW9uc1ticm93c2VyXV0pPDA7fX19cmV0dXJuIHN0cmljdE1vZGU7Ly8gbm90IGZvdW5kXG59LyoqXG4gICAqIENoZWNrIGlmIGJyb3dzZXIgaXMgc3VwcG9ydGVkXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gbWluVmVyc2lvbnMgbWFwIG9mIG1pbmltYWwgdmVyc2lvbiB0byBicm93c2VyXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IFtzdHJpY3RNb2RlID0gZmFsc2VdIGZsYWcgdG8gcmV0dXJuIGZhbHNlIGlmIGJyb3dzZXIgd2Fzbid0IGZvdW5kIGluIG1hcFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBbdWFdIHVzZXIgYWdlbnQgc3RyaW5nXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL2Z1bmN0aW9uIGNoZWNrKG1pblZlcnNpb25zLHN0cmljdE1vZGUsdWEpe3JldHVybiFpc1Vuc3VwcG9ydGVkQnJvd3NlcihtaW5WZXJzaW9ucyxzdHJpY3RNb2RlLHVhKTt9Ym93c2VyLmlzVW5zdXBwb3J0ZWRCcm93c2VyPWlzVW5zdXBwb3J0ZWRCcm93c2VyO2Jvd3Nlci5jb21wYXJlVmVyc2lvbnM9Y29tcGFyZVZlcnNpb25zO2Jvd3Nlci5jaGVjaz1jaGVjazsvKlxuICAgKiBTZXQgb3VyIGRldGVjdCBtZXRob2QgdG8gdGhlIG1haW4gYm93c2VyIG9iamVjdCBzbyB3ZSBjYW5cbiAgICogcmV1c2UgaXQgdG8gdGVzdCBvdGhlciB1c2VyIGFnZW50cy5cbiAgICogVGhpcyBpcyBuZWVkZWQgdG8gaW1wbGVtZW50IGZ1dHVyZSB0ZXN0cy5cbiAgICovYm93c2VyLl9kZXRlY3Q9ZGV0ZWN0Oy8qXG4gICAqIFNldCBvdXIgZGV0ZWN0IHB1YmxpYyBtZXRob2QgdG8gdGhlIG1haW4gYm93c2VyIG9iamVjdFxuICAgKiBUaGlzIGlzIG5lZWRlZCB0byBpbXBsZW1lbnQgYm93c2VyIGluIHNlcnZlciBzaWRlXG4gICAqL2Jvd3Nlci5kZXRlY3Q9ZGV0ZWN0O3JldHVybiBib3dzZXI7fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9+L2Jvd3Nlci9zcmMvYm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IEVycm9yKFwiZGVmaW5lIGNhbm5vdCBiZSB1c2VkIGluZGlyZWN0XCIpOyB9O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWdldFByZWZpeGVkS2V5ZnJhbWVzO2Z1bmN0aW9uIGdldFByZWZpeGVkS2V5ZnJhbWVzKGJyb3dzZXJOYW1lLGJyb3dzZXJWZXJzaW9uLGNzc1ByZWZpeCl7dmFyIHByZWZpeGVkS2V5ZnJhbWVzPSdrZXlmcmFtZXMnO2lmKGJyb3dzZXJOYW1lPT09J2Nocm9tZScmJmJyb3dzZXJWZXJzaW9uPDQzfHwoYnJvd3Nlck5hbWU9PT0nc2FmYXJpJ3x8YnJvd3Nlck5hbWU9PT0naW9zX3NhZicpJiZicm93c2VyVmVyc2lvbjw5fHxicm93c2VyTmFtZT09PSdvcGVyYScmJmJyb3dzZXJWZXJzaW9uPDMwfHxicm93c2VyTmFtZT09PSdhbmRyb2lkJyYmYnJvd3NlclZlcnNpb248PTQuNHx8YnJvd3Nlck5hbWU9PT0nYW5kX3VjJyl7cmV0dXJuIGNzc1ByZWZpeCtwcmVmaXhlZEtleWZyYW1lczt9cmV0dXJuIHByZWZpeGVkS2V5ZnJhbWVzO31tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9nZXRQcmVmaXhlZEtleWZyYW1lcy5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzt2YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307LyohXG4gIENvcHlyaWdodCAoYykgMjAxNSBKZWQgV2F0c29uLlxuICBCYXNlZCBvbiBjb2RlIHRoYXQgaXMgQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiovLyogZ2xvYmFsIGRlZmluZSAqLyhmdW5jdGlvbigpeyd1c2Ugc3RyaWN0Jzt2YXIgY2FuVXNlRE9NPSEhKHR5cGVvZiB3aW5kb3chPT0ndW5kZWZpbmVkJyYmd2luZG93LmRvY3VtZW50JiZ3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50PXtjYW5Vc2VET006Y2FuVXNlRE9NLGNhblVzZVdvcmtlcnM6dHlwZW9mIFdvcmtlciE9PSd1bmRlZmluZWQnLGNhblVzZUV2ZW50TGlzdGVuZXJzOmNhblVzZURPTSYmISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXJ8fHdpbmRvdy5hdHRhY2hFdmVudCksY2FuVXNlVmlld3BvcnQ6Y2FuVXNlRE9NJiYhIXdpbmRvdy5zY3JlZW59O2lmKHR5cGVvZiBkZWZpbmU9PT0nZnVuY3Rpb24nJiZfdHlwZW9mKGRlZmluZS5hbWQpPT09J29iamVjdCcmJmRlZmluZS5hbWQpe2RlZmluZShmdW5jdGlvbigpe3JldHVybiBFeGVjdXRpb25FbnZpcm9ubWVudDt9KTt9ZWxzZSBpZih0eXBlb2YgbW9kdWxlIT09J3VuZGVmaW5lZCcmJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1FeGVjdXRpb25FbnZpcm9ubWVudDt9ZWxzZXt3aW5kb3cuRXhlY3V0aW9uRW52aXJvbm1lbnQ9RXhlY3V0aW9uRW52aXJvbm1lbnQ7fX0pKCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2V4ZW52L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2NhbGM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2NhbGNcIikpO3ZhciBfY3Jvc3NGYWRlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jcm9zc0ZhZGVcIikpO3ZhciBfY3Vyc29yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jdXJzb3JcIikpO3ZhciBfZmlsdGVyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9maWx0ZXJcIikpO3ZhciBfZmxleD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleFwiKSk7dmFyIF9mbGV4Ym94SUU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hJRVwiKSk7dmFyIF9mbGV4Ym94T2xkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94T2xkXCIpKTt2YXIgX2dyYWRpZW50PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9ncmFkaWVudFwiKSk7dmFyIF9pbWFnZVNldD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvaW1hZ2VTZXRcIikpO3ZhciBfcG9zaXRpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3Bvc2l0aW9uXCIpKTt2YXIgX3NpemluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvc2l6aW5nXCIpKTt2YXIgX3RyYW5zaXRpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3RyYW5zaXRpb25cIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian07fXZhciB3PVsnV2Via2l0J107dmFyIG09WydNb3onXTt2YXIgbXM9WydtcyddO3ZhciB3bT1bJ1dlYmtpdCcsJ01veiddO3ZhciB3bXM9WydXZWJraXQnLCdtcyddO3ZhciB3bW1zPVsnV2Via2l0JywnTW96JywnbXMnXTt2YXIgX2RlZmF1bHQ9e3BsdWdpbnM6W19jYWxjW1wiZGVmYXVsdFwiXSxfY3Jvc3NGYWRlW1wiZGVmYXVsdFwiXSxfY3Vyc29yW1wiZGVmYXVsdFwiXSxfZmlsdGVyW1wiZGVmYXVsdFwiXSxfZmxleFtcImRlZmF1bHRcIl0sX2ZsZXhib3hJRVtcImRlZmF1bHRcIl0sX2ZsZXhib3hPbGRbXCJkZWZhdWx0XCJdLF9ncmFkaWVudFtcImRlZmF1bHRcIl0sX2ltYWdlU2V0W1wiZGVmYXVsdFwiXSxfcG9zaXRpb25bXCJkZWZhdWx0XCJdLF9zaXppbmdbXCJkZWZhdWx0XCJdLF90cmFuc2l0aW9uW1wiZGVmYXVsdFwiXV0scHJlZml4TWFwOnt0cmFuc2Zvcm06d21zLHRyYW5zZm9ybU9yaWdpbjp3bXMsdHJhbnNmb3JtT3JpZ2luWDp3bXMsdHJhbnNmb3JtT3JpZ2luWTp3bXMsYmFja2ZhY2VWaXNpYmlsaXR5OncscGVyc3BlY3RpdmU6dyxwZXJzcGVjdGl2ZU9yaWdpbjp3LHRyYW5zZm9ybVN0eWxlOncsdHJhbnNmb3JtT3JpZ2luWjp3LGFuaW1hdGlvbjp3LGFuaW1hdGlvbkRlbGF5OncsYW5pbWF0aW9uRGlyZWN0aW9uOncsYW5pbWF0aW9uRmlsbE1vZGU6dyxhbmltYXRpb25EdXJhdGlvbjp3LGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OncsYW5pbWF0aW9uTmFtZTp3LGFuaW1hdGlvblBsYXlTdGF0ZTp3LGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOncsYXBwZWFyYW5jZTp3bSx1c2VyU2VsZWN0OndtbXMsZm9udEtlcm5pbmc6dyx0ZXh0RW1waGFzaXNQb3NpdGlvbjp3LHRleHRFbXBoYXNpczp3LHRleHRFbXBoYXNpc1N0eWxlOncsdGV4dEVtcGhhc2lzQ29sb3I6dyxib3hEZWNvcmF0aW9uQnJlYWs6dyxjbGlwUGF0aDp3LG1hc2tJbWFnZTp3LG1hc2tNb2RlOncsbWFza1JlcGVhdDp3LG1hc2tQb3NpdGlvbjp3LG1hc2tDbGlwOncsbWFza09yaWdpbjp3LG1hc2tTaXplOncsbWFza0NvbXBvc2l0ZTp3LG1hc2s6dyxtYXNrQm9yZGVyU291cmNlOncsbWFza0JvcmRlck1vZGU6dyxtYXNrQm9yZGVyU2xpY2U6dyxtYXNrQm9yZGVyV2lkdGg6dyxtYXNrQm9yZGVyT3V0c2V0OncsbWFza0JvcmRlclJlcGVhdDp3LG1hc2tCb3JkZXI6dyxtYXNrVHlwZTp3LHRleHREZWNvcmF0aW9uU3R5bGU6d20sdGV4dERlY29yYXRpb25Ta2lwOndtLHRleHREZWNvcmF0aW9uTGluZTp3bSx0ZXh0RGVjb3JhdGlvbkNvbG9yOndtLGZpbHRlcjp3LGZvbnRGZWF0dXJlU2V0dGluZ3M6d20sYnJlYWtBZnRlcjp3bW1zLGJyZWFrQmVmb3JlOndtbXMsYnJlYWtJbnNpZGU6d21tcyxjb2x1bW5Db3VudDp3bSxjb2x1bW5GaWxsOndtLGNvbHVtbkdhcDp3bSxjb2x1bW5SdWxlOndtLGNvbHVtblJ1bGVDb2xvcjp3bSxjb2x1bW5SdWxlU3R5bGU6d20sY29sdW1uUnVsZVdpZHRoOndtLGNvbHVtbnM6d20sY29sdW1uU3Bhbjp3bSxjb2x1bW5XaWR0aDp3bSx3cml0aW5nTW9kZTp3bXMsZmxleDp3bXMsZmxleEJhc2lzOncsZmxleERpcmVjdGlvbjp3bXMsZmxleEdyb3c6dyxmbGV4Rmxvdzp3bXMsZmxleFNocmluazp3LGZsZXhXcmFwOndtcyxhbGlnbkNvbnRlbnQ6dyxhbGlnbkl0ZW1zOncsYWxpZ25TZWxmOncsanVzdGlmeUNvbnRlbnQ6dyxvcmRlcjp3LHRyYW5zaXRpb25EZWxheTp3LHRyYW5zaXRpb25EdXJhdGlvbjp3LHRyYW5zaXRpb25Qcm9wZXJ0eTp3LHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjp3LGJhY2tkcm9wRmlsdGVyOncsc2Nyb2xsU25hcFR5cGU6d21zLHNjcm9sbFNuYXBQb2ludHNYOndtcyxzY3JvbGxTbmFwUG9pbnRzWTp3bXMsc2Nyb2xsU25hcERlc3RpbmF0aW9uOndtcyxzY3JvbGxTbmFwQ29vcmRpbmF0ZTp3bXMsc2hhcGVJbWFnZVRocmVzaG9sZDp3LHNoYXBlSW1hZ2VNYXJnaW46dyxzaGFwZUltYWdlT3V0c2lkZTp3LGh5cGhlbnM6d21tcyxmbG93SW50bzp3bXMsZmxvd0Zyb206d21zLHJlZ2lvbkZyYWdtZW50Ondtcyxib3hTaXppbmc6bSx0ZXh0QWxpZ25MYXN0Om0sdGFiU2l6ZTptLHdyYXBGbG93Om1zLHdyYXBUaHJvdWdoOm1zLHdyYXBNYXJnaW46bXMsdG91Y2hBY3Rpb246bXMsZ3JpZFRlbXBsYXRlQ29sdW1uczptcyxncmlkVGVtcGxhdGVSb3dzOm1zLGdyaWRUZW1wbGF0ZUFyZWFzOm1zLGdyaWRUZW1wbGF0ZTptcyxncmlkQXV0b0NvbHVtbnM6bXMsZ3JpZEF1dG9Sb3dzOm1zLGdyaWRBdXRvRmxvdzptcyxncmlkOm1zLGdyaWRSb3dTdGFydDptcyxncmlkQ29sdW1uU3RhcnQ6bXMsZ3JpZFJvd0VuZDptcyxncmlkUm93Om1zLGdyaWRDb2x1bW46bXMsZ3JpZENvbHVtbkVuZDptcyxncmlkQ29sdW1uR2FwOm1zLGdyaWRSb3dHYXA6bXMsZ3JpZEFyZWE6bXMsZ3JpZEdhcDptcyx0ZXh0U2l6ZUFkanVzdDp3bXMsYm9yZGVySW1hZ2U6dyxib3JkZXJJbWFnZU91dHNldDp3LGJvcmRlckltYWdlUmVwZWF0OncsYm9yZGVySW1hZ2VTbGljZTp3LGJvcmRlckltYWdlU291cmNlOncsYm9yZGVySW1hZ2VXaWR0aDp3fX07ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcHJlZml4LWRhdGEvc3RhdGljLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWNhbGM7dmFyIF9pc1ByZWZpeGVkVmFsdWU9cmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUnKTt2YXIgX2lzUHJlZml4ZWRWYWx1ZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fXZhciBwcmVmaXhlcz1bJy13ZWJraXQtJywnLW1vei0nLCcnXTtmdW5jdGlvbiBjYWxjKHByb3BlcnR5LHZhbHVlKXtpZih0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmISgwLF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSYmdmFsdWUuaW5kZXhPZignY2FsYygnKT4tMSl7cmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbihwcmVmaXgpe3JldHVybiB2YWx1ZS5yZXBsYWNlKC9jYWxjXFwoL2cscHJlZml4KydjYWxjKCcpO30pO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY2FsYy5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1pc1ByZWZpeGVkVmFsdWU7dmFyIHJlZ2V4PS8td2Via2l0LXwtbW96LXwtbXMtLztmdW5jdGlvbiBpc1ByZWZpeGVkVmFsdWUodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmcmVnZXgudGVzdCh2YWx1ZSk7fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9Y3Jvc3NGYWRlO3ZhciBfaXNQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7dmFyIF9pc1ByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O30vLyBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jcm9zcy1mYWRlXG52YXIgcHJlZml4ZXM9Wyctd2Via2l0LScsJyddO2Z1bmN0aW9uIGNyb3NzRmFkZShwcm9wZXJ0eSx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycmJiEoMCxfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkmJnZhbHVlLmluZGV4T2YoJ2Nyb3NzLWZhZGUoJyk+LTEpe3JldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24ocHJlZml4KXtyZXR1cm4gdmFsdWUucmVwbGFjZSgvY3Jvc3MtZmFkZVxcKC9nLHByZWZpeCsnY3Jvc3MtZmFkZSgnKTt9KTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2Nyb3NzRmFkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1jdXJzb3I7dmFyIHByZWZpeGVzPVsnLXdlYmtpdC0nLCctbW96LScsJyddO3ZhciB2YWx1ZXM9eyd6b29tLWluJzp0cnVlLCd6b29tLW91dCc6dHJ1ZSxncmFiOnRydWUsZ3JhYmJpbmc6dHJ1ZX07ZnVuY3Rpb24gY3Vyc29yKHByb3BlcnR5LHZhbHVlKXtpZihwcm9wZXJ0eT09PSdjdXJzb3InJiZ2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKXtyZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uKHByZWZpeCl7cmV0dXJuIHByZWZpeCt2YWx1ZTt9KTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2N1cnNvci5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1maWx0ZXI7dmFyIF9pc1ByZWZpeGVkVmFsdWU9cmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUnKTt2YXIgX2lzUHJlZml4ZWRWYWx1ZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fS8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtZmlsdGVyLWZ1bmN0aW9uXG52YXIgcHJlZml4ZXM9Wyctd2Via2l0LScsJyddO2Z1bmN0aW9uIGZpbHRlcihwcm9wZXJ0eSx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycmJiEoMCxfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkmJnZhbHVlLmluZGV4T2YoJ2ZpbHRlcignKT4tMSl7cmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbihwcmVmaXgpe3JldHVybiB2YWx1ZS5yZXBsYWNlKC9maWx0ZXJcXCgvZyxwcmVmaXgrJ2ZpbHRlcignKTt9KTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1mbGV4O3ZhciB2YWx1ZXM9e2ZsZXg6Wyctd2Via2l0LWJveCcsJy1tb3otYm94JywnLW1zLWZsZXhib3gnLCctd2Via2l0LWZsZXgnLCdmbGV4J10sJ2lubGluZS1mbGV4JzpbJy13ZWJraXQtaW5saW5lLWJveCcsJy1tb3otaW5saW5lLWJveCcsJy1tcy1pbmxpbmUtZmxleGJveCcsJy13ZWJraXQtaW5saW5lLWZsZXgnLCdpbmxpbmUtZmxleCddfTtmdW5jdGlvbiBmbGV4KHByb3BlcnR5LHZhbHVlKXtpZihwcm9wZXJ0eT09PSdkaXNwbGF5JyYmdmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSl7cmV0dXJuIHZhbHVlc1t2YWx1ZV07fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWZsZXhib3hJRTt2YXIgYWx0ZXJuYXRpdmVWYWx1ZXM9eydzcGFjZS1hcm91bmQnOidkaXN0cmlidXRlJywnc3BhY2UtYmV0d2Vlbic6J2p1c3RpZnknLCdmbGV4LXN0YXJ0Jzonc3RhcnQnLCdmbGV4LWVuZCc6J2VuZCd9O3ZhciBhbHRlcm5hdGl2ZVByb3BzPXthbGlnbkNvbnRlbnQ6J21zRmxleExpbmVQYWNrJyxhbGlnblNlbGY6J21zRmxleEl0ZW1BbGlnbicsYWxpZ25JdGVtczonbXNGbGV4QWxpZ24nLGp1c3RpZnlDb250ZW50Oidtc0ZsZXhQYWNrJyxvcmRlcjonbXNGbGV4T3JkZXInLGZsZXhHcm93Oidtc0ZsZXhQb3NpdGl2ZScsZmxleFNocmluazonbXNGbGV4TmVnYXRpdmUnLGZsZXhCYXNpczonbXNGbGV4UHJlZmVycmVkU2l6ZSd9O2Z1bmN0aW9uIGZsZXhib3hJRShwcm9wZXJ0eSx2YWx1ZSxzdHlsZSl7aWYoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpe3N0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXT1hbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV18fHZhbHVlO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveElFLmpzXG4vLyBtb2R1bGUgaWQgPSAxMThcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWZsZXhib3hPbGQ7dmFyIGFsdGVybmF0aXZlVmFsdWVzPXsnc3BhY2UtYXJvdW5kJzonanVzdGlmeScsJ3NwYWNlLWJldHdlZW4nOidqdXN0aWZ5JywnZmxleC1zdGFydCc6J3N0YXJ0JywnZmxleC1lbmQnOidlbmQnLCd3cmFwLXJldmVyc2UnOidtdWx0aXBsZScsd3JhcDonbXVsdGlwbGUnLGZsZXg6J2JveCcsJ2lubGluZS1mbGV4JzonaW5saW5lLWJveCd9O3ZhciBhbHRlcm5hdGl2ZVByb3BzPXthbGlnbkl0ZW1zOidXZWJraXRCb3hBbGlnbicsanVzdGlmeUNvbnRlbnQ6J1dlYmtpdEJveFBhY2snLGZsZXhXcmFwOidXZWJraXRCb3hMaW5lcycsZmxleEdyb3c6J1dlYmtpdEJveEZsZXgnfTtmdW5jdGlvbiBmbGV4Ym94T2xkKHByb3BlcnR5LHZhbHVlLHN0eWxlKXtpZihwcm9wZXJ0eT09PSdmbGV4RGlyZWN0aW9uJyYmdHlwZW9mIHZhbHVlPT09J3N0cmluZycpe2lmKHZhbHVlLmluZGV4T2YoJ2NvbHVtbicpPi0xKXtzdHlsZS5XZWJraXRCb3hPcmllbnQ9J3ZlcnRpY2FsJzt9ZWxzZXtzdHlsZS5XZWJraXRCb3hPcmllbnQ9J2hvcml6b250YWwnO31pZih2YWx1ZS5pbmRleE9mKCdyZXZlcnNlJyk+LTEpe3N0eWxlLldlYmtpdEJveERpcmVjdGlvbj0ncmV2ZXJzZSc7fWVsc2V7c3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uPSdub3JtYWwnO319aWYoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpe3N0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXT1hbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV18fHZhbHVlO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveE9sZC5qc1xuLy8gbW9kdWxlIGlkID0gMTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1ncmFkaWVudDt2YXIgX2lzUHJlZml4ZWRWYWx1ZT1yZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO3ZhciBfaXNQcmVmaXhlZFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9dmFyIHByZWZpeGVzPVsnLXdlYmtpdC0nLCctbW96LScsJyddO3ZhciB2YWx1ZXM9L2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50L2dpO2Z1bmN0aW9uIGdyYWRpZW50KHByb3BlcnR5LHZhbHVlKXtpZih0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmISgwLF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSYmdmFsdWVzLnRlc3QodmFsdWUpKXtyZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uKHByZWZpeCl7cmV0dXJuIHZhbHVlLnJlcGxhY2UodmFsdWVzLGZ1bmN0aW9uKGdyYWQpe3JldHVybiBwcmVmaXgrZ3JhZDt9KTt9KTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjBcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWltYWdlU2V0O3ZhciBfaXNQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7dmFyIF9pc1ByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O30vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWltYWdlLXNldFxudmFyIHByZWZpeGVzPVsnLXdlYmtpdC0nLCcnXTtmdW5jdGlvbiBpbWFnZVNldChwcm9wZXJ0eSx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycmJiEoMCxfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkmJnZhbHVlLmluZGV4T2YoJ2ltYWdlLXNldCgnKT4tMSl7cmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbihwcmVmaXgpe3JldHVybiB2YWx1ZS5yZXBsYWNlKC9pbWFnZS1zZXRcXCgvZyxwcmVmaXgrJ2ltYWdlLXNldCgnKTt9KTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ltYWdlU2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PXBvc2l0aW9uO2Z1bmN0aW9uIHBvc2l0aW9uKHByb3BlcnR5LHZhbHVlKXtpZihwcm9wZXJ0eT09PSdwb3NpdGlvbicmJnZhbHVlPT09J3N0aWNreScpe3JldHVyblsnLXdlYmtpdC1zdGlja3knLCdzdGlja3knXTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3Bvc2l0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PXNpemluZzt2YXIgcHJlZml4ZXM9Wyctd2Via2l0LScsJy1tb3otJywnJ107dmFyIHByb3BlcnRpZXM9e21heEhlaWdodDp0cnVlLG1heFdpZHRoOnRydWUsd2lkdGg6dHJ1ZSxoZWlnaHQ6dHJ1ZSxjb2x1bW5XaWR0aDp0cnVlLG1pbldpZHRoOnRydWUsbWluSGVpZ2h0OnRydWV9O3ZhciB2YWx1ZXM9eydtaW4tY29udGVudCc6dHJ1ZSwnbWF4LWNvbnRlbnQnOnRydWUsJ2ZpbGwtYXZhaWxhYmxlJzp0cnVlLCdmaXQtY29udGVudCc6dHJ1ZSwnY29udGFpbi1mbG9hdHMnOnRydWV9O2Z1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSx2YWx1ZSl7aWYocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkmJnZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpe3JldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24ocHJlZml4KXtyZXR1cm4gcHJlZml4K3ZhbHVlO30pO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvc2l6aW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PXRyYW5zaXRpb247dmFyIF9oeXBoZW5hdGVQcm9wZXJ0eT1yZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2h5cGhlbmF0ZVByb3BlcnR5Jyk7dmFyIF9oeXBoZW5hdGVQcm9wZXJ0eTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlUHJvcGVydHkpO3ZhciBfaXNQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7dmFyIF9pc1ByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7dmFyIF9jYXBpdGFsaXplU3RyaW5nPXJlcXVpcmUoJy4uLy4uL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcnKTt2YXIgX2NhcGl0YWxpemVTdHJpbmcyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9dmFyIHByb3BlcnRpZXM9e3RyYW5zaXRpb246dHJ1ZSx0cmFuc2l0aW9uUHJvcGVydHk6dHJ1ZSxXZWJraXRUcmFuc2l0aW9uOnRydWUsV2Via2l0VHJhbnNpdGlvblByb3BlcnR5OnRydWUsTW96VHJhbnNpdGlvbjp0cnVlLE1velRyYW5zaXRpb25Qcm9wZXJ0eTp0cnVlfTt2YXIgcHJlZml4TWFwcGluZz17V2Via2l0Oictd2Via2l0LScsTW96OictbW96LScsbXM6Jy1tcy0nfTtmdW5jdGlvbiBwcmVmaXhWYWx1ZSh2YWx1ZSxwcm9wZXJ0eVByZWZpeE1hcCl7aWYoKDAsX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpKXtyZXR1cm4gdmFsdWU7fS8vIG9ubHkgc3BsaXQgbXVsdGkgdmFsdWVzLCBub3QgY3ViaWMgYmV6aWVyc1xudmFyIG11bHRpcGxlVmFsdWVzPXZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpO2Zvcih2YXIgaT0wLGxlbj1tdWx0aXBsZVZhbHVlcy5sZW5ndGg7aTxsZW47KytpKXt2YXIgc2luZ2xlVmFsdWU9bXVsdGlwbGVWYWx1ZXNbaV07dmFyIHZhbHVlcz1bc2luZ2xlVmFsdWVdO2Zvcih2YXIgcHJvcGVydHkgaW4gcHJvcGVydHlQcmVmaXhNYXApe3ZhciBkYXNoQ2FzZVByb3BlcnR5PSgwLF9oeXBoZW5hdGVQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcGVydHkpO2lmKHNpbmdsZVZhbHVlLmluZGV4T2YoZGFzaENhc2VQcm9wZXJ0eSk+LTEmJmRhc2hDYXNlUHJvcGVydHkhPT0nb3JkZXInKXt2YXIgcHJlZml4ZXM9cHJvcGVydHlQcmVmaXhNYXBbcHJvcGVydHldO2Zvcih2YXIgaj0wLHBMZW49cHJlZml4ZXMubGVuZ3RoO2o8cExlbjsrK2opey8vIGpvaW4gYWxsIHByZWZpeGVzIGFuZCBjcmVhdGUgYSBuZXcgdmFsdWVcbnZhbHVlcy51bnNoaWZ0KHNpbmdsZVZhbHVlLnJlcGxhY2UoZGFzaENhc2VQcm9wZXJ0eSxwcmVmaXhNYXBwaW5nW3ByZWZpeGVzW2pdXStkYXNoQ2FzZVByb3BlcnR5KSk7fX19bXVsdGlwbGVWYWx1ZXNbaV09dmFsdWVzLmpvaW4oJywnKTt9cmV0dXJuIG11bHRpcGxlVmFsdWVzLmpvaW4oJywnKTt9ZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxwcm9wZXJ0eVByZWZpeE1hcCl7Ly8gYWxzbyBjaGVjayBmb3IgYWxyZWFkeSBwcmVmaXhlZCB0cmFuc2l0aW9uc1xuaWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycmJnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKXt2YXIgb3V0cHV0VmFsdWU9cHJlZml4VmFsdWUodmFsdWUscHJvcGVydHlQcmVmaXhNYXApOy8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBhbHJlYWR5IHByZWZpeGVkXG52YXIgd2Via2l0T3V0cHV0PW91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbih2YWwpe3JldHVybiEvLW1vei18LW1zLS8udGVzdCh2YWwpO30pLmpvaW4oJywnKTtpZihwcm9wZXJ0eS5pbmRleE9mKCdXZWJraXQnKT4tMSl7cmV0dXJuIHdlYmtpdE91dHB1dDt9dmFyIG1vek91dHB1dD1vdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24odmFsKXtyZXR1cm4hLy13ZWJraXQtfC1tcy0vLnRlc3QodmFsKTt9KS5qb2luKCcsJyk7aWYocHJvcGVydHkuaW5kZXhPZignTW96Jyk+LTEpe3JldHVybiBtb3pPdXRwdXQ7fXN0eWxlWydXZWJraXQnKygwLF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldPXdlYmtpdE91dHB1dDtzdHlsZVsnTW96JysoMCxfY2FwaXRhbGl6ZVN0cmluZzIuZGVmYXVsdCkocHJvcGVydHkpXT1tb3pPdXRwdXQ7cmV0dXJuIG91dHB1dFZhbHVlO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvdHJhbnNpdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1oeXBoZW5hdGVQcm9wZXJ0eTt2YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZT1yZXF1aXJlKCdoeXBoZW5hdGUtc3R5bGUtbmFtZScpO3ZhciBfaHlwaGVuYXRlU3R5bGVOYW1lMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZU5hbWUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gaHlwaGVuYXRlUHJvcGVydHkocHJvcGVydHkpe3JldHVybigwLF9oeXBoZW5hdGVTdHlsZU5hbWUyLmRlZmF1bHQpKHByb3BlcnR5KTt9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtaW4tanMtdXRpbHMvbGliL2h5cGhlbmF0ZVByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnOy8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovdmFyIHVwcGVyY2FzZVBhdHRlcm49L1tBLVpdL2c7dmFyIG1zUGF0dGVybj0vXm1zLS87dmFyIGNhY2hlPXt9O2Z1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpe3JldHVybictJyttYXRjaC50b0xvd2VyQ2FzZSgpO31mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSl7aWYoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpe3JldHVybiBjYWNoZVtuYW1lXTt9dmFyIGhOYW1lPW5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLHRvSHlwaGVuTG93ZXIpO3JldHVybiBjYWNoZVtuYW1lXT1tc1BhdHRlcm4udGVzdChoTmFtZSk/Jy0nK2hOYW1lOmhOYW1lO31tb2R1bGUuZXhwb3J0cz1oeXBoZW5hdGVTdHlsZU5hbWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmNqcy5qc1xuLy8gbW9kdWxlIGlkID0gMTI2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfY2FsYz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2NhbGNcIikpO3ZhciBfY3Jvc3NGYWRlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvY3Jvc3NGYWRlXCIpKTt2YXIgX2N1cnNvcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2N1cnNvclwiKSk7dmFyIF9maWx0ZXI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9maWx0ZXJcIikpO3ZhciBfZmxleD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXhcIikpO3ZhciBfZmxleGJveElFPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleGJveElFXCIpKTt2YXIgX2ZsZXhib3hPbGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Ym94T2xkXCIpKTt2YXIgX2dyYWRpZW50PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZ3JhZGllbnRcIikpO3ZhciBfaW1hZ2VTZXQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9pbWFnZVNldFwiKSk7dmFyIF9wb3NpdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3Bvc2l0aW9uXCIpKTt2YXIgX3NpemluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3NpemluZ1wiKSk7dmFyIF90cmFuc2l0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvdHJhbnNpdGlvblwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfTt9dmFyIF9kZWZhdWx0PXtwbHVnaW5zOltfY2FsY1tcImRlZmF1bHRcIl0sX2Nyb3NzRmFkZVtcImRlZmF1bHRcIl0sX2N1cnNvcltcImRlZmF1bHRcIl0sX2ZpbHRlcltcImRlZmF1bHRcIl0sX2ZsZXhbXCJkZWZhdWx0XCJdLF9mbGV4Ym94SUVbXCJkZWZhdWx0XCJdLF9mbGV4Ym94T2xkW1wiZGVmYXVsdFwiXSxfZ3JhZGllbnRbXCJkZWZhdWx0XCJdLF9pbWFnZVNldFtcImRlZmF1bHRcIl0sX3Bvc2l0aW9uW1wiZGVmYXVsdFwiXSxfc2l6aW5nW1wiZGVmYXVsdFwiXSxfdHJhbnNpdGlvbltcImRlZmF1bHRcIl1dLHByZWZpeE1hcDp7Y2hyb21lOnt0cmFuc2Zvcm06MzUsdHJhbnNmb3JtT3JpZ2luOjM1LHRyYW5zZm9ybU9yaWdpblg6MzUsdHJhbnNmb3JtT3JpZ2luWTozNSxiYWNrZmFjZVZpc2liaWxpdHk6MzUscGVyc3BlY3RpdmU6MzUscGVyc3BlY3RpdmVPcmlnaW46MzUsdHJhbnNmb3JtU3R5bGU6MzUsdHJhbnNmb3JtT3JpZ2luWjozNSxhbmltYXRpb246NDIsYW5pbWF0aW9uRGVsYXk6NDIsYW5pbWF0aW9uRGlyZWN0aW9uOjQyLGFuaW1hdGlvbkZpbGxNb2RlOjQyLGFuaW1hdGlvbkR1cmF0aW9uOjQyLGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OjQyLGFuaW1hdGlvbk5hbWU6NDIsYW5pbWF0aW9uUGxheVN0YXRlOjQyLGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOjQyLGFwcGVhcmFuY2U6NjYsdXNlclNlbGVjdDo1Myxmb250S2VybmluZzozMix0ZXh0RW1waGFzaXNQb3NpdGlvbjo2Nix0ZXh0RW1waGFzaXM6NjYsdGV4dEVtcGhhc2lzU3R5bGU6NjYsdGV4dEVtcGhhc2lzQ29sb3I6NjYsYm94RGVjb3JhdGlvbkJyZWFrOjY2LGNsaXBQYXRoOjU0LG1hc2tJbWFnZTo2NixtYXNrTW9kZTo2NixtYXNrUmVwZWF0OjY2LG1hc2tQb3NpdGlvbjo2NixtYXNrQ2xpcDo2NixtYXNrT3JpZ2luOjY2LG1hc2tTaXplOjY2LG1hc2tDb21wb3NpdGU6NjYsbWFzazo2NixtYXNrQm9yZGVyU291cmNlOjY2LG1hc2tCb3JkZXJNb2RlOjY2LG1hc2tCb3JkZXJTbGljZTo2NixtYXNrQm9yZGVyV2lkdGg6NjYsbWFza0JvcmRlck91dHNldDo2NixtYXNrQm9yZGVyUmVwZWF0OjY2LG1hc2tCb3JkZXI6NjYsbWFza1R5cGU6NjYsdGV4dERlY29yYXRpb25TdHlsZTo1Nix0ZXh0RGVjb3JhdGlvblNraXA6NTYsdGV4dERlY29yYXRpb25MaW5lOjU2LHRleHREZWNvcmF0aW9uQ29sb3I6NTYsZmlsdGVyOjUyLGZvbnRGZWF0dXJlU2V0dGluZ3M6NDcsYnJlYWtBZnRlcjo0OSxicmVha0JlZm9yZTo0OSxicmVha0luc2lkZTo0OSxjb2x1bW5Db3VudDo0OSxjb2x1bW5GaWxsOjQ5LGNvbHVtbkdhcDo0OSxjb2x1bW5SdWxlOjQ5LGNvbHVtblJ1bGVDb2xvcjo0OSxjb2x1bW5SdWxlU3R5bGU6NDksY29sdW1uUnVsZVdpZHRoOjQ5LGNvbHVtbnM6NDksY29sdW1uU3Bhbjo0OSxjb2x1bW5XaWR0aDo0OSx3cml0aW5nTW9kZTo0N30sc2FmYXJpOntmbGV4OjgsZmxleEJhc2lzOjgsZmxleERpcmVjdGlvbjo4LGZsZXhHcm93OjgsZmxleEZsb3c6OCxmbGV4U2hyaW5rOjgsZmxleFdyYXA6OCxhbGlnbkNvbnRlbnQ6OCxhbGlnbkl0ZW1zOjgsYWxpZ25TZWxmOjgsanVzdGlmeUNvbnRlbnQ6OCxvcmRlcjo4LHRyYW5zaXRpb246Nix0cmFuc2l0aW9uRGVsYXk6Nix0cmFuc2l0aW9uRHVyYXRpb246Nix0cmFuc2l0aW9uUHJvcGVydHk6Nix0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246Nix0cmFuc2Zvcm06OCx0cmFuc2Zvcm1PcmlnaW46OCx0cmFuc2Zvcm1PcmlnaW5YOjgsdHJhbnNmb3JtT3JpZ2luWTo4LGJhY2tmYWNlVmlzaWJpbGl0eTo4LHBlcnNwZWN0aXZlOjgscGVyc3BlY3RpdmVPcmlnaW46OCx0cmFuc2Zvcm1TdHlsZTo4LHRyYW5zZm9ybU9yaWdpblo6OCxhbmltYXRpb246OCxhbmltYXRpb25EZWxheTo4LGFuaW1hdGlvbkRpcmVjdGlvbjo4LGFuaW1hdGlvbkZpbGxNb2RlOjgsYW5pbWF0aW9uRHVyYXRpb246OCxhbmltYXRpb25JdGVyYXRpb25Db3VudDo4LGFuaW1hdGlvbk5hbWU6OCxhbmltYXRpb25QbGF5U3RhdGU6OCxhbmltYXRpb25UaW1pbmdGdW5jdGlvbjo4LGFwcGVhcmFuY2U6MTEsdXNlclNlbGVjdDoxMSxiYWNrZHJvcEZpbHRlcjoxMSxmb250S2VybmluZzo5LHNjcm9sbFNuYXBUeXBlOjEwLjEsc2Nyb2xsU25hcFBvaW50c1g6MTAuMSxzY3JvbGxTbmFwUG9pbnRzWToxMC4xLHNjcm9sbFNuYXBEZXN0aW5hdGlvbjoxMC4xLHNjcm9sbFNuYXBDb29yZGluYXRlOjEwLjEsdGV4dEVtcGhhc2lzUG9zaXRpb246Nyx0ZXh0RW1waGFzaXM6Nyx0ZXh0RW1waGFzaXNTdHlsZTo3LHRleHRFbXBoYXNpc0NvbG9yOjcsYm94RGVjb3JhdGlvbkJyZWFrOjExLGNsaXBQYXRoOjExLG1hc2tJbWFnZToxMSxtYXNrTW9kZToxMSxtYXNrUmVwZWF0OjExLG1hc2tQb3NpdGlvbjoxMSxtYXNrQ2xpcDoxMSxtYXNrT3JpZ2luOjExLG1hc2tTaXplOjExLG1hc2tDb21wb3NpdGU6MTEsbWFzazoxMSxtYXNrQm9yZGVyU291cmNlOjExLG1hc2tCb3JkZXJNb2RlOjExLG1hc2tCb3JkZXJTbGljZToxMSxtYXNrQm9yZGVyV2lkdGg6MTEsbWFza0JvcmRlck91dHNldDoxMSxtYXNrQm9yZGVyUmVwZWF0OjExLG1hc2tCb3JkZXI6MTEsbWFza1R5cGU6MTEsdGV4dERlY29yYXRpb25TdHlsZToxMSx0ZXh0RGVjb3JhdGlvblNraXA6MTEsdGV4dERlY29yYXRpb25MaW5lOjExLHRleHREZWNvcmF0aW9uQ29sb3I6MTEsc2hhcGVJbWFnZVRocmVzaG9sZDoxMCxzaGFwZUltYWdlTWFyZ2luOjEwLHNoYXBlSW1hZ2VPdXRzaWRlOjEwLGZpbHRlcjo5LGh5cGhlbnM6MTEsZmxvd0ludG86MTEsZmxvd0Zyb206MTEsYnJlYWtCZWZvcmU6OCxicmVha0FmdGVyOjgsYnJlYWtJbnNpZGU6OCxyZWdpb25GcmFnbWVudDoxMSxjb2x1bW5Db3VudDo4LGNvbHVtbkZpbGw6OCxjb2x1bW5HYXA6OCxjb2x1bW5SdWxlOjgsY29sdW1uUnVsZUNvbG9yOjgsY29sdW1uUnVsZVN0eWxlOjgsY29sdW1uUnVsZVdpZHRoOjgsY29sdW1uczo4LGNvbHVtblNwYW46OCxjb2x1bW5XaWR0aDo4LHdyaXRpbmdNb2RlOjEwLjF9LGZpcmVmb3g6e2FwcGVhcmFuY2U6NjAsdXNlclNlbGVjdDo2MCxib3hTaXppbmc6MjgsdGV4dEFsaWduTGFzdDo0OCx0ZXh0RGVjb3JhdGlvblN0eWxlOjM1LHRleHREZWNvcmF0aW9uU2tpcDozNSx0ZXh0RGVjb3JhdGlvbkxpbmU6MzUsdGV4dERlY29yYXRpb25Db2xvcjozNSx0YWJTaXplOjYwLGh5cGhlbnM6NDIsZm9udEZlYXR1cmVTZXR0aW5nczozMyxicmVha0FmdGVyOjUxLGJyZWFrQmVmb3JlOjUxLGJyZWFrSW5zaWRlOjUxLGNvbHVtbkNvdW50OjUxLGNvbHVtbkZpbGw6NTEsY29sdW1uR2FwOjUxLGNvbHVtblJ1bGU6NTEsY29sdW1uUnVsZUNvbG9yOjUxLGNvbHVtblJ1bGVTdHlsZTo1MSxjb2x1bW5SdWxlV2lkdGg6NTEsY29sdW1uczo1MSxjb2x1bW5TcGFuOjUxLGNvbHVtbldpZHRoOjUxfSxvcGVyYTp7ZmxleDoxNixmbGV4QmFzaXM6MTYsZmxleERpcmVjdGlvbjoxNixmbGV4R3JvdzoxNixmbGV4RmxvdzoxNixmbGV4U2hyaW5rOjE2LGZsZXhXcmFwOjE2LGFsaWduQ29udGVudDoxNixhbGlnbkl0ZW1zOjE2LGFsaWduU2VsZjoxNixqdXN0aWZ5Q29udGVudDoxNixvcmRlcjoxNix0cmFuc2Zvcm06MjIsdHJhbnNmb3JtT3JpZ2luOjIyLHRyYW5zZm9ybU9yaWdpblg6MjIsdHJhbnNmb3JtT3JpZ2luWToyMixiYWNrZmFjZVZpc2liaWxpdHk6MjIscGVyc3BlY3RpdmU6MjIscGVyc3BlY3RpdmVPcmlnaW46MjIsdHJhbnNmb3JtU3R5bGU6MjIsdHJhbnNmb3JtT3JpZ2luWjoyMixhbmltYXRpb246MjksYW5pbWF0aW9uRGVsYXk6MjksYW5pbWF0aW9uRGlyZWN0aW9uOjI5LGFuaW1hdGlvbkZpbGxNb2RlOjI5LGFuaW1hdGlvbkR1cmF0aW9uOjI5LGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OjI5LGFuaW1hdGlvbk5hbWU6MjksYW5pbWF0aW9uUGxheVN0YXRlOjI5LGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOjI5LGFwcGVhcmFuY2U6NTAsdXNlclNlbGVjdDo0MCxmb250S2VybmluZzoxOSx0ZXh0RW1waGFzaXNQb3NpdGlvbjo1MCx0ZXh0RW1waGFzaXM6NTAsdGV4dEVtcGhhc2lzU3R5bGU6NTAsdGV4dEVtcGhhc2lzQ29sb3I6NTAsYm94RGVjb3JhdGlvbkJyZWFrOjUwLGNsaXBQYXRoOjQxLG1hc2tJbWFnZTo1MCxtYXNrTW9kZTo1MCxtYXNrUmVwZWF0OjUwLG1hc2tQb3NpdGlvbjo1MCxtYXNrQ2xpcDo1MCxtYXNrT3JpZ2luOjUwLG1hc2tTaXplOjUwLG1hc2tDb21wb3NpdGU6NTAsbWFzazo1MCxtYXNrQm9yZGVyU291cmNlOjUwLG1hc2tCb3JkZXJNb2RlOjUwLG1hc2tCb3JkZXJTbGljZTo1MCxtYXNrQm9yZGVyV2lkdGg6NTAsbWFza0JvcmRlck91dHNldDo1MCxtYXNrQm9yZGVyUmVwZWF0OjUwLG1hc2tCb3JkZXI6NTAsbWFza1R5cGU6NTAsdGV4dERlY29yYXRpb25TdHlsZTo0Myx0ZXh0RGVjb3JhdGlvblNraXA6NDMsdGV4dERlY29yYXRpb25MaW5lOjQzLHRleHREZWNvcmF0aW9uQ29sb3I6NDMsZmlsdGVyOjM5LGZvbnRGZWF0dXJlU2V0dGluZ3M6MzQsYnJlYWtBZnRlcjozNixicmVha0JlZm9yZTozNixicmVha0luc2lkZTozNixjb2x1bW5Db3VudDozNixjb2x1bW5GaWxsOjM2LGNvbHVtbkdhcDozNixjb2x1bW5SdWxlOjM2LGNvbHVtblJ1bGVDb2xvcjozNixjb2x1bW5SdWxlU3R5bGU6MzYsY29sdW1uUnVsZVdpZHRoOjM2LGNvbHVtbnM6MzYsY29sdW1uU3BhbjozNixjb2x1bW5XaWR0aDozNix3cml0aW5nTW9kZTozNH0saWU6e2ZsZXg6MTAsZmxleERpcmVjdGlvbjoxMCxmbGV4RmxvdzoxMCxmbGV4V3JhcDoxMCx0cmFuc2Zvcm06OSx0cmFuc2Zvcm1PcmlnaW46OSx0cmFuc2Zvcm1PcmlnaW5YOjksdHJhbnNmb3JtT3JpZ2luWTo5LHVzZXJTZWxlY3Q6MTEsd3JhcEZsb3c6MTEsd3JhcFRocm91Z2g6MTEsd3JhcE1hcmdpbjoxMSxzY3JvbGxTbmFwVHlwZToxMSxzY3JvbGxTbmFwUG9pbnRzWDoxMSxzY3JvbGxTbmFwUG9pbnRzWToxMSxzY3JvbGxTbmFwRGVzdGluYXRpb246MTEsc2Nyb2xsU25hcENvb3JkaW5hdGU6MTEsdG91Y2hBY3Rpb246MTAsaHlwaGVuczoxMSxmbG93SW50bzoxMSxmbG93RnJvbToxMSxicmVha0JlZm9yZToxMSxicmVha0FmdGVyOjExLGJyZWFrSW5zaWRlOjExLHJlZ2lvbkZyYWdtZW50OjExLGdyaWRUZW1wbGF0ZUNvbHVtbnM6MTEsZ3JpZFRlbXBsYXRlUm93czoxMSxncmlkVGVtcGxhdGVBcmVhczoxMSxncmlkVGVtcGxhdGU6MTEsZ3JpZEF1dG9Db2x1bW5zOjExLGdyaWRBdXRvUm93czoxMSxncmlkQXV0b0Zsb3c6MTEsZ3JpZDoxMSxncmlkUm93U3RhcnQ6MTEsZ3JpZENvbHVtblN0YXJ0OjExLGdyaWRSb3dFbmQ6MTEsZ3JpZFJvdzoxMSxncmlkQ29sdW1uOjExLGdyaWRDb2x1bW5FbmQ6MTEsZ3JpZENvbHVtbkdhcDoxMSxncmlkUm93R2FwOjExLGdyaWRBcmVhOjExLGdyaWRHYXA6MTEsdGV4dFNpemVBZGp1c3Q6MTEsd3JpdGluZ01vZGU6MTF9LGVkZ2U6e3VzZXJTZWxlY3Q6MTcsd3JhcEZsb3c6MTcsd3JhcFRocm91Z2g6MTcsd3JhcE1hcmdpbjoxNyxzY3JvbGxTbmFwVHlwZToxNyxzY3JvbGxTbmFwUG9pbnRzWDoxNyxzY3JvbGxTbmFwUG9pbnRzWToxNyxzY3JvbGxTbmFwRGVzdGluYXRpb246MTcsc2Nyb2xsU25hcENvb3JkaW5hdGU6MTcsaHlwaGVuczoxNyxmbG93SW50bzoxNyxmbG93RnJvbToxNyxicmVha0JlZm9yZToxNyxicmVha0FmdGVyOjE3LGJyZWFrSW5zaWRlOjE3LHJlZ2lvbkZyYWdtZW50OjE3LGdyaWRUZW1wbGF0ZUNvbHVtbnM6MTUsZ3JpZFRlbXBsYXRlUm93czoxNSxncmlkVGVtcGxhdGVBcmVhczoxNSxncmlkVGVtcGxhdGU6MTUsZ3JpZEF1dG9Db2x1bW5zOjE1LGdyaWRBdXRvUm93czoxNSxncmlkQXV0b0Zsb3c6MTUsZ3JpZDoxNSxncmlkUm93U3RhcnQ6MTUsZ3JpZENvbHVtblN0YXJ0OjE1LGdyaWRSb3dFbmQ6MTUsZ3JpZFJvdzoxNSxncmlkQ29sdW1uOjE1LGdyaWRDb2x1bW5FbmQ6MTUsZ3JpZENvbHVtbkdhcDoxNSxncmlkUm93R2FwOjE1LGdyaWRBcmVhOjE1LGdyaWRHYXA6MTV9LGlvc19zYWY6e2ZsZXg6OC4xLGZsZXhCYXNpczo4LjEsZmxleERpcmVjdGlvbjo4LjEsZmxleEdyb3c6OC4xLGZsZXhGbG93OjguMSxmbGV4U2hyaW5rOjguMSxmbGV4V3JhcDo4LjEsYWxpZ25Db250ZW50OjguMSxhbGlnbkl0ZW1zOjguMSxhbGlnblNlbGY6OC4xLGp1c3RpZnlDb250ZW50OjguMSxvcmRlcjo4LjEsdHJhbnNpdGlvbjo2LHRyYW5zaXRpb25EZWxheTo2LHRyYW5zaXRpb25EdXJhdGlvbjo2LHRyYW5zaXRpb25Qcm9wZXJ0eTo2LHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjo2LHRyYW5zZm9ybTo4LjEsdHJhbnNmb3JtT3JpZ2luOjguMSx0cmFuc2Zvcm1PcmlnaW5YOjguMSx0cmFuc2Zvcm1PcmlnaW5ZOjguMSxiYWNrZmFjZVZpc2liaWxpdHk6OC4xLHBlcnNwZWN0aXZlOjguMSxwZXJzcGVjdGl2ZU9yaWdpbjo4LjEsdHJhbnNmb3JtU3R5bGU6OC4xLHRyYW5zZm9ybU9yaWdpblo6OC4xLGFuaW1hdGlvbjo4LjEsYW5pbWF0aW9uRGVsYXk6OC4xLGFuaW1hdGlvbkRpcmVjdGlvbjo4LjEsYW5pbWF0aW9uRmlsbE1vZGU6OC4xLGFuaW1hdGlvbkR1cmF0aW9uOjguMSxhbmltYXRpb25JdGVyYXRpb25Db3VudDo4LjEsYW5pbWF0aW9uTmFtZTo4LjEsYW5pbWF0aW9uUGxheVN0YXRlOjguMSxhbmltYXRpb25UaW1pbmdGdW5jdGlvbjo4LjEsYXBwZWFyYW5jZToxMSx1c2VyU2VsZWN0OjExLGJhY2tkcm9wRmlsdGVyOjExLGZvbnRLZXJuaW5nOjExLHNjcm9sbFNuYXBUeXBlOjEwLjMsc2Nyb2xsU25hcFBvaW50c1g6MTAuMyxzY3JvbGxTbmFwUG9pbnRzWToxMC4zLHNjcm9sbFNuYXBEZXN0aW5hdGlvbjoxMC4zLHNjcm9sbFNuYXBDb29yZGluYXRlOjEwLjMsYm94RGVjb3JhdGlvbkJyZWFrOjExLGNsaXBQYXRoOjExLG1hc2tJbWFnZToxMSxtYXNrTW9kZToxMSxtYXNrUmVwZWF0OjExLG1hc2tQb3NpdGlvbjoxMSxtYXNrQ2xpcDoxMSxtYXNrT3JpZ2luOjExLG1hc2tTaXplOjExLG1hc2tDb21wb3NpdGU6MTEsbWFzazoxMSxtYXNrQm9yZGVyU291cmNlOjExLG1hc2tCb3JkZXJNb2RlOjExLG1hc2tCb3JkZXJTbGljZToxMSxtYXNrQm9yZGVyV2lkdGg6MTEsbWFza0JvcmRlck91dHNldDoxMSxtYXNrQm9yZGVyUmVwZWF0OjExLG1hc2tCb3JkZXI6MTEsbWFza1R5cGU6MTEsdGV4dFNpemVBZGp1c3Q6MTEsdGV4dERlY29yYXRpb25TdHlsZToxMSx0ZXh0RGVjb3JhdGlvblNraXA6MTEsdGV4dERlY29yYXRpb25MaW5lOjExLHRleHREZWNvcmF0aW9uQ29sb3I6MTEsc2hhcGVJbWFnZVRocmVzaG9sZDoxMCxzaGFwZUltYWdlTWFyZ2luOjEwLHNoYXBlSW1hZ2VPdXRzaWRlOjEwLGZpbHRlcjo5LGh5cGhlbnM6MTEsZmxvd0ludG86MTEsZmxvd0Zyb206MTEsYnJlYWtCZWZvcmU6OC4xLGJyZWFrQWZ0ZXI6OC4xLGJyZWFrSW5zaWRlOjguMSxyZWdpb25GcmFnbWVudDoxMSxjb2x1bW5Db3VudDo4LjEsY29sdW1uRmlsbDo4LjEsY29sdW1uR2FwOjguMSxjb2x1bW5SdWxlOjguMSxjb2x1bW5SdWxlQ29sb3I6OC4xLGNvbHVtblJ1bGVTdHlsZTo4LjEsY29sdW1uUnVsZVdpZHRoOjguMSxjb2x1bW5zOjguMSxjb2x1bW5TcGFuOjguMSxjb2x1bW5XaWR0aDo4LjEsd3JpdGluZ01vZGU6MTAuM30sYW5kcm9pZDp7Ym9yZGVySW1hZ2U6NC4yLGJvcmRlckltYWdlT3V0c2V0OjQuMixib3JkZXJJbWFnZVJlcGVhdDo0LjIsYm9yZGVySW1hZ2VTbGljZTo0LjIsYm9yZGVySW1hZ2VTb3VyY2U6NC4yLGJvcmRlckltYWdlV2lkdGg6NC4yLGZsZXg6NC4yLGZsZXhCYXNpczo0LjIsZmxleERpcmVjdGlvbjo0LjIsZmxleEdyb3c6NC4yLGZsZXhGbG93OjQuMixmbGV4U2hyaW5rOjQuMixmbGV4V3JhcDo0LjIsYWxpZ25Db250ZW50OjQuMixhbGlnbkl0ZW1zOjQuMixhbGlnblNlbGY6NC4yLGp1c3RpZnlDb250ZW50OjQuMixvcmRlcjo0LjIsdHJhbnNpdGlvbjo0LjIsdHJhbnNpdGlvbkRlbGF5OjQuMix0cmFuc2l0aW9uRHVyYXRpb246NC4yLHRyYW5zaXRpb25Qcm9wZXJ0eTo0LjIsdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOjQuMix0cmFuc2Zvcm06NC40LHRyYW5zZm9ybU9yaWdpbjo0LjQsdHJhbnNmb3JtT3JpZ2luWDo0LjQsdHJhbnNmb3JtT3JpZ2luWTo0LjQsYmFja2ZhY2VWaXNpYmlsaXR5OjQuNCxwZXJzcGVjdGl2ZTo0LjQscGVyc3BlY3RpdmVPcmlnaW46NC40LHRyYW5zZm9ybVN0eWxlOjQuNCx0cmFuc2Zvcm1PcmlnaW5aOjQuNCxhbmltYXRpb246NC40LGFuaW1hdGlvbkRlbGF5OjQuNCxhbmltYXRpb25EaXJlY3Rpb246NC40LGFuaW1hdGlvbkZpbGxNb2RlOjQuNCxhbmltYXRpb25EdXJhdGlvbjo0LjQsYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6NC40LGFuaW1hdGlvbk5hbWU6NC40LGFuaW1hdGlvblBsYXlTdGF0ZTo0LjQsYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246NC40LGFwcGVhcmFuY2U6NjIsdXNlclNlbGVjdDo0LjQsZm9udEtlcm5pbmc6NC40LHRleHRFbXBoYXNpc1Bvc2l0aW9uOjYyLHRleHRFbXBoYXNpczo2Mix0ZXh0RW1waGFzaXNTdHlsZTo2Mix0ZXh0RW1waGFzaXNDb2xvcjo2Mixib3hEZWNvcmF0aW9uQnJlYWs6NjIsY2xpcFBhdGg6NC40LG1hc2tJbWFnZTo2MixtYXNrTW9kZTo2MixtYXNrUmVwZWF0OjYyLG1hc2tQb3NpdGlvbjo2MixtYXNrQ2xpcDo2MixtYXNrT3JpZ2luOjYyLG1hc2tTaXplOjYyLG1hc2tDb21wb3NpdGU6NjIsbWFzazo2MixtYXNrQm9yZGVyU291cmNlOjYyLG1hc2tCb3JkZXJNb2RlOjYyLG1hc2tCb3JkZXJTbGljZTo2MixtYXNrQm9yZGVyV2lkdGg6NjIsbWFza0JvcmRlck91dHNldDo2MixtYXNrQm9yZGVyUmVwZWF0OjYyLG1hc2tCb3JkZXI6NjIsbWFza1R5cGU6NjIsZmlsdGVyOjQuNCxmb250RmVhdHVyZVNldHRpbmdzOjQuNCxicmVha0FmdGVyOjQuNCxicmVha0JlZm9yZTo0LjQsYnJlYWtJbnNpZGU6NC40LGNvbHVtbkNvdW50OjQuNCxjb2x1bW5GaWxsOjQuNCxjb2x1bW5HYXA6NC40LGNvbHVtblJ1bGU6NC40LGNvbHVtblJ1bGVDb2xvcjo0LjQsY29sdW1uUnVsZVN0eWxlOjQuNCxjb2x1bW5SdWxlV2lkdGg6NC40LGNvbHVtbnM6NC40LGNvbHVtblNwYW46NC40LGNvbHVtbldpZHRoOjQuNCx3cml0aW5nTW9kZTo0LjR9LGFuZF9jaHI6e2FwcGVhcmFuY2U6NjIsdGV4dEVtcGhhc2lzUG9zaXRpb246NjIsdGV4dEVtcGhhc2lzOjYyLHRleHRFbXBoYXNpc1N0eWxlOjYyLHRleHRFbXBoYXNpc0NvbG9yOjYyLGJveERlY29yYXRpb25CcmVhazo2MixtYXNrSW1hZ2U6NjIsbWFza01vZGU6NjIsbWFza1JlcGVhdDo2MixtYXNrUG9zaXRpb246NjIsbWFza0NsaXA6NjIsbWFza09yaWdpbjo2MixtYXNrU2l6ZTo2MixtYXNrQ29tcG9zaXRlOjYyLG1hc2s6NjIsbWFza0JvcmRlclNvdXJjZTo2MixtYXNrQm9yZGVyTW9kZTo2MixtYXNrQm9yZGVyU2xpY2U6NjIsbWFza0JvcmRlcldpZHRoOjYyLG1hc2tCb3JkZXJPdXRzZXQ6NjIsbWFza0JvcmRlclJlcGVhdDo2MixtYXNrQm9yZGVyOjYyLG1hc2tUeXBlOjYyfSxhbmRfdWM6e2ZsZXg6MTEuNCxmbGV4QmFzaXM6MTEuNCxmbGV4RGlyZWN0aW9uOjExLjQsZmxleEdyb3c6MTEuNCxmbGV4RmxvdzoxMS40LGZsZXhTaHJpbms6MTEuNCxmbGV4V3JhcDoxMS40LGFsaWduQ29udGVudDoxMS40LGFsaWduSXRlbXM6MTEuNCxhbGlnblNlbGY6MTEuNCxqdXN0aWZ5Q29udGVudDoxMS40LG9yZGVyOjExLjQsdHJhbnNmb3JtOjExLjQsdHJhbnNmb3JtT3JpZ2luOjExLjQsdHJhbnNmb3JtT3JpZ2luWDoxMS40LHRyYW5zZm9ybU9yaWdpblk6MTEuNCxiYWNrZmFjZVZpc2liaWxpdHk6MTEuNCxwZXJzcGVjdGl2ZToxMS40LHBlcnNwZWN0aXZlT3JpZ2luOjExLjQsdHJhbnNmb3JtU3R5bGU6MTEuNCx0cmFuc2Zvcm1PcmlnaW5aOjExLjQsYW5pbWF0aW9uOjExLjQsYW5pbWF0aW9uRGVsYXk6MTEuNCxhbmltYXRpb25EaXJlY3Rpb246MTEuNCxhbmltYXRpb25GaWxsTW9kZToxMS40LGFuaW1hdGlvbkR1cmF0aW9uOjExLjQsYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6MTEuNCxhbmltYXRpb25OYW1lOjExLjQsYW5pbWF0aW9uUGxheVN0YXRlOjExLjQsYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246MTEuNCxhcHBlYXJhbmNlOjExLjQsdXNlclNlbGVjdDoxMS40LHRleHRFbXBoYXNpc1Bvc2l0aW9uOjExLjQsdGV4dEVtcGhhc2lzOjExLjQsdGV4dEVtcGhhc2lzU3R5bGU6MTEuNCx0ZXh0RW1waGFzaXNDb2xvcjoxMS40LGNsaXBQYXRoOjExLjQsbWFza0ltYWdlOjExLjQsbWFza01vZGU6MTEuNCxtYXNrUmVwZWF0OjExLjQsbWFza1Bvc2l0aW9uOjExLjQsbWFza0NsaXA6MTEuNCxtYXNrT3JpZ2luOjExLjQsbWFza1NpemU6MTEuNCxtYXNrQ29tcG9zaXRlOjExLjQsbWFzazoxMS40LG1hc2tCb3JkZXJTb3VyY2U6MTEuNCxtYXNrQm9yZGVyTW9kZToxMS40LG1hc2tCb3JkZXJTbGljZToxMS40LG1hc2tCb3JkZXJXaWR0aDoxMS40LG1hc2tCb3JkZXJPdXRzZXQ6MTEuNCxtYXNrQm9yZGVyUmVwZWF0OjExLjQsbWFza0JvcmRlcjoxMS40LG1hc2tUeXBlOjExLjQsdGV4dFNpemVBZGp1c3Q6MTEuNCxmaWx0ZXI6MTEuNCxoeXBoZW5zOjExLjQsZm9udEZlYXR1cmVTZXR0aW5nczoxMS40LGJyZWFrQWZ0ZXI6MTEuNCxicmVha0JlZm9yZToxMS40LGJyZWFrSW5zaWRlOjExLjQsY29sdW1uQ291bnQ6MTEuNCxjb2x1bW5GaWxsOjExLjQsY29sdW1uR2FwOjExLjQsY29sdW1uUnVsZToxMS40LGNvbHVtblJ1bGVDb2xvcjoxMS40LGNvbHVtblJ1bGVTdHlsZToxMS40LGNvbHVtblJ1bGVXaWR0aDoxMS40LGNvbHVtbnM6MTEuNCxjb2x1bW5TcGFuOjExLjQsY29sdW1uV2lkdGg6MTEuNCx3cml0aW5nTW9kZToxMS40fSxvcF9taW5pOnt9fX07ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcHJlZml4LWRhdGEvZHluYW1pYy5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1jYWxjO3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZT1yZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7dmFyIF9nZXRQcmVmaXhlZFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fWZ1bmN0aW9uIGNhbGMocHJvcGVydHksdmFsdWUsc3R5bGUsX3JlZil7dmFyIGJyb3dzZXJOYW1lPV9yZWYuYnJvd3Nlck5hbWUsYnJvd3NlclZlcnNpb249X3JlZi5icm93c2VyVmVyc2lvbixjc3NQcmVmaXg9X3JlZi5jc3NQcmVmaXgsa2VlcFVucHJlZml4ZWQ9X3JlZi5rZWVwVW5wcmVmaXhlZDtpZih0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmdmFsdWUuaW5kZXhPZignY2FsYygnKT4tMSYmKGJyb3dzZXJOYW1lPT09J2ZpcmVmb3gnJiZicm93c2VyVmVyc2lvbjwxNXx8YnJvd3Nlck5hbWU9PT0nY2hyb21lJyYmYnJvd3NlclZlcnNpb248MjV8fGJyb3dzZXJOYW1lPT09J3NhZmFyaScmJmJyb3dzZXJWZXJzaW9uPDYuMXx8YnJvd3Nlck5hbWU9PT0naW9zX3NhZicmJmJyb3dzZXJWZXJzaW9uPDcpKXtyZXR1cm4oMCxfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUucmVwbGFjZSgvY2FsY1xcKC9nLGNzc1ByZWZpeCsnY2FsYygnKSx2YWx1ZSxrZWVwVW5wcmVmaXhlZCk7fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvY2FsYy5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWdldFByZWZpeGVkVmFsdWU7ZnVuY3Rpb24gZ2V0UHJlZml4ZWRWYWx1ZShwcmVmaXhlZFZhbHVlLHZhbHVlLGtlZXBVbnByZWZpeGVkKXtpZihrZWVwVW5wcmVmaXhlZCl7cmV0dXJuW3ByZWZpeGVkVmFsdWUsdmFsdWVdO31yZXR1cm4gcHJlZml4ZWRWYWx1ZTt9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9nZXRQcmVmaXhlZFZhbHVlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWNyb3NzRmFkZTt2YXIgX2dldFByZWZpeGVkVmFsdWU9cmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZScpO3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRWYWx1ZSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBjcm9zc0ZhZGUocHJvcGVydHksdmFsdWUsc3R5bGUsX3JlZil7dmFyIGJyb3dzZXJOYW1lPV9yZWYuYnJvd3Nlck5hbWUsYnJvd3NlclZlcnNpb249X3JlZi5icm93c2VyVmVyc2lvbixjc3NQcmVmaXg9X3JlZi5jc3NQcmVmaXgsa2VlcFVucHJlZml4ZWQ9X3JlZi5rZWVwVW5wcmVmaXhlZDtpZih0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmdmFsdWUuaW5kZXhPZignY3Jvc3MtZmFkZSgnKT4tMSYmKGJyb3dzZXJOYW1lPT09J2Nocm9tZSd8fGJyb3dzZXJOYW1lPT09J29wZXJhJ3x8YnJvd3Nlck5hbWU9PT0nYW5kX2Nocid8fChicm93c2VyTmFtZT09PSdpb3Nfc2FmJ3x8YnJvd3Nlck5hbWU9PT0nc2FmYXJpJykmJmJyb3dzZXJWZXJzaW9uPDEwKSl7cmV0dXJuKDAsX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlLnJlcGxhY2UoL2Nyb3NzLWZhZGVcXCgvZyxjc3NQcmVmaXgrJ2Nyb3NzLWZhZGUoJyksdmFsdWUsa2VlcFVucHJlZml4ZWQpO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2Nyb3NzRmFkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1jdXJzb3I7dmFyIF9nZXRQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTt2YXIgX2dldFByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9dmFyIGdyYWJWYWx1ZXM9e2dyYWI6dHJ1ZSxncmFiYmluZzp0cnVlfTt2YXIgem9vbVZhbHVlcz17J3pvb20taW4nOnRydWUsJ3pvb20tb3V0Jzp0cnVlfTtmdW5jdGlvbiBjdXJzb3IocHJvcGVydHksdmFsdWUsc3R5bGUsX3JlZil7dmFyIGJyb3dzZXJOYW1lPV9yZWYuYnJvd3Nlck5hbWUsYnJvd3NlclZlcnNpb249X3JlZi5icm93c2VyVmVyc2lvbixjc3NQcmVmaXg9X3JlZi5jc3NQcmVmaXgsa2VlcFVucHJlZml4ZWQ9X3JlZi5rZWVwVW5wcmVmaXhlZDsvLyBhZGRzIHByZWZpeGVzIGZvciBmaXJlZm94LCBjaHJvbWUsIHNhZmFyaSwgYW5kIG9wZXJhIHJlZ2FyZGxlc3Mgb2Zcbi8vIHZlcnNpb24gdW50aWwgYSByZWxpYWJsZSBicm93c2VyIHN1cHBvcnQgaW5mbyBjYW4gYmUgZm91bmRcbi8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzc5XG5pZihwcm9wZXJ0eT09PSdjdXJzb3InJiZncmFiVmFsdWVzW3ZhbHVlXSYmKGJyb3dzZXJOYW1lPT09J2ZpcmVmb3gnfHxicm93c2VyTmFtZT09PSdjaHJvbWUnfHxicm93c2VyTmFtZT09PSdzYWZhcmknfHxicm93c2VyTmFtZT09PSdvcGVyYScpKXtyZXR1cm4oMCxfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4K3ZhbHVlLHZhbHVlLGtlZXBVbnByZWZpeGVkKTt9aWYocHJvcGVydHk9PT0nY3Vyc29yJyYmem9vbVZhbHVlc1t2YWx1ZV0mJihicm93c2VyTmFtZT09PSdmaXJlZm94JyYmYnJvd3NlclZlcnNpb248MjR8fGJyb3dzZXJOYW1lPT09J2Nocm9tZScmJmJyb3dzZXJWZXJzaW9uPDM3fHxicm93c2VyTmFtZT09PSdzYWZhcmknJiZicm93c2VyVmVyc2lvbjw5fHxicm93c2VyTmFtZT09PSdvcGVyYScmJmJyb3dzZXJWZXJzaW9uPDI0KSl7cmV0dXJuKDAsX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzc1ByZWZpeCt2YWx1ZSx2YWx1ZSxrZWVwVW5wcmVmaXhlZCk7fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvY3Vyc29yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWZpbHRlcjt2YXIgX2dldFByZWZpeGVkVmFsdWU9cmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZScpO3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRWYWx1ZSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBmaWx0ZXIocHJvcGVydHksdmFsdWUsc3R5bGUsX3JlZil7dmFyIGJyb3dzZXJOYW1lPV9yZWYuYnJvd3Nlck5hbWUsYnJvd3NlclZlcnNpb249X3JlZi5icm93c2VyVmVyc2lvbixjc3NQcmVmaXg9X3JlZi5jc3NQcmVmaXgsa2VlcFVucHJlZml4ZWQ9X3JlZi5rZWVwVW5wcmVmaXhlZDtpZih0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmdmFsdWUuaW5kZXhPZignZmlsdGVyKCcpPi0xJiYoYnJvd3Nlck5hbWU9PT0naW9zX3NhZid8fGJyb3dzZXJOYW1lPT09J3NhZmFyaScmJmJyb3dzZXJWZXJzaW9uPDkuMSkpe3JldHVybigwLF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZS5yZXBsYWNlKC9maWx0ZXJcXCgvZyxjc3NQcmVmaXgrJ2ZpbHRlcignKSx2YWx1ZSxrZWVwVW5wcmVmaXhlZCk7fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmlsdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWZsZXg7dmFyIF9nZXRQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTt2YXIgX2dldFByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9dmFyIHZhbHVlcz17ZmxleDp0cnVlLCdpbmxpbmUtZmxleCc6dHJ1ZX07ZnVuY3Rpb24gZmxleChwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxfcmVmKXt2YXIgYnJvd3Nlck5hbWU9X3JlZi5icm93c2VyTmFtZSxicm93c2VyVmVyc2lvbj1fcmVmLmJyb3dzZXJWZXJzaW9uLGNzc1ByZWZpeD1fcmVmLmNzc1ByZWZpeCxrZWVwVW5wcmVmaXhlZD1fcmVmLmtlZXBVbnByZWZpeGVkO2lmKHByb3BlcnR5PT09J2Rpc3BsYXknJiZ2YWx1ZXNbdmFsdWVdJiYoYnJvd3Nlck5hbWU9PT0nY2hyb21lJyYmYnJvd3NlclZlcnNpb248MjkmJmJyb3dzZXJWZXJzaW9uPjIwfHwoYnJvd3Nlck5hbWU9PT0nc2FmYXJpJ3x8YnJvd3Nlck5hbWU9PT0naW9zX3NhZicpJiZicm93c2VyVmVyc2lvbjw5JiZicm93c2VyVmVyc2lvbj42fHxicm93c2VyTmFtZT09PSdvcGVyYScmJihicm93c2VyVmVyc2lvbj09PTE1fHxicm93c2VyVmVyc2lvbj09PTE2KSkpe3JldHVybigwLF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3NQcmVmaXgrdmFsdWUsdmFsdWUsa2VlcFVucHJlZml4ZWQpO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXguanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9ZmxleGJveElFO3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZT1yZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7dmFyIF9nZXRQcmVmaXhlZFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fXZhciBhbHRlcm5hdGl2ZVZhbHVlcz17J3NwYWNlLWFyb3VuZCc6J2Rpc3RyaWJ1dGUnLCdzcGFjZS1iZXR3ZWVuJzonanVzdGlmeScsJ2ZsZXgtc3RhcnQnOidzdGFydCcsJ2ZsZXgtZW5kJzonZW5kJyxmbGV4OidmbGV4Ym94JywnaW5saW5lLWZsZXgnOidpbmxpbmUtZmxleGJveCd9O3ZhciBhbHRlcm5hdGl2ZVByb3BzPXthbGlnbkNvbnRlbnQ6J21zRmxleExpbmVQYWNrJyxhbGlnblNlbGY6J21zRmxleEl0ZW1BbGlnbicsYWxpZ25JdGVtczonbXNGbGV4QWxpZ24nLGp1c3RpZnlDb250ZW50Oidtc0ZsZXhQYWNrJyxvcmRlcjonbXNGbGV4T3JkZXInLGZsZXhHcm93Oidtc0ZsZXhQb3NpdGl2ZScsZmxleFNocmluazonbXNGbGV4TmVnYXRpdmUnLGZsZXhCYXNpczonbXNGbGV4UHJlZmVycmVkU2l6ZSd9O2Z1bmN0aW9uIGZsZXhib3hJRShwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxfcmVmKXt2YXIgYnJvd3Nlck5hbWU9X3JlZi5icm93c2VyTmFtZSxicm93c2VyVmVyc2lvbj1fcmVmLmJyb3dzZXJWZXJzaW9uLGNzc1ByZWZpeD1fcmVmLmNzc1ByZWZpeCxrZWVwVW5wcmVmaXhlZD1fcmVmLmtlZXBVbnByZWZpeGVkLHJlcXVpcmVzUHJlZml4PV9yZWYucmVxdWlyZXNQcmVmaXg7aWYoKGFsdGVybmF0aXZlUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpfHxwcm9wZXJ0eT09PSdkaXNwbGF5JyYmdHlwZW9mIHZhbHVlPT09J3N0cmluZycmJnZhbHVlLmluZGV4T2YoJ2ZsZXgnKT4tMSkmJihicm93c2VyTmFtZT09PSdpZV9tb2InfHxicm93c2VyTmFtZT09PSdpZScpJiZicm93c2VyVmVyc2lvbj09PTEwKXtkZWxldGUgcmVxdWlyZXNQcmVmaXhbcHJvcGVydHldO2lmKCFrZWVwVW5wcmVmaXhlZCYmIUFycmF5LmlzQXJyYXkoc3R5bGVbcHJvcGVydHldKSl7ZGVsZXRlIHN0eWxlW3Byb3BlcnR5XTt9aWYocHJvcGVydHk9PT0nZGlzcGxheScmJmFsdGVybmF0aXZlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSl7cmV0dXJuKDAsX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzc1ByZWZpeCthbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0sdmFsdWUsa2VlcFVucHJlZml4ZWQpO31pZihhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSl7c3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dPWFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXXx8dmFsdWU7fX19bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXhib3hJRS5qc1xuLy8gbW9kdWxlIGlkID0gMTM0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1mbGV4Ym94T2xkO3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZT1yZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7dmFyIF9nZXRQcmVmaXhlZFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fXZhciBhbHRlcm5hdGl2ZVZhbHVlcz17J3NwYWNlLWFyb3VuZCc6J2p1c3RpZnknLCdzcGFjZS1iZXR3ZWVuJzonanVzdGlmeScsJ2ZsZXgtc3RhcnQnOidzdGFydCcsJ2ZsZXgtZW5kJzonZW5kJywnd3JhcC1yZXZlcnNlJzonbXVsdGlwbGUnLHdyYXA6J211bHRpcGxlJyxmbGV4Oidib3gnLCdpbmxpbmUtZmxleCc6J2lubGluZS1ib3gnfTt2YXIgYWx0ZXJuYXRpdmVQcm9wcz17YWxpZ25JdGVtczonV2Via2l0Qm94QWxpZ24nLGp1c3RpZnlDb250ZW50OidXZWJraXRCb3hQYWNrJyxmbGV4V3JhcDonV2Via2l0Qm94TGluZXMnLGZsZXhHcm93OidXZWJraXRCb3hGbGV4J307dmFyIG90aGVyUHJvcHM9WydhbGlnbkNvbnRlbnQnLCdhbGlnblNlbGYnLCdvcmRlcicsJ2ZsZXhHcm93JywnZmxleFNocmluaycsJ2ZsZXhCYXNpcycsJ2ZsZXhEaXJlY3Rpb24nXTt2YXIgcHJvcGVydGllcz1PYmplY3Qua2V5cyhhbHRlcm5hdGl2ZVByb3BzKS5jb25jYXQob3RoZXJQcm9wcyk7ZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxfcmVmKXt2YXIgYnJvd3Nlck5hbWU9X3JlZi5icm93c2VyTmFtZSxicm93c2VyVmVyc2lvbj1fcmVmLmJyb3dzZXJWZXJzaW9uLGNzc1ByZWZpeD1fcmVmLmNzc1ByZWZpeCxrZWVwVW5wcmVmaXhlZD1fcmVmLmtlZXBVbnByZWZpeGVkLHJlcXVpcmVzUHJlZml4PV9yZWYucmVxdWlyZXNQcmVmaXg7aWYoKHByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSk+LTF8fHByb3BlcnR5PT09J2Rpc3BsYXknJiZ0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmdmFsdWUuaW5kZXhPZignZmxleCcpPi0xKSYmKGJyb3dzZXJOYW1lPT09J2ZpcmVmb3gnJiZicm93c2VyVmVyc2lvbjwyMnx8YnJvd3Nlck5hbWU9PT0nY2hyb21lJyYmYnJvd3NlclZlcnNpb248MjF8fChicm93c2VyTmFtZT09PSdzYWZhcmknfHxicm93c2VyTmFtZT09PSdpb3Nfc2FmJykmJmJyb3dzZXJWZXJzaW9uPD02LjF8fGJyb3dzZXJOYW1lPT09J2FuZHJvaWQnJiZicm93c2VyVmVyc2lvbjw0LjR8fGJyb3dzZXJOYW1lPT09J2FuZF91YycpKXtkZWxldGUgcmVxdWlyZXNQcmVmaXhbcHJvcGVydHldO2lmKCFrZWVwVW5wcmVmaXhlZCYmIUFycmF5LmlzQXJyYXkoc3R5bGVbcHJvcGVydHldKSl7ZGVsZXRlIHN0eWxlW3Byb3BlcnR5XTt9aWYocHJvcGVydHk9PT0nZmxleERpcmVjdGlvbicmJnR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnKXtpZih2YWx1ZS5pbmRleE9mKCdjb2x1bW4nKT4tMSl7c3R5bGUuV2Via2l0Qm94T3JpZW50PSd2ZXJ0aWNhbCc7fWVsc2V7c3R5bGUuV2Via2l0Qm94T3JpZW50PSdob3Jpem9udGFsJzt9aWYodmFsdWUuaW5kZXhPZigncmV2ZXJzZScpPi0xKXtzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb249J3JldmVyc2UnO31lbHNle3N0eWxlLldlYmtpdEJveERpcmVjdGlvbj0nbm9ybWFsJzt9fWlmKHByb3BlcnR5PT09J2Rpc3BsYXknJiZhbHRlcm5hdGl2ZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpe3JldHVybigwLF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3NQcmVmaXgrYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdLHZhbHVlLGtlZXBVbnByZWZpeGVkKTt9aWYoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpe3N0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXT1hbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV18fHZhbHVlO319fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Ym94T2xkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWdyYWRpZW50O3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZT1yZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7dmFyIF9nZXRQcmVmaXhlZFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fXZhciB2YWx1ZXM9L2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50L2dpO2Z1bmN0aW9uIGdyYWRpZW50KHByb3BlcnR5LHZhbHVlLHN0eWxlLF9yZWYpe3ZhciBicm93c2VyTmFtZT1fcmVmLmJyb3dzZXJOYW1lLGJyb3dzZXJWZXJzaW9uPV9yZWYuYnJvd3NlclZlcnNpb24sY3NzUHJlZml4PV9yZWYuY3NzUHJlZml4LGtlZXBVbnByZWZpeGVkPV9yZWYua2VlcFVucHJlZml4ZWQ7aWYodHlwZW9mIHZhbHVlPT09J3N0cmluZycmJnZhbHVlcy50ZXN0KHZhbHVlKSYmKGJyb3dzZXJOYW1lPT09J2ZpcmVmb3gnJiZicm93c2VyVmVyc2lvbjwxNnx8YnJvd3Nlck5hbWU9PT0nY2hyb21lJyYmYnJvd3NlclZlcnNpb248MjZ8fChicm93c2VyTmFtZT09PSdzYWZhcmknfHxicm93c2VyTmFtZT09PSdpb3Nfc2FmJykmJmJyb3dzZXJWZXJzaW9uPDd8fChicm93c2VyTmFtZT09PSdvcGVyYSd8fGJyb3dzZXJOYW1lPT09J29wX21pbmknKSYmYnJvd3NlclZlcnNpb248MTIuMXx8YnJvd3Nlck5hbWU9PT0nYW5kcm9pZCcmJmJyb3dzZXJWZXJzaW9uPDQuNHx8YnJvd3Nlck5hbWU9PT0nYW5kX3VjJykpe3JldHVybigwLF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZS5yZXBsYWNlKHZhbHVlcyxmdW5jdGlvbihncmFkKXtyZXR1cm4gY3NzUHJlZml4K2dyYWQ7fSksdmFsdWUsa2VlcFVucHJlZml4ZWQpO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2dyYWRpZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PWltYWdlU2V0O3ZhciBfZ2V0UHJlZml4ZWRWYWx1ZT1yZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7dmFyIF9nZXRQcmVmaXhlZFZhbHVlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fWZ1bmN0aW9uIGltYWdlU2V0KHByb3BlcnR5LHZhbHVlLHN0eWxlLF9yZWYpe3ZhciBicm93c2VyTmFtZT1fcmVmLmJyb3dzZXJOYW1lLGNzc1ByZWZpeD1fcmVmLmNzc1ByZWZpeCxrZWVwVW5wcmVmaXhlZD1fcmVmLmtlZXBVbnByZWZpeGVkO2lmKHR5cGVvZiB2YWx1ZT09PSdzdHJpbmcnJiZ2YWx1ZS5pbmRleE9mKCdpbWFnZS1zZXQoJyk+LTEmJihicm93c2VyTmFtZT09PSdjaHJvbWUnfHxicm93c2VyTmFtZT09PSdvcGVyYSd8fGJyb3dzZXJOYW1lPT09J2FuZF9jaHInfHxicm93c2VyTmFtZT09PSdhbmRfdWMnfHxicm93c2VyTmFtZT09PSdpb3Nfc2FmJ3x8YnJvd3Nlck5hbWU9PT0nc2FmYXJpJykpe3JldHVybigwLF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZS5yZXBsYWNlKC9pbWFnZS1zZXRcXCgvZyxjc3NQcmVmaXgrJ2ltYWdlLXNldCgnKSx2YWx1ZSxrZWVwVW5wcmVmaXhlZCk7fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvaW1hZ2VTZXQuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9cG9zaXRpb247dmFyIF9nZXRQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTt2YXIgX2dldFByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gcG9zaXRpb24ocHJvcGVydHksdmFsdWUsc3R5bGUsX3JlZil7dmFyIGJyb3dzZXJOYW1lPV9yZWYuYnJvd3Nlck5hbWUsY3NzUHJlZml4PV9yZWYuY3NzUHJlZml4LGtlZXBVbnByZWZpeGVkPV9yZWYua2VlcFVucHJlZml4ZWQ7aWYocHJvcGVydHk9PT0ncG9zaXRpb24nJiZ2YWx1ZT09PSdzdGlja3knJiYoYnJvd3Nlck5hbWU9PT0nc2FmYXJpJ3x8YnJvd3Nlck5hbWU9PT0naW9zX3NhZicpKXtyZXR1cm4oMCxfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4K3ZhbHVlLHZhbHVlLGtlZXBVbnByZWZpeGVkKTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9wb3NpdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZGVmYXVsdD1zaXppbmc7dmFyIF9nZXRQcmVmaXhlZFZhbHVlPXJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTt2YXIgX2dldFByZWZpeGVkVmFsdWUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9dmFyIHByb3BlcnRpZXM9e21heEhlaWdodDp0cnVlLG1heFdpZHRoOnRydWUsd2lkdGg6dHJ1ZSxoZWlnaHQ6dHJ1ZSxjb2x1bW5XaWR0aDp0cnVlLG1pbldpZHRoOnRydWUsbWluSGVpZ2h0OnRydWV9O3ZhciB2YWx1ZXM9eydtaW4tY29udGVudCc6dHJ1ZSwnbWF4LWNvbnRlbnQnOnRydWUsJ2ZpbGwtYXZhaWxhYmxlJzp0cnVlLCdmaXQtY29udGVudCc6dHJ1ZSwnY29udGFpbi1mbG9hdHMnOnRydWUvLyBUT0RPOiBjaHJvbWUgJiBvcGVyYSBzdXBwb3J0IGl0XG59O2Z1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxfcmVmKXt2YXIgY3NzUHJlZml4PV9yZWYuY3NzUHJlZml4LGtlZXBVbnByZWZpeGVkPV9yZWYua2VlcFVucHJlZml4ZWQ7Ly8gVGhpcyBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZVxuLy8gS2VlcCBhbiBleWUgb24gaXRcbmlmKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpJiZ2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKXtyZXR1cm4oMCxfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4K3ZhbHVlLHZhbHVlLGtlZXBVbnByZWZpeGVkKTt9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9zaXppbmcuanNcbi8vIG1vZHVsZSBpZCA9IDEzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9dHJhbnNpdGlvbjt2YXIgX2h5cGhlbmF0ZVByb3BlcnR5PXJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaHlwaGVuYXRlUHJvcGVydHknKTt2YXIgX2h5cGhlbmF0ZVByb3BlcnR5Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVQcm9wZXJ0eSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O312YXIgcHJvcGVydGllcz17dHJhbnNpdGlvbjp0cnVlLHRyYW5zaXRpb25Qcm9wZXJ0eTp0cnVlLFdlYmtpdFRyYW5zaXRpb246dHJ1ZSxXZWJraXRUcmFuc2l0aW9uUHJvcGVydHk6dHJ1ZSxNb3pUcmFuc2l0aW9uOnRydWUsTW96VHJhbnNpdGlvblByb3BlcnR5OnRydWV9O3ZhciByZXF1aXJlc1ByZWZpeERhc2hDYXNlZD12b2lkIDA7ZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSx2YWx1ZSxzdHlsZSxfcmVmKXt2YXIgY3NzUHJlZml4PV9yZWYuY3NzUHJlZml4LGtlZXBVbnByZWZpeGVkPV9yZWYua2VlcFVucHJlZml4ZWQscmVxdWlyZXNQcmVmaXg9X3JlZi5yZXF1aXJlc1ByZWZpeDtpZih0eXBlb2YgdmFsdWU9PT0nc3RyaW5nJyYmcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpey8vIG1lbW9pemUgdGhlIHByZWZpeCBhcnJheSBmb3IgbGF0ZXIgdXNlXG5pZighcmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQpe3JlcXVpcmVzUHJlZml4RGFzaENhc2VkPU9iamVjdC5rZXlzKHJlcXVpcmVzUHJlZml4KS5tYXAoZnVuY3Rpb24ocHJvcCl7cmV0dXJuKDAsX2h5cGhlbmF0ZVByb3BlcnR5Mi5kZWZhdWx0KShwcm9wKTt9KTt9Ly8gb25seSBzcGxpdCBtdWx0aSB2YWx1ZXMsIG5vdCBjdWJpYyBiZXppZXJzXG52YXIgbXVsdGlwbGVWYWx1ZXM9dmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZyk7cmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQuZm9yRWFjaChmdW5jdGlvbihwcm9wKXttdWx0aXBsZVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbCxpbmRleCl7aWYodmFsLmluZGV4T2YocHJvcCk+LTEmJnByb3AhPT0nb3JkZXInKXttdWx0aXBsZVZhbHVlc1tpbmRleF09dmFsLnJlcGxhY2UocHJvcCxjc3NQcmVmaXgrcHJvcCkrKGtlZXBVbnByZWZpeGVkPycsJyt2YWw6JycpO319KTt9KTtyZXR1cm4gbXVsdGlwbGVWYWx1ZXMuam9pbignLCcpO319bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3RyYW5zaXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2NsZWFuU3RhdGVLZXk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jbGVhbi1zdGF0ZS1rZXlcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian07fXZhciBnZXRTdGF0ZT1mdW5jdGlvbiBnZXRTdGF0ZShzdGF0ZSxlbGVtZW50S2V5LHZhbHVlKXt2YXIga2V5PSgwLF9jbGVhblN0YXRlS2V5W1wiZGVmYXVsdFwiXSkoZWxlbWVudEtleSk7cmV0dXJuISFzdGF0ZSYmISFzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZSYmISFzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZVtrZXldJiZzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZVtrZXldW3ZhbHVlXTt9O3ZhciBfZGVmYXVsdD1nZXRTdGF0ZTtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9nZXQtc3RhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDsvKiBmbG93ICovdmFyIGNsZWFuU3RhdGVLZXk9ZnVuY3Rpb24gY2xlYW5TdGF0ZUtleShrZXkpe3JldHVybiBrZXk9PT1udWxsfHx0eXBlb2Yga2V5PT09J3VuZGVmaW5lZCc/J21haW4nOmtleS50b1N0cmluZygpO307dmFyIF9kZWZhdWx0PWNsZWFuU3RhdGVLZXk7ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvY2xlYW4tc3RhdGUta2V5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT12b2lkIDA7dmFyIGdldFN0YXRlS2V5PWZ1bmN0aW9uIGdldFN0YXRlS2V5KHJlbmRlcmVkRWxlbWVudCl7cmV0dXJuIHR5cGVvZiByZW5kZXJlZEVsZW1lbnQucmVmPT09J3N0cmluZyc/cmVuZGVyZWRFbGVtZW50LnJlZjpyZW5kZXJlZEVsZW1lbnQua2V5O307dmFyIF9kZWZhdWx0PWdldFN0YXRlS2V5O2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL2dldC1zdGF0ZS1rZXkuanNcbi8vIG1vZHVsZSBpZCA9IDE0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgZ2V0UmFkaXVtU3R5bGVTdGF0ZT1mdW5jdGlvbiBnZXRSYWRpdW1TdHlsZVN0YXRlKGNvbXBvbmVudCl7cmV0dXJuIGNvbXBvbmVudC5fbGFzdFJhZGl1bVN0YXRlfHxjb21wb25lbnQuc3RhdGUmJmNvbXBvbmVudC5zdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZXx8e307fTt2YXIgX2RlZmF1bHQ9Z2V0UmFkaXVtU3R5bGVTdGF0ZTtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9nZXQtcmFkaXVtLXN0eWxlLXN0YXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT1oYXNoOy8vIGEgc2ltcGxlIGRqYjIgaGFzaCBiYXNlZCBvbiBoYXNoLXN0cmluZzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0aGV3QmFya2VyL2hhc2gtc3RyaW5nL2Jsb2IvbWFzdGVyL3NvdXJjZS9oYXNoLXN0cmluZy5qc1xuLy8gcmV0dXJucyBhIGhleC1lbmNvZGVkIGhhc2hcbmZ1bmN0aW9uIGhhc2godGV4dCl7aWYoIXRleHQpe3JldHVybicnO312YXIgaGFzaFZhbHVlPTUzODE7dmFyIGluZGV4PXRleHQubGVuZ3RoLTE7d2hpbGUoaW5kZXgpe2hhc2hWYWx1ZT1oYXNoVmFsdWUqMzNedGV4dC5jaGFyQ29kZUF0KGluZGV4KTtpbmRleC09MTt9cmV0dXJuKGhhc2hWYWx1ZT4+PjApLnRvU3RyaW5nKDE2KTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvaGFzaC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO3ZhciBfdHlwZW9mMj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmlzTmVzdGVkU3R5bGU9aXNOZXN0ZWRTdHlsZTtleHBvcnRzLm1lcmdlU3R5bGVzPW1lcmdlU3R5bGVzO2Z1bmN0aW9uIF90eXBlb2Yob2JqKXtpZih0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpPT09XCJzeW1ib2xcIil7X3R5cGVvZj1mdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIHR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9O31lbHNle190eXBlb2Y9ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9O31yZXR1cm4gX3R5cGVvZihvYmopO31mdW5jdGlvbiBpc05lc3RlZFN0eWxlKHZhbHVlKXsvLyBEb24ndCBtZXJnZSBvYmplY3RzIG92ZXJyaWRpbmcgdG9TdHJpbmcsIHNpbmNlIHRoZXkgc2hvdWxkIGJlIGNvbnZlcnRlZFxuLy8gdG8gc3RyaW5nIHZhbHVlcy5cbnJldHVybiB2YWx1ZSYmdmFsdWUuY29uc3RydWN0b3I9PT1PYmplY3QmJnZhbHVlLnRvU3RyaW5nPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzt9Ly8gTWVyZ2Ugc3R5bGUgb2JqZWN0cy4gRGVlcCBtZXJnZSBwbGFpbiBvYmplY3QgdmFsdWVzLlxuZnVuY3Rpb24gbWVyZ2VTdHlsZXMoc3R5bGVzKXt2YXIgcmVzdWx0PXt9O3N0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHN0eWxlKXtpZighc3R5bGV8fF90eXBlb2Yoc3R5bGUpIT09J29iamVjdCcpe3JldHVybjt9aWYoQXJyYXkuaXNBcnJheShzdHlsZSkpe3N0eWxlPW1lcmdlU3R5bGVzKHN0eWxlKTt9T2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24oa2V5KXsvLyBTaW1wbGUgY2FzZSwgbm90aGluZyBuZXN0ZWRcbmlmKCFpc05lc3RlZFN0eWxlKHN0eWxlW2tleV0pfHwhaXNOZXN0ZWRTdHlsZShyZXN1bHRba2V5XSkpe3Jlc3VsdFtrZXldPXN0eWxlW2tleV07cmV0dXJuO30vLyBJZiBuZXN0ZWQgbWVkaWEsIGRvbid0IG1lcmdlIHRoZSBuZXN0ZWQgc3R5bGVzLCBhcHBlbmQgYSBzcGFjZSB0byB0aGVcbi8vIGVuZCAoYmVuaWduIHdoZW4gY29udmVydGVkIHRvIENTUykuIFRoaXMgd2F5IHdlIGRvbid0IGVuZCB1cCBtZXJnaW5nXG4vLyBtZWRpYSBxdWVyaWVzIHRoYXQgYXBwZWFyIGxhdGVyIGluIHRoZSBjaGFpbiB3aXRoIHRob3NlIHRoYXQgYXBwZWFyXG4vLyBlYXJsaWVyLlxuaWYoa2V5LmluZGV4T2YoJ0BtZWRpYScpPT09MCl7dmFyIG5ld0tleT1rZXk7Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxud2hpbGUodHJ1ZSl7bmV3S2V5Kz0nICc7aWYoIXJlc3VsdFtuZXdLZXldKXtyZXN1bHRbbmV3S2V5XT1zdHlsZVtrZXldO3JldHVybjt9fX0vLyBNZXJnZSBhbGwgb3RoZXIgbmVzdGVkIHN0eWxlcyByZWN1cnNpdmVseVxucmVzdWx0W2tleV09bWVyZ2VTdHlsZXMoW3Jlc3VsdFtrZXldLHN0eWxlW2tleV1dKTt9KTt9KTtyZXR1cm4gcmVzdWx0O31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9tZXJnZS1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2NoZWNrUHJvcHNQbHVnaW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jaGVjay1wcm9wcy1wbHVnaW5cIikpO3ZhciBfa2V5ZnJhbWVzUGx1Z2luPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4va2V5ZnJhbWVzLXBsdWdpblwiKSk7dmFyIF9tZXJnZVN0eWxlQXJyYXlQbHVnaW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tZXJnZS1zdHlsZS1hcnJheS1wbHVnaW5cIikpO3ZhciBfcHJlZml4UGx1Z2luPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcHJlZml4LXBsdWdpblwiKSk7dmFyIF9yZW1vdmVOZXN0ZWRTdHlsZXNQbHVnaW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZW1vdmUtbmVzdGVkLXN0eWxlcy1wbHVnaW5cIikpO3ZhciBfcmVzb2x2ZUludGVyYWN0aW9uU3R5bGVzUGx1Z2luPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVzb2x2ZS1pbnRlcmFjdGlvbi1zdHlsZXMtcGx1Z2luXCIpKTt2YXIgX3Jlc29sdmVNZWRpYVF1ZXJpZXNQbHVnaW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZXNvbHZlLW1lZGlhLXF1ZXJpZXMtcGx1Z2luXCIpKTt2YXIgX3Zpc2l0ZWRQbHVnaW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi92aXNpdGVkLXBsdWdpblwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfTt9LyogZXNsaW50LWRpc2FibGUgYmxvY2stc2NvcGVkLWNvbnN0ICovdmFyIF9kZWZhdWx0PXtjaGVja1Byb3BzOl9jaGVja1Byb3BzUGx1Z2luW1wiZGVmYXVsdFwiXSxrZXlmcmFtZXM6X2tleWZyYW1lc1BsdWdpbltcImRlZmF1bHRcIl0sbWVyZ2VTdHlsZUFycmF5Ol9tZXJnZVN0eWxlQXJyYXlQbHVnaW5bXCJkZWZhdWx0XCJdLHByZWZpeDpfcHJlZml4UGx1Z2luW1wiZGVmYXVsdFwiXSxyZW1vdmVOZXN0ZWRTdHlsZXM6X3JlbW92ZU5lc3RlZFN0eWxlc1BsdWdpbltcImRlZmF1bHRcIl0scmVzb2x2ZUludGVyYWN0aW9uU3R5bGVzOl9yZXNvbHZlSW50ZXJhY3Rpb25TdHlsZXNQbHVnaW5bXCJkZWZhdWx0XCJdLHJlc29sdmVNZWRpYVF1ZXJpZXM6X3Jlc29sdmVNZWRpYVF1ZXJpZXNQbHVnaW5bXCJkZWZhdWx0XCJdLHZpc2l0ZWQ6X3Zpc2l0ZWRQbHVnaW5bXCJkZWZhdWx0XCJdfTtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9wbHVnaW5zL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF90eXBlb2YyPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDtmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV0hPW51bGw/YXJndW1lbnRzW2ldOnt9O3ZhciBvd25LZXlzPU9iamVjdC5rZXlzKHNvdXJjZSk7aWYodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM9PT0nZnVuY3Rpb24nKXtvd25LZXlzPW93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2Usc3ltKS5lbnVtZXJhYmxlO30pKTt9b3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7X2RlZmluZVByb3BlcnR5KHRhcmdldCxrZXksc291cmNlW2tleV0pO30pO31yZXR1cm4gdGFyZ2V0O31mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLGtleSx2YWx1ZSl7aWYoa2V5IGluIG9iail7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse3ZhbHVlOnZhbHVlLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSk7fWVsc2V7b2JqW2tleV09dmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF90eXBlb2Yob2JqKXtpZih0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpPT09XCJzeW1ib2xcIil7X3R5cGVvZj1mdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIHR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9O31lbHNle190eXBlb2Y9ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9O31yZXR1cm4gX3R5cGVvZihvYmopO312YXIgX2NoZWNrUHJvcHM9ZnVuY3Rpb24gY2hlY2tQcm9wcygpe307aWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYhPT0ncHJvZHVjdGlvbicpey8vIFdhcm4gaWYgeW91IHVzZSBsb25naGFuZCBhbmQgc2hvcnRoYW5kIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgc3R5bGVcbi8vIG9iamVjdC5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9TaG9ydGhhbmRfcHJvcGVydGllc1xudmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucz17YmFja2dyb3VuZDpbJ2JhY2tncm91bmRBdHRhY2htZW50JywnYmFja2dyb3VuZEJsZW5kTW9kZScsJ2JhY2tncm91bmRDbGlwJywnYmFja2dyb3VuZENvbG9yJywnYmFja2dyb3VuZEltYWdlJywnYmFja2dyb3VuZE9yaWdpbicsJ2JhY2tncm91bmRQb3NpdGlvbicsJ2JhY2tncm91bmRQb3NpdGlvblgnLCdiYWNrZ3JvdW5kUG9zaXRpb25ZJywnYmFja2dyb3VuZFJlcGVhdCcsJ2JhY2tncm91bmRSZXBlYXRYJywnYmFja2dyb3VuZFJlcGVhdFknLCdiYWNrZ3JvdW5kU2l6ZSddLGJvcmRlcjpbJ2JvcmRlckJvdHRvbScsJ2JvcmRlckJvdHRvbUNvbG9yJywnYm9yZGVyQm90dG9tU3R5bGUnLCdib3JkZXJCb3R0b21XaWR0aCcsJ2JvcmRlckNvbG9yJywnYm9yZGVyTGVmdCcsJ2JvcmRlckxlZnRDb2xvcicsJ2JvcmRlckxlZnRTdHlsZScsJ2JvcmRlckxlZnRXaWR0aCcsJ2JvcmRlclJpZ2h0JywnYm9yZGVyUmlnaHRDb2xvcicsJ2JvcmRlclJpZ2h0U3R5bGUnLCdib3JkZXJSaWdodFdpZHRoJywnYm9yZGVyU3R5bGUnLCdib3JkZXJUb3AnLCdib3JkZXJUb3BDb2xvcicsJ2JvcmRlclRvcFN0eWxlJywnYm9yZGVyVG9wV2lkdGgnLCdib3JkZXJXaWR0aCddLGJvcmRlckltYWdlOlsnYm9yZGVySW1hZ2VPdXRzZXQnLCdib3JkZXJJbWFnZVJlcGVhdCcsJ2JvcmRlckltYWdlU2xpY2UnLCdib3JkZXJJbWFnZVNvdXJjZScsJ2JvcmRlckltYWdlV2lkdGgnXSxib3JkZXJSYWRpdXM6Wydib3JkZXJCb3R0b21MZWZ0UmFkaXVzJywnYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMnLCdib3JkZXJUb3BMZWZ0UmFkaXVzJywnYm9yZGVyVG9wUmlnaHRSYWRpdXMnXSxmb250OlsnZm9udEZhbWlseScsJ2ZvbnRLZXJuaW5nJywnZm9udFNpemUnLCdmb250U3RyZXRjaCcsJ2ZvbnRTdHlsZScsJ2ZvbnRWYXJpYW50JywnZm9udFZhcmlhbnRMaWdhdHVyZXMnLCdmb250V2VpZ2h0JywnbGluZUhlaWdodCddLGxpc3RTdHlsZTpbJ2xpc3RTdHlsZUltYWdlJywnbGlzdFN0eWxlUG9zaXRpb24nLCdsaXN0U3R5bGVUeXBlJ10sbWFyZ2luOlsnbWFyZ2luQm90dG9tJywnbWFyZ2luTGVmdCcsJ21hcmdpblJpZ2h0JywnbWFyZ2luVG9wJ10scGFkZGluZzpbJ3BhZGRpbmdCb3R0b20nLCdwYWRkaW5nTGVmdCcsJ3BhZGRpbmdSaWdodCcsJ3BhZGRpbmdUb3AnXSx0cmFuc2l0aW9uOlsndHJhbnNpdGlvbkRlbGF5JywndHJhbnNpdGlvbkR1cmF0aW9uJywndHJhbnNpdGlvblByb3BlcnR5JywndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJ119O19jaGVja1Byb3BzPWZ1bmN0aW9uIGNoZWNrUHJvcHMoY29uZmlnKXt2YXIgY29tcG9uZW50TmFtZT1jb25maWcuY29tcG9uZW50TmFtZSxzdHlsZT1jb25maWcuc3R5bGU7aWYoX3R5cGVvZihzdHlsZSkhPT0nb2JqZWN0J3x8IXN0eWxlKXtyZXR1cm47fXZhciBzdHlsZUtleXM9T2JqZWN0LmtleXMoc3R5bGUpO3N0eWxlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKHN0eWxlS2V5KXtpZihBcnJheS5pc0FycmF5KHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZUtleV0pJiZzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVLZXldLnNvbWUoZnVuY3Rpb24oc3Ape3JldHVybiBzdHlsZUtleXMuaW5kZXhPZihzcCkhPT0tMTt9KSl7aWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYhPT0ncHJvZHVjdGlvbicpey8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9jb25zb2xlLndhcm4oJ1JhZGl1bTogcHJvcGVydHkgXCInK3N0eWxlS2V5KydcIiBpbiBzdHlsZSBvYmplY3QnLHN0eWxlLCc6IGRvIG5vdCBtaXggbG9uZ2hhbmQgYW5kICcrJ3Nob3J0aGFuZCBwcm9wZXJ0aWVzIGluIHRoZSBzYW1lIHN0eWxlIG9iamVjdC4gQ2hlY2sgdGhlIHJlbmRlciAnKydtZXRob2Qgb2YgJytjb21wb25lbnROYW1lKycuJywnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Gb3JtaWRhYmxlTGFicy9yYWRpdW0vaXNzdWVzLzk1IGZvciBtb3JlICcrJ2luZm9ybWF0aW9uLicpOy8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL319fSk7c3R5bGVLZXlzLmZvckVhY2goZnVuY3Rpb24oayl7cmV0dXJuIF9jaGVja1Byb3BzKF9vYmplY3RTcHJlYWQoe30sY29uZmlnLHtzdHlsZTpzdHlsZVtrXX0pKTt9KTtyZXR1cm47fTt9dmFyIF9kZWZhdWx0PV9jaGVja1Byb3BzO2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMvY2hlY2stcHJvcHMtcGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT1rZXlmcmFtZXNQbHVnaW47ZnVuY3Rpb24ga2V5ZnJhbWVzUGx1Z2luKF9yZWYpe3ZhciBhZGRDU1M9X3JlZi5hZGRDU1MsY29uZmlnPV9yZWYuY29uZmlnLHN0eWxlPV9yZWYuc3R5bGU7dmFyIHByb2Nlc3NLZXlmcmFtZVN0eWxlPWZ1bmN0aW9uIHByb2Nlc3NLZXlmcmFtZVN0eWxlKHZhbHVlKXt2YXIga2V5ZnJhbWVzVmFsdWU9dmFsdWU7dmFyIF9rZXlmcmFtZXNWYWx1ZSRfX3Bybz1rZXlmcmFtZXNWYWx1ZS5fX3Byb2Nlc3MoY29uZmlnLnVzZXJBZ2VudCksYW5pbWF0aW9uTmFtZT1fa2V5ZnJhbWVzVmFsdWUkX19wcm8uYW5pbWF0aW9uTmFtZSxjc3M9X2tleWZyYW1lc1ZhbHVlJF9fcHJvLmNzczthZGRDU1MoY3NzKTtyZXR1cm4gYW5pbWF0aW9uTmFtZTt9O3ZhciBuZXdTdHlsZT1PYmplY3Qua2V5cyhzdHlsZSkucmVkdWNlKGZ1bmN0aW9uKG5ld1N0eWxlSW5Qcm9ncmVzcyxrZXkpe3ZhciB2YWx1ZT1zdHlsZVtrZXldO3ZhciBpc0tleWZyYW1lQXJyYXk9QXJyYXkuaXNBcnJheSh2YWx1ZSk7aWYoa2V5PT09J2FuaW1hdGlvbk5hbWUnJiZ2YWx1ZSYmKHZhbHVlLl9fcmFkaXVtS2V5ZnJhbWVzfHxpc0tleWZyYW1lQXJyYXkpKXtpZihpc0tleWZyYW1lQXJyYXkpe3ZhbHVlPXZhbHVlLm1hcChwcm9jZXNzS2V5ZnJhbWVTdHlsZSkuam9pbignLCAnKTt9ZWxzZXt2YWx1ZT1wcm9jZXNzS2V5ZnJhbWVTdHlsZSh2YWx1ZSk7fX1uZXdTdHlsZUluUHJvZ3Jlc3Nba2V5XT12YWx1ZTtyZXR1cm4gbmV3U3R5bGVJblByb2dyZXNzO30se30pO3JldHVybntzdHlsZTpuZXdTdHlsZX07fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMva2V5ZnJhbWVzLXBsdWdpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwOy8vIENvbnZlbmllbnQgc3ludGF4IGZvciBtdWx0aXBsZSBzdHlsZXM6IGBzdHlsZT17W3N0eWxlMSwgc3R5bGUyLCBldGNdfWBcbi8vIElnbm9yZXMgbm9uLW9iamVjdHMsIHNvIHlvdSBjYW4gZG8gYHRoaXMuc3RhdGUuaXNDb29sICYmIHN0eWxlcy5jb29sYC5cbnZhciBtZXJnZVN0eWxlQXJyYXlQbHVnaW49ZnVuY3Rpb24gbWVyZ2VTdHlsZUFycmF5UGx1Z2luKF9yZWYpe3ZhciBzdHlsZT1fcmVmLnN0eWxlLG1lcmdlU3R5bGVzPV9yZWYubWVyZ2VTdHlsZXM7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3dcbnZhciBuZXdTdHlsZT1BcnJheS5pc0FycmF5KHN0eWxlKT9tZXJnZVN0eWxlcyhzdHlsZSk6c3R5bGU7cmV0dXJue3N0eWxlOm5ld1N0eWxlfTt9O3ZhciBfZGVmYXVsdD1tZXJnZVN0eWxlQXJyYXlQbHVnaW47ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9tZXJnZS1zdHlsZS1hcnJheS1wbHVnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDE1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXByZWZpeFBsdWdpbjt2YXIgX3ByZWZpeGVyPXJlcXVpcmUoXCIuLi9wcmVmaXhlclwiKTtmdW5jdGlvbiBwcmVmaXhQbHVnaW4oX3JlZil7dmFyIGNvbmZpZz1fcmVmLmNvbmZpZyxzdHlsZT1fcmVmLnN0eWxlO3ZhciBuZXdTdHlsZT0oMCxfcHJlZml4ZXIuZ2V0UHJlZml4ZWRTdHlsZSkoc3R5bGUsY29uZmlnLnVzZXJBZ2VudCk7cmV0dXJue3N0eWxlOm5ld1N0eWxlfTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9wcmVmaXgtcGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT1yZW1vdmVOZXN0ZWRTdHlsZXM7ZnVuY3Rpb24gcmVtb3ZlTmVzdGVkU3R5bGVzKF9yZWYpe3ZhciBpc05lc3RlZFN0eWxlPV9yZWYuaXNOZXN0ZWRTdHlsZSxzdHlsZT1fcmVmLnN0eWxlOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93XG52YXIgbmV3U3R5bGU9T2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZShmdW5jdGlvbihuZXdTdHlsZUluUHJvZ3Jlc3Msa2V5KXt2YXIgdmFsdWU9c3R5bGVba2V5XTtpZighaXNOZXN0ZWRTdHlsZSh2YWx1ZSkpe25ld1N0eWxlSW5Qcm9ncmVzc1trZXldPXZhbHVlO31yZXR1cm4gbmV3U3R5bGVJblByb2dyZXNzO30se30pO3JldHVybntzdHlsZTpuZXdTdHlsZX07fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMvcmVtb3ZlLW5lc3RlZC1zdHlsZXMtcGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT12b2lkIDA7dmFyIF9tb3VzZVVwTGlzdGVuZXI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tb3VzZS11cC1saXN0ZW5lclwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfTt9dmFyIF9pc0ludGVyYWN0aXZlU3R5bGVGaWVsZD1mdW5jdGlvbiBfaXNJbnRlcmFjdGl2ZVN0eWxlRmllbGQoc3R5bGVGaWVsZE5hbWUpe3JldHVybiBzdHlsZUZpZWxkTmFtZT09PSc6aG92ZXInfHxzdHlsZUZpZWxkTmFtZT09PSc6YWN0aXZlJ3x8c3R5bGVGaWVsZE5hbWU9PT0nOmZvY3VzJzt9O3ZhciByZXNvbHZlSW50ZXJhY3Rpb25TdHlsZXM9ZnVuY3Rpb24gcmVzb2x2ZUludGVyYWN0aW9uU3R5bGVzKGNvbmZpZyl7dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50PWNvbmZpZy5FeGVjdXRpb25FbnZpcm9ubWVudCxnZXRDb21wb25lbnRGaWVsZD1jb25maWcuZ2V0Q29tcG9uZW50RmllbGQsZ2V0U3RhdGU9Y29uZmlnLmdldFN0YXRlLG1lcmdlU3R5bGVzPWNvbmZpZy5tZXJnZVN0eWxlcyxwcm9wcz1jb25maWcucHJvcHMsc2V0U3RhdGU9Y29uZmlnLnNldFN0YXRlLHN0eWxlPWNvbmZpZy5zdHlsZTt2YXIgbmV3Q29tcG9uZW50RmllbGRzPXt9O3ZhciBuZXdQcm9wcz17fTsvLyBPbmx5IGFkZCBoYW5kbGVycyBpZiBuZWNlc3NhcnlcbmlmKHN0eWxlWyc6aG92ZXInXSl7Ly8gQWx3YXlzIGNhbGwgdGhlIGV4aXN0aW5nIGhhbmRsZXIgaWYgb25lIGlzIGFscmVhZHkgZGVmaW5lZC5cbi8vIFRoaXMgY29kZSwgYW5kIHRoZSB2ZXJ5IHNpbWlsYXIgb25lcyBiZWxvdywgY291bGQgYmUgYWJzdHJhY3RlZCBhIGJpdFxuLy8gbW9yZSwgYnV0IGl0IGh1cnRzIHJlYWRhYmlsaXR5IElNTy5cbnZhciBleGlzdGluZ09uTW91c2VFbnRlcj1wcm9wcy5vbk1vdXNlRW50ZXI7bmV3UHJvcHMub25Nb3VzZUVudGVyPWZ1bmN0aW9uKGUpe2V4aXN0aW5nT25Nb3VzZUVudGVyJiZleGlzdGluZ09uTW91c2VFbnRlcihlKTtzZXRTdGF0ZSgnOmhvdmVyJyx0cnVlKTt9O3ZhciBleGlzdGluZ09uTW91c2VMZWF2ZT1wcm9wcy5vbk1vdXNlTGVhdmU7bmV3UHJvcHMub25Nb3VzZUxlYXZlPWZ1bmN0aW9uKGUpe2V4aXN0aW5nT25Nb3VzZUxlYXZlJiZleGlzdGluZ09uTW91c2VMZWF2ZShlKTtzZXRTdGF0ZSgnOmhvdmVyJyxmYWxzZSk7fTt9aWYoc3R5bGVbJzphY3RpdmUnXSl7dmFyIGV4aXN0aW5nT25Nb3VzZURvd249cHJvcHMub25Nb3VzZURvd247bmV3UHJvcHMub25Nb3VzZURvd249ZnVuY3Rpb24oZSl7ZXhpc3RpbmdPbk1vdXNlRG93biYmZXhpc3RpbmdPbk1vdXNlRG93bihlKTtuZXdDb21wb25lbnRGaWVsZHMuX2xhc3RNb3VzZURvd249RGF0ZS5ub3coKTtzZXRTdGF0ZSgnOmFjdGl2ZScsJ3ZpYW1vdXNlZG93bicpO307dmFyIGV4aXN0aW5nT25LZXlEb3duPXByb3BzLm9uS2V5RG93bjtuZXdQcm9wcy5vbktleURvd249ZnVuY3Rpb24oZSl7ZXhpc3RpbmdPbktleURvd24mJmV4aXN0aW5nT25LZXlEb3duKGUpO2lmKGUua2V5PT09JyAnfHxlLmtleT09PSdFbnRlcicpe3NldFN0YXRlKCc6YWN0aXZlJywndmlha2V5ZG93bicpO319O3ZhciBleGlzdGluZ09uS2V5VXA9cHJvcHMub25LZXlVcDtuZXdQcm9wcy5vbktleVVwPWZ1bmN0aW9uKGUpe2V4aXN0aW5nT25LZXlVcCYmZXhpc3RpbmdPbktleVVwKGUpO2lmKGUua2V5PT09JyAnfHxlLmtleT09PSdFbnRlcicpe3NldFN0YXRlKCc6YWN0aXZlJyxmYWxzZSk7fX07fWlmKHN0eWxlWyc6Zm9jdXMnXSl7dmFyIGV4aXN0aW5nT25Gb2N1cz1wcm9wcy5vbkZvY3VzO25ld1Byb3BzLm9uRm9jdXM9ZnVuY3Rpb24oZSl7ZXhpc3RpbmdPbkZvY3VzJiZleGlzdGluZ09uRm9jdXMoZSk7c2V0U3RhdGUoJzpmb2N1cycsdHJ1ZSk7fTt2YXIgZXhpc3RpbmdPbkJsdXI9cHJvcHMub25CbHVyO25ld1Byb3BzLm9uQmx1cj1mdW5jdGlvbihlKXtleGlzdGluZ09uQmx1ciYmZXhpc3RpbmdPbkJsdXIoZSk7c2V0U3RhdGUoJzpmb2N1cycsZmFsc2UpO307fWlmKHN0eWxlWyc6YWN0aXZlJ10mJiFnZXRDb21wb25lbnRGaWVsZCgnX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcicpJiZFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VFdmVudExpc3RlbmVycyl7bmV3Q29tcG9uZW50RmllbGRzLl9yYWRpdW1Nb3VzZVVwTGlzdGVuZXI9X21vdXNlVXBMaXN0ZW5lcltcImRlZmF1bHRcIl0uc3Vic2NyaWJlKGZ1bmN0aW9uKCl7T2JqZWN0LmtleXMoZ2V0Q29tcG9uZW50RmllbGQoJ3N0YXRlJykuX3JhZGl1bVN0eWxlU3RhdGUpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtpZihnZXRTdGF0ZSgnOmFjdGl2ZScsa2V5KT09PSd2aWFtb3VzZWRvd24nKXtzZXRTdGF0ZSgnOmFjdGl2ZScsZmFsc2Usa2V5KTt9fSk7fSk7fS8vIE1lcmdlIHRoZSBzdHlsZXMgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBkZWZpbmVkXG52YXIgaW50ZXJhY3Rpb25TdHlsZXM9cHJvcHMuZGlzYWJsZWQ/W3N0eWxlWyc6ZGlzYWJsZWQnXV06T2JqZWN0LmtleXMoc3R5bGUpLmZpbHRlcihmdW5jdGlvbihuYW1lKXtyZXR1cm4gX2lzSW50ZXJhY3RpdmVTdHlsZUZpZWxkKG5hbWUpJiZnZXRTdGF0ZShuYW1lKTt9KS5tYXAoZnVuY3Rpb24obmFtZSl7cmV0dXJuIHN0eWxlW25hbWVdO30pO3ZhciBuZXdTdHlsZT1tZXJnZVN0eWxlcyhbc3R5bGVdLmNvbmNhdChpbnRlcmFjdGlvblN0eWxlcykpOy8vIFJlbW92ZSBpbnRlcmFjdGl2ZSBzdHlsZXNcbm5ld1N0eWxlPU9iamVjdC5rZXlzKG5ld1N0eWxlKS5yZWR1Y2UoZnVuY3Rpb24oc3R5bGVXaXRob3V0SW50ZXJhY3Rpb25zLG5hbWUpe2lmKCFfaXNJbnRlcmFjdGl2ZVN0eWxlRmllbGQobmFtZSkmJm5hbWUhPT0nOmRpc2FibGVkJyl7c3R5bGVXaXRob3V0SW50ZXJhY3Rpb25zW25hbWVdPW5ld1N0eWxlW25hbWVdO31yZXR1cm4gc3R5bGVXaXRob3V0SW50ZXJhY3Rpb25zO30se30pO3JldHVybntjb21wb25lbnRGaWVsZHM6bmV3Q29tcG9uZW50RmllbGRzLHByb3BzOm5ld1Byb3BzLHN0eWxlOm5ld1N0eWxlfTt9O3ZhciBfZGVmYXVsdD1yZXNvbHZlSW50ZXJhY3Rpb25TdHlsZXM7ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9yZXNvbHZlLWludGVyYWN0aW9uLXN0eWxlcy1wbHVnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2NhbGxiYWNrcz1bXTt2YXIgX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlPWZhbHNlO2Z1bmN0aW9uIF9oYW5kbGVNb3VzZVVwKCl7X2NhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKXtjYWxsYmFjaygpO30pO312YXIgc3Vic2NyaWJlPWZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjayl7aWYoX2NhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKT09PS0xKXtfY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO31pZighX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlKXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsX2hhbmRsZU1vdXNlVXApO19tb3VzZVVwTGlzdGVuZXJJc0FjdGl2ZT10cnVlO31yZXR1cm57cmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe3ZhciBpbmRleD1fY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO19jYWxsYmFja3Muc3BsaWNlKGluZGV4LDEpO2lmKF9jYWxsYmFja3MubGVuZ3RoPT09MCYmX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsX2hhbmRsZU1vdXNlVXApO19tb3VzZVVwTGlzdGVuZXJJc0FjdGl2ZT1mYWxzZTt9fX07fTt2YXIgX2RlZmF1bHQ9e3N1YnNjcmliZTpzdWJzY3JpYmUsX190cmlnZ2VyRm9yVGVzdHM6X2hhbmRsZU1vdXNlVXB9O2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMvbW91c2UtdXAtbGlzdGVuZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXJlc29sdmVNZWRpYVF1ZXJpZXM7ZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldIT1udWxsP2FyZ3VtZW50c1tpXTp7fTt2YXIgb3duS2V5cz1PYmplY3Qua2V5cyhzb3VyY2UpO2lmKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzPT09J2Z1bmN0aW9uJyl7b3duS2V5cz1vd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uKHN5bSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLHN5bSkuZW51bWVyYWJsZTt9KSk7fW93bktleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpe19kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsa2V5LHNvdXJjZVtrZXldKTt9KTt9cmV0dXJuIHRhcmdldDt9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe2lmKGtleSBpbiBvYmope09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsd3JpdGFibGU6dHJ1ZX0pO31lbHNle29ialtrZXldPXZhbHVlO31yZXR1cm4gb2JqO312YXIgX3dpbmRvd01hdGNoTWVkaWE7ZnVuY3Rpb24gX2dldFdpbmRvd01hdGNoTWVkaWEoRXhlY3V0aW9uRW52aXJvbm1lbnQpe2lmKF93aW5kb3dNYXRjaE1lZGlhPT09dW5kZWZpbmVkKXtfd2luZG93TWF0Y2hNZWRpYT0hIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSYmISF3aW5kb3cmJiEhd2luZG93Lm1hdGNoTWVkaWEmJmZ1bmN0aW9uKG1lZGlhUXVlcnlTdHJpbmcpe3JldHVybiB3aW5kb3cubWF0Y2hNZWRpYShtZWRpYVF1ZXJ5U3RyaW5nKTt9fHxudWxsO31yZXR1cm4gX3dpbmRvd01hdGNoTWVkaWE7fWZ1bmN0aW9uIF9maWx0ZXJPYmplY3Qob2JqLHByZWRpY2F0ZSl7cmV0dXJuIE9iamVjdC5rZXlzKG9iaikuZmlsdGVyKGZ1bmN0aW9uKGtleSl7cmV0dXJuIHByZWRpY2F0ZShvYmpba2V5XSxrZXkpO30pLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsa2V5KXtyZXN1bHRba2V5XT1vYmpba2V5XTtyZXR1cm4gcmVzdWx0O30se30pO31mdW5jdGlvbiBfcmVtb3ZlTWVkaWFRdWVyaWVzKHN0eWxlKXtyZXR1cm4gT2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZShmdW5jdGlvbihzdHlsZVdpdGhvdXRNZWRpYSxrZXkpe2lmKGtleS5pbmRleE9mKCdAbWVkaWEnKSE9PTApe3N0eWxlV2l0aG91dE1lZGlhW2tleV09c3R5bGVba2V5XTt9cmV0dXJuIHN0eWxlV2l0aG91dE1lZGlhO30se30pO31mdW5jdGlvbiBfdG9wTGV2ZWxSdWxlc1RvQ1NTKF9yZWYpe3ZhciBhZGRDU1M9X3JlZi5hZGRDU1MsYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWU9X3JlZi5hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSxjc3NSdWxlU2V0VG9TdHJpbmc9X3JlZi5jc3NSdWxlU2V0VG9TdHJpbmcsaGFzaD1fcmVmLmhhc2gsaXNOZXN0ZWRTdHlsZT1fcmVmLmlzTmVzdGVkU3R5bGUsc3R5bGU9X3JlZi5zdHlsZSx1c2VyQWdlbnQ9X3JlZi51c2VyQWdlbnQ7dmFyIGNsYXNzTmFtZT0nJztPYmplY3Qua2V5cyhzdHlsZSkuZmlsdGVyKGZ1bmN0aW9uKG5hbWUpe3JldHVybiBuYW1lLmluZGV4T2YoJ0BtZWRpYScpPT09MDt9KS5tYXAoZnVuY3Rpb24ocXVlcnkpe3ZhciB0b3BMZXZlbFJ1bGVzPWFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlKF9maWx0ZXJPYmplY3Qoc3R5bGVbcXVlcnldLGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4haXNOZXN0ZWRTdHlsZSh2YWx1ZSk7fSkpO2lmKCFPYmplY3Qua2V5cyh0b3BMZXZlbFJ1bGVzKS5sZW5ndGgpe3JldHVybjt9dmFyIHJ1bGVDU1M9Y3NzUnVsZVNldFRvU3RyaW5nKCcnLHRvcExldmVsUnVsZXMsdXNlckFnZW50KTsvLyBDU1MgY2xhc3NlcyBjYW5ub3Qgc3RhcnQgd2l0aCBhIG51bWJlclxudmFyIG1lZGlhUXVlcnlDbGFzc05hbWU9J3JtcS0nK2hhc2gocXVlcnkrcnVsZUNTUyk7dmFyIGNzcz1xdWVyeSsneyAuJyttZWRpYVF1ZXJ5Q2xhc3NOYW1lK3J1bGVDU1MrJ30nO2FkZENTUyhjc3MpO2NsYXNzTmFtZSs9KGNsYXNzTmFtZT8nICc6JycpK21lZGlhUXVlcnlDbGFzc05hbWU7fSk7cmV0dXJuIGNsYXNzTmFtZTt9ZnVuY3Rpb24gX3N1YnNjcmliZVRvTWVkaWFRdWVyeShfcmVmMil7dmFyIGxpc3RlbmVyPV9yZWYyLmxpc3RlbmVyLGxpc3RlbmVyc0J5UXVlcnk9X3JlZjIubGlzdGVuZXJzQnlRdWVyeSxtYXRjaE1lZGlhPV9yZWYyLm1hdGNoTWVkaWEsbWVkaWFRdWVyeUxpc3RzQnlRdWVyeT1fcmVmMi5tZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5LHF1ZXJ5PV9yZWYyLnF1ZXJ5O3F1ZXJ5PXF1ZXJ5LnJlcGxhY2UoJ0BtZWRpYSAnLCcnKTt2YXIgbXFsPW1lZGlhUXVlcnlMaXN0c0J5UXVlcnlbcXVlcnldO2lmKCFtcWwmJm1hdGNoTWVkaWEpe21lZGlhUXVlcnlMaXN0c0J5UXVlcnlbcXVlcnldPW1xbD1tYXRjaE1lZGlhKHF1ZXJ5KTt9aWYoIWxpc3RlbmVyc0J5UXVlcnl8fCFsaXN0ZW5lcnNCeVF1ZXJ5W3F1ZXJ5XSl7bXFsLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtsaXN0ZW5lcnNCeVF1ZXJ5W3F1ZXJ5XT17cmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe21xbC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7fX07fXJldHVybiBtcWw7fWZ1bmN0aW9uIHJlc29sdmVNZWRpYVF1ZXJpZXMoX3JlZjMpe3ZhciBFeGVjdXRpb25FbnZpcm9ubWVudD1fcmVmMy5FeGVjdXRpb25FbnZpcm9ubWVudCxhZGRDU1M9X3JlZjMuYWRkQ1NTLGFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlPV9yZWYzLmFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlLGNvbmZpZz1fcmVmMy5jb25maWcsY3NzUnVsZVNldFRvU3RyaW5nPV9yZWYzLmNzc1J1bGVTZXRUb1N0cmluZyxnZXRDb21wb25lbnRGaWVsZD1fcmVmMy5nZXRDb21wb25lbnRGaWVsZCxnZXRHbG9iYWxTdGF0ZT1fcmVmMy5nZXRHbG9iYWxTdGF0ZSxoYXNoPV9yZWYzLmhhc2gsaXNOZXN0ZWRTdHlsZT1fcmVmMy5pc05lc3RlZFN0eWxlLG1lcmdlU3R5bGVzPV9yZWYzLm1lcmdlU3R5bGVzLHByb3BzPV9yZWYzLnByb3BzLHNldFN0YXRlPV9yZWYzLnNldFN0YXRlLHN0eWxlPV9yZWYzLnN0eWxlOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93XG52YXIgbmV3U3R5bGU9X3JlbW92ZU1lZGlhUXVlcmllcyhzdHlsZSk7dmFyIG1lZGlhUXVlcnlDbGFzc05hbWVzPV90b3BMZXZlbFJ1bGVzVG9DU1Moe2FkZENTUzphZGRDU1MsYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWU6YXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWUsY3NzUnVsZVNldFRvU3RyaW5nOmNzc1J1bGVTZXRUb1N0cmluZyxoYXNoOmhhc2gsaXNOZXN0ZWRTdHlsZTppc05lc3RlZFN0eWxlLHN0eWxlOnN0eWxlLHVzZXJBZ2VudDpjb25maWcudXNlckFnZW50fSk7dmFyIG5ld1Byb3BzPW1lZGlhUXVlcnlDbGFzc05hbWVzP3tjbGFzc05hbWU6bWVkaWFRdWVyeUNsYXNzTmFtZXMrKHByb3BzLmNsYXNzTmFtZT8nICcrcHJvcHMuY2xhc3NOYW1lOicnKX06bnVsbDt2YXIgbWF0Y2hNZWRpYT1jb25maWcubWF0Y2hNZWRpYXx8X2dldFdpbmRvd01hdGNoTWVkaWEoRXhlY3V0aW9uRW52aXJvbm1lbnQpO2lmKCFtYXRjaE1lZGlhKXtyZXR1cm57cHJvcHM6bmV3UHJvcHMsc3R5bGU6bmV3U3R5bGV9O312YXIgbGlzdGVuZXJzQnlRdWVyeT1fb2JqZWN0U3ByZWFkKHt9LGdldENvbXBvbmVudEZpZWxkKCdfcmFkaXVtTWVkaWFRdWVyeUxpc3RlbmVyc0J5UXVlcnknKSk7dmFyIG1lZGlhUXVlcnlMaXN0c0J5UXVlcnk9Z2V0R2xvYmFsU3RhdGUoJ21lZGlhUXVlcnlMaXN0c0J5UXVlcnknKXx8e307T2JqZWN0LmtleXMoc3R5bGUpLmZpbHRlcihmdW5jdGlvbihuYW1lKXtyZXR1cm4gbmFtZS5pbmRleE9mKCdAbWVkaWEnKT09PTA7fSkubWFwKGZ1bmN0aW9uKHF1ZXJ5KXt2YXIgbmVzdGVkUnVsZXM9X2ZpbHRlck9iamVjdChzdHlsZVtxdWVyeV0saXNOZXN0ZWRTdHlsZSk7aWYoIU9iamVjdC5rZXlzKG5lc3RlZFJ1bGVzKS5sZW5ndGgpe3JldHVybjt9dmFyIG1xbD1fc3Vic2NyaWJlVG9NZWRpYVF1ZXJ5KHtsaXN0ZW5lcjpmdW5jdGlvbiBsaXN0ZW5lcigpe3JldHVybiBzZXRTdGF0ZShxdWVyeSxtcWwubWF0Y2hlcywnX2FsbCcpO30sbGlzdGVuZXJzQnlRdWVyeTpsaXN0ZW5lcnNCeVF1ZXJ5LG1hdGNoTWVkaWE6bWF0Y2hNZWRpYSxtZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5Om1lZGlhUXVlcnlMaXN0c0J5UXVlcnkscXVlcnk6cXVlcnl9KTsvLyBBcHBseSBtZWRpYSBxdWVyeSBzdGF0ZXNcbmlmKG1xbC5tYXRjaGVzKXtuZXdTdHlsZT1tZXJnZVN0eWxlcyhbbmV3U3R5bGUsbmVzdGVkUnVsZXNdKTt9fSk7cmV0dXJue2NvbXBvbmVudEZpZWxkczp7X3JhZGl1bU1lZGlhUXVlcnlMaXN0ZW5lcnNCeVF1ZXJ5Omxpc3RlbmVyc0J5UXVlcnl9LGdsb2JhbFN0YXRlOnttZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5Om1lZGlhUXVlcnlMaXN0c0J5UXVlcnl9LHByb3BzOm5ld1Byb3BzLHN0eWxlOm5ld1N0eWxlfTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9yZXNvbHZlLW1lZGlhLXF1ZXJpZXMtcGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT12aXNpdGVkO2Z1bmN0aW9uIHZpc2l0ZWQoX3JlZil7dmFyIGFkZENTUz1fcmVmLmFkZENTUyxhcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZT1fcmVmLmFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlLGNvbmZpZz1fcmVmLmNvbmZpZyxjc3NSdWxlU2V0VG9TdHJpbmc9X3JlZi5jc3NSdWxlU2V0VG9TdHJpbmcsaGFzaD1fcmVmLmhhc2gscHJvcHM9X3JlZi5wcm9wcyxzdHlsZT1fcmVmLnN0eWxlOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93XG52YXIgY2xhc3NOYW1lPXByb3BzLmNsYXNzTmFtZTt2YXIgbmV3U3R5bGU9T2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZShmdW5jdGlvbihuZXdTdHlsZUluUHJvZ3Jlc3Msa2V5KXt2YXIgdmFsdWU9c3R5bGVba2V5XTtpZihrZXk9PT0nOnZpc2l0ZWQnKXt2YWx1ZT1hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSh2YWx1ZSk7dmFyIHJ1bGVDU1M9Y3NzUnVsZVNldFRvU3RyaW5nKCcnLHZhbHVlLGNvbmZpZy51c2VyQWdlbnQpO3ZhciB2aXNpdGVkQ2xhc3NOYW1lPSdyYWQtJytoYXNoKHJ1bGVDU1MpO3ZhciBjc3M9Jy4nK3Zpc2l0ZWRDbGFzc05hbWUrJzp2aXNpdGVkJytydWxlQ1NTO2FkZENTUyhjc3MpO2NsYXNzTmFtZT0oY2xhc3NOYW1lP2NsYXNzTmFtZSsnICc6JycpK3Zpc2l0ZWRDbGFzc05hbWU7fWVsc2V7bmV3U3R5bGVJblByb2dyZXNzW2tleV09dmFsdWU7fXJldHVybiBuZXdTdHlsZUluUHJvZ3Jlc3M7fSx7fSk7cmV0dXJue3Byb3BzOmNsYXNzTmFtZT09PXByb3BzLmNsYXNzTmFtZT9udWxsOntjbGFzc05hbWU6Y2xhc3NOYW1lfSxzdHlsZTpuZXdTdHlsZX07fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMvdmlzaXRlZC1wbHVnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDE1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fXZhciBTdHlsZUtlZXBlcj0vKiNfX1BVUkVfXyovZnVuY3Rpb24oKXtmdW5jdGlvbiBTdHlsZUtlZXBlcih1c2VyQWdlbnQpe19jbGFzc0NhbGxDaGVjayh0aGlzLFN0eWxlS2VlcGVyKTt0aGlzLl91c2VyQWdlbnQ9dm9pZCAwO3RoaXMuX2xpc3RlbmVycz12b2lkIDA7dGhpcy5fY3NzU2V0PXZvaWQgMDt0aGlzLl91c2VyQWdlbnQ9dXNlckFnZW50O3RoaXMuX2xpc3RlbmVycz1bXTt0aGlzLl9jc3NTZXQ9e307fV9jcmVhdGVDbGFzcyhTdHlsZUtlZXBlcixbe2tleTpcInN1YnNjcmliZVwiLHZhbHVlOmZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcil7dmFyIF90aGlzPXRoaXM7aWYodGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpPT09LTEpe3RoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTt9cmV0dXJuey8vIE11c3QgYmUgZmF0IGFycm93IHRvIGNhcHR1cmUgYHRoaXNgXG5yZW1vdmU6ZnVuY3Rpb24gcmVtb3ZlKCl7dmFyIGxpc3RlbmVySW5kZXg9X3RoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtpZihsaXN0ZW5lckluZGV4Pi0xKXtfdGhpcy5fbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lckluZGV4LDEpO319fTt9fSx7a2V5OlwiYWRkQ1NTXCIsdmFsdWU6ZnVuY3Rpb24gYWRkQ1NTKGNzcyl7dmFyIF90aGlzMj10aGlzO2lmKCF0aGlzLl9jc3NTZXRbY3NzXSl7dGhpcy5fY3NzU2V0W2Nzc109dHJ1ZTt0aGlzLl9lbWl0Q2hhbmdlKCk7fXJldHVybnsvLyBNdXN0IGJlIGZhdCBhcnJvdyB0byBjYXB0dXJlIGB0aGlzYFxucmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe2RlbGV0ZSBfdGhpczIuX2Nzc1NldFtjc3NdO190aGlzMi5fZW1pdENoYW5nZSgpO319O319LHtrZXk6XCJnZXRDU1NcIix2YWx1ZTpmdW5jdGlvbiBnZXRDU1MoKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5fY3NzU2V0KS5qb2luKCdcXG4nKTt9fSx7a2V5OlwiX2VtaXRDaGFuZ2VcIix2YWx1ZTpmdW5jdGlvbiBfZW1pdENoYW5nZSgpe3RoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKXtyZXR1cm4gbGlzdGVuZXIoKTt9KTt9fV0pO3JldHVybiBTdHlsZUtlZXBlcjt9KCk7ZXhwb3J0c1tcImRlZmF1bHRcIl09U3R5bGVLZWVwZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvc3R5bGUta2VlcGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLndpdGhSYWRpdW1Db250ZXh0cz13aXRoUmFkaXVtQ29udGV4dHM7ZXhwb3J0cy5SYWRpdW1Db25maWdDb250ZXh0PWV4cG9ydHMuU3R5bGVLZWVwZXJDb250ZXh0PXZvaWQgMDt2YXIgX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7dmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiKSk7dmFyIF9zdHlsZUtlZXBlcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3N0eWxlLWtlZXBlclwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfTt9ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKXtpZihvYmomJm9iai5fX2VzTW9kdWxlKXtyZXR1cm4gb2JqO31lbHNle3ZhciBuZXdPYmo9e307aWYob2JqIT1udWxsKXtmb3IodmFyIGtleSBpbiBvYmope2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosa2V5KSl7dmFyIGRlc2M9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLGtleSk6e307aWYoZGVzYy5nZXR8fGRlc2Muc2V0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLGtleSxkZXNjKTt9ZWxzZXtuZXdPYmpba2V5XT1vYmpba2V5XTt9fX19bmV3T2JqW1wiZGVmYXVsdFwiXT1vYmo7cmV0dXJuIG5ld09iajt9fWZ1bmN0aW9uIF9leHRlbmRzKCl7X2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3JldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fXZhciBTdHlsZUtlZXBlckNvbnRleHQ9X3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7ZXhwb3J0cy5TdHlsZUtlZXBlckNvbnRleHQ9U3R5bGVLZWVwZXJDb250ZXh0O3ZhciBSYWRpdW1Db25maWdDb250ZXh0PV9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO2V4cG9ydHMuUmFkaXVtQ29uZmlnQ29udGV4dD1SYWRpdW1Db25maWdDb250ZXh0O2Z1bmN0aW9uIHdpdGhSYWRpdW1Db250ZXh0cyhXcmFwcGVkQ29tcG9uZW50KXt2YXIgV2l0aFJhZGl1bUNvbnRleHRzPV9yZWFjdFtcImRlZmF1bHRcIl0uZm9yd2FyZFJlZihmdW5jdGlvbihwcm9wcyxyZWYpe3ZhciByYWRpdW1Db25maWdDb250ZXh0PSgwLF9yZWFjdC51c2VDb250ZXh0KShSYWRpdW1Db25maWdDb250ZXh0KTt2YXIgc3R5bGVLZWVwZXJDb250ZXh0PSgwLF9yZWFjdC51c2VDb250ZXh0KShTdHlsZUtlZXBlckNvbnRleHQpO3JldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCxfZXh0ZW5kcyh7cmVmOnJlZn0scHJvcHMse3JhZGl1bUNvbmZpZ0NvbnRleHQ6cmFkaXVtQ29uZmlnQ29udGV4dCxzdHlsZUtlZXBlckNvbnRleHQ6c3R5bGVLZWVwZXJDb250ZXh0fSkpO30pO1dpdGhSYWRpdW1Db250ZXh0cy5kaXNwbGF5TmFtZT1cIndpdGhSYWRpdW1Db250ZXh0cyhcIi5jb25jYXQoV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZXx8V3JhcHBlZENvbXBvbmVudC5uYW1lfHwnQ29tcG9uZW50JyxcIilcIik7cmV0dXJuKDAsX2hvaXN0Tm9uUmVhY3RTdGF0aWNzW1wiZGVmYXVsdFwiXSkoV2l0aFJhZGl1bUNvbnRleHRzLFdyYXBwZWRDb21wb25lbnQpO31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9jb250ZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNThcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF90eXBlb2YyPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2Nzc1J1bGVTZXRUb1N0cmluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jc3MtcnVsZS1zZXQtdG8tc3RyaW5nXCIpKTt2YXIgX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7dmFyIF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7dmFyIF9jb250ZXh0PXJlcXVpcmUoXCIuLi9jb250ZXh0XCIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iail7aWYob2JqJiZvYmouX19lc01vZHVsZSl7cmV0dXJuIG9iajt9ZWxzZXt2YXIgbmV3T2JqPXt9O2lmKG9iaiE9bnVsbCl7Zm9yKHZhciBrZXkgaW4gb2JqKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLGtleSkpe3ZhciBkZXNjPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaixrZXkpOnt9O2lmKGRlc2MuZ2V0fHxkZXNjLnNldCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaixrZXksZGVzYyk7fWVsc2V7bmV3T2JqW2tleV09b2JqW2tleV07fX19fW5ld09ialtcImRlZmF1bHRcIl09b2JqO3JldHVybiBuZXdPYmo7fX1mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9O31mdW5jdGlvbiBfdHlwZW9mKG9iail7aWYodHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKT09PVwic3ltYm9sXCIpe190eXBlb2Y9ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiB0eXBlb2Ygb2JqPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YyKG9iaik7fTt9ZWxzZXtfdHlwZW9mPWZ1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YyKG9iaik7fTt9cmV0dXJuIF90eXBlb2Yob2JqKTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fWZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO31mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKGNhbGwmJihfdHlwZW9mKGNhbGwpPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpKXtyZXR1cm4gY2FsbDt9cmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7fWZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZil7aWYoc2VsZj09PXZvaWQgMCl7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pe19nZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKXtyZXR1cm4gby5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTt9O3JldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpO31mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobyxwKXtfc2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobyxwKXtvLl9fcHJvdG9fXz1wO3JldHVybiBvO307cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLHApO312YXIgU3R5bGU9LyojX19QVVJFX18qL2Z1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoU3R5bGUsX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFN0eWxlKCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsU3R5bGUpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLF9nZXRQcm90b3R5cGVPZihTdHlsZSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKTt9X2NyZWF0ZUNsYXNzKFN0eWxlLFt7a2V5OlwiX2J1aWxkU3R5bGVzXCIsdmFsdWU6ZnVuY3Rpb24gX2J1aWxkU3R5bGVzKHN0eWxlcyl7dmFyIF90aGlzPXRoaXM7dmFyIHVzZXJBZ2VudD10aGlzLnByb3BzLnJhZGl1bUNvbmZpZyYmdGhpcy5wcm9wcy5yYWRpdW1Db25maWcudXNlckFnZW50fHx0aGlzLnByb3BzLnJhZGl1bUNvbmZpZ0NvbnRleHQmJnRoaXMucHJvcHMucmFkaXVtQ29uZmlnQ29udGV4dC51c2VyQWdlbnQ7dmFyIHNjb3BlU2VsZWN0b3I9dGhpcy5wcm9wcy5zY29wZVNlbGVjdG9yO3ZhciByb290UnVsZXM9T2JqZWN0LmtleXMoc3R5bGVzKS5yZWR1Y2UoZnVuY3Rpb24oYWNjdW11bGF0b3Isc2VsZWN0b3Ipe2lmKF90eXBlb2Yoc3R5bGVzW3NlbGVjdG9yXSkhPT0nb2JqZWN0Jyl7YWNjdW11bGF0b3Jbc2VsZWN0b3JdPXN0eWxlc1tzZWxlY3Rvcl07fXJldHVybiBhY2N1bXVsYXRvcjt9LHt9KTt2YXIgcm9vdFN0eWxlcz1PYmplY3Qua2V5cyhyb290UnVsZXMpLmxlbmd0aD8oMCxfY3NzUnVsZVNldFRvU3RyaW5nW1wiZGVmYXVsdFwiXSkoc2NvcGVTZWxlY3Rvcnx8Jycscm9vdFJ1bGVzLHVzZXJBZ2VudCk6Jyc7cmV0dXJuIHJvb3RTdHlsZXMrT2JqZWN0LmtleXMoc3R5bGVzKS5yZWR1Y2UoZnVuY3Rpb24oYWNjdW11bGF0b3Isc2VsZWN0b3Ipe3ZhciBydWxlcz1zdHlsZXNbc2VsZWN0b3JdO2lmKHNlbGVjdG9yPT09J21lZGlhUXVlcmllcycpe2FjY3VtdWxhdG9yKz1fdGhpcy5fYnVpbGRNZWRpYVF1ZXJ5U3RyaW5nKHJ1bGVzKTt9ZWxzZSBpZihfdHlwZW9mKHN0eWxlc1tzZWxlY3Rvcl0pPT09J29iamVjdCcpe3ZhciBjb21wbGV0ZVNlbGVjdG9yPXNjb3BlU2VsZWN0b3I/c2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24ocGFydCl7cmV0dXJuIHNjb3BlU2VsZWN0b3IrJyAnK3BhcnQudHJpbSgpO30pLmpvaW4oJywnKTpzZWxlY3RvcjthY2N1bXVsYXRvcis9KDAsX2Nzc1J1bGVTZXRUb1N0cmluZ1tcImRlZmF1bHRcIl0pKGNvbXBsZXRlU2VsZWN0b3IscnVsZXMsdXNlckFnZW50KTt9cmV0dXJuIGFjY3VtdWxhdG9yO30sJycpO319LHtrZXk6XCJfYnVpbGRNZWRpYVF1ZXJ5U3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24gX2J1aWxkTWVkaWFRdWVyeVN0cmluZyhzdHlsZXNCeU1lZGlhUXVlcnkpe3ZhciBfdGhpczI9dGhpczt2YXIgbWVkaWFRdWVyeVN0cmluZz0nJztPYmplY3Qua2V5cyhzdHlsZXNCeU1lZGlhUXVlcnkpLmZvckVhY2goZnVuY3Rpb24ocXVlcnkpe21lZGlhUXVlcnlTdHJpbmcrPSdAbWVkaWEgJytxdWVyeSsneycrX3RoaXMyLl9idWlsZFN0eWxlcyhzdHlsZXNCeU1lZGlhUXVlcnlbcXVlcnldKSsnfSc7fSk7cmV0dXJuIG1lZGlhUXVlcnlTdHJpbmc7fX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe2lmKCF0aGlzLnByb3BzLnJ1bGVzKXtyZXR1cm4gbnVsbDt9dmFyIHN0eWxlcz10aGlzLl9idWlsZFN0eWxlcyh0aGlzLnByb3BzLnJ1bGVzKTtyZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix7ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6e19faHRtbDpzdHlsZXN9fSk7fX1dKTtyZXR1cm4gU3R5bGU7fShfcmVhY3QuUHVyZUNvbXBvbmVudCk7U3R5bGUucHJvcFR5cGVzPXtyYWRpdW1Db25maWc6X3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LHJ1bGVzOl9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxzY29wZVNlbGVjdG9yOl9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ307U3R5bGUuZGVmYXVsdFByb3BzPXtzY29wZVNlbGVjdG9yOicnfTt2YXIgX2RlZmF1bHQ9KDAsX2NvbnRleHQud2l0aFJhZGl1bUNvbnRleHRzKShTdHlsZSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvY29tcG9uZW50cy9zdHlsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfcmVhY3Q9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTt2YXIgX2VuaGFuY2VyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2VuaGFuY2VyXCIpKTt2YXIgX3N0eWxlS2VlcGVyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlLWtlZXBlclwiKSk7dmFyIF9zdHlsZVNoZWV0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGUtc2hlZXRcIikpO3ZhciBfY29udGV4dD1yZXF1aXJlKFwiLi4vY29udGV4dFwiKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9O31mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmope2lmKG9iaiYmb2JqLl9fZXNNb2R1bGUpe3JldHVybiBvYmo7fWVsc2V7dmFyIG5ld09iaj17fTtpZihvYmohPW51bGwpe2Zvcih2YXIga2V5IGluIG9iail7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaixrZXkpKXt2YXIgZGVzYz1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosa2V5KTp7fTtpZihkZXNjLmdldHx8ZGVzYy5zZXQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosa2V5LGRlc2MpO31lbHNle25ld09ialtrZXldPW9ialtrZXldO319fX1uZXdPYmpbXCJkZWZhdWx0XCJdPW9iajtyZXR1cm4gbmV3T2JqO319ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSxleGNsdWRlZCl7aWYoc291cmNlPT1udWxsKXJldHVybnt9O3ZhciB0YXJnZXQ9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLGV4Y2x1ZGVkKTt2YXIga2V5LGk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHNvdXJjZVN5bWJvbEtleXM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO2ZvcihpPTA7aTxzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDtpKyspe2tleT1zb3VyY2VTeW1ib2xLZXlzW2ldO2lmKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KT49MCljb250aW51ZTtpZighT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSxrZXkpKWNvbnRpbnVlO3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319cmV0dXJuIHRhcmdldDt9ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLGV4Y2x1ZGVkKXtpZihzb3VyY2U9PW51bGwpcmV0dXJue307dmFyIHRhcmdldD17fTt2YXIgc291cmNlS2V5cz1PYmplY3Qua2V5cyhzb3VyY2UpO3ZhciBrZXksaTtmb3IoaT0wO2k8c291cmNlS2V5cy5sZW5ndGg7aSsrKXtrZXk9c291cmNlS2V5c1tpXTtpZihleGNsdWRlZC5pbmRleE9mKGtleSk+PTApY29udGludWU7dGFyZ2V0W2tleV09c291cmNlW2tleV07fXJldHVybiB0YXJnZXQ7fWZ1bmN0aW9uIGdldFN0eWxlS2VlcGVyKGNvbmZpZ1Byb3AsY29uZmlnQ29udGV4dCl7dmFyIHVzZXJBZ2VudD1jb25maWdQcm9wJiZjb25maWdQcm9wLnVzZXJBZ2VudHx8Y29uZmlnQ29udGV4dCYmY29uZmlnQ29udGV4dC51c2VyQWdlbnQ7cmV0dXJuIG5ldyBfc3R5bGVLZWVwZXJbXCJkZWZhdWx0XCJdKHVzZXJBZ2VudCk7fXZhciBTdHlsZVJvb3RJbm5lcj0oMCxfZW5oYW5jZXJbXCJkZWZhdWx0XCJdKShmdW5jdGlvbihfcmVmKXt2YXIgY2hpbGRyZW49X3JlZi5jaGlsZHJlbixvdGhlclByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLFtcImNoaWxkcmVuXCJdKTtyZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsb3RoZXJQcm9wcyxjaGlsZHJlbixfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX3N0eWxlU2hlZXRbXCJkZWZhdWx0XCJdLG51bGwpKTt9KTt2YXIgU3R5bGVSb290PWZ1bmN0aW9uIFN0eWxlUm9vdChwcm9wcyl7LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi8vLyBQYXNzIGRvd24gYWxsIHByb3BzIGV4Y2VwdCBjb25maWcgdG8gdGhlIHJlbmRlcmVkIGRpdi5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi92YXIgcmFkaXVtQ29uZmlnPXByb3BzLnJhZGl1bUNvbmZpZzt2YXIgY29uZmlnQ29udGV4dD0oMCxfcmVhY3QudXNlQ29udGV4dCkoX2NvbnRleHQuUmFkaXVtQ29uZmlnQ29udGV4dCk7dmFyIHN0eWxlS2VlcGVyPSgwLF9yZWFjdC51c2VSZWYpKGdldFN0eWxlS2VlcGVyKHJhZGl1bUNvbmZpZyxjb25maWdDb250ZXh0KSk7cmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfY29udGV4dC5TdHlsZUtlZXBlckNvbnRleHQuUHJvdmlkZXIse3ZhbHVlOnN0eWxlS2VlcGVyLmN1cnJlbnR9LF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChTdHlsZVJvb3RJbm5lcixwcm9wcykpO307dmFyIF9kZWZhdWx0PVN0eWxlUm9vdDtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9jb21wb25lbnRzL3N0eWxlLXJvb3QuanNcbi8vIG1vZHVsZSBpZCA9IDE2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3R5cGVvZjI9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfcmVhY3Q9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTt2YXIgX3N0eWxlS2VlcGVyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlLWtlZXBlclwiKSk7dmFyIF9jb250ZXh0PXJlcXVpcmUoXCIuLi9jb250ZXh0XCIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian07fWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iail7aWYob2JqJiZvYmouX19lc01vZHVsZSl7cmV0dXJuIG9iajt9ZWxzZXt2YXIgbmV3T2JqPXt9O2lmKG9iaiE9bnVsbCl7Zm9yKHZhciBrZXkgaW4gb2JqKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLGtleSkpe3ZhciBkZXNjPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaixrZXkpOnt9O2lmKGRlc2MuZ2V0fHxkZXNjLnNldCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaixrZXksZGVzYyk7fWVsc2V7bmV3T2JqW2tleV09b2JqW2tleV07fX19fW5ld09ialtcImRlZmF1bHRcIl09b2JqO3JldHVybiBuZXdPYmo7fX1mdW5jdGlvbiBfdHlwZW9mKG9iail7aWYodHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKT09PVwic3ltYm9sXCIpe190eXBlb2Y9ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiB0eXBlb2Ygb2JqPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YyKG9iaik7fTt9ZWxzZXtfdHlwZW9mPWZ1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YyKG9iaik7fTt9cmV0dXJuIF90eXBlb2Yob2JqKTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fWZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO31mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKGNhbGwmJihfdHlwZW9mKGNhbGwpPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpKXtyZXR1cm4gY2FsbDt9cmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7fWZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZil7aWYoc2VsZj09PXZvaWQgMCl7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pe19nZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKXtyZXR1cm4gby5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTt9O3JldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpO31mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobyxwKXtfc2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobyxwKXtvLl9fcHJvdG9fXz1wO3JldHVybiBvO307cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLHApO312YXIgU3R5bGVTaGVldD0vKiNfX1BVUkVfXyovZnVuY3Rpb24oX0NvbXBvbmVudCl7X2luaGVyaXRzKFN0eWxlU2hlZXQsX0NvbXBvbmVudCk7Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3NvcnQtY29tcFxuZnVuY3Rpb24gU3R5bGVTaGVldCgpe3ZhciBfdGhpcztfY2xhc3NDYWxsQ2hlY2sodGhpcyxTdHlsZVNoZWV0KTtfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLF9nZXRQcm90b3R5cGVPZihTdHlsZVNoZWV0KS5hcHBseSh0aGlzLGFyZ3VtZW50cykpO190aGlzLnN0eWxlS2VlcGVyPXZvaWQgMDtfdGhpcy5fc3Vic2NyaXB0aW9uPXZvaWQgMDtfdGhpcy5fcm9vdD12b2lkIDA7X3RoaXMuX2Nzcz12b2lkIDA7X3RoaXMuX29uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIG5leHRDU1M9X3RoaXMuc3R5bGVLZWVwZXIuZ2V0Q1NTKCk7aWYobmV4dENTUyE9PV90aGlzLl9jc3Mpe2lmKF90aGlzLl9yb290KXtfdGhpcy5fcm9vdC5pbm5lckhUTUw9bmV4dENTUzt9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoJ05vIHJvb3Qgc3R5bGUgb2JqZWN0IGZvdW5kLCBldmVuIGFmdGVyIFN0eWxlU2hlZXQgbW91bnQuJyk7fV90aGlzLl9jc3M9bmV4dENTUzt9fTtpZighX3RoaXMucHJvcHMuc3R5bGVLZWVwZXJDb250ZXh0KXt0aHJvdyBuZXcgRXJyb3IoJ1N0eWxlUm9vdCBpcyByZXF1aXJlZCB0byB1c2UgU3R5bGVTaGVldCcpO31fdGhpcy5zdHlsZUtlZXBlcj1fdGhpcy5wcm9wcy5zdHlsZUtlZXBlckNvbnRleHQ7X3RoaXMuX2Nzcz1fdGhpcy5zdHlsZUtlZXBlci5nZXRDU1MoKTtyZXR1cm4gX3RoaXM7fV9jcmVhdGVDbGFzcyhTdHlsZVNoZWV0LFt7a2V5OlwiY29tcG9uZW50RGlkTW91bnRcIix2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMuX3N1YnNjcmlwdGlvbj10aGlzLnN0eWxlS2VlcGVyLnN1YnNjcmliZSh0aGlzLl9vbkNoYW5nZSk7dGhpcy5fb25DaGFuZ2UoKTt9fSx7a2V5Olwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCl7cmV0dXJuIGZhbHNlO319LHtrZXk6XCJjb21wb25lbnRXaWxsVW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7aWYodGhpcy5fc3Vic2NyaXB0aW9uKXt0aGlzLl9zdWJzY3JpcHRpb24ucmVtb3ZlKCk7fX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3RoaXMyPXRoaXM7cmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInN0eWxlXCIse2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MOntfX2h0bWw6dGhpcy5fY3NzfSxyZWY6ZnVuY3Rpb24gcmVmKGMpe190aGlzMi5fcm9vdD1jO319KTt9fV0pO3JldHVybiBTdHlsZVNoZWV0O30oX3JlYWN0LkNvbXBvbmVudCk7dmFyIF9kZWZhdWx0PSgwLF9jb250ZXh0LndpdGhSYWRpdW1Db250ZXh0cykoU3R5bGVTaGVldCk7ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JhZGl1bS9saWIvY29tcG9uZW50cy9zdHlsZS1zaGVldC5qc1xuLy8gbW9kdWxlIGlkID0gMTYxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09a2V5ZnJhbWVzO3ZhciBfY3NzUnVsZVNldFRvU3RyaW5nPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3NzLXJ1bGUtc2V0LXRvLXN0cmluZ1wiKSk7dmFyIF9oYXNoPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzaFwiKSk7dmFyIF9wcmVmaXhlcj1yZXF1aXJlKFwiLi9wcmVmaXhlclwiKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9O31mdW5jdGlvbiBrZXlmcmFtZXMoa2V5ZnJhbWVSdWxlcyxuYW1lKXtyZXR1cm57X19yYWRpdW1LZXlmcmFtZXM6dHJ1ZSxfX3Byb2Nlc3M6ZnVuY3Rpb24gX19wcm9jZXNzKHVzZXJBZ2VudCl7dmFyIGtleWZyYW1lc1ByZWZpeGVkPSgwLF9wcmVmaXhlci5nZXRQcmVmaXhlZEtleWZyYW1lcykodXNlckFnZW50KTt2YXIgcnVsZXM9T2JqZWN0LmtleXMoa2V5ZnJhbWVSdWxlcykubWFwKGZ1bmN0aW9uKHBlcmNlbnRhZ2Upe3JldHVybigwLF9jc3NSdWxlU2V0VG9TdHJpbmdbXCJkZWZhdWx0XCJdKShwZXJjZW50YWdlLGtleWZyYW1lUnVsZXNbcGVyY2VudGFnZV0sdXNlckFnZW50KTt9KS5qb2luKCdcXG4nKTt2YXIgYW5pbWF0aW9uTmFtZT0obmFtZT9uYW1lKyctJzonJykrJ3JhZGl1bS1hbmltYXRpb24tJysoMCxfaGFzaFtcImRlZmF1bHRcIl0pKHJ1bGVzKTt2YXIgY3NzPSdAJytrZXlmcmFtZXNQcmVmaXhlZCsnICcrYW5pbWF0aW9uTmFtZSsnIHtcXG4nK3J1bGVzKydcXG59XFxuJztyZXR1cm57Y3NzOmNzcyxhbmltYXRpb25OYW1lOmFuaW1hdGlvbk5hbWV9O319O31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmFkaXVtL2xpYi9rZXlmcmFtZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e3dyYXBwZXI6e21hcmdpbjonNXB4JyxkaXNwbGF5OidmbGV4Jyx3aWR0aDonOTUlJ30saGlkZTp7ZGlzcGxheTonbm9uZSd9LHNlbGVjdDp7d2lkdGg6JzcwJScsbWFyZ2luOic1cHgnLGJvcmRlclJhZGl1czonNXB4JywnOmZvY3VzJzp7YmFja2dyb3VuZENvbG9yOidsaWdodHBpbmsnfX0scmVhZE9ubHk6e2JhY2tncm91bmRDb2xvcjonI0YzRUZFRid9LGxhYmVsOnt3aWR0aDonMzAlJyxtYXJnaW46JzVweCd9LGJ1dHRvbjp7d2lkdGg6JzUlJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zZWxlY3QtcmVrdi9zZWxlY3Qtc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgcmFkaXVtID0gcmVxdWlyZSgncmFkaXVtJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi9zZWxlY3Qtc3R5bGVzJyk7XG52YXIgZ2V0VGV4dFZhbHVlID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2dldFRleHRWYWx1ZScpO1xuXG52YXIgU2VsZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFNlbGVjdCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2VsZWN0KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3QpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZWxlY3QuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWxlY3QpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBwcm9wcy5kYXRhLFxuICAgICAgICAgICAgdmFsdWU6IDAgLyog0LfQtNC10YHRjCDQv9C+INC30L3QsNGH0LXQvdC40Y4g0JjQlCAqL1xuICAgICAgICAgICAgLCByZWFkT25seTogcHJvcHMucmVhZE9ubHksXG4gICAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICBmaWVsZFZhbHVlOiBwcm9wcy52YWx1ZSAvKtC30LTQtdGB0Ywg0L/QviDQt9C90LDRh9C10L3QuCDQv9C+0LvRjyBjb2xsSWQgKi9cbiAgICAgICAgICAgICwgYnRuRGVsZXRlOiBwcm9wcy5idG5EZWxldGUgLyog0LXRgdC70Lgg0LjRgdGC0LjQvdGDLCDRgtC+INGA0LjRgdGD0LXQvCDRgNGP0LTQvtC8INC60L3QvtC/0LrRgyDQtNC70Y8g0L7Rh9C40YHRgtC60Lgg0LfQvdCw0YfQtdC90LjRjyovXG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMub25DaGFuZ2UgPSBfdGhpcy5vbkNoYW5nZS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuYnRuRGVsQ2xpY2sgPSBfdGhpcy5idG5EZWxDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZ2V0VmFsdWVCeUlkID0gX3RoaXMuZ2V0VmFsdWVCeUlkLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhTZWxlY3QsIFt7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY29sbElkICYmIHRoaXMucHJvcHMuY29sbElkICE9PSAnaWQnKSB7XG4gICAgICAgICAgICAgICAgLy8g0LjRidC10Lwg0JjQlCDQv9C+INC30L3QsNGH0LXQvdC40Y4g0L/QvtC70Y9cbiAgICAgICAgICAgICAgICB0aGlzLmdldFZhbHVlQnlJZCh0aGlzLnN0YXRlLmRhdGEsIHRoaXMucHJvcHMuY29sbElkLCB0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb25DaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgZmllbGRWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNvbGxJZCAmJiB0aGlzLnByb3BzLmNvbGxJZCAhPT0gJ2lkJykge1xuICAgICAgICAgICAgICAgIC8vINC90LDQudC00LXQvCDQv9C+INC40LQg0LfQvdCw0YfQtdC90LjQtSDQv9C+0LvRjyDQsiBjb2xsSWRcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5SWQodGhpcy5zdGF0ZS5kYXRhLCB0aGlzLnByb3BzLmNvbGxJZCwgZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDRgdC+0YXRgNCw0L3QuNC8INC40LQg0LrQsNC6IHZhbHVlXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZmllbGRWYWx1ZTogZmllbGRWYWx1ZSwgdmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgIC8vINGB0LzQvtGC0YDQuNC8INC6INGH0LXQvNGDINC/0YDQuNCy0Y/Qt9Cw0L0g0YHQtdC70LXQutGCINC4INC+0YLQtNCw0LjQvCDQtdCz0L4g0L3QsNCy0LXRgNGFXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLnByb3BzLm5hbWUsIGZpZWxkVmFsdWUpOyAvLyDQsiDRgdC70YPRh9Cw0LUg0LXRgdC70Lgg0LfQsNC00LDQvSDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvdCwINCy0LXRgNGF0L3QtdC8INGD0YDQvtCy0L3QtSwg0L7RgtC00LDQtNC40Lwg0L7QsdGA0LDQsdC+0YLQutGDINGC0YPQtNCwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0U3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuc2VsZWN0LCB0aGlzLnByb3BzLnN0eWxlID8gdGhpcy5wcm9wcy5zdHlsZSA6IHt9KTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndyYXBwZXIsIHJlZjogJ3dyYXBwZXInIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy50aXRsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnbGFiZWwnLCBzdHlsZTogc3R5bGVzLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEZvcjogdGhpcy5wcm9wcy5uYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldFRleHRWYWx1ZSh0aGlzLnByb3BzLnRpdGxlKVxuICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc2VsZWN0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnN0YXRlLnJlYWRPbmx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5wcm9wcy5zaXplID8gdGhpcy5wcm9wcy5zaXplIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlIH0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGFpcmVEYXRhT3B0aW9ucygpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvbGxJZFxyXG4gICAgICAgICAqIEBwYXJhbSByb3dJZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRWYWx1ZUJ5SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVCeUlkKGRhdGEsIGNvbGxJZCwgcm93SWQpIHtcbiAgICAgICAgICAgIC8vINCy0LXRgNC90LXRgiDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9GPINC/0L4g0LLRi9Cx0YDQsNC90L3QvtC80YMg0JjQlFxuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSAwO1xuICAgICAgICAgICAgdmFyIGZvdW5kUm93ID0gZGF0YS5maW5kKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93W2NvbGxJZF0gPT09IHJvd0lkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZm91bmRSb3cpIHtcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gZm91bmRSb3dbY29sbElkXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkRlbENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkRlbENsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyDQv9C+INCy0YvQt9C+0LLRgyDQutC90L7Qv9C60YMg0YPQtNCw0LvQuNGC0YwsINC+0LHQvdGD0LvRj9C10YIg0LfQvdCw0YfQtdC90LjQtVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiAnJyB9KTtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0J/QvtC00LPQvtGC0L7QstC40YIg0LTQsNGC0LDRgdC10YIg0LTQu9GPINGB0LXQu9C10LrRgtCwXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ByZXBhaXJlRGF0YU9wdGlvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFpcmVEYXRhT3B0aW9ucygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5zdGF0ZS5kYXRhLmxlbmd0aCA/IHRoaXMuc3RhdGUuZGF0YSA6IFtdO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUudmFsdWUgJiYgIWRhdGEuZmluZChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cuaWQgPT09IDA7XG4gICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCBhZGQgZW1wdHkgcm93XG4gICAgICAgICAgICAgICAgICAgIGRhdGEudW5zaGlmdCh7IGlkOiAwLCBrb29kOiAnJywgbmltZXR1czogJycgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gJ29wdGlvbi0nICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnICc7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dWYWx1ZSA9IChpdGVtLmtvb2QgPyBpdGVtLmtvb2QgOiAnJykgKyAnICcgKyBzZXBhcmF0b3IgKyAnICcgKyAoaXRlbS5uYW1lID8gaXRlbS5uYW1lIDogaXRlbS5uaW1ldHVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6IGl0ZW1bX3RoaXMyLnByb3BzLmNvbGxJZF0sIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjoga2V5IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcgJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnb3B0aW9uJywgeyB2YWx1ZTogMCwga2V5OiBNYXRoLnJhbmRvbSgpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDRg9GB0YLQsNC90L7QstC40YIg0YTQvtC60YPRgSDQvdCwINGN0LvQtdC80LXQvdGC0YtcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9jdXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnNbJ3NlbGVjdCddLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gcHJldlN0YXRlLnZhbHVlIHx8IG5leHRQcm9wcy5yZWFkT25seSAhPT0gcHJldlN0YXRlLnJlYWRPbmx5IHx8IEpTT04uc3RyaW5naWZ5KG5leHRQcm9wcy5kYXRhKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0YXRlLmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSwgcmVhZE9ubHk6IG5leHRQcm9wcy5yZWFkT25seSwgZGF0YTogbmV4dFByb3BzLmRhdGEgfTtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTZWxlY3Q7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5TZWxlY3QucHJvcFR5cGVzID0ge1xuICAgIGRhdGE6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGlkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICBrb29kOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBuaW1ldHVzOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSkpLFxuICAgIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgYnRuRGVsZXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb2xsSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cblNlbGVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICBidG5EZWxldGU6IGZhbHNlLFxuICAgIGNvbGxJZDogJ2lkJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVmYXVsdFZhbHVlOiAnJyxcbiAgICBkYXRhOiBbeyBpZDogMCwga29vZDogJycsIG5pbWV0dXM6ICcnIH1dXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJhZGl1bShTZWxlY3QpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LmpzeFxuLy8gbW9kdWxlIGlkID0gMTY0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17d3JhcHBlcjp7bWFyZ2luOic1cHgnLGRpc3BsYXk6J2ZsZXgnLHdpZHRoOic5NSUnfSxpbnB1dDp7d2lkdGg6JzcwJScsbWFyZ2luOic1cHggMnB4Jyxib3JkZXJSYWRpdXM6JzVweCd9LGE6e3dpZHRoOic3MCUnLG1hcmdpbkxlZnQ6JzVweCcsYm9yZGVyUmFkaXVzOic1cHgnfSxoaWRlOntkaXNwbGF5Oidub25lJ30sc2VsZWN0Ont3aWR0aDonNzAlJyxoZWlnaHQ6JzMwcHgnLG1hcmdpbjonNXB4IDJweCcsYm9yZGVyUmFkaXVzOic1cHgnLCc6Zm9jdXMnOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0cGluayd9LG9wYWNpdHk6MX0scmVhZE9ubHk6e2JhY2tncm91bmRDb2xvcjonI0YzRUZFRid9LGxhYmVsOnt3aWR0aDonMzAlJyxtYXJnaW46JzVweCd9LGJ1dHRvbjp7d2lkdGg6JzUlJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTY1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci1zdHlsZXMnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgSUNPTiA9ICdhY2NvdW50JztcblxudmFyIEJ1dHRvbkFjY291bnQgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQnV0dG9uQWNjb3VudCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgLy8g0LrQvdC+0L/QutCwINGB0L7Qt9C00LDQvdC40Y8g0LTQvtC60YPQvNC10L3RgtCwINCyINGA0LXQs9C40YHRgtGA0LDRhVxuICAgIGZ1bmN0aW9uIEJ1dHRvbkFjY291bnQocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvbkFjY291bnQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCdXR0b25BY2NvdW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uQWNjb3VudCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25BY2NvdW50LCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2xpY2soJ2FjY291bnQnKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgICAgICAgdmFyIGJ1dHRvblN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLmJ1dHRvbiwgc3R5bGVzLmJ1dHRvbkFjY291bnQpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5BY2NvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGJ1dHRvblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbnNbSUNPTl0gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gcHJldlN0YXRlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbkFjY291bnQ7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5CdXR0b25BY2NvdW50LnByb3BUeXBlcyA9IHtcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5CdXR0b25BY2NvdW50LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZSxcbiAgICB2YWx1ZTogJydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uQWNjb3VudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1hY2NvdW50L2J1dHRvbi1hY2NvdW50LmpzeFxuLy8gbW9kdWxlIGlkID0gMTY2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyk7XG52YXIgRG9jQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vLi4vZG9jLWNvbnRleHQuanMnKTtcbnZhciBmZXRjaERhdGEgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2xpYnMvZmV0Y2hEYXRhJyk7XG52YXIgTG9nVXAgPSByZXF1aXJlKCcuLy4uL2xvZ3VwL2luZGV4LmpzeCcpO1xuXG52YXIgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbFBhZ2UuanN4Jyk7XG5cbnZhciBMb2dpbiA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2dpbiwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9naW4ocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvZ2luKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTG9naW4uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2dpbikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNob3c6IF90aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICBsYXN0SWQ6IDAsXG4gICAgICAgICAgICBsb2dpbjogX3RoaXMucHJvcHMubG9naW4sXG4gICAgICAgICAgICBwYXNzd29yZDogX3RoaXMucHJvcHMucGFzc3dvcmQsXG4gICAgICAgICAgICBpc1Nob3dMb2dVcDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub25DbGlja0hhbmRsZWQgPSBfdGhpcy5vbkNsaWNrSGFuZGxlZC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZmVjdGhEYXRhID0gX3RoaXMuZmVjdGhEYXRhLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5vbkNoYW5nZUlucHV0ID0gX3RoaXMub25DaGFuZ2VJbnB1dC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMubG9nVXAgPSBfdGhpcy5sb2dVcC5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2dpbiwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICBfZGVmaW5lUHJvcGVydHkoeyBzaG93OiB0aGlzLnN0YXRlLnNob3csXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm9uQ2xpY2tIYW5kbGVkXG4gICAgICAgICAgICAgICAgfSwgJ21vZGFsUGFnZUJ0bkNsaWNrJywgdGhpcy5vbkNsaWNrSGFuZGxlZCksXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc1Nob3dMb2dVcCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9nVXAsIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlQnRuQ2xpY2s6IHRoaXMubG9nVXBcbiAgICAgICAgICAgICAgICB9KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMubG9nVXBCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5sb2dVcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdOZXcgdXNlcidcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xvZ2luOiAnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ2xvZ2luJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbG9naW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUubG9naW4gfHwgJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1Bhc3N3b3JkOiAnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUucGFzc3dvcmQgfHwgJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0LLQtdGA0L3QtdGCINC60L7QvNC/0L7QvdC10YIg0LTQu9GPINGA0LXQs9C40YHRgtGA0LDRhtC40Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10LxcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbG9nVXAnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9nVXAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2dVcCcsIGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1Nob3dMb2dVcDogIXRoaXMuc3RhdGUuaXNTaG93TG9nVXAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2hhbmdlSW5wdXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VJbnB1dChlKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGUudGFyZ2V0Lm5hbWU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbG9naW4nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9naW46IGZpZWxkVmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBhc3N3b3JkOiBmaWVsZFZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb25DbGlja0hhbmRsZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGlja0hhbmRsZWQoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudCA9PSAnT2snKSB7XG4gICAgICAgICAgICAgICAgLy8g0L7RgtC/0YDQsNCy0LvRj9C10Lwg0L3QsCDRgdC10YDQstC10YAg0L3QsCDQutC+0L3RgtGA0L7Qu9GMXG4gICAgICAgICAgICAgICAgdGhpcy5mZWN0aERhdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93OiAhdGhpcy5zdGF0ZS5zaG93IH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmZWN0aERhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmVjdGhEYXRhKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBkYXRhLmFwcGVuZCgnbG9naW4nLCB0aGlzLnN0YXRlLmxvZ2luKTtcbiAgICAgICAgICAgIGRhdGEuYXBwZW5kKCdwYXNzd29yZCcsIHRoaXMuc3RhdGUucGFzc3dvcmQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlZCwgcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBmZXRjaERhdGEuZmV0Y2hEYXRhUG9zdCgnL21haW4vbG9naW4nLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvYWQgc3RvcmUgd2l0aCBkYXRhXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINGB0L7RhdGA0LDQvdC40Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINCyINGB0YLQvtGA0LVcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IF90aGlzMi5wcm9wcy5zdG9yZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ3VzZXInLCB1c2VyOiByZXNwb25zZS5kYXRhLmRhdGFbMF0gfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIucHJvcHMubG9naW5DbGlja0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnByb3BzLmxvZ2luQ2xpY2tFdmVudChyZXNwb25zZS5kYXRhLmRhdGEubGVuZ3RoICYmIHJlc3BvbnNlLmRhdGEuZGF0YVswXS5pZCA/IHRydWUgOiBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3N0YXR1cyAhPT0gMjAwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdmZXRjaCBlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZXRoaW5nIGhhcHBlbmVkIGluIHNldHRpbmcgdXAgdGhlIHJlcXVlc3QgdGhhdCB0cmlnZ2VyZWQgYW4gRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvZ2luO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuTG9naW4ucHJvcFR5cGVzID0ge1xuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93OiBQcm9wVHlwZXMuYm9vbFxufTtcblxuTG9naW4uZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZS52YWx1ZU9mKCksXG4gICAgcGFnZXM6IFtdXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvZ2luO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5qc3hcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e3BhZ2U6ey8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6JzFweCBzb2xpZCBibGFjaycsXHJcbiAgICAgICAgKi9ib3JkZXJSYWRpdXM6JzNweCd9LGljb25zOnthZGQ6J2ltYWdlcy9pY29ucy9hZGQucG5nJyxlZGl0OidpbWFnZXMvaWNvbnMvZWRpdC5wbmcnLGRlbGV0ZTonaW1hZ2VzL2ljb25zL2RlbGV0ZS5wbmcnLGZpbHRlcjonaW1hZ2VzL2ljb25zL2ZpbHRlci5wbmcnLHByaW50OidpbWFnZXMvaWNvbnMvcHJpbnQucG5nJyxvazonaW1hZ2VzL2ljb25zL29rLnBuZycsY2FuY2VsOidpbWFnZXMvaWNvbnMvY2FuY2VsLnBuZyd9LHBpY3R1cmVGcmFtZTp7d2lkdGg6JzUwJSd9LHBpY3R1cmU6e29iamVjdEZpdDonY29udGFpbicsd2lkdGg6JzUwJSd9LGRvY1Jvdzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjoncm93Jy8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmx1ZSdcclxuICAgICAgICAqL30sZG9jQ29sdW1uOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nfSxsb2dVcEJ1dHRvbjp7d2lvZHRoOidhdXRvJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9sb2dpbi9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcycpO1xudmFyIERvY0NvbnRleHQgPSByZXF1aXJlKCcuLy4uLy4uL2RvYy1jb250ZXh0LmpzJyk7XG52YXIgZmV0Y2hEYXRhID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2ZldGNoRGF0YScpO1xuXG52YXIgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbFBhZ2UuanN4Jyk7XG5cbnZhciBMb2d1cCA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2d1cCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9ndXAocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvZ3VwKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTG9ndXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2d1cCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNob3c6IF90aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICBsYXN0SWQ6IDAsXG4gICAgICAgICAgICBsb2dpbjogX3RoaXMucHJvcHMubG9naW4sXG4gICAgICAgICAgICBlbWFpbDogX3RoaXMucHJvcHMuZW1haWwsXG4gICAgICAgICAgICBuYW1lOiBfdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICAgICAgYWRkcmVzczogX3RoaXMucHJvcHMuYWRkcmVzcyxcbiAgICAgICAgICAgIGluZm86IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub25DbGlja0hhbmRsZWQgPSBfdGhpcy5vbkNsaWNrSGFuZGxlZC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZmVjdGhEYXRhID0gX3RoaXMuZmVjdGhEYXRhLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5vbkNoYW5nZUlucHV0ID0gX3RoaXMub25DaGFuZ2VJbnB1dC5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2d1cCwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICBfZGVmaW5lUHJvcGVydHkoeyBzaG93OiB0aGlzLnN0YXRlLnNob3csXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm9uQ2xpY2tIYW5kbGVkXG4gICAgICAgICAgICAgICAgfSwgJ21vZGFsUGFnZUJ0bkNsaWNrJywgdGhpcy5vbkNsaWNrSGFuZGxlZCksXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pbmZvID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5pbmZvIH0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuaW5mb1xuICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMb2dpbjogJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdsb2dpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2xvZ2luJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZUlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmxvZ2luIHx8ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbDogJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VtYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZUlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmVtYWlsIHx8ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOYW1lOiAnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ25hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZUlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLm5hbWUgfHwgJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FkZHJlc3M6ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuYWRkcmVzcyB8fCAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2hhbmdlSW5wdXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VJbnB1dChlKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGUudGFyZ2V0Lm5hbWU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbG9naW4nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9naW46IGZpZWxkVmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVtYWlsOiBmaWVsZFZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5hbWU6IGZpZWxkVmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYWRkcmVzczogZmllbGRWYWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2xpY2tIYW5kbGVkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2tIYW5kbGVkKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbG9ndXAgYnRuIGNsaWNrJyk7XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT0gJ09rJykge1xuICAgICAgICAgICAgICAgIC8vINC+0YLQv9GA0LDQstC70Y/QtdC8INC90LAg0YHQtdGA0LLQtdGAINC90LAg0LrQvtC90YLRgNC+0LvRjFxuICAgICAgICAgICAgICAgIHRoaXMuZmVjdGhEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3c2hvdzogIXRoaXMuc3RhdGUuc2hvIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmZWN0aERhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmVjdGhEYXRhKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgbG9naW46IHRoaXMuc3RhdGUubG9naW4sXG4gICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuc3RhdGUuZW1haWwsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5zdGF0ZS5uYW1lLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuc3RhdGUuYWRkcmVzc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBkYXRhLmFwcGVuZCgnbG9naW4nLCB0aGlzLnN0YXRlLmxvZ2luKTtcbiAgICAgICAgICAgIGRhdGEuYXBwZW5kKCdlbWFpbCcsIHRoaXMuc3RhdGUuZW1haWwpO1xuICAgICAgICAgICAgZGF0YS5hcHBlbmQoJ25hbWUnLCB0aGlzLnN0YXRlLm5hbWUpO1xuICAgICAgICAgICAgZGF0YS5hcHBlbmQoJ2FkZHJlc3MnLCB0aGlzLnN0YXRlLmFkZHJlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlZCwgcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBmZXRjaERhdGEuZmV0Y2hEYXRhUG9zdCgnL21haW4vbG9ndXAnLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZScsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3N0YXR1cyAhPT0gMjAwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3RlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgaW5mbzogJ1N1Y2Nlc3NmdWxseSBzYXZlZCcgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgc2hvdzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd3YWl0IGVuZHMsIHNob3cgLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdmZXRjaCBlcnJvcicsIGVycm9yID8gZXJyb3IgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBoYXBwZW5lZCBpbiBzZXR0aW5nIHVwIHRoZSByZXF1ZXN0IHRoYXQgdHJpZ2dlcmVkIGFuIEVycm9yXG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0dXMoeyBpbmZvOiAnRXJyb3IgaW4gc2F2aW5nIGRhdGEnIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9ndXA7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5Mb2d1cC5wcm9wVHlwZXMgPSB7XG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3c6IFByb3BUeXBlcy5ib29sXG59O1xuXG5Mb2d1cC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLnZhbHVlT2YoKVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2d1cDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9ndXAvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAxNjlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtwYWdlOnsvKlxyXG4gICAgICAgIGJvcmRlcjonMXB4IHNvbGlkIGJsYWNrJyxcclxuKi9ib3JkZXJSYWRpdXM6JzNweCd9LGljb25zOnthZGQ6J2ltYWdlcy9pY29ucy9hZGQucG5nJyxlZGl0OidpbWFnZXMvaWNvbnMvZWRpdC5wbmcnLGRlbGV0ZTonaW1hZ2VzL2ljb25zL2RlbGV0ZS5wbmcnLGZpbHRlcjonaW1hZ2VzL2ljb25zL2ZpbHRlci5wbmcnLHByaW50OidpbWFnZXMvaWNvbnMvcHJpbnQucG5nJyxvazonaW1hZ2VzL2ljb25zL29rLnBuZycsY2FuY2VsOidpbWFnZXMvaWNvbnMvY2FuY2VsLnBuZyd9LHBpY3R1cmVGcmFtZTp7d2lkdGg6JzUwJSd9LHBpY3R1cmU6e29iamVjdEZpdDonY29udGFpbicsd2lkdGg6JzUwJSd9LGRvY1Jvdzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjoncm93Jy8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmx1ZSdcclxuICAgICAgICAqL30sZG9jQ29sdW1uOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nfSxpbmZvOntiYWNrZ3JvdW5kQ29sb3I6J3llbGxvdyd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9ndXAvc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzBcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBidXR0b25TdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vbW9kYWxwYWdlLXN0eWxlcycpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIE1vZGFsUGFnZSA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhNb2RhbFBhZ2UsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE1vZGFsUGFnZShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxQYWdlKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTW9kYWxQYWdlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW9kYWxQYWdlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLmhhbmRsZUJ0bkNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5jaGFuZ2VWaXNpYmlsaXR5TW9kYWxQYWdlLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNob3c6IF90aGlzLnByb3BzLnNob3dcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub25LZXlVcCA9IF90aGlzLm9uS2V5VXAuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWxQYWdlLCBbe1xuICAgICAgICBrZXk6ICdjaGFuZ2VWaXNpYmlsaXR5TW9kYWxQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVZpc2liaWxpdHlNb2RhbFBhZ2UoKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvdzogIXRoaXMuc3RhdGUuc2hvdyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdpbGwgdXBkYXRlIHN0YXRlIGlmIHByb3BzIGNoYW5nZWRcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlQnRuQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQnRuQ2xpY2soYnRuRXZlbnQpIHtcbiAgICAgICAgICAgIC8vINC30LDQutGA0YvQstCw0LXQvCDQvtC60L3QviDQuCDQtdGB0LvQuCDQv9C10YDQtdC00LDQvSDQvtCx0YDQsNCx0L7RgtGH0LjQuiwg0L7RgtC00LDQtdC8INGC0YPQtNCwINC00LDQvdC90YvQtVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ01vZGFsIGJ0biBjbGlja2VkJywgYnRuRXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VWaXNpYmlsaXR5TW9kYWxQYWdlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RhbFBhZ2VCdG5DbGljaykge1xuICAgICAgICAgICAgICAgIHZhciBzaG93ID0gdGhpcy5wcm9wcy5tb2RhbFBhZ2VCdG5DbGljayhidG5FdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQv9C10YDQtdGF0LLQsNGC0LjRgiDRgdGL0LHRgtC40Y8g0L3QsNC20LDRgtC40Y8g0LrQvdC+0L/QutC4INC4INCy0YvQt9C+0LLQtdGCINC00LXRhNC+0LvRgtC90YvQtSDQvNC10YLQvtC00YtcclxuICAgICAgICAgKiBAcGFyYW0gZVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbktleVVwJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uS2V5VXAoZSkge1xuICAgICAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVmc1snYnRuT2snXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVCdG5DbGljaygnT2snKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWZzWydidG5DYW5jZWwnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVCdG5DbGljaygnQ2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICAvLyDQtdGB0LvQuCDQv9C10YDQtdC00LDQvSDQsNGC0YDQuNCx0YMgbW9kYWxPYmplY3RzID0gWydidG5PaycsJ2J0bkNhbmNlbCddXG4gICAgICAgICAgICB2YXIgaGlkZUJ0bk9rID0gdGhpcy5wcm9wcy5tb2RhbE9iamVjdHMuaW5kZXhPZignYnRuT2snKSA9PSAtMSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyDRg9C/0YDQsNCy0LvQtdC90LjQtSDQutC90L7Qv9C60L7QuSDQntC6XG4gICAgICAgICAgICBoaWRlQnRuQ2FuY2VsID0gdGhpcy5wcm9wcy5tb2RhbE9iamVjdHMuaW5kZXhPZignYnRuQ2FuY2VsJykgPT0gLTEgPyBmYWxzZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgLy8g0YPQv9GA0LDQstC70LXQvdC40LUg0LrQvdC+0L/QutC+0LkgQ2FuY2VsXG4gICAgICAgICAgICBkaXNwbGF5TW9kYWwgPSB0aGlzLnN0YXRlLnNob3cgPyAnZmxleCcgOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgcGFnZVBvc2l0aW9uID0gdGhpcy5wcm9wcy5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcy5jb250YWluZXIsIHsgZGlzcGxheTogZGlzcGxheU1vZGFsIH0sIHsganVzdGlmeUNvbnRlbnQ6IHBhZ2VQb3NpdGlvbiB9KSxcbiAgICAgICAgICAgICAgICBidXR0b25Pa1N0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLm1vZGFsUGFnZUJ1dHRvbnMsIHN0eWxlcy5kZWZhdWx0QnV0dG9uKTtcblxuICAgICAgICAgICAgdmFyIFN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLm1vZGFsUGFnZSwgdGhpcy5wcm9wcy5zdHlsZXMgPyB0aGlzLnByb3BzLnN0eWxlcyA6IHt9KTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBvbktleVVwOiB0aGlzLm9uS2V5VXBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBTdHlsZSwgcmVmOiAnbW9kYWxQYWdlQ29udGFpbmVyJyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaGVhZGVyLCByZWY6ICdtb2RhbFBhZ2VIZWFkZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ2hlYWRlck5hbWUnLCBzdHlsZTogc3R5bGVzLmhlYWRlck5hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VGV4dFZhbHVlKHRoaXMucHJvcHMubW9kYWxQYWdlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b24sIHsgc3R5bGU6IHN0eWxlcy5idXR0b25DbG9zZSwgcmVmOiAnYnRuQ2xvc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuY2hhbmdlVmlzaWJpbGl0eU1vZGFsUGFnZS5iaW5kKHRoaXMpLCB2YWx1ZTogJ3gnIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5tb2RhbFBhZ2VDb250ZW50LCByZWY6ICdtb2RhbFBhZ2VDb250ZW50JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMubW9kYWxGb290ZXIsIHJlZjogJ21vZGFsUGFnZUJ1dHRvbnMnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlQnRuT2sgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bk9rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdPaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBidXR0b25Pa1N0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ3dpZHRoJyBpbiBzdHlsZXMubW9kYWxQYWdlQnV0dG9ucyA/IHN0eWxlcy5tb2RhbFBhZ2VCdXR0b25zLndpZHRoIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnaGVpZ2h0JyBpbiBzdHlsZXMubW9kYWxQYWdlQnV0dG9ucyA/IHN0eWxlcy5tb2RhbFBhZ2VCdXR0b25zLmhlaWdodCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQnRuQ2xpY2suYmluZCh0aGlzLCAnT2snKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdidG5PaycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBidXR0b25TdHlsZXMuaWNvbnNbJ29rJ10gfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmJ1dHRvbnNTZXBhcmF0b3IgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlQnRuQ2FuY2VsID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5DYW5jZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ0NhbmNlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMubW9kYWxQYWdlQnV0dG9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICd3aWR0aCcgaW4gc3R5bGVzLm1vZGFsUGFnZUJ1dHRvbnMgPyBzdHlsZXMubW9kYWxQYWdlQnV0dG9ucy53aWR0aCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2hlaWdodCcgaW4gc3R5bGVzLm1vZGFsUGFnZUJ1dHRvbnMgPyBzdHlsZXMubW9kYWxQYWdlQnV0dG9ucy5oZWlnaHQgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUJ0bkNsaWNrLmJpbmQodGhpcywgJ0NhbmNlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtb2RhbFBhZ2VCdXR0b25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdidG5DYW5jZWwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogYnV0dG9uU3R5bGVzLmljb25zWydjYW5jZWwnXSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5zaG93ICE9PSBwcmV2U3RhdGUuc2hvdykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHNob3c6IG5leHRQcm9wcy5zaG93IH07XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTW9kYWxQYWdlO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuLypcclxuTW9kYWxQYWdlLnByb3BUeXBlcyA9IHtcclxuICAgIG1vZGFsUGFnZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgc2hvdzogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2ZsZXgtc3RhcnQnLCAnZmxleC1lbmQnXSksXHJcbn1cclxuKi9cblxuTW9kYWxQYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBtb2RhbFBhZ2VOYW1lOiAnZGVmYXVsTmFtZScsXG4gICAgbW9kYWxPYmplY3RzOiBbJ2J0bk9rJywgJ2J0bkNhbmNlbCddLFxuICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBzaG93OiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbFBhZ2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbFBhZ2UuanN4XG4vLyBtb2R1bGUgaWQgPSAxNzFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtjb250YWluZXI6e3Bvc2l0aW9uOidmaXhlZCcsdG9wOicwJyxsZWZ0OjAscmlnaHQ6MCxib3R0b206MCxiYWNrZ3JvdW5kQ29sb3I6J3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSknLGRpc3BsYXk6J2ZsZXgnLGp1c3RpZnlDb250ZW50OidjZW50ZXInfSxtb2RhbFBhZ2U6e3Bvc2l0aW9uOidyZWxhdGl2ZScsYm9yZGVyOicxcHggc29saWQgYmxhY2snLGJhY2tncm91bmQ6J3doaXRlJyxtYXJnaW46JzhweCcsYm9yZGVyUmFkaXVzOic0cHgnLG91dGxpbmU6J25vbmUnLGRpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbicsYWxpZ25TZWxmOidjZW50ZXInLGhlaWdodDonYXV0bycsbWF4SGVpZ2h0Oic5NSUnLG92ZXJmbG93OidhdXRvJyx6SW5kZXg6MX0sbW9kYWxQYWdlQ29udGVudDp7cGFkZGluZzonMTBweCcsbWFyZ2luOicxMHB4Jyx3aWR0aDonYXV0byd9LGhlYWRlcjp7aGVpZ2h0OiczMHB4Jyx3aWR0aDonMTAwJScsYm9yZGVyOicxcHggc29saWQgZGFya2dyYXknLGJhY2tncm91bmQ6J2xpZ2h0Z3JheScsZGlzcGxheTonZmxleCcsanVzdGlmeUNvbnRlbnQ6J3NwYWNlLWJldHdlZW4nfSxoZWFkZXJOYW1lOntjb2xvcjond2hpdGUnLGFsaWduU2VsZjonY2VudGVyJyxtYXJnaW5MZWZ0OicxMHB4J30sbW9kYWxGb290ZXI6e2FsaWduU2VsZjonY2VudGVyJyxkaXNwbGF5OidmbGV4JyxtYXJnaW5Cb3R0b246JzEwcHgnfSxtb2RhbFBhZ2VCdXR0b25zOntoZWlnaHQ6JzMwcHgnLHdpZHRoOicxMDBweCcsbWFyZ2luQm90dG9tOicxMHB4J30sYnV0dG9uc1NlcGFyYXRvcjp7d2lkdGg6JzEwcHgnfSxidXR0b25DbG9zZTp7Ym9yZGVyUmFkaXVzOic1MCUnLGJhY2tncm91bmRDb2xvcjonbGlnaHRncmF5Jyxib3JkZXI6J25vbmUnLGZvbnRXZWlnaHQ6JzkwMCcsbWFyZ2luOicwcHggMHB4J30sbGVmdDp7cmlnaHQ6J2F1dG8nLGxlZnQ6JzAnfSxyaWdodDp7bGVmdDonYXV0bycscmlnaHQ6JzAnfSxkZWZhdWx0QnV0dG9uOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0Qmx1ZSd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFscGFnZS1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbnZhciByYWRpdW0gPSByZXF1aXJlKCdyYWRpdW0nKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcycpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIElucHV0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKElucHV0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbnB1dChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmJ0bkNsaWNrSGFuZGxlciA9IF90aGlzLmJ0bkNsaWNrSGFuZGxlci5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICAgICAga2V5OiAnb25DaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNlYXJjaFRleHQud3JhcHBlciB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuc2VhcmNoVGV4dC50ZXh0LFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUgfHwgJydcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5zZWFyY2hUZXh0LmJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuYnRuQ2xpY2tIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Eb3VibGVDbGljazogdGhpcy5idG5DbGlja0hhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zWydmaWx0ZXInXSB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkNsaWNrSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5DbGlja0hhbmRsZXIoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZmxpdGVyIGJ0biBjbGlja2VkJywgdGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgICB2YXIgc3RvcmUgPSB0aGlzLnByb3BzLnN0b3JlO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiAnZmlsdGVyJywgZmlsdGVyOiB0aGlzLnN0YXRlLnZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbkNoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0YPRgdGC0LDQvdC+0LLQuNGCINGE0L7QutGD0YEg0L3QsCDRjdC70LXQvNC10L3RgtGLXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2ZvY3VzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgICAgICAgdGhpcy5yZWZzWydpbnB1dCddLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSW5wdXQ7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5JbnB1dC5wcm9wVHlwZXMgPSB7XG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBhdHRlcm46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbklucHV0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICByZWFkT25seTogZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHZhbGlkOiB0cnVlLFxuICAgIHZhbHVlOiAnJyxcbiAgICB0aXRsZTogJydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFkaXVtKElucHV0KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvbWFpbi9zZWFyY2gtY29tcG9uZW50LmpzeFxuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17Z3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJScsdGQ6e2JvcmRlcjonMXB4IHNvbGlkIGxpZ2h0R3JleScsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9LHRoOntib3JkZXI6JzFweCBzb2xpZCBibGFjaycsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9LHRkQnV0dG9uczp7ZGlzcGxheTonaW5saW5lLWZsZXgnfX0saGVhZGVyVGFibGU6e3dpZHRoOicxMDAlJ30sZ3JpZENvbnRhaW5lcjp7d2lkdGg6JzEwMCUnfX0saW1nOntvYmplY3RGaXQ6J2NvbnRhaW4nLHdpZHRoOic1MCUnfSxwaWN0dXJlOntvYmplY3RGaXQ6J2NvbnRhaW4nLHdpZHRoOic1MDBweCcsaGVpZ2h0Oic1MDBweCd9LGZyYW1lOnt3aWR0aDonNTAlJ30sZG9jUm93OntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidyb3cnLG1hcmdpbjonNXB4J30sbGFiZWw6e3dpZHRoOiczMCUnfSxwYWdlRnJhbWU6e2Rpc3BsYXk6J2lubGluZS1mbGV4Jyxib3JkZXI6JzFweCBzb2xpZCBibGFjayd9LGZpbHRlckZyYW1lOnt3aWR0aDonMzAlJywvLyAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGdyZXknLFxubWFyZ2luOic1cHgnfSxjb21wb25lbnRGcmFtZTp7d2lkdGg6JzcwJScsLy8gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCByZWQnLFxubWFyZ2luOic1cHgnfSxkb2NDb2x1bW46e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbicsd2lkdGg6JzUwJSd9LGJ1dHRvbjp7YmFja2dyb3VuZDond2hpdGUnLG1hcmdpbjonNXB4IDJweCcsYm9yZGVyUmFkaXVzOic1cHgnLGhlaWdodDonMzBweCcsZGlzcGxheTonZmxleCcsYm9yZGVyOicxcHggc29saWQgZ3JheSd9LHRvb2xiYXJCdG5JbWFnZTp7d2lkdGg6J2F1dG8nLGhlaWdodDonYXV0byd9LGJ1dHRvbl9lZGl0OntpY29uOidpbWFnZXMvaWNvbnMvZWRpdC5wbmcnfSxidXR0b25fYWNjZXB0OntpY29uOidpbWFnZXMvaWNvbnMvb2sucG5nJ30sYnV0dG9uX2RlbGV0ZTp7aWNvbjonaW1hZ2VzL2ljb25zL2RlbGV0ZS5wbmcnfSxpY29uczp7YWRkOicvaW1hZ2VzL2ljb25zL2FkZC5wbmcnLGVkaXQ6Jy9pbWFnZXMvaWNvbnMvZWRpdC5wbmcnLGRlbGV0ZTonL2ltYWdlcy9pY29ucy9kZWxldGUucG5nJyxmaWx0ZXI6Jy9pbWFnZXMvaWNvbnMvZmlsdGVyLnBuZycscHJpbnQ6Jy9pbWFnZXMvaWNvbnMvcHJpbnQucG5nJyxvazonL2ltYWdlcy9pY29ucy9vay5wbmcnLGNhbmNlbDonL2ltYWdlcy9pY29ucy9jYW5jZWwucG5nJyxzYXZlOicvaW1hZ2VzL2ljb25zL3NhdmUucG5nJyxleGVjdXRlOicvaW1hZ2VzL2ljb25zL2V4ZWN1dGUucG5nJyxzdGFydDonL2ltYWdlcy9pY29ucy9zdGFydC5wbmcnLGxvZ2luOicvaW1hZ2VzL2ljb25zL2xvZ2luLnBuZycsYWNjb3VudDonL2ltYWdlcy9pY29ucy9hY2NvdW50LnBuZycscmVrdjonL2ltYWdlcy9pY29ucy9yZWt2LnBuZycsaW5mbzonL2ltYWdlcy9pY29ucy9pbmZvLnBuZycsc2V0dGluZ3M6Jy9pbWFnZXMvaWNvbnMvc2V0dGluZ3MucG5nJyxtYWlsOicvaW1hZ2VzL2ljb25zL21haWwucG5nJyxzZWxlY3Q6Jy9pbWFnZXMvaWNvbnMvc2VsZWN0LnBuZycscmVmcmVzaDonL2ltYWdlcy9pY29ucy9yZWZyZXNoLnBuZycsYXR0YWNobWVudDonL2ltYWdlcy9pY29ucy9hdHRhY2htZW50LnBuZycsc2FsZTonL2ltYWdlcy9pY29ucy9zYWxlLnBuZyd9LHNlYXJjaFRleHQ6e3dyYXBwZXI6e2hlaWdodDonMzBweCcsYm9yZGVyUmFkaXVzOic1cHgnLGJvcmRlcjonMXB4IHNvbGlkIGdyZXknLG1hcmdpbjonNXB4IDJweCd9LHRleHQ6e2JvcmRlcjowLHBhZGRpbmc6MCxvdXRsaW5lOjB9LGJ1dHRvbjp7aGVpZ2h0OiczMHB4Jyxib3JkZXI6MCxwYWRkaW5nOjAsb3V0bGluZTowfX0sYnRuRWRpdDp7d2lkdGg6JzMwcHgnLG1hcmdpbkxlZnQ6JzJweCd9LGJ0blNhbGU6e3dpZHRoOiczMHB4JyxtYXJnaW5MZWZ0OicycHgnfSxzZWxlY3Q6e2hlaWdodDonMzBweCcsd2lkdGg6JzEwMHB4Jyxib3JkZXJSYWRpdXM6JzVweCd9LGZpbHRlckJsb2NrOnttYXJnaW5Ub3A6JzVweCcvLyAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG59LGZpbHRlckxhYmVsOntkaXNwbGF5OidpbmxpbmUtYmxvY2snLHdpZHRoOiczMCUnfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL21haW4vc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtjb250YWluZXI6e21hcmdpbjonMTBweCAwJ30sc2VsZWN0U3R5bGU6e21hcmdpbjonNXB4JyxkaXNwbGF5OidmbGV4Jyx3aWR0aDonOTUlJyxib3JkZXJSYWRpdXM6JzVweCd9LHBhZ2VOYW1lOntmb250V2VpZ2h0Oidib2xkJyxmb250U2l6ZToneC1sYXJnZSd9LHNlbGVjdEtlZWw6e21hcmdpbjonNXB4JyxkaXNwbGF5OidmbGV4Jyx3aWR0aDonMTAwcHgnLGhlaWdodDonMzBweCcsYm9yZGVyUmFkaXVzOic1cHgnfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL21lbnUtdG9vbGJhci9tZW51LXRvb2xiYXIuc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtMRVBJTkc6e3NlbGVjdDpbJ2thc3V0YWphJywndmFhdGxlamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJywnanVodCcsJ2thc3V0YWphJ10sYWRkOlsna2FzdXRhamEnLCdyYWFtYScsJ2p1aHQnXSxlZGl0Olsna2FzdXRhamEnLCdyYWFtYScsJ2p1aHQnXSxkZWxldGU6WydrYXN1dGFqYScsJ3JhYW1hJywnanVodCddLGFydmVkOlsncmFhbWEnXX0sVVNFUklEOntzZWxlY3Q6WydhZG1pbicsJ2p1aHQnXSxhZGQ6WydhZG1pbiddLGVkaXQ6WydhZG1pbiddLGRlbGV0ZTpbJ2FkbWluJ119LFJFS0w6e3NlbGVjdDpbJ2p1aHQnXSxhZGQ6WydqdWh0J10sZWRpdDpbJ2p1aHQnXSxkZWxldGU6WydqdWh0J119LFJFS1Y6e3NlbGVjdDpbJ2FkbWluJywnanVodCcsJ3JhYW1hJ10sYWRkOlsnYWRtaW4nXSxlZGl0OlsnYWRtaW4nLCdqdWh0JywncmFhbWEnXSxkZWxldGU6WydhZG1pbiddfSxBUlY6e3NlbGVjdDpbJ2thc3V0YWphJywnYXJ2ZXN0YWphJywndmFhdGxlamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJ10sYWRkOlsna2FzdXRhamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJ10sZWRpdDpbJ2thc3V0YWphJywncGVha2FzdXRhamEnLCdyYWFtYSddLGRlbGV0ZTpbJ2thc3V0YWphJywncGVha2FzdXRhamEnLCdyYWFtYSddfSxTTUs6e3NlbGVjdDpbJ2thc3V0YWphJywnYXJ2ZXN0YWphJywndmFhdGxlamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJ10sYWRkOlsna2FzdXRhamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJ10sZWRpdDpbJ2thc3V0YWphJywncGVha2FzdXRhamEnLCdyYWFtYSddLGRlbGV0ZTpbJ2thc3V0YWphJywncGVha2FzdXRhamEnLCdyYWFtYSddLGltcG9ydDpbJ2FkbWluJywncmFhbWEnXX0sUEFOS19WVjp7ZWRpdDpbJ2thc3V0YWphJywncGVha2FzdXRhamEnXSxkZWxldGU6WydrYXN1dGFqYScsJ3BlYWthc3V0YWphJ119LFZNSzp7c2VsZWN0Olsna2FzdXRhamEnLCdhcnZlc3RhamEnLCd2YWF0bGVqYScsJ3BlYWthc3V0YWphJywncmFhbWEnXSxhZGQ6WydrYXN1dGFqYScsJ3BlYWthc3V0YWphJywncmFhbWEnXSxlZGl0Olsna2FzdXRhamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJ10sZGVsZXRlOlsna2FzdXRhamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJ119LFZPUkRFUjp7c2VsZWN0Olsna2FzdXRhamEnLCdhcnZlc3RhamEnLCd2YWF0bGVqYScsJ3BlYWthc3V0YWphJ10sYWRkOlsna2FzdXRhamEnLCdwZWFrYXN1dGFqYSddLGVkaXQ6WydrYXN1dGFqYScsJ3BlYWthc3V0YWphJ10sZGVsZXRlOlsna2FzdXRhamEnLCdwZWFrYXN1dGFqYSddfSxTT1JERVI6e3NlbGVjdDpbJ2thc3V0YWphJywnYXJ2ZXN0YWphJywndmFhdGxlamEnLCdwZWFrYXN1dGFqYSddLGFkZDpbJ2thc3V0YWphJywncGVha2FzdXRhamEnXSxlZGl0Olsna2FzdXRhamEnLCdwZWFrYXN1dGFqYSddLGRlbGV0ZTpbJ2thc3V0YWphJywncGVha2FzdXRhamEnXX0sVFVOTlVTOntzZWxlY3Q6WydyYWFtYSddLGFkZDpbJ3JhYW1hJ10sZWRpdDpbJ3JhYW1hJ10sZGVsZXRlOlsncmFhbWEnXX0sUFJPSkVDVDp7c2VsZWN0OlsncmFhbWEnXSxhZGQ6WydyYWFtYSddLGVkaXQ6WydyYWFtYSddLGRlbGV0ZTpbJ3JhYW1hJ119LEtPTlRPRDp7c2VsZWN0OlsncmFhbWEnXSxhZGQ6WydyYWFtYSddLGVkaXQ6WydyYWFtYSddLGRlbGV0ZTpbJ3JhYW1hJ119LC8vbm9tZW5jbGF0dXJlXG5OT01FTkNMQVRVUkU6e3NlbGVjdDpbJ2thc3V0YWphJywndmFhdGxlamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJywnanVodCddLGFkZDpbJ3JhYW1hJywnanVodCddLGVkaXQ6WydyYWFtYScsJ2p1aHQnXSxkZWxldGU6WydyYWFtYScsJ2p1aHQnXSxpbXBvcnQ6WydhZG1pbiddfSxBU1VUVVNFRDp7c2VsZWN0Olsna2FzdXRhamEnLCd2YWF0bGVqYScsJ3BlYWthc3V0YWphJywncmFhbWEnLCdqdWh0J10sYWRkOlsna2FzdXRhamEnLCdhcnZlc3RhamEnLCdyYWFtYScsJ2p1aHQnXSxlZGl0Olsna2FzdXRhamEnLCdhcnZlc3RhamEnLCdyYWFtYScsJ2p1aHQnXSxkZWxldGU6WydrYXN1dGFqYScsJ3JhYW1hJywnanVodCddfSxPQkpFS1Q6e3NlbGVjdDpbJ2thc3V0YWphJywndmFhdGxlamEnLCdwZWFrYXN1dGFqYScsJ3JhYW1hJywnanVodCcsJ2thc3V0YWphJ10sYWRkOlsna2FzdXRhamEnLCdyYWFtYScsJ2p1aHQnLCdrYXN1dGFqYSddLGVkaXQ6WydrYXN1dGFqYScsJ3JhYW1hJywnanVodCcsJ2thc3V0YWphJ10sZGVsZXRlOlsna2FzdXRhamEnLCdyYWFtYScsJ2p1aHQnLCdrYXN1dGFqYSddfSxBUlRJS0tFTDp7c2VsZWN0Olsna2FzdXRhamEnLCd2YWF0bGVqYScsJ3BlYWthc3V0YWphJ10sYWRkOlsna2FzdXRhamEnXSxlZGl0Olsna2FzdXRhamEnXSxkZWxldGU6WydrYXN1dGFqYSddfSxBTExJS0FTOntzZWxlY3Q6WydrYXN1dGFqYScsJ3ZhYXRsZWphJywncGVha2FzdXRhamEnXSxhZGQ6WydrYXN1dGFqYSddLGVkaXQ6WydrYXN1dGFqYSddLGRlbGV0ZTpbJ2thc3V0YWphJ119LFRFR0VWOntzZWxlY3Q6WydrYXN1dGFqYScsJ3ZhYXRsZWphJywncGVha2FzdXRhamEnXSxhZGQ6WydrYXN1dGFqYSddLGVkaXQ6WydrYXN1dGFqYSddLGRlbGV0ZTpbJ2thc3V0YWphJ119LC8vYXN1dHVzZV9saWlrXG5UQU9UTFVTX0xPR0lOOntzZWxlY3Q6WydhZG1pbiddLGVkaXQ6WydhZG1pbiddLGRlbGV0ZTpbJ2FkbWluJ119LFRFQVRJUzp7c2VsZWN0OlsnYXJ2ZXN0YWphJ10sYWRkOlsnYXJ2ZXN0YWphJ10sZWRpdDpbJ2FydmVzdGFqYSddLGRlbGV0ZTpbJ2FydmVzdGFqYSddfSxLQUlCRUFORE1JSzp7c2VsZWN0OlsncmFhbWEnXX0sS09OVE9ORE1JSzp7c2VsZWN0OlsncmFhbWEnXX19O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29uZmlnL2RvY19yaWdodHMuanNcbi8vIG1vZHVsZSBpZCA9IDE3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7Ly8gd2lsbCBjaGVjayByaWdodHMgZm9yIGFjdGlvblxudmFyIGNoZWNrUmlnaHRzPWZ1bmN0aW9uIGNoZWNrUmlnaHRzKHVzZXJSb2xlcyxkb2NSaWdodHMsYWN0aW9uKXt2YXIgaXNfYWNjZXB0ZWQ9ZmFsc2U7aWYoZG9jUmlnaHRzJiZkb2NSaWdodHNbYWN0aW9uXSl7ZG9jUmlnaHRzW2FjdGlvbl0uZm9yRWFjaChmdW5jdGlvbihyb2xlKXsvLyByYWFtYXR1cGlkYWphZFxuaXNfYWNjZXB0ZWQ9dXNlclJvbGVzJiZ1c2VyUm9sZXMuaXNfcmFhbWEmJnJvbGU9PSdyYWFtYSc/dHJ1ZTppc19hY2NlcHRlZDtpZighaXNfYWNjZXB0ZWQpe2lzX2FjY2VwdGVkPXVzZXJSb2xlcyYmdXNlclJvbGVzLmlzX2p1aHQmJnJvbGU9PSdqdWh0Jz90cnVlOmlzX2FjY2VwdGVkO30vLyBhZG1pbmlkXG5pZighaXNfYWNjZXB0ZWQpe2lzX2FjY2VwdGVkPXVzZXJSb2xlcyYmdXNlclJvbGVzLmlzX2FkbWluJiZyb2xlPT0nYWRtaW4nP3RydWU6aXNfYWNjZXB0ZWQ7fX0pO31lbHNley8vINC10YHQu9C4INC90LXRgiDQvtCz0YDQsNC90LjRh9C10L3QuNC5XG5pc19hY2NlcHRlZD10cnVlO31yZXR1cm4gaXNfYWNjZXB0ZWQ7fTttb2R1bGUuZXhwb3J0cz1jaGVja1JpZ2h0cztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2xpYnMvY2hlY2tSaWdodHMuanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgX2ZldGNoRGF0YSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9mZXRjaERhdGEnKTtcbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi9kb2MtY29udGV4dC5qcycpO1xudmFyIE1lbnUgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvbWVudS10b29sYmFyL21lbnUtdG9vbGJhci5qc3gnKTtcbnZhciBEb2NSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbmZpZy9kb2NfcmlnaHRzJyk7XG52YXIgY2hlY2tSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2xpYnMvY2hlY2tSaWdodHMnKTtcbnZhciBjcmVhdGVFbXB0eUZpbHRlckRhdGEgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2xpYnMvY3JlYXRlRW1wdHlGaWx0ZXJEYXRhJyk7XG52YXIgcHJlcGFyZVNxbFdoZXJlRnJvbUZpbHRlciA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9wcmVwYXJlU3FsV2hlcmVGcm9tRmlsdGVyJyk7XG52YXIgQ29uc3QgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbmZpZy9jb25zdGFudHMnKTtcbnZhciBMaWltaXQgPSBDb25zdC5SRUNPUkRTX0xJTUlUO1xudmFyIHByZXBhcmVEYXRhID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL3ByZXBhaXJlRmlsdGVyRGF0YScpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIERhdGFHcmlkID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4JyksXG4gICAgU3RhcnRNZW51ID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL3N0YXJ0LW1lbnUvc3RhcnQtbWVudS5qc3gnKSxcbiAgICBCdG5BZGQgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1hZGQvYnV0dG9uLXJlZ2lzdGVyLWFkZC5qc3gnKSxcbiAgICBCdG5FZGl0ID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZWRpdC9idXR0b24tcmVnaXN0ZXItZWRpdC5qc3gnKSxcbiAgICBCdG5EZWxldGUgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1kZWxldGUvYnV0dG9uLXJlZ2lzdGVyLWRlbGV0ZS5qc3gnKSxcbiAgICBCdG5QcmludCA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLXByaW50L2J1dHRvbi1yZWdpc3Rlci1wcmludC5qc3gnKSxcbiAgICBCdG5QZGYgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1wZGYvaW5kZXguanN4JyksXG4gICAgQnRuRmlsdGVyID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZmlsdGVyL2J1dHRvbi1yZWdpc3Rlci1maWx0ZXIuanN4JyksXG4gICAgQnRuU2VsZWN0ID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tc2VsZWN0L2luZGV4LmpzeCcpLFxuICAgIEJ0bkVtYWlsID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tZW1haWwvaW5kZXguanN4JyksXG4gICAgQnRuUmVmcmVzaCA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZnJlc2gvaW5kZXguanN4JyksXG4gICAgVG9vbGJhckNvbnRhaW5lciA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy90b29sYmFyLWNvbnRhaW5lci90b29sYmFyLWNvbnRhaW5lci5qc3gnKSxcbiAgICBHcmlkRmlsdGVyID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2RhdGEtZ3JpZC9ncmlkLWZpbHRlci9ncmlkLWZpbHRlci5qc3gnKSxcbiAgICBNb2RhbFBhZ2UgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFsUGFnZS5qc3gnKSxcbiAgICBJbnB1dFRleHQgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmpzeCcpLFxuICAgIE1vZGFsUGFnZURlbGV0ZSA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxwYWdlLWRlbGV0ZS9tb2RhbFBhZ2UtZGVsZXRlLmpzeCcpLFxuICAgIE1vZGFsUmVwb3J0ID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtcmVwb3J0L2luZGV4LmpzeCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vZG9jdW1lbnRzLXN0eWxlcycpO1xuXG4vKipcclxuICog0JrQu9Cw0YHRgSDRgNC10LDQu9C40LfRg9C10YIg0LTQvtC60YPQvNC10L3RgiDRgdC/0YDQsNCy0L7Rh9C90LjQutCwINC/0YDQuNC30L3QsNC60L7Qsi5cclxuICovXG5cbnZhciBEb2N1bWVudHMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhEb2N1bWVudHMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRG9jdW1lbnRzKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb2N1bWVudHMpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEb2N1bWVudHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEb2N1bWVudHMpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuZ3JpZERhdGEgPSBbXTtcbiAgICAgICAgX3RoaXMuZ3JpZENvbmZpZyA9IERvY0NvbnRleHQuZ3JpZENvbmZpZyA/IERvY0NvbnRleHQuZ3JpZENvbmZpZ1twcm9wcy5kb2NUeXBlSWRdIDogW107XG4gICAgICAgIF90aGlzLmZpbHRlckRhdGEgPSBEb2NDb250ZXh0LmZpbHRlciAmJiBEb2NDb250ZXh0LmZpbHRlcltwcm9wcy5kb2NUeXBlSWRdID8gRG9jQ29udGV4dC5maWx0ZXJbcHJvcHMuZG9jVHlwZUlkXSA6IFtdO1xuXG4gICAgICAgIGlmIChwcm9wcy5pbml0RGF0YSAmJiBwcm9wcy5pbml0RGF0YS5yZXN1bHQpIHtcbiAgICAgICAgICAgIF90aGlzLmdyaWREYXRhID0gcHJvcHMuaW5pdERhdGEucmVzdWx0LmRhdGEgfHwgW107XG4gICAgICAgICAgICBfdGhpcy5ncmlkQ29uZmlnID0gIV90aGlzLmdyaWRDb25maWcubGVuZ3RoID8gcHJvcHMuaW5pdERhdGEuZ3JpZENvbmZpZyA6IF90aGlzLmdyaWRDb25maWc7XG4gICAgICAgICAgICBfdGhpcy5zdWJ0b3RhbHMgPSBwcm9wcy5pbml0RGF0YS5zdWJ0b3RhbHMgfHwgW107XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcHMuaW5pdERhdGEgJiYgcHJvcHMuaW5pdERhdGEuZ3JpZERhdGEpIHtcblxuICAgICAgICAgICAgX3RoaXMuZ3JpZERhdGEgPSBwcm9wcy5pbml0RGF0YS5ncmlkRGF0YSB8fCBbXTtcbiAgICAgICAgICAgIF90aGlzLmdyaWRDb25maWcgPSAhX3RoaXMuZ3JpZENvbmZpZy5sZW5ndGggPyBwcm9wcy5pbml0RGF0YS5ncmlkQ29uZmlnIDogX3RoaXMuZ3JpZENvbmZpZztcbiAgICAgICAgICAgIF90aGlzLnN1YnRvdGFscyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuZG9jVHlwZUlkID0gcHJvcHMuZG9jVHlwZUlkO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzLmdyaWREYXRhLmxlbmd0aCA/IF90aGlzLmdyaWREYXRhWzBdLmlkIDogMCxcbiAgICAgICAgICAgIHNvcnRCeToge30sXG4gICAgICAgICAgICBzcWxXaGVyZTogJycsXG4gICAgICAgICAgICBnZXRGaWx0ZXI6IGZhbHNlLFxuICAgICAgICAgICAgaXNEZWxldGU6IGZhbHNlLFxuICAgICAgICAgICAgaGFzU3RhcnRNZW51VmlzaWJsZTogZmFsc2UsIC8vIHdpbGwgc2hvdyBzdGFydCBtZW51XG4gICAgICAgICAgICBzdGFydE1lbnVWYWx1ZTogJ3BhcmVudGlkJyxcbiAgICAgICAgICAgIHdhcm5pbmc6ICcnLCAvLyDRgdGC0YDQvtC60LAg0LjQt9Cy0LXRidC10L3QuNC5XG4gICAgICAgICAgICB3YXJuaW5nVHlwZTogJycsXG4gICAgICAgICAgICBsaW1pdDogTGlpbWl0LCAvLyBkZWZhdWx0IGxpbWl0IGZvciBxdWVyeSxcbiAgICAgICAgICAgIGlzRW1wdHlGaWx0ZXI6IGZhbHNlLCAvLyDQtdGB0LvQuCB0cnVlINGC0L4g0L7QsdC90YPQu9C40YIg0LTQsNC90L3Ri9C1INGE0LjQu9GM0YLRgNCwINC/0YDQuCDQv9C10YDQtdCz0YDRg9C30LrQtSDQtNCw0L3QvdGL0YVcbiAgICAgICAgICAgIHNob3dTZWxlY3RGaWVsZHM6IGZhbHNlLCAvL3dpbGwgb3BlbiBvciBjbG9zZSBjb2x1bW4gaW4gZ3JpZCB0byBzZWxlY3Qgcm93c1xuICAgICAgICAgICAgaXNSZXBvcnQ6IGZhbHNlLCAvLyDQv9C+0LrQsNC3INC80L7QtNCw0LvRjNC90L7Qs9C+INC+0LrQvdCwINC/0YDQuCDQv9GA0L7QstC10YDQutC1INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPXG4gICAgICAgICAgICB0eHRSZXBvcnQ6IFtdIC8vINC00LDQvdC90YvQtSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRj1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLl9iaW5kKCdidG5BZGRDbGljaycsICdjbGlja0hhbmRsZXInLCAnYnRuRWRpdENsaWNrJywgJ2RibENsaWNrSGFuZGxlcicsICdoZWFkZXJDbGlja0hhbmRsZXInLCAnaGVhZGVyQ2xpY2tIYW5kbGVyJywgJ2J0bkZpbHRlckNsaWNrJywgJ2J0blNlbGVjdENsaWNrJywgJ2J0blJlZnJlc2hDbGljaycsICdtb2RhbFBhZ2VCdG5DbGljaycsICdtb2RhbERlbGV0ZVBhZ2VCdG5DbGljaycsICdmaWx0ZXJEYXRhSGFuZGxlcicsICdyZW5kZXJGaWx0ZXJUb29sYmFyJywgJ2J0blN0YXJ0Q2xpY2tIYW5sZXInLCAncmVuZGVyU3RhcnRNZW51JywgJ3N0YXJ0TWVudUNsaWNrSGFuZGxlcicsICdmZXRjaERhdGEnLCAnaGFuZGxlSW5wdXRDaGFuZ2UnLCAnYnRuRW1haWxDbGljaycsICdzZXRSZWdpc3Rlck5hbWUnLCAnbW9kYWxSZXBvcnRlUGFnZUJ0bkNsaWNrJyk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICog0L/QuNGI0LXQvCDQtNC10LvQsNC10Lwg0LfQsNC/0YDQvtGBINC/0L4g0LjRgtC+0LPRgyDQt9Cw0LPRgNGD0LfQutC4XHJcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKERvY3VtZW50cywgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKCFEb2NDb250ZXh0LmZpbHRlcikge1xuICAgICAgICAgICAgICAgIERvY0NvbnRleHQuZmlsdGVyID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHdpbGwgc2F2ZSBjdXJyZW50IGRvY1R5cGVpZFxuICAgICAgICAgICAgRG9jQ29udGV4dFsnZG9jVHlwZUlkJ10gPSB0aGlzLmRvY1R5cGVJZDtcblxuICAgICAgICAgICAgdmFyIHJlbG9hZCA9IGZhbHNlOyAvLyBpZiByZWxvYWQgPT09IHRydWUgdGhlbiBpdCB3aWxsIGNhbGwgdG8gcmVsb2FkXG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmluaXREYXRhICYmIHRoaXMucHJvcHMuaW5pdERhdGEuZG9jVHlwZUlkICYmIHRoaXMucHJvcHMuaW5pdERhdGEuZG9jVHlwZUlkLnRvVXBwZXJDYXNlKCkgIT09IHRoaXMuZG9jVHlwZUlkLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICByZWxvYWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDQtNC10YTQvtC70YLQvdGL0LUg0LfQvdCw0YfQtdC90LjRj1xuICAgICAgICAgICAgaWYgKCFEb2NDb250ZXh0LmZpbHRlclt0aGlzLmRvY1R5cGVJZF0gJiYgRG9jQ29udGV4dC5ncmlkQ29uZmlnW3RoaXMuZG9jVHlwZUlkXSkge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBEb2NDb250ZXh0LmdyaWRDb25maWdbdGhpcy5kb2NUeXBlSWRdO1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBwcmVwYXJlRGF0YShjb25maWcsIHRoaXMuZG9jVHlwZUlkKTtcblxuICAgICAgICAgICAgICAgIC8vINC40YnQtdC8INC00LXRhNC+0LvRgtC90YvQtSDQt9C90LDRh9C10L3QuNGPXG4gICAgICAgICAgICAgICAgY29uZmlnLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93LmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBldmFsKHJvdy5kZWZhdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBkZWZhdWx0IHZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINC40YnQtdC8INC4INC/0YDQuNGB0LLQsNC10LLQsNC10Lwg0LfQvdCw0YfQtdC90LjQtVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBmaWx0ZXIuZmluZEluZGV4KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmlkID09IHJvdy5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcltpZHhdLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyICYmIGZpbHRlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgRG9jQ29udGV4dC5maWx0ZXJbdGhpcy5kb2NUeXBlSWRdID0gZmlsdGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g0L/RgNC+0LLQtdGA0LjQvCDRgdC+0YXRgNCw0L3QtdC90L3Ri9C5INGE0LjQu9GM0YLRgCDQtNC70Y8g0Y3RgtC+0LPQviDRgtC40L/QsFxuICAgICAgICAgICAgaWYgKERvY0NvbnRleHQuZmlsdGVyW3RoaXMuZG9jVHlwZUlkXSAmJiBEb2NDb250ZXh0LmZpbHRlclt0aGlzLmRvY1R5cGVJZF0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YSA9IERvY0NvbnRleHQuZmlsdGVyW3RoaXMuZG9jVHlwZUlkXTtcbiAgICAgICAgICAgICAgICByZWxvYWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVsb2FkIHx8ICF0aGlzLnByb3BzLmluaXREYXRhIHx8ICF0aGlzLmdyaWREYXRhIHx8ICF0aGlzLmdyaWREYXRhLmxlbmd0aCB8fCAhdGhpcy5wcm9wcy5pbml0RGF0YS5kb2NUeXBlSWQpIHtcblxuICAgICAgICAgICAgICAgIC8vINC/0YDQvtCy0LXRgNC40Lwg0L3QsCDRhNC40LvRjNGC0YBcbiAgICAgICAgICAgICAgICB2YXIgc3FsV2hlcmUgPSBwcmVwYXJlU3FsV2hlcmVGcm9tRmlsdGVyKHRoaXMuZmlsdGVyRGF0YSwgdGhpcy5kb2NUeXBlSWQpO1xuXG4gICAgICAgICAgICAgICAgLy/QtNC10LvQsNC10Lwg0LfQsNC/0YDQvtGBINC90LAg0L/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzcWxXaGVyZTogc3FsV2hlcmUgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuZmV0Y2hEYXRhKCdzZWxlY3REb2NzJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIGxhc3REb2NJZCBhdmFpbGFibGUsIHdpbGwgcG9pbnQgaXQgYXMgc2VsZWN0ZWRcbiAgICAgICAgICAgIGlmIChEb2NDb250ZXh0W3RoaXMuZG9jVHlwZUlkLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvY0lkID0gRG9jQ29udGV4dFt0aGlzLmRvY1R5cGVJZC50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGRvY0lkIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDQt9Cw0LTQsNGC0Ywg0LjQvNGPINGA0LXRgNC40YHRgtGA0LAg0L3QsCDRgdGC0YDQsNC90LjRhtGDXG4gICAgICAgICAgICB0aGlzLnNldFJlZ2lzdGVyTmFtZSgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9zdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZSA/IHRoaXMucHJvcHMuc3R5bGUgOiB7fSk7XG4gICAgICAgICAgICB2YXIgd2FybmluZ1N0eWxlID0gdGhpcy5zdGF0ZS53YXJuaW5nVHlwZSAmJiBzdHlsZXNbdGhpcy5zdGF0ZS53YXJuaW5nVHlwZV0gPyBzdHlsZXNbdGhpcy5zdGF0ZS53YXJuaW5nVHlwZV0gOiBudWxsO1xuICAgICAgICAgICAgdmFyIGJ0blBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBidG5TdGFydDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5Mb2dpbjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogX3N0eWxlLmRvYyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwgeyBwYXJhbXM6IGJ0blBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnbWVudScsXG4gICAgICAgICAgICAgICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgcmVrdklkOiBEb2NDb250ZXh0LnVzZXJEYXRhID8gRG9jQ29udGV4dC51c2VyRGF0YS5hc3V0dXNJZCA6IDAsXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZTogdGhpcy5wcm9wcy5tb2R1bGUgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IF9zdHlsZS5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yZW5kZXIodGhpcylcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRmlsdGVyVG9vbGJhcigpLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRG9jVG9vbEJhcigpLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUud2FybmluZyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFRvb2xiYXJDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHsgcmVmOiAndG9vbGJhci1jb250YWluZXInIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHdhcm5pbmdTdHlsZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLndhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBfc3R5bGUuZ3JpZENvbnRhaW5lciB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGFHcmlkLCB7IHJlZjogJ2RhdGFHcmlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfc3R5bGUuZ3JpZC5tYWluVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkRGF0YTogdGhpcy5ncmlkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRDb2x1bW5zOiB0aGlzLmdyaWRDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0b3RhbHM6IHRoaXMuc3VidG90YWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5jbGlja0hhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRibENsaWNrOiB0aGlzLmRibENsaWNrSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2s6IHRoaXMuaGVhZGVyQ2xpY2tIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tX3N0eWxpbmc6IHRoaXMucHJvcHMuY3VzdG9tX3N0eWxpbmcgPyB0aGlzLnByb3BzLmN1c3RvbV9zdHlsaW5nIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0OiB0aGlzLnN0YXRlLnNob3dTZWxlY3RGaWVsZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5nZXRGaWx0ZXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgTW9kYWxQYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdtb2RhbHBhZ2VGaWx0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsUGFnZUJ0bkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdGaWx0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR3JpZEZpbHRlciwgeyByZWY6ICdncmlkRmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c0VsZW1lbnQ6IHRoaXMuZ3JpZENvbmZpZ1sxXS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IHRoaXMuZG9jVHlwZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IHRoaXMuZmlsdGVyRGF0YUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbmZpZzogdGhpcy5ncmlkQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZmlsdGVyRGF0YSB9KVxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbFBhZ2VEZWxldGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMuc3RhdGUuaXNEZWxldGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbFBhZ2VCdG5DbGljazogdGhpcy5tb2RhbERlbGV0ZVBhZ2VCdG5DbGljay5iaW5kKHRoaXMpIH0pLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsUmVwb3J0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnN0YXRlLmlzUmVwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0OiB0aGlzLnN0YXRlLnR4dFJlcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsUmVwb3J0ZVBhZ2VCdG5DbGljayB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvL9C/0L7QuNGB0Log0L3QsNC30LLQsNC90LjRjyDRgNC10LPQuNGB0YLRgNCwXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldFJlZ2lzdGVyTmFtZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZWdpc3Rlck5hbWUoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGRvY1R5cGUgPSBEb2NDb250ZXh0WydtZW51J10uZmluZChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5rb29kID09PSBfdGhpczMucHJvcHMuZG9jVHlwZUlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZG9jVHlwZSkge1xuICAgICAgICAgICAgICAgIERvY0NvbnRleHQucGFnZU5hbWUgPSBkb2NUeXBlLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQuNC30LzQtdC90LXQvdC40Lkg0LIg0LjQvdC/0YPRgiAo0LvQuNC80LjRgilcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlSW5wdXRDaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsaW1pdDogIXZhbHVlIHx8IHZhbHVlID4gTGlpbWl0ID8gTGlpbWl0IDogdmFsdWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQstGL0LfQvtCy0LXRgCDQv9C+0LTQs9GA0YPQt9C60YMg0LTQsNC90L3Ri9GFINGBINC/0LDRgNCw0LzQtdGC0YDQvtC8INGB0L7RgNGC0LjRgNC+0LLQutC4XHJcbiAgICAgICAgICogQHBhcmFtIHNvcnRCeVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoZWFkZXJDbGlja0hhbmRsZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGVhZGVyQ2xpY2tIYW5kbGVyKHNvcnRCeSkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChzb3J0QnlbMF0uY29sdW1uID09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g0LjRhdC10Lwg0YLQuNC/INC/0L7Qu9GPLCDQtdGB0LvQuCDRg9C60LDQt9Cw0L1cbiAgICAgICAgICAgIHZhciByb3cgPSB0aGlzLmdyaWRDb25maWcuZmluZChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5pZCA9PSBzb3J0QnlbMF0uY29sdW1uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocm93ICYmIHJvdy50eXBlKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzb3J0QnlbMF0sIHsgdHlwZTogcm93LnR5cGUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc29ydEJ5OiBzb3J0QnkgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQuZmV0Y2hEYXRhKCdzZWxlY3REb2NzJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LLQvtC50L3QvtCz0L4g0LrQu9C40LrQsFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkYmxDbGlja0hhbmRsZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGJsQ2xpY2tIYW5kbGVyKCkge1xuICAgICAgICAgICAgdGhpcy5idG5FZGl0Q2xpY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC+0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQs9GA0LjQtNCwXHJcbiAgICAgICAgICogQHBhcmFtIGFjdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSBkb2NJZFxyXG4gICAgICAgICAqIEBwYXJhbSBpZHhcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2xpY2tIYW5kbGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihhY3Rpb24sIGRvY0lkLCBpZHgpIHtcbiAgICAgICAgICAgIGlmIChkb2NJZCAmJiB0eXBlb2YgZG9jSWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBkb2NJZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC+0YLQutGA0L7QtdGCINC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QviDRgSDQv9C+0LvRj9C80Lgg0LTQu9GPINGE0LjQu9GM0YLRgNCw0YbQuNC4XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkZpbHRlckNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkZpbHRlckNsaWNrKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbHRlckRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gY3JlYXRlRW1wdHlGaWx0ZXJEYXRhKHRoaXMuZ3JpZENvbmZpZywgdGhpcy5maWx0ZXJEYXRhLCB0aGlzLmRvY1R5cGVJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZ2V0RmlsdGVyOiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0LLRi9C/0L7Qu9C90LjRgiDQt9Cw0L/RgNC+0YEg0Lgg0L7QsdC90L7QstC40YIg0LTQsNC90L3Ri9C1INCz0YDQuNC00LBcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuUmVmcmVzaENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0blJlZnJlc2hDbGljaygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmZldGNoRGF0YSgnc2VsZWN0RG9jcycpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7IHdhcm5pbmc6ICcnICsgZ2V0VGV4dFZhbHVlKCdFZHVrYWx0JyksIHdhcm5pbmdUeXBlOiAnb2snIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4IEFkZFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5BZGRDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5BZGRDbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmJ0bkFkZENsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy8g0LrQsNGB0YLQvtC80L3Ri9C5INC+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5idG5BZGRDbGljayh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6ICcvJyArIHRoaXMucHJvcHMubW9kdWxlICsgJy8nICsgdGhpcy5kb2NUeXBlSWQgKyAnLzAnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogeyBtb2R1bGU6IHRoaXMucHJvcHMubW9kdWxlIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQutC90L7Qv9C60LggRWRpdFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5FZGl0Q2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuRWRpdENsaWNrKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuYnRuRWRpdENsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy8g0LrQsNGB0YLQvtC80L3Ri9C5INC+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5idG5FZGl0Q2xpY2sodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiAnLycgKyB0aGlzLnByb3BzLm1vZHVsZSArICcvJyArIHRoaXMuZG9jVHlwZUlkICsgJy8nICsgdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHsgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4IERlbGV0ZVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5EZWxldGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5EZWxldGVDbGljaygpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0RlbGV0ZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQutC90L7Qv9C60LggUHJpbnRcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuUHJpbnRDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5QcmludENsaWNrKCkge1xuICAgICAgICAgICAgdmFyIHNxbFdoZXJlID0gdGhpcy5zdGF0ZS5zcWxXaGVyZTtcbiAgICAgICAgICAgIHZhciB1cmwgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gZW5jb2RlVVJJQ29tcG9uZW50KCcnICsgc3FsV2hlcmUpO1xuICAgICAgICAgICAgdmFyIGZpbHRlckRhdGEgPSB0aGlzLmZpbHRlckRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFyb3cudmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBlbmNvZGVVUklDb21wb25lbnQoJycgKyBKU09OLnN0cmluZ2lmeShmaWx0ZXJEYXRhKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHVybCA9ICcvcHJpbnQvJyArIHRoaXMuZG9jVHlwZUlkICsgJy8nICsgRG9jQ29udGV4dC51c2VyRGF0YS51dWlkICsgJy8nICsgZmlsdGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmwgPSAnL3ByaW50LycgKyB0aGlzLmRvY1R5cGVJZCArICcvJyArIERvY0NvbnRleHQudXNlckRhdGEudXVpZCArICcvMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwgKyAnLycgKyBwYXJhbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0J7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60L3QvtC/0LrQuCBQZGZcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuUGRmQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuUGRmQ2xpY2soKSB7XG4gICAgICAgICAgICB2YXIgc3FsV2hlcmUgPSB0aGlzLnN0YXRlLnNxbFdoZXJlO1xuICAgICAgICAgICAgdmFyIHVybCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBlbmNvZGVVUklDb21wb25lbnQoJycgKyBzcWxXaGVyZSk7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gZW5jb2RlVVJJQ29tcG9uZW50KCcnICsgSlNPTi5zdHJpbmdpZnkodGhpcy5maWx0ZXJEYXRhKSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlckRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gJy9wZGYvJyArIHRoaXMuZG9jVHlwZUlkICsgJy8nICsgRG9jQ29udGV4dC51c2VyRGF0YS51dWlkICsgJy8nICsgZmlsdGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmwgPSAnL3BkZi8nICsgdGhpcy5kb2NUeXBlSWQgKyAnLycgKyBEb2NDb250ZXh0LnVzZXJEYXRhLnV1aWQgKyAnLzAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsICsgJy8nICsgcGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC+0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQutC90L7Qv9C60Lgg0YTQuNC70YzRgtGA0LDRhtC40LhcclxuICAgICAgICAgKiBAcGFyYW0gYnRuRXZlbnRcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW9kYWxQYWdlQnRuQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW9kYWxQYWdlQnRuQ2xpY2soYnRuRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyU3RyaW5nID0gJyc7IC8vINGB0YLRgNC+0LrQsCDRhNC40LvRjNGC0YDQsFxuXG4gICAgICAgICAgICBpZiAoYnRuRXZlbnQgPT09ICdPaycpIHtcbiAgICAgICAgICAgICAgICAvLyDRgdC+0LHQuNGA0LDQtdC8INC00LDQvdC90YvQtVxuXG4gICAgICAgICAgICAgICAgZmlsdGVyU3RyaW5nID0gcHJlcGFyZVNxbFdoZXJlRnJvbUZpbHRlcih0aGlzLmZpbHRlckRhdGEsIHRoaXMuZG9jVHlwZUlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8g0YfQuNGB0YLQuNC8INGB0YLRgNC+0LrRgyDRhNC40LvRjNGC0YDQsNGG0LjQuCDQuCDQvNCw0YHRgdC40LIg0YTQuNC70YzRgtGA0L7QslxuICAgICAgICAgICAgICAgIGZpbHRlclN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93LnN0YXJ0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocm93LmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93LmVuZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZ2V0RmlsdGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzcWxXaGVyZTogZmlsdGVyU3RyaW5nLFxuICAgICAgICAgICAgICAgIGlzRW1wdHlGaWx0ZXI6ICFmaWx0ZXJTdHJpbmdcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM2LmZldGNoRGF0YSgnc2VsZWN0RG9jcycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4INGE0LjQu9GM0YLRgNCw0YbQuNC4XHJcbiAgICAgICAgICogQHBhcmFtIGJ0bkV2ZW50XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vZGFsRGVsZXRlUGFnZUJ0bkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vZGFsRGVsZXRlUGFnZUJ0bkNsaWNrKGJ0bkV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzRGVsZXRlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGlmIChidG5FdmVudCA9PT0gJ09rJykge1xuICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBkb2N1bWVudFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3YXJuaW5nOiBnZXRUZXh0VmFsdWUoJ1TDtsO2dGFuJykgKyAnLi4uJywgd2FybmluZ1R5cGU6ICdub3RWYWxpZCcgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaERhdGEoJ2RlbGV0ZScpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZXJyb3IgaW4gZmV0Y2gtPiAnLCBlcnIpO1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3JfbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZGF0YS5lcnJvcl9tZXNzYWdlJywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuc2V0U3RhdGUoeyB3YXJuaW5nOiBnZXRUZXh0VmFsdWUoJ1Rla2tpcyB2aWdhJykgKyAnOiAnICsgZGF0YS5lcnJvcl9tZXNzYWdlLCB3YXJuaW5nVHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyAmJiBkYXRhLnN0YXR1cyA9PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSAnL2xvZ2luJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5mZXRjaERhdGEoJ3NlbGVjdERvY3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINC10YHQu9C4INC10YHRgtGMINCyINC60LXRiNC1ICwg0YLQviDRh9C4Y9GC0LjQvFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpYiA9IF90aGlzNy5kb2NUeXBlSWQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEb2NDb250ZXh0LmxpYnNbbGliXSAmJiBEb2NDb250ZXh0LmxpYnNbbGliXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jQ29udGV4dC5saWJzW2xpYl0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINGE0LjQu9GM0YLRgNCwINCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmaWx0ZXJEYXRhSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJEYXRhSGFuZGxlcihkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlckRhdGEgPSBkYXRhO1xuXG4gICAgICAgICAgICAvLyDRgdC+0LfQtNCw0LTQuCDQvtCx0YzQtdC60YIgPSDQtNC10YDQttCw0YLQtdC70Ywg0YHQvtGB0YLQvtGP0L3QuNGPINGE0LjQu9GM0YLRgNCwXG4gICAgICAgICAgICBpZiAoIURvY0NvbnRleHQuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgRG9jQ29udGV4dC5maWx0ZXIgPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFEb2NDb250ZXh0LmZpbHRlclt0aGlzLmRvY1R5cGVJZF0pIHtcbiAgICAgICAgICAgICAgICBEb2NDb250ZXh0LmZpbHRlclt0aGlzLmRvY1R5cGVJZF0gPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwICYmIHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIERvY0NvbnRleHQuZmlsdGVyW3RoaXMuZG9jVHlwZUlkXSA9IHRoaXMuZmlsdGVyRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQutC90L7Qv9C60Lgg0YHRgtCw0YDRgiDQvNC10L3RjlxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5TdGFydENsaWNrSGFubGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0blN0YXJ0Q2xpY2tIYW5sZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGFzU3RhcnRNZW51VmlzaWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC/0L7Qu9GD0YfQuNGCINC+0YIg0YHRgtCw0YDRgtC+0LPQviDQvNC10L3RjiDQtNCw0L3QvdGL0LUsINGB0L/RgNGP0YfQtdGCINC80LXQvdGOXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3N0YXJ0TWVudUNsaWNrSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydE1lbnVDbGlja0hhbmRsZXIodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBoYXNTdGFydE1lbnVWaXNpYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICAgICAgcGF0aG5hbWU6ICcvJyArIHRoaXMucHJvcHMubW9kdWxlICsgJy8nICsgdmFsdWUsXG4gICAgICAgICAgICAgICAgc3RhdGU6IHsgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuU2VsZWN0Q2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuU2VsZWN0Q2xpY2soKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd1NlbGVjdEZpZWxkczogIXRoaXMuc3RhdGUuc2hvd1NlbGVjdEZpZWxkcyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCS0LXRgNC90LXRgiDQutC+0LzQv9C+0L3QtdGCINGBINC00LDQvdC90YvQvNC4INGB0YLRgNC+0LrQuCDRhNC40LvRjNGC0YDQsNGG0LjQuFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtYTUx9XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlckZpbHRlclRvb2xiYXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRmlsdGVyVG9vbGJhcigpIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSB0aGlzLmdldEZpbHRlclN0cmluZygpO1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFRvb2xiYXJDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnZmlsdGVyVG9vbGJhckNvbnRhaW5lcicsIHBvc2l0aW9uOiAnbGVmdCcgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAnIEZpbHRlcjogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RmlsdGVyU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQv9GA0LXQvtCx0YDQsNC30YPQtdGCINC00LDQvdC90YvQtSDRhNC40LvRjNGC0YDQsCDQsiDRgdGC0YDQvtC60YMg0YfRgtC+0LEg0L/QvtC60LDQt9Cw0YLRjCDQtdC1XHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0RmlsdGVyU3RyaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbHRlclN0cmluZygpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSAnJztcblxuICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgdmFyIGthc19zaXNhbGRhYiA9IHJvdy5zcWxObyAmJiByb3cuc3FsTm8gPT0gMCA/ICc8PicgOiAnPSc7XG4gICAgICAgICAgICAgICAgaWYgKHJvdy5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnICcgKyByb3cubmFtZSArICc+PScgKyByb3cuc3RhcnQgKyAnLCcgKyByb3cubmFtZSArICc8PScgKyByb3cuZW5kICsgJzsnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3cudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIHJvdy5uYW1lICsgJzonICsga2FzX3Npc2FsZGFiICsgJyAnICsgcm93LnZhbHVlICsgJzsgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCS0LXRgNC90LXRgiDQutC+0LzQv9C+0L3QtdGCIC0g0L/QsNC90LXQu9GMINC40L3RgdGC0YDRg9C80LXQvdGC0L7QsiDQtNC+0LrRg9C80LXQvdGC0LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7WE1MfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJEb2NUb29sQmFyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckRvY1Rvb2xCYXIoKSB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gdGhpcy5nZXRGaWx0ZXJTdHJpbmcoKTtcblxuICAgICAgICAgICAgdmFyIHRvb2xiYXJQYXJhbXMgPSB0aGlzLnByZXBhcmVQYXJhbXNGb3JUb29sYmFyKCk7IC8v0L/QsNGA0LDQvNC10YLRgNGLINC00LvRjyDQutC90L7Qv9C+0Log0YPQv9GA0LDQstC70LXQvdC40Y8sINCy0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINCw0LrRgtC40LLQvdC+0Lkg0YHRgtGA0L7QutC4XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHJlZjogJ2lucHV0LWxpbWl0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTGltaWl0OicsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbGltaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5saW1pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBnZXRUZXh0VmFsdWUoU3RyaW5nKHRoaXMuc3RhdGUubGltaXQpIHx8IExpaW1pdCwgMiksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIFRvb2xiYXJDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ3Rvb2xiYXJDb250YWluZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0bkFkZCwgeyBvbkNsaWNrOiB0aGlzLmJ0bkFkZENsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0bkFkZCddLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogdG9vbGJhclBhcmFtc1snYnRuQWRkJ10uZGlzYWJsZWQgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0bkVkaXQsIHsgb25DbGljazogdGhpcy5idG5FZGl0Q2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdNdXVkYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdG9vbGJhclBhcmFtc1snYnRuRWRpdCddLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogdG9vbGJhclBhcmFtc1snYnRuRWRpdCddLmRpc2FibGVkIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdG5EZWxldGUsIHsgb25DbGljazogdGhpcy5idG5EZWxldGVDbGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0bkRlbGV0ZSddLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogdG9vbGJhclBhcmFtc1snYnRuRGVsZXRlJ10uZGlzYWJsZWQgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0blByaW50LCB7IG9uQ2xpY2s6IHRoaXMuYnRuUHJpbnRDbGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0blByaW50J10uc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1Ryw7xraycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogdG9vbGJhclBhcmFtc1snYnRuUHJpbnQnXS5kaXNhYmxlZCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuUGRmLCB7IG9uQ2xpY2s6IHRoaXMuYnRuUGRmQ2xpY2suYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zWydidG5QZGYnXS5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnUERGJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlOiB0b29sYmFyUGFyYW1zWydidG5QZGYnXS5kaXNhYmxlZCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuRW1haWwsIHsgb25DbGljazogdGhpcy5idG5FbWFpbENsaWNrLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdG9vbGJhclBhcmFtc1snYnRuRW1haWwnXS5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnRW1haWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogdGhpcy5kb2NUeXBlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogdG9vbGJhclBhcmFtc1snYnRuRW1haWwnXS5kaXNhYmxlZCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuRmlsdGVyLCB7IG9uQ2xpY2s6IHRoaXMuYnRuRmlsdGVyQ2xpY2sgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0blJlZnJlc2gsIHsgb25DbGljazogdGhpcy5idG5SZWZyZXNoQ2xpY2sgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0blNlbGVjdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0blNlbGVjdCddLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdWYWxpZGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuYnRuU2VsZWN0Q2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZ3JpZC1idXR0b24tc2VsZWN0JyB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0YLQutGA0L7QtdGCINGB0YLQsNGA0YLQvtCy0L7QtSDQvNC10L3RjlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJTdGFydE1lbnUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU3RhcnRNZW51KCkge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmhhc1N0YXJ0TWVudVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFN0YXJ0TWVudSwgeyByZWY6ICdzdGFydE1lbnUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5zdGFydE1lbnVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tIYW5kbGVyOiB0aGlzLnN0YXJ0TWVudUNsaWNrSGFuZGxlciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiAg0YfQuNGC0LDQtdC8INC00LDQvdC90YvQtSDRgdC+INGB0YLQvtGA0LAsINGE0L7RgNC80LjRgNGD0LXQvCDQv9Cw0YDQsNC80LXRgtGA0Ysg0LTQu9GPINC60L3QvtC/0L7QuiDRg9C/0YDQsNCy0LvQtdC90LjRjywg0Lgg0YLRg9C00LAg0LjRhSDQvtGC0LTQsNC10LxcclxuICAgICAgICAgKiBAcmV0dXJucyB7e2J0bkFkZDoge3Nob3c6IGJvb2xlYW4sIGRpc2FibGVkOiBib29sZWFufSwgYnRuRWRpdDoge3Nob3c6IGJvb2xlYW4sIGRpc2FibGVkOiBib29sZWFufSwgYnRuRGVsZXRlOiB7c2hvdzogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW59LCBidG5QcmludDoge3Nob3c6IGJvb2xlYW4sIGRpc2FibGVkOiBib29sZWFufX19XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ByZXBhcmVQYXJhbXNGb3JUb29sYmFyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVQYXJhbXNGb3JUb29sYmFyKCkge1xuICAgICAgICAgICAgdmFyIGRvY1JpZ2h0cyA9IERvY1JpZ2h0c1t0aGlzLmRvY1R5cGVJZF0gPyBEb2NSaWdodHNbdGhpcy5kb2NUeXBlSWRdIDoge307XG4gICAgICAgICAgICB2YXIgdXNlclJvbGVzID0gRG9jQ29udGV4dC51c2VyRGF0YSA/IERvY0NvbnRleHQudXNlckRhdGEucm9sZXMgOiBbXTtcbiAgICAgICAgICAgIHZhciB0b29sYmFyUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgYWRkOiB0aGlzLnByb3BzLnRvb2xiYXJQcm9wcyA/ICEhdGhpcy5wcm9wcy50b29sYmFyUHJvcHMuYWRkIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlZGl0OiB0aGlzLnByb3BzLnRvb2xiYXJQcm9wcyA/ICEhdGhpcy5wcm9wcy50b29sYmFyUHJvcHMuZWRpdCA6IHRydWUsXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB0aGlzLnByb3BzLnRvb2xiYXJQcm9wcyA/ICEhdGhpcy5wcm9wcy50b29sYmFyUHJvcHMuZGVsZXRlIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcmludDogdGhpcy5wcm9wcy50b29sYmFyUHJvcHMgPyAhIXRoaXMucHJvcHMudG9vbGJhclByb3BzLnByaW50IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwZGY6IHRoaXMucHJvcHMudG9vbGJhclByb3BzID8gISF0aGlzLnByb3BzLnRvb2xiYXJQcm9wcy5wZGYgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLnByb3BzLnRvb2xiYXJQcm9wcyA/ICEhdGhpcy5wcm9wcy50b29sYmFyUHJvcHMuZW1haWwgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnByb3BzLnRvb2xiYXJQcm9wcyA/ICEhdGhpcy5wcm9wcy50b29sYmFyUHJvcHMuc3RhcnQgOiB0cnVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgYnRuQWRkOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQcm9wc1snYWRkJ10sXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuRWRpdDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUHJvcHNbJ2VkaXQnXSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLnN0YXRlLnZhbHVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5EZWxldGU6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdG9vbGJhclByb3BzWydkZWxldGUnXSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLnN0YXRlLnZhbHVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5QcmludDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUHJvcHNbJ3ByaW50J10sXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuUGRmOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQcm9wc1sncGRmJ10sXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuRW1haWw6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdG9vbGJhclByb3BzWydlbWFpbCddLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0blN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQcm9wc1snc3RhcnQnXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuTG9naW46IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5BY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuU2VsZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMuZ3JpZENvbmZpZyAmJiB0aGlzLmdyaWRDb25maWcubGVuZ3RoID8gISF0aGlzLmdyaWRDb25maWcuZmluZChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93LmlkID09PSAnc2VsZWN0JztcbiAgICAgICAgICAgICAgICAgICAgfSkgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5wcm9wcy50b29sYmFyUGFyYW1zID8gdGhpcy5wcm9wcy50b29sYmFyUGFyYW1zIDoge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0JLRi9C/0L7Qu9C90LjRgiDQt9Cw0L/RgNC+0YHRi1xyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmZXRjaERhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hEYXRhKG1ldGhvZCwgYWRkaXRpb25hbERhdGEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgVVJMID0gJy9uZXdBcGknO1xuICAgICAgICAgICAgdmFyIHNxbFdoZXJlID0gdGhpcy5zdGF0ZS5zcWxXaGVyZTtcbiAgICAgICAgICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICAgICAgVVJMID0gJy9uZXdBcGkvZGVsZXRlJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncHJpbnQnOlxuICAgICAgICAgICAgICAgICAgICBVUkwgPSAnL3ByaW50LycgKyB0aGlzLmRvY1R5cGVJZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0RG9jcyc6XG4gICAgICAgICAgICAgICAgICAgIFVSTCA9ICcvbmV3QXBpJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgVVJMID0gJy8nICsgbWV0aG9kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g0YHRgtCw0LLQuNC8INGB0YLQsNGC0YPRgVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHdhcm5pbmc6ICdUw7bDtnRhbi4uLicsIHdhcm5pbmdUeXBlOiAnbm90VmFsaWQnIH0pO1xuXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBhcmFtZXRlcjogdGhpcy5kb2NUeXBlSWQsIC8vINC/0LDRgNCw0LzQtdGC0YDRi1xuICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogdGhpcy5kb2NUeXBlSWQsIC8vINC00LvRjyDRgdC+0LPQu9Cw0YHQvtCy0LDQvdC40Y8g0YEg0LTQvtC60YPQvNC10L3RgtC+0LxcbiAgICAgICAgICAgICAgICBzb3J0Qnk6IHRoaXMuc3RhdGUuc29ydEJ5LCAvLyDRgdC+0YDRgtC40YDQvtCy0LrQsFxuICAgICAgICAgICAgICAgIGxpbWl0OiB0aGlzLnN0YXRlLmxpbWl0LCAvLyByb3cgbGltaXQgaW4gcXVlcnlcbiAgICAgICAgICAgICAgICBkb2NJZDogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICBzcWxXaGVyZTogc3FsV2hlcmUsIC8vINC00LjQvdCw0LzQuNGH0LXRgdC60LjQuSDRhNC40LvRjNGC0YAg0LPRgNC40LTQsFxuICAgICAgICAgICAgICAgIGZpbHRlckRhdGE6IHRoaXMuZmlsdGVyRGF0YSxcbiAgICAgICAgICAgICAgICBsYXN0RG9jSWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IERvY0NvbnRleHQudXNlckRhdGEudXNlcklkLFxuICAgICAgICAgICAgICAgIHV1aWQ6IERvY0NvbnRleHQudXNlckRhdGEudXVpZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBhZGRpdGlvbmFsRGF0YVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlZCwgcmVqZWN0ZWQpIHtcblxuICAgICAgICAgICAgICAgIF9mZXRjaERhdGFbJ2ZldGNoRGF0YVBvc3QnXShVUkwsIHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSAnL2xvZ2luJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGhhbmRsaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM4LnNldFN0YXRlKHsgd2FybmluZzogJycgKyByZXNwb25zZS5lcnJvcl9tZXNzYWdlLCB3YXJuaW5nVHlwZTogJ2Vycm9yJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfbWVzc2FnZTogJ2Vycm9yICcgKyAocmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhLmVycm9yX21lc3NhZ2UgPyAncmVzcG9uc2UuZGF0YS5lcnJvcl9tZXNzYWdlJyA6IHJlc3BvbnNlLmVycm9yX21lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ3NlbGVjdERvY3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczguZ3JpZERhdGEgPSByZXNwb25zZS5kYXRhLnJlc3VsdC5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0LXRgdC70Lgg0LfQsNC00LDQvSDRgtGA0LjQs9Cz0LXRgCwg0LLRi9C30L7QstC10Lwg0LXQs9C+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzOC5wcm9wcy50cmlnZ2VyX3NlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczgucHJvcHMudHJpZ2dlcl9zZWxlY3QoX3RoaXM4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczguc2V0U3RhdGUoeyB3YXJuaW5nOiAnJyArIGdldFRleHRWYWx1ZSgnRWR1a2FsdCcpLCB3YXJuaW5nVHlwZTogJ29rJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ2RlbGV0ZScgJiYgcmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhLnJlc3VsdCAmJiByZXNwb25zZS5kYXRhLnJlc3VsdC5lcnJvcl9jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQutCwINC/0LXRgNC10LQg0YPQtNCw0LvQtdC90LjQtdC8XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBnZXRUZXh0VmFsdWUoJ1Rla2tpcyB2aWdhOiBrdXN0dXRhbWluZSBlYmFcXHhGNW5uZXN0dXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzOC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHh0UmVwb3J0OiByZXNwb25zZS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVwb3J0OiAhIShyZXNwb25zZS5kYXRhLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5kYXRhLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZmV0Y2ggZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBoYXBwZW5lZCBpbiBzZXR0aW5nIHVwIHRoZSByZXF1ZXN0IHRoYXQgdHJpZ2dlcmVkIGFuIEVycm9yXG4gICAgICAgICAgICAgICAgICAgIF90aGlzOC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiBnZXRUZXh0VmFsdWUoJ1Rla2tpcyB2aWdhJykgKyAnICcgKyBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4INC+0YLQv9GA0LDQstC60Lgg0L/QvtGH0YLRi1xyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5FbWFpbENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkVtYWlsQ2xpY2soKSB7XG4gICAgICAgICAgICAvLyDRgdC+0YXRgNCw0L3QuNC8INC/0LDRgNCw0LzQtdGC0YDRiyDQtNC70Y8g0YTQvtGA0LzQuNGA0L7QstCw0L3QuNGPINCy0LvQvtC20LXQvdC40Y8g0LIg0LrQvtC90YLQtdC60YHRgtC1XG4gICAgICAgICAgICBEb2NDb250ZXh0WydlbWFpbC1wYXJhbXMnXSA9IHtcbiAgICAgICAgICAgICAgICBkb2NJZDogdGhpcy5zdGF0ZS5kb2NJZCxcbiAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IHRoaXMuZG9jVHlwZUlkLFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3NxbFdoZXJlJywgLy8g0LjQtCAtINC00L7QutGD0LzQtdC90YJcbiAgICAgICAgICAgICAgICBzcWxXaGVyZTogdGhpcy5zdGF0ZS5zcWxXaGVyZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJEYXRhOiB0aGlzLmZpbHRlckRhdGFcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyArIHRoaXMucHJvcHMubW9kdWxlICsgJy9lLW1haWwvMCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0YPQsdC10YDQtdGCINC+0LrQvdC+INGBINC+0YLRh9C10YLQvtC8XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vZGFsUmVwb3J0ZVBhZ2VCdG5DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb2RhbFJlcG9ydGVQYWdlQnRuQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBpc1JlcG9ydCA9IGV2ZW50ICYmIGV2ZW50ID09ICdPaycgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNSZXBvcnQ6IGlzUmVwb3J0IH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfYmluZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYmluZCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWV0aG9kcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgICAgIG1ldGhvZHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOVttZXRob2RdID0gX3RoaXM5W21ldGhvZF0uYmluZChfdGhpczkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRG9jdW1lbnRzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Eb2N1bWVudHMucHJvcFR5cGVzID0ge1xuICAgIGluaXREYXRhOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICByZXN1bHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIGdyaWRDb25maWc6IFByb3BUeXBlcy5hcnJheVxuICAgIH0pLFxuICAgIGRvY1R5cGVJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG5Eb2N1bWVudHMuZGVmYXVsdFByb3BzID0ge1xuICAgIG1vZHVsZTogJ3JhYW1hJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2RvY3VtZW50cy9kb2N1bWVudHMuanN4XG4vLyBtb2R1bGUgaWQgPSAxNzlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnOy8qKlxyXG4gKiDRgdC+0LfQtNCw0YHRgiDRgdGC0YDQvtC60YMgLSDRhNC40LvRjNGC0YAg0LjQtyDQv9Cw0YDQsNC80LXRgtGA0L7QslxyXG4gKiBAcGFyYW0gZmlsdGVyRGF0YVxyXG4gKiBAcGFyYW0gZG9jVHlwZUlkXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL3ZhciBwcmVwYXJlU3FsV2hlcmVGcm9tRmlsdGVyPWZ1bmN0aW9uIHByZXBhcmVTcWxXaGVyZUZyb21GaWx0ZXIoZmlsdGVyRGF0YSxkb2NUeXBlSWQpe3ZhciBmaWx0ZXJTdHJpbmc9Jyc7Ly8g0YHRgtGA0L7QutCwINGE0LjQu9GM0YLRgNCwXG52YXIga2FzX3Npc2FsZGFiPScnO2ZpbHRlckRhdGEuZm9yRWFjaChmdW5jdGlvbihyb3cpe2lmKHJvdy52YWx1ZSl7Y29uc29sZS5sb2coJ2ZpbHRlclN0cmluZycsZmlsdGVyU3RyaW5nKTtmaWx0ZXJTdHJpbmc9ZmlsdGVyU3RyaW5nKyhmaWx0ZXJTdHJpbmcubGVuZ3RoPjA/XCIgYW5kIFwiOlwiIHdoZXJlIFwiKTtrYXNfc2lzYWxkYWI9cm93LnNxbE5vJiZOdW1iZXIocm93LnNxbE5vKT09MD8nTk9UJzonJztzd2l0Y2gocm93LnR5cGUpe2Nhc2UndGV4dCc6dmFyIHByZXBhaXJlZFBhcmFtZXRlcj1yb3cudmFsdWUuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24oc3RyKXtyZXR1cm4nXFwnJytzdHIudHJpbSgpKydcXCcnO30pLmpvaW4oJywnKTsvLyDQtdGB0LvQuCDQv9Cw0YDQsNC80LXRgtGA0Ysg0YDQsNC30LTQtdC00LXQvdGLLCDRgtC+INC80L3QvtC20LXRgdGC0LLQtdC90L3Ri9C5INC/0LDRgNCw0LzQtdGC0YBcbmlmKHJvdy52YWx1ZS5tYXRjaCgvLC8pKXtmaWx0ZXJTdHJpbmc9ZmlsdGVyU3RyaW5nKycgJytyb3cuaWQrJyAnK2thc19zaXNhbGRhYisnICBpbiAoJytwcmVwYWlyZWRQYXJhbWV0ZXIrJyknO31lbHNle2lmKGRvY1R5cGVJZD09J0tVVV9UQUFCRUwnKXtmaWx0ZXJTdHJpbmc9ZmlsdGVyU3RyaW5nKycgIHVwcGVyKCcrcm93LmlkKycpICcra2FzX3Npc2FsZGFiKycgbGlrZSB1cHBlcihcXCclJytyb3cudmFsdWUudHJpbSgpKyclXFwnKSc7fWVsc2V7Ly8g0L7QsdGA0LDQsdC+0YLQutCwINC90LXQutC+0YDRgNC10LrRgtC90L7QuSDQutC+0LTQuNGA0L7QstC60LhcbmZpbHRlclN0cmluZz1maWx0ZXJTdHJpbmcrJyAgdXBwZXIoJytyb3cuaWQrJykgJytrYXNfc2lzYWxkYWIrJyBsaWtlIHVwcGVyKFxcJyUnK3Jvdy52YWx1ZS50cmltKCkrJyVcXCcpJzt9fWJyZWFrO2Nhc2Unc3RyaW5nJzpmaWx0ZXJTdHJpbmc9ZmlsdGVyU3RyaW5nKycgIHVwcGVyKCcrcm93LmlkKycpICcra2FzX3Npc2FsZGFiKycgbGlrZSB1cHBlcihcXCclJytyb3cudmFsdWUudHJpbSgpKyclXFwnKSc7YnJlYWs7Y2FzZSdkYXRlJzppZignc3RhcnQnaW4gcm93JiZyb3cuc3RhcnQpe2ZpbHRlclN0cmluZz1maWx0ZXJTdHJpbmcrJyBmb3JtYXRfZGF0ZSgnK3Jvdy5pZCsnOjp0ZXh0KSAgPj0gIGZvcm1hdF9kYXRlKFxcJycrcm93LnN0YXJ0KydcXCc6OnRleHQpIGFuZCAoZm9ybWF0X2RhdGUoJytyb3cuaWQrJzo6dGV4dCkgIDw9ICBmb3JtYXRfZGF0ZShcXCcnK3Jvdy5lbmQrJ1xcJzo6dGV4dCkgb3IgJytyb3cuZW5kKycgaXMgbnVsbCknO31lbHNlIGlmKHJvdy5pZD09J3ZhbGlkJyl7Ly8g0LTQu9GPINGN0YLQvtCz0L4g0L/QvtC70Y8g0YHRgtCw0LLQuNC8INGE0LjQu9GM0YLRgCDQvdCwINC60L7QvdGC0LXQutGCINC00LXQudGB0YLQstGD0LXRgiDQtNC+XG5maWx0ZXJTdHJpbmc9ZmlsdGVyU3RyaW5nKycgKGZvcm1hdF9kYXRlKCcrcm93LmlkKyc6OnRleHQpICA+PSAgZm9ybWF0X2RhdGUoXFwnJytyb3cudmFsdWUrJ1xcJzo6dGV4dCkgb3IgJytyb3cuaWQrJyBpcyBudWxsKSc7fWVsc2V7ZmlsdGVyU3RyaW5nPWZpbHRlclN0cmluZytyb3cuaWQrKGthc19zaXNhbGRhYiYma2FzX3Npc2FsZGFiPT0nTk9UJz9cIjw+XCI6XCI9XCIpK1wiJ1wiK3Jvdy52YWx1ZStcIidcIjt9YnJlYWs7Y2FzZSdudW1iZXInOmlmKCdzdGFydCdpbiByb3cmJnJvdy5zdGFydCl7ZmlsdGVyU3RyaW5nPWZpbHRlclN0cmluZysnICcrcm93LmlkKyc6Om51bWVyaWMgID49ICAnK3Jvdy5zdGFydCsnIGFuZCAoJytyb3cuaWQrJzo6bnVtZXJpYyAgPD0gICcrcm93LmVuZCsnIG9yICcrcm93LmVuZCsnIGlzIG51bGwpJzt9ZWxzZXtmaWx0ZXJTdHJpbmc9ZmlsdGVyU3RyaW5nK3Jvdy5pZCtcIjo6bnVtZXJpYyAgXCIrKGthc19zaXNhbGRhYiYma2FzX3Npc2FsZGFiPT0nTk9UJz9cIjw+XCI6XCI9XCIpK3Jvdy52YWx1ZTt9YnJlYWs7Y2FzZSdpbnRlZ2VyJzppZignc3RhcnQnaW4gcm93JiZyb3cuc3RhcnQpe2ZpbHRlclN0cmluZz1maWx0ZXJTdHJpbmcrJyAnK3Jvdy5pZCsnICA+PSAgJytyb3cuc3RhcnQrJyBhbmQgKCcrcm93LmlkKycgIDw9ICAnK3Jvdy5lbmQrJyBvciAnK3Jvdy5lbmQrJyBpcyBudWxsKSc7fWVsc2V7ZmlsdGVyU3RyaW5nPWZpbHRlclN0cmluZytyb3cuaWQrXCI6OmludGVnZXIgIFwiKyhrYXNfc2lzYWxkYWImJmthc19zaXNhbGRhYj09J05PVCc/XCI8PlwiOlwiPVwiKStyb3cudmFsdWU7fWJyZWFrO319fSk7cmV0dXJuIGZpbHRlclN0cmluZzt9O21vZHVsZS5leHBvcnRzPXByZXBhcmVTcWxXaGVyZUZyb21GaWx0ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9saWJzL3ByZXBhcmVTcWxXaGVyZUZyb21GaWx0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIERvY0NvbnRleHQ9cmVxdWlyZSgnLi8uLi9mcm9udGVuZC9kb2MtY29udGV4dCcpO3ZhciBnZXREZWZhdWxEYXRlPXJlcXVpcmUoJy4vZ2V0RGVmYXVsdERhdGUnKTsvKipcclxuICog0LLQtdGA0L3QtdGCINC00LXRhNC+0LvRgtC90YvQtSDQt9C90LDRh9C10L3QuNGPINCy0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINGC0LjQv9CwXHJcbiAqIEBwYXJhbSByb3dcclxuICovdmFyIGdldERlZmF1bHRWYWx1ZXM9ZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlcyhyb3cpe3ZhciByZXR1cm5WYWx1ZT17c3RhcnQ6bnVsbCxlbmQ6bnVsbCx2YWx1ZTpudWxsfTtpZighIXJvdy5pbnRlcnZhbCYmIXJvdy5zdGFydCYmIXJvdy5lbmQpe3N3aXRjaChyb3cudHlwZSl7Y2FzZSdkYXRlJzpyZXR1cm5WYWx1ZS5zdGFydD1nZXREZWZhdWxEYXRlKCkuc3RhcnQ7cmV0dXJuVmFsdWUuZW5kPWdldERlZmF1bERhdGUoKS5lbmQ7YnJlYWs7ZGVmYXVsdDpyZXR1cm5WYWx1ZS5zdGFydD1udWxsO3JldHVyblZhbHVlLmVuZDt9fXJldHVybiByZXR1cm5WYWx1ZTt9O2Z1bmN0aW9uIHByZXBhcmVGaWx0ZXJEYXRhKGdyaWRDb25maWcsZG9jVHlwZUlkKXt2YXIgZGF0YT1bXTtpZighRG9jQ29udGV4dC5maWx0ZXIpe0RvY0NvbnRleHQuZmlsdGVyPXt9O31pZighRG9jQ29udGV4dC5maWx0ZXJbZG9jVHlwZUlkXSl7RG9jQ29udGV4dC5maWx0ZXJbZG9jVHlwZUlkXT1bXTt9Ly8g0L/RgNC+0LLQtdGA0LjQvCwg0LXRgdC70Lgg0YTQuNC70YzRgtGAINGD0LbQtSDRgdC+0YXRgNCw0L3QtdC9LCDRgtC+INCy0LXRgNC90LXQvCDRg9C20LUg0YDQsNC90LXQtSDRgdC+0YXQttCw0L3QvdGL0Lkg0LzQsNGB0YHQuNCyXG5pZihkb2NUeXBlSWQmJkRvY0NvbnRleHQuZmlsdGVyW2RvY1R5cGVJZF0ubGVuZ3RoPjApe2RhdGE9RG9jQ29udGV4dC5maWx0ZXJbZG9jVHlwZUlkXTt9ZWxzZXtncmlkQ29uZmlnLm1hcChmdW5jdGlvbihyb3cpe3ZhciBmaWVsZD17aWQ6cm93LmlkLHZhbHVlOnJvdy52YWx1ZT9yb3cudmFsdWU6cm93LmRlZmF1bHQ/cm93LmRlZmF1bHQ6bnVsbCxuYW1lOnJvdy5pZCxzcWxObzoxLHR5cGU6cm93LnR5cGU/cm93LnR5cGU6J3RleHQnLGludGVydmFsOiEhcm93LmludGVydmFsLHN0YXJ0OnJvdy52YWx1ZT9yb3cudmFsdWU6bnVsbCxlbmQ6cm93LnZhbHVlP3Jvdy52YWx1ZTpudWxsfTtpZihyb3cuaW50ZXJ2YWwpe2ZpZWxkW3Jvdy5pZCsnX3N0YXJ0J109cm93LnZhbHVlP3Jvdy52YWx1ZTpudWxsO2ZpZWxkW3Jvdy5pZCsnX2VuZCddPXJvdy52YWx1ZT9yb3cudmFsdWU6bnVsbDt9ZGF0YS5wdXNoKGZpZWxkKTt9KTt9cmV0dXJuIGRhdGE7fW1vZHVsZS5leHBvcnRzPXByZXBhcmVGaWx0ZXJEYXRhO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbGlicy9wcmVwYWlyZUZpbHRlckRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7LyoqXHJcbiAqINC00L7QsdCw0LLQuNGCINC90L7Qu9GMINCyINC80LXRgdGP0YYg0LjQu9C4INC00LXQvdGMINC/0L4g0L3QtdC+0LHRhdC+0LTQuNC80L7RgdGC0LhcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL3ZhciBnZXRUd29EaWdpdHM9ZnVuY3Rpb24gZ2V0VHdvRGlnaXRzKHZhbHVlKXtyZXR1cm4gdmFsdWU8MTA/JzAnK3ZhbHVlOnZhbHVlO307LyoqXHJcbiAqINCy0LXRgNC90LXRgiDQtNC10YTQvtC70YLQvdGL0LUg0LfQvdCw0YfQtdC90LjRjyDQstC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDRgtC40L/QsFxyXG4gKiBAcGFyYW0gcm93XHJcbiAqL3ZhciBnZXREZWZhdWx0RGF0ZT1mdW5jdGlvbiBnZXREZWZhdWx0RGF0ZShwZXJpb2Qpe3ZhciByZXR1cm5WYWx1ZT17c3RhcnQ6bnVsbCxlbmQ6bnVsbCx2YWx1ZTpudWxsfTtEYXRlLnByb3RvdHlwZS5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiAzMy1uZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksdGhpcy5nZXRNb250aCgpLDMzKS5nZXREYXRlKCk7fTt2YXIgdG9kYXk9bmV3IERhdGUoKTt2YXIgY3VycmVudE1vbnRoPWdldFR3b0RpZ2l0cyh0b2RheS5nZXRNb250aCgpKzEpO3ZhciBjdXJyZW50WWVhcj1nZXRUd29EaWdpdHModG9kYXkuZ2V0RnVsbFllYXIoKSk7dmFyIHN0YXJ0TW9udGg9Y3VycmVudFllYXIrJy0nK2N1cnJlbnRNb250aCsnLTAxJzt2YXIgZGF5c0luTW9udGg9Z2V0VHdvRGlnaXRzKHRvZGF5LmRheXNJbk1vbnRoKCkpO3ZhciBmaW5pc2hNb250aD1jdXJyZW50WWVhcisnLScrY3VycmVudE1vbnRoKyctJytkYXlzSW5Nb250aDtzd2l0Y2gocGVyaW9kKXtjYXNlJ0tVVSc6cmV0dXJuVmFsdWUuc3RhcnQ9c3RhcnRNb250aDtyZXR1cm5WYWx1ZS5lbmQ9ZmluaXNoTW9udGg7YnJlYWs7Y2FzZSdBQVNUQSc6cmV0dXJuVmFsdWUuc3RhcnQ9Y3VycmVudFllYXIrJy0wMS0wMSc7cmV0dXJuVmFsdWUuZW5kPWN1cnJlbnRZZWFyKyctMTItMzEnO2RlZmF1bHQ6cmV0dXJuVmFsdWUuc3RhcnQ9bnVsbDtyZXR1cm5WYWx1ZS5lbmQ9bnVsbDt9cmV0dXJuIHJldHVyblZhbHVlO307bW9kdWxlLmV4cG9ydHM9Z2V0RGVmYXVsdERhdGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9saWJzL2dldERlZmF1bHREYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgVG9vbGJhckNvbnRhaW5lciA9IHJlcXVpcmUoJy4vLi4vdG9vbGJhci1jb250YWluZXIvdG9vbGJhci1jb250YWluZXIuanN4JyksXG4gICAgR3JpZEJ1dHRvbkFkZCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1hZGQvYnV0dG9uLXJlZ2lzdGVyLWFkZC5qc3gnKSxcbiAgICBHcmlkQnV0dG9uRWRpdCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1lZGl0L2J1dHRvbi1yZWdpc3Rlci1lZGl0LmpzeCcpLFxuICAgIEdyaWRCdXR0b25EZWxldGUgPSByZXF1aXJlKCcuLy4uL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZGVsZXRlL2J1dHRvbi1yZWdpc3Rlci1kZWxldGUuanN4JyksXG4gICAgTW9kYWxQYWdlRGVsZXRlID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtZGVsZXRlL21vZGFsUGFnZS1kZWxldGUuanN4JyksXG4gICAgSW5wdXRDaGVja0JveCA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9pbnB1dC1jaGVja2JveC9pbnB1dC1jaGVja2JveC5qc3gnKSxcbiAgICBrZXlkb3duID0gcmVxdWlyZSgncmVhY3Qta2V5ZG93bicpO1xuXG4vL2NvbnN0ICAgIEtFWVMgPSBbMzgsIDQwXTsgLy8g0LzQvtC90LjRgtC+0YDQuNC8INGC0L7Qu9GM0LrQviDRgdGC0YDQtdC70LrQuCDQstCy0LXRgNGFINC4INCy0L3QuNC30YVcbnZhciBzdHlsZXMgPSByZXF1aXJlKCcuL2RhdGEtZ3JpZC1zdHlsZXMnKTtcbnZhciBnZXRUZXh0VmFsdWUgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2xpYnMvZ2V0VGV4dFZhbHVlJyk7XG5cbnZhciBpc0V4aXN0cyA9IGZ1bmN0aW9uIGlzRXhpc3RzKG9iamVjdCwgcHJvcCkge1xuICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICBpZiAob2JqZWN0ICYmIHByb3AgaW4gb2JqZWN0KSB7XG4gICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vL0BrZXlkb3duIEB0b2RvXG5cbnZhciBEYXRhR3JpZCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKERhdGFHcmlkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIERhdGFHcmlkKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhR3JpZCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERhdGFHcmlkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGF0YUdyaWQpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBhY3RpdmVSb3c6IDAsXG4gICAgICAgICAgICBhY3RpdmVDb2x1bW46ICcnLFxuICAgICAgICAgICAgaXNEZWxldGU6IGZhbHNlLFxuICAgICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWU6IF90aGlzLnByb3BzLnZhbHVlID8gX3RoaXMucHJvcHMudmFsdWUgOiAwLFxuICAgICAgICAgICAgZ3JpZERhdGE6IHByb3BzLmdyaWREYXRhLFxuICAgICAgICAgICAgc3VidG90YWxzOiBwcm9wcy5zdWJ0b3RhbHMgPyBwcm9wcy5zdWJ0b3RhbHMgOiBbXSxcbiAgICAgICAgICAgIGlzU2VsZWN0OiBfdGhpcy5wcm9wcy5pc1NlbGVjdFxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLmhhbmRsZUdyaWRIZWFkZXJDbGljayA9IF90aGlzLmhhbmRsZUdyaWRIZWFkZXJDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlQ2VsbERibENsaWNrID0gX3RoaXMuaGFuZGxlQ2VsbERibENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gX3RoaXMuaGFuZGxlS2V5RG93bi5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMucHJlcGFyZVRhYmxlUm93ID0gX3RoaXMucHJlcGFyZVRhYmxlUm93LmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVHcmlkQnRuQ2xpY2sgPSBfdGhpcy5oYW5kbGVHcmlkQnRuQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmdldEdyaWRSb3dJbmRleEJ5SWQgPSBfdGhpcy5nZXRHcmlkUm93SW5kZXhCeUlkLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5wcmVwYXJlVGFibGVGb290ZXIgPSBfdGhpcy5wcmVwYXJlVGFibGVGb290ZXIuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmdldFN1bSA9IF90aGlzLmdldFN1bS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZ3JpZCA9IFtdO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhEYXRhR3JpZCwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciB0YWJsZUhlYWRlclN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLmhlYWRlclRhYmxlID8gc3R5bGVzLmhlYWRlclRhYmxlIDoge30sIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgICAgICAgICAgdmFyIHRhYmxlTWFpblN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLm1haW5UYWJsZSA/IHN0eWxlcy5tYWluVGFibGUgOiB7fSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICAgICAgICAgIHZhciB0b29sYmFyUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7XG5cbiAgICAgICAgICAgICAgICBidG5BZGQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5FZGl0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuRGVsZXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuUHJpbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5wcm9wcy50b29sYmFyUGFyYW1zID8gdGhpcy5wcm9wcy50b29sYmFyUGFyYW1zIDoge30pO1xuXG4gICAgICAgICAgICAvLyDQv9GA0LjQvNC10Lwg0LIg0LfQsNGH0LXRgiDQv9C10YDQtdC00LDQvdC90YvQtSDRgdGC0LjQu9C4XG4gICAgICAgICAgICBzdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlKTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5tYWluIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zaG93VG9vbEJhciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFRvb2xiYXJDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2dyaWQtdG9vbGJhci1jb250YWluZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdsZWZ0JyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWRCdXR0b25BZGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXMuYnRuQWRkLnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUdyaWRCdG5DbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnTGlzYScsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdncmlkLWJ1dHRvbi1hZGQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWRCdXR0b25FZGl0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zLmJ0bkVkaXQuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlR3JpZEJ0bkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdNdXVkYScsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdncmlkLWJ1dHRvbi1lZGl0JyB9KSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChHcmlkQnV0dG9uRGVsZXRlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zLmJ0bkRlbGV0ZS5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVHcmlkQnRuQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ0t1c3R1dGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZ3JpZC1idXR0b24tZGVsZXRlJyB9KVxuICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaGVhZGVyIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFibGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdkYXRhR3JpZFRhYmxlJywgc3R5bGU6IHRhYmxlSGVhZGVyU3R5bGUsIG9uS2V5UHJlc3M6IHRoaXMuaGFuZGxlS2V5RG93biB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGJvZHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVwYXJlVGFibGVIZWFkZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwcGVyIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFibGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogdGFibGVNYWluU3R5bGUsIHRhYkluZGV4OiAnMScsIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M6IHRoaXMuaGFuZGxlS2V5RG93biB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGJvZHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogeyB2aXNpYmlsaXR5OiAnY29sbGFwc2UnIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVwYXJlVGFibGVIZWFkZXIodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVRhYmxlUm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zdWJ0b3RhbHMgJiYgdGhpcy5wcm9wcy5zdWJ0b3RhbHMubGVuZ3RoID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVwYXJlVGFibGVGb290ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWxQYWdlRGVsZXRlLCB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMuc3RhdGUuaXNEZWxldGUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsRGVsZXRlUGFnZUJ0bkNsaWNrLmJpbmQodGhpcykgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gLy8gcmVuZGVyXG5cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW9kYWxEZWxldGVQYWdlQnRuQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW9kYWxEZWxldGVQYWdlQnRuQ2xpY2soYnRuRXZlbnQpIHtcbiAgICAgICAgICAgIC8vY2xvc2UgbW9kYWxwYWdlXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNEZWxldGU6IGZhbHNlIH0pO1xuXG4gICAgICAgICAgICBpZiAoYnRuRXZlbnQgPT09ICdPaycgJiYgdGhpcy5wcm9wcy5oYW5kbGVHcmlkQnRuQ2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUdyaWRCdG5DbGljaygnZGVsZXRlJywgdGhpcy5zdGF0ZS5hY3RpdmVSb3csIHRoaXMuc3RhdGUuZ3JpZERhdGEubGVuZ3RoID8gdGhpcy5zdGF0ZS5ncmlkRGF0YVt0aGlzLnN0YXRlLmFjdGl2ZVJvd10uaWQgOiAwLCB0aGlzLnByb3BzLmRvY1R5cGVJZCA/IHRoaXMucHJvcHMuZG9jVHlwZUlkIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40LrQsCDRgdCw0LHRi9GC0LjRjyDQutC70LjQutCwINC/0L4g0LrQvdC+0L/QutC4INC/0LDQvdC10LvQuCDQs9GA0LjQtNCwXHJcbiAgICAgICAgICogQHBhcmFtIGJ0bk5hbWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlR3JpZEJ0bkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUdyaWRCdG5DbGljayhidG5OYW1lKSB7XG5cbiAgICAgICAgICAgIHZhciBhY3RpdmVSb3cgPSB0aGlzLnN0YXRlLmFjdGl2ZVJvdztcblxuICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5zdGF0ZS5ncmlkRGF0YS5sZW5ndGggPyB0aGlzLnN0YXRlLmdyaWREYXRhW2FjdGl2ZVJvd10uaWQgOiAwO1xuXG4gICAgICAgICAgICB2YXIgZG9jVHlwZUlkID0gdGhpcy5wcm9wcy5kb2NUeXBlSWQgPyB0aGlzLnByb3BzLmRvY1R5cGVJZCA6ICcnO1xuXG4gICAgICAgICAgICBpZiAoKGJ0bk5hbWUgPT09ICdkZWxldGUnIHx8IGJ0bk5hbWUgPT09ICdLdXN0dXRhJykgJiYgIXRoaXMuc3RhdGUuaXNEZWxldGUpIHtcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgb3BlbiBtb2RhbCBwYWdlIGFuZCBhc2sgY29uZmlybWF0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoeyBpc0RlbGV0ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFuZGxlR3JpZEJ0bkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVHcmlkQnRuQ2xpY2soYnRuTmFtZSwgYWN0aXZlUm93LCBpZCwgZG9jVHlwZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC40YnQtdC8INC40L3QtNC10YUg0LIg0LzQsNGB0YHQuNCy0LUg0LTQsNC90L3Ri9GFXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEdyaWRSb3dJbmRleEJ5SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0R3JpZFJvd0luZGV4QnlJZCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5zdGF0ZS5ncmlkRGF0YS5maW5kSW5kZXgoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93LmlkID09PSBfdGhpczIuc3RhdGUudmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCA+IC0xID8gaW5kZXggOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7RgtGA0LDQsdCw0YLRi9Cy0LDQtdGCINGB0L7QsdGL0YLQuCDQutC70LjQutCwINC/0L4g0Y/Rh9C10LnQutC1XHJcbiAgICAgICAgICogQHBhcmFtIGlkeFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVDZWxsQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2VsbENsaWNrKGlkeCwgY29sdW1uSWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5ncmlkRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMucHJvcHMub25DaGFuZ2VBY3Rpb24gfHwgbnVsbDtcblxuICAgICAgICAgICAgICAgIHZhciBkb2NJZCA9IHRoaXMuc3RhdGUuZ3JpZERhdGFbaWR4XS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgZ3JpZERhdGEgPSBfZXh0ZW5kcyh7fSwgdGhpcy5zdGF0ZS5ncmlkRGF0YSk7XG5cbiAgICAgICAgICAgICAgICAvLyDQntGC0YDQsNCx0L7RgtCw0LXRgiDQutC70LjQuiDQv9C+INC60L7Qu9C+0L3QutC4INGB0LXQu9C10LrRgiDQtNC70Y8g0LLRi9Cx0L7RgNCwINC80LDRgdGB0LjQstCwINC30LDQv9C40YHQtdC5XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNTZWxlY3QgJiYgY29sdW1uSWQgPT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0YPQttC1INCy0YvQsdGA0LDQvSwg0L3QsNC00L4g0LjRgdC60LvRjtGH0LjRgtGMXG4gICAgICAgICAgICAgICAgICAgIGdyaWREYXRhW2lkeF0uc2VsZWN0ID0gIWdyaWREYXRhW2lkeF0uc2VsZWN0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vINC10YHQu9C4INC/0L7Qu9C1INC90LUg0L7RgtC80LXRh9C10L3QviDQutCw0LogcmVhZE9ubHkg0YLQviDRgdC7LiDQtNC10LnRgdGC0LLQuNC1INC90LUg0LTQvtC70LbQvdC+INC/0YDQvtC40YHRhdC+0LTQuNGC0YxcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMucHJvcHMuZ3JpZENvbHVtbnMuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cuaWQgPT0gY29sdW1uSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uICYmIGNvbHVtbi5sZW5ndGggJiYgIWNvbHVtblswXS5yZWFkT25seSAmJiB0aGlzLnByb3BzLmlzRm9yVXBkYXRlICYmIGdyaWREYXRhW2lkeF1bY29sdW1uSWRdICE9PSBudWxsICYmIGdyaWREYXRhW2lkeF1bY29sdW1uSWRdICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZERhdGFbaWR4XVtjb2x1bW5JZF0gPSAhZ3JpZERhdGFbaWR4XVtjb2x1bW5JZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZERhdGE6IGdyaWREYXRhLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb3c6IGlkeCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRvY0lkXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfdGhpczMuc3RhdGUuZ3JpZERhdGFbaWR4XVtjb2x1bW5JZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnByb3BzLm9uQ2xpY2soYWN0aW9uLCBkb2NJZCwgaWR4LCBjb2x1bW5JZCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LTQstC+0LnQvdC+0LPQviDQutC70LjQutCwINC/0L4g0Y/Rh9C10LnQutC1XHJcbiAgICAgICAgICogQHBhcmFtIGlkeFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVDZWxsRGJsQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2VsbERibENsaWNrKGlkeCkge1xuICAgICAgICAgICAgLy8g0L7RgtC80LXRgtC40Lwg0LDQutGC0LjQstC90YPRjiDRgdGC0YDQvtC60YMg0Lgg0LLRi9C30L7QstC10L0g0L7QsdGA0LDQsdC+0YLRh9C40Log0YHQvtCx0YvRgtC40Y8gZGJsQ2xpY2tcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2VsbENsaWNrKGlkeCwgbnVsbCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkRibENsaWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkRibENsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntGC0YDQsNCx0L7RgtCw0LXRgiDQutC70LjQuiDQv9C+INC30LDQs9C+0LvQvtCy0LrRgyDQs9GA0LjQtNCwICjRgdC+0YDRgtC40YDQvtCy0LrQsClcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtINC90LDQuNC80LXQvdC+0LLQsNC90LjQtSDQutC+0LvQvtC90LrQuFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVHcmlkSGVhZGVyQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlR3JpZEhlYWRlckNsaWNrKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnc2VsZWN0JyB8fCBuYW1lID09PSAncm93X2lkJykge1xuICAgICAgICAgICAgICAgIC8vINCy0LjRgNGC0YPQsNC70YzQvdCw0Y8g0LrQvtC70L7QvdC60LBcbiAgICAgICAgICAgICAgICAvLyDQvNC10L3Rj9C10Lwg0LfQvdCw0YfQtdC90LjQtSDQstGL0LHRgNCw0L3QviDQvdCwINC90LDQvtCx0L7RgNC+0YJcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmdyaWREYXRhLmxlbmd0aCA+IDAgJiYgbmFtZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnN0YXRlLmdyaWREYXRhO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93LnNlbGVjdCA9ICFyb3cuc2VsZWN0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdyaWREYXRhOiBkYXRhIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzb3J0ID0gdGhpcy5zdGF0ZS5zb3J0O1xuICAgICAgICAgICAgaWYgKHNvcnQubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIHNvcnQuZGlyZWN0aW9uID0gc29ydC5kaXJlY3Rpb24gPT09ICdhc2MnID8gJ2Rlc2MnIDogJ2FzYyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ2FzYydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc29ydEJ5ID0gW3sgY29sdW1uOiBzb3J0Lm5hbWUsIGRpcmVjdGlvbjogc29ydC5kaXJlY3Rpb24gfV07XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGFjdGl2ZUNvbHVtbjogbmFtZSxcbiAgICAgICAgICAgICAgICBzb3J0OiBzb3J0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25IZWFkZXJDbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25IZWFkZXJDbGljayhzb3J0QnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0J7QsdGA0LDQsdC+0YLRh9C40Log0L3QsCDRgdC+0LHRi9GC0LjQtSAtINC90LDQttC40YLQuNC1INGB0YLRgNC10LvQutC4INCy0L3QuNC3XHJcbiAgICAgICAgICogQHBhcmFtIGVcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlS2V5RG93bicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICAgICAgICAgIC8vINGA0LXQsNC60YbQuNGPINC90LAg0LrQu9Cw0LLQuNCw0YLRg9GA0YNcbiAgICAgICAgICAgIHZhciByb3dJbmRleCA9IHRoaXMuc3RhdGUuYWN0aXZlUm93O1xuICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgLy8g0LLQvdC40LcsINGD0LLQtdC70LjRh9C40Lwg0LDQutGC0LjQstC90YPRjiDRgdGC0YDQvtC60YMg0L3QsCArIDFcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgrKztcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5ncmlkRGF0YS5sZW5ndGggPCByb3dJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0LLQtdGA0L3QtdC8INC/0YDQtdC20L3QtdC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4ID0gdGhpcy5zdGF0ZS5hY3RpdmVSb3c7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAgICAgLy8g0LLQvdC40LcsINGD0LLQtdC70LjRh9C40Lwg0LDQutGC0LjQstC90YPRjiDRgdGC0YDQvtC60YMg0L3QsCAtIDFcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgtLTtcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXggPSByb3dJbmRleCA8IDAgPyAwIDogcm93SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgYWN0aXZlUm93OiByb3dJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQk9C+0YLQvtCy0LjRgiDRgdGC0YDQvtC60YMg0LTQu9GPINCz0YDQuNC00LBcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJlcGFyZVRhYmxlUm93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVUYWJsZVJvdygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgYWN0aXZlUm93ID0gdGhpcy5nZXRHcmlkUm93SW5kZXhCeUlkKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmdyaWREYXRhLm1hcChmdW5jdGlvbiAocm93LCByb3dJbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3RJbmRleCA9ICd0ci0nICsgcm93SW5kZXg7XG5cbiAgICAgICAgICAgICAgICB2YXIgZ3JpZENvbHVtbnMgPSBfdGhpczQucHJvcHMuZ3JpZENvbHVtbnMubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5pZCA9PT0gJ3NlbGVjdCcgJiYgX3RoaXM0LnByb3BzLmlzU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3cuc2hvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0cicsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogb2JqZWN0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfdGhpczQuaGFuZGxlQ2VsbENsaWNrLmJpbmQoX3RoaXM0LCByb3dJbmRleCwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRvdWJsZUNsaWNrOiBfdGhpczQuaGFuZGxlQ2VsbERibENsaWNrLmJpbmQoX3RoaXM0LCByb3dJbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbktleURvd246IF90aGlzNC5oYW5kbGVLZXlEb3duLmJpbmQoX3RoaXM0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMudHIsIGFjdGl2ZVJvdyA9PT0gcm93SW5kZXggPyBzdHlsZXMuZm9jdXNlZCA6IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogb2JqZWN0SW5kZXggfSxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4sIGNvbHVtbkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQvdCw0LfQvdCw0YfQuNC8INGB0LjQvNCy0L7Qu9GLINC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC70L7Qs9C40YfQtdGB0LrQuNGFINC00LDQvdC90YvRhVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvb2xWYWx1ZVllcyA9IGNvbHVtbi5ib29sU3VtYm9sWWVzID8gY29sdW1uLmJvb2xTdW1ib2xZZXMgOiBzdHlsZXMuYm9vbFN1bWJvbFsneWVzJ10udmFsdWUgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib29sVmFsdWVObyA9IGNvbHVtbi5ib29sU3VtYm9sTm8gPyBjb2x1bW4uYm9vbFN1bWJvbE5vIDogc3R5bGVzLmJvb2xTdW1ib2xbJ25vJ10udmFsdWUgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib29sVmFsdWVOdWxsID0gY29sdW1uLmJvb2xTdW1ib2xOdWxsID8gY29sdW1uLmJvb2xTdW1ib2xOdWxsIDogc3R5bGVzLmJvb2xTdW1ib2xbJ251bGwnXSA/IHN0eWxlcy5ib29sU3VtYm9sWydudWxsJ10udmFsdWUgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQv9GA0LjQstC10LTQtdC8INC30L3QsNGH0LXQvdC40LUgdmFsdWUg0Log0LfQsNC00LDQvdC+0LzRgyDRgtC40L/RgyDQtNC70Y8g0L/QsNGA0LDQvNC10YLRgNCwIGhpZGVFbXB0eVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZml4ZWRWYWx1ZSA9IGNvbHVtbi50eXBlICYmIGNvbHVtbi50eXBlID09IFwiaW50ZWdlclwiID8gTnVtYmVyKHJvd1tjb2x1bW4uaWRdKSA6IHJvd1tjb2x1bW4uaWRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbEluZGV4ID0gJ3RkLScgKyByb3dJbmRleCArICctJyArIGNvbHVtbkluZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9IGlzRXhpc3RzKGNvbHVtbiwgJ3Nob3cnKSA/IGNvbHVtbi5zaG93IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGlzRXhpc3RzKGNvbHVtbiwgJ3dpZHRoJykgPyBjb2x1bW4ud2lkdGggOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMudGQsICFkaXNwbGF5ID8geyBkaXNwbGF5OiAnbm9uZScgfSA6IHt9LCB7IHdpZHRoOiB3aWR0aCB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L/RgNC+0LLQtdGA0LjQvCDQvdCwINC30LDQtNCw0L3QvdGL0Lkg0YbQstC10YJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZXMuYm9vbENvbG91ciAmJiBjb2x1bW4udHlwZSAmJiBjb2x1bW4udHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IE9iamVjdC5hc3NpZ24oc3R5bGUsIHsgYmFja2dyb3VuZENvbG9yOiAhIXJvd1tjb2x1bW4uaWRdID8gc3R5bGVzLmJvb2xDb2xvdXIueWVzIDogc3R5bGVzLmJvb2xDb2xvdXIubm8gfSwgeyBjb2xvcjogISFyb3dbY29sdW1uLmlkXSA/IHN0eWxlcy5ib29sU3VtYm9sWyd5ZXMnXS5jb2xvciA6IHN0eWxlcy5ib29sU3VtYm9sWydubyddLmNvbG9yIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQtdGB0LvQuCDQt9Cw0LTQsNC9INGE0L7QvSDQsiDQutC+0L3RhNC40LPQtSDQs9GA0LjQtNCwXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLnllc0JhY2tncm91bmRDb2xvciAmJiAoISFyb3dbY29sdW1uLmlkXSB8fCByb3dbY29sdW1uLmlkXSA9PSAnVmlnYScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIHsgYmFja2dyb3VuZENvbG9yOiBjb2x1bW4ueWVzQmFja2dyb3VuZENvbG9yIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQntC6LCBWaWdhINC00LvRjyAg0YDQsNC/0L7RgNGC0LAg0L7QsSDQuNGB0L/QvtC70L3QtdC90LjQtdC1XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLm5vQmFja2dyb3VuZENvbG9yICYmICghcm93W2NvbHVtbi5pZF0gfHwgcm93W2NvbHVtbi5pZF0gPT0gJ09rJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbHVtbi5ub0JhY2tncm91bmRDb2xvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5udWxsQmFja2dyb3VuZENvbG9yICYmIHJvd1tjb2x1bW4uaWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbHVtbi5udWxsQmFja2dyb3VuZENvbG9yIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0YbQstC10YIsINC/0YDQuCDQt9C90LDRh9C10L3QuNC4IE5VTExcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZXMudGQgJiYgc3R5bGVzLnRkLm51bGxDb2xvdXIgJiYgcm93W2NvbHVtbi5pZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gT2JqZWN0LmFzc2lnbihzdHlsZSwgeyBiYWNrZ3JvdW5kQ29sb3I6IHN0eWxlcy50ZC5udWxsQ29sb3VyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQutCw0YHRgtC+0LzQvdC+0LUg0L7QsdGA0LDQsdC+0YLQutCwINGB0YLQuNC70LXQuSDQvdCwINC60LvQtdGC0LrRg1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNC5wcm9wcy5jdXN0b21fc3R5bGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXN0b21lU3R5bGUgPSBfdGhpczQucHJvcHMuY3VzdG9tX3N0eWxpbmcoY29sdW1uLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBjdXN0b21lU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQvtCx0LXRgNC10Lwg0LTQu9GPINC60L7QvdC60YDQtdGC0L3QvtCz0L4g0L/QvtC70Y8g0L/QsNGA0LDQvNC10YLRgCBoaWRlRW1wdHlWYWx1ZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNIaWRlRW1wdHlWYWx1ZSA9IGNvbHVtbi5oaWRlRW1wdHlWYWx1ZSA/IGNvbHVtbi5oaWRlRW1wdHlWYWx1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmhpZGVFbXB0eVZhbHVlICYmIHJvd1snbm9tX2lkJ10gJiYgcm93Wydub21faWQnXSA9PSA5OTk5OTk5OTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0hpZGVFbXB0eVZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogY2VsbEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGNlbGxJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246IGNvbHVtbi50eXBlICYmIGNvbHVtbi50eXBlID09PSAnYm9vbGVhbicgPyAnY2VudGVyJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXM0LmhhbmRsZUNlbGxDbGljay5iaW5kKF90aGlzNCwgcm93SW5kZXgsIGNvbHVtbi5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi50eXBlICYmIGNvbHVtbi50eXBlID09PSAnYm9vbGVhbicgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEhcm93W2NvbHVtbi5pZF0gPyBib29sVmFsdWVZZXMgOiByb3dbY29sdW1uLmlkXSA9PSBudWxsID8gYm9vbFZhbHVlTnVsbCA6IGJvb2xWYWx1ZU5vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IGlzSGlkZUVtcHR5VmFsdWUgJiYgIWZpeGVkVmFsdWUgPyBudWxsIDogcm93W2NvbHVtbi5pZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0JPQvtGC0L7QstC40YIg0LrQvtC80L/QvtC90LXQvdGCINC40YLQvtCz0L7QstCw0Y8g0YHRgtGA0L7QutCwINCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcGFyYW0gaXNIaWRkZW4gLSDQutC+0LvQvtC90LrQsCDQsdGD0LTQtdGCINGB0LrRgNGL0YLQsFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmVwYXJlVGFibGVGb290ZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZVRhYmxlRm9vdGVyKGlzSGlkZGVuKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZ3JpZENvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckluZGV4ID0gJ3RkLScgKyBpbmRleDtcblxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJTdHlsZSA9ICd0ZCc7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9IGlzRXhpc3RzKGNvbHVtbiwgJ3Nob3cnKSA/IGNvbHVtbi5zaG93IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBpc0V4aXN0cyhjb2x1bW4sICd3aWR0aCcpID8gY29sdW1uLndpZHRoIDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlc1toZWFkZXJTdHlsZV0sICFkaXNwbGF5ID8geyBkaXNwbGF5OiAnbm9uZScgfSA6IHt9LCB7IHdpZHRoOiB3aWR0aCB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJJbmRleCA9IF90aGlzNS5wcm9wcy5zdWJ0b3RhbHMuaW5kZXhPZihjb2x1bW4uaWQpO1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAoc3ViSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IF90aGlzNS5nZXRTdW0oY29sdW1uLmlkLCBjb2x1bW4udHlwZSAmJiBjb2x1bW4udHlwZSA9PSAnaW50ZWdlcicgPyAwIDogMik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8g0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0LLQuNC00LjQvNC+0YHRgtGMXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogaGVhZGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGhlYWRlckluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCT0L7RgtC+0LLQuNGCINC60L7QvNC/0L7QvdC10L3RgiDQt9Cw0LPQvtC70L7QstC+0Log0LPRgNC40LTQsFxyXG4gICAgICAgICAqIEBwYXJhbSBpc0hpZGRlbiAtINC60L7Qu9C+0L3QutCwINCx0YPQtNC10YIg0YHQutGA0YvRgtCwXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ByZXBhcmVUYWJsZUhlYWRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlVGFibGVIZWFkZXIoaXNIaWRkZW4pIHtcbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyDQtdGB0LvQuCDQtdGB0YLRjCDQvtC/0YbQuNGPINCy0YvQsdC+0YAsINGC0L4g0LTQvtCx0LDQstC40Lwg0LIg0LzQsNGB0YHQuNCyINC60L7Qu9C+0L3QutGDINGBINC/0L7Qu9C10LwgdGlja2VkXG4gICAgICAgICAgICB2YXIgZ3JpZENvbHVtbnMgPSB0aGlzLnByb3BzLmdyaWRDb2x1bW5zLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJvdy5pZCA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnNob3cgPSBfdGhpczYucHJvcHMuaXNTZWxlY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByb3c7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGdyaWRDb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJJbmRleCA9ICd0aC0nICsgaW5kZXggKyBjb2x1bW4uaWQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyU3R5bGUgPSBpc0hpZGRlbiA/ICd0aEhpZGRlbicgOiAndGgnO1xuXG4gICAgICAgICAgICAgICAgLy8g0L/RgNC+0LLQtdGA0LrQsCDQvdCwINGB0YLQuNC70Ywg0LfQsNCz0L7Qu9C+0LLQutCwLCDQvdCwINGE0L7QvdGCXG4gICAgICAgICAgICAgICAgdmFyIGZvbnRDb2xvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbHVtbi5zaG93Qm9sZCAmJiBzdHlsZXNbaGVhZGVyU3R5bGVdLmJvbGRDb2xvciA/IHN0eWxlc1toZWFkZXJTdHlsZV0uYm9sZENvbG9yIDogc3R5bGVzW2hlYWRlclN0eWxlXS5jb2xvclxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9IGlzRXhpc3RzKGNvbHVtbiwgJ3Nob3cnKSA/IGNvbHVtbi5zaG93IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBpc0V4aXN0cyhjb2x1bW4sICd3aWR0aCcpID8gY29sdW1uLndpZHRoIDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlc1toZWFkZXJTdHlsZV0sICFkaXNwbGF5ID8geyBkaXNwbGF5OiAnbm9uZScgfSA6IHt9LCB7IHdpZHRoOiB3aWR0aCB9LCBmb250Q29sb3IpLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb2x1bW4gPSBfdGhpczYuc3RhdGUuYWN0aXZlQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBpY29uVHlwZSA9IF90aGlzNi5zdGF0ZS5zb3J0LmRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdHlsZUFzYyA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlcy5pbWFnZSwgYWN0aXZlQ29sdW1uID09PSBjb2x1bW4uaWQgJiYgaWNvblR5cGUgPT09ICdhc2MnID8ge30gOiB7IGRpc3BsYXk6ICdub25lJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdHlsZURlc2MgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuaW1hZ2UsIGFjdGl2ZUNvbHVtbiA9PT0gY29sdW1uLmlkICYmIGljb25UeXBlID09PSAnZGVzYycgPyB7fSA6IHsgZGlzcGxheTogJ25vbmUnIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8g0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0LLQuNC00LjQvNC+0YHRgtGMXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0aCcsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogaGVhZGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGhlYWRlckluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXM2LmhhbmRsZUdyaWRIZWFkZXJDbGljay5iaW5kKF90aGlzNiwgY29sdW1uLmlkKSB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFRleHRWYWx1ZShjb2x1bW4ubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgaXNIaWRkZW4gPyBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlQXNjJywgc3R5bGU6IGltYWdlU3R5bGVBc2MsIHNyYzogc3R5bGVzLmljb25zWydhc2MnXSwgYWx0OiAnYXNjJyB9KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGlzSGlkZGVuID8gUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZURlc2MnLCBzdHlsZTogaW1hZ2VTdHlsZURlc2MsIHNyYzogc3R5bGVzLmljb25zWydkZXNjJ10sIGFsdDogJ2Rlc2MnIH0pIDogbnVsbFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINGA0LDRgdGH0LXRgiDQuNGC0L7Qs9C+0LJcclxuICAgICAgICAgKiBAcGFyYW0gY29sdW1uRmllbGRcclxuICAgICAgICAgKiBAcGFyYW0gZGVjXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0U3VtJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1bShjb2x1bW5GaWVsZCwgZGVjKSB7XG4gICAgICAgICAgICB2YXIgdG90YWwgPSAwO1xuICAgICAgICAgICAgdmFyIHN1bW1hID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmdyaWREYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZ3JpZERhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bW1hID0gcm93W2NvbHVtbkZpZWxkXSAmJiAhaXNOYU4ocm93W2NvbHVtbkZpZWxkXSkgPyBOdW1iZXIocm93W2NvbHVtbkZpZWxkXSkgOiByb3dbY29sdW1uRmllbGRdID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsID0gdG90YWwgKyBOdW1iZXIoc3VtbWEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG90YWwudG9GaXhlZChkZWMgPyBkZWMgOiAwKTtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dFByb3BzO1xuICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KG5leHRQcm9wcy5ncmlkRGF0YSkgIT09IEpTT04uc3RyaW5naWZ5KHByZXZTdGF0ZS5ncmlkRGF0YSkgfHwgSlNPTi5zdHJpbmdpZnkobmV4dFByb3BzLmdyaWRDb2x1bW5zKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0YXRlLmdyaWRDb2x1bW5zKSB8fCBuZXh0UHJvcHMuZ3JpZERhdGEubGVuZ3RoICE9PSBwcmV2U3RhdGUuZ3JpZERhdGEubGVuZ3RoIHx8IG5leHRQcm9wcy5pc1NlbGVjdCAhPT0gcHJldlN0YXRlLmlzU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZ3JpZERhdGE6IG5leHRQcm9wcy5ncmlkRGF0YSB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERhdGFHcmlkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5EYXRhR3JpZC5wcm9wVHlwZXMgPSB7XG4gICAgZ3JpZENvbHVtbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgd2lkdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHNob3c6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWyd0ZXh0JywgJ251bWJlcicsICdpbnRlZ2VyJywgJ2RhdGUnLCAnc3RyaW5nJywgJ3NlbGVjdCcsICdib29sZWFuJ10pXG4gICAgfSkpLmlzUmVxdWlyZWQsXG4gICAgZ3JpZERhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlQWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRGJsQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uSGVhZGVyQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGN1c3RvbV9zdHlsaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBhY3RpdmVSb3c6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGFuZGxlR3JpZENlbGxDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2hvd1Rvb2xCYXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHN1YnRvdGFsczogUHJvcFR5cGVzLmFycmF5XG59O1xuXG5EYXRhR3JpZC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZ3JpZENvbHVtbnM6IFtdLFxuICAgIGdyaWREYXRhOiBbXSxcbiAgICBzdHlsZToge30sXG4gICAgc2hvd1Rvb2xCYXI6IGZhbHNlLFxuICAgIGlzRm9yVXBkYXRlOiBmYWxzZSxcbiAgICBjdXN0b21fc3R5bGluZzogbnVsbCxcbiAgICBzdWJ0b3RhbHM6IFtdXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFHcmlkO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXRhLWdyaWQvZGF0YS1ncmlkLmpzeFxuLy8gbW9kdWxlIGlkID0gMTgzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci1zdHlsZXMnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgSUNPTiA9ICdkZWxldGUnO1xuXG52YXIgQnV0dG9uUmVnaXN0ZXJEZWxldGUgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQnV0dG9uUmVnaXN0ZXJEZWxldGUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25SZWdpc3RlckRlbGV0ZShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uUmVnaXN0ZXJEZWxldGUpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uUmVnaXN0ZXJEZWxldGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWdpc3RlckRlbGV0ZSkpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uUmVnaXN0ZXJEZWxldGUsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2xpY2soJ2RlbGV0ZScpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnS3VzdHV0YScsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkRlbGV0ZScsXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b25SZWdpc3RlckRlbGV0ZTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbi8qXHJcbkJ1dHRvblJlZ2lzdGVyRGVsZXRlLnByb3BUeXBlcyA9IHtcclxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcclxufVxyXG4qL1xuXG5CdXR0b25SZWdpc3RlckRlbGV0ZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHNob3c6IHRydWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVnaXN0ZXJEZWxldGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZGVsZXRlL2J1dHRvbi1yZWdpc3Rlci1kZWxldGUuanN4XG4vLyBtb2R1bGUgaWQgPSAxODRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi4vbW9kYWxQYWdlLmpzeCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4uL21vZGFscGFnZS1kZWxldGUvbW9kYWxwYWdlLWRlbGV0ZS1zdHlsZXMnKTtcblxudmFyIE1vZGFsUGFnZURlbGV0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhNb2RhbFBhZ2VEZWxldGUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE1vZGFsUGFnZURlbGV0ZShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxQYWdlRGVsZXRlKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTW9kYWxQYWdlRGVsZXRlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW9kYWxQYWdlRGVsZXRlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvdzogX3RoaXMucHJvcHMuc2hvd1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLy8gd2lsbCB1cGRhdGUgc3RhdGUgaWYgcHJvcHMgY2hhbmdlZFxuXG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWxQYWdlRGVsZXRlLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIG1vZGFsT2JqZWN0cyA9IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ107XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICB7IHJlZjogJ21vZGFsUGFnZScsXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLnByb3BzLm1vZGFsUGFnZUJ0bkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnN0YXRlLnNob3csXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdEZWxldGUgZG9jdW1lbnQnIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbiB9KSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnbWVzc2FnZScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcgS2FzIGt1c3R1dGEgZG9rdW1lbnQgPyAnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuc2hvdyAhPT0gcHJldlN0YXRlLnNob3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzaG93OiBuZXh0UHJvcHMuc2hvdyB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE1vZGFsUGFnZURlbGV0ZTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG4vKlxyXG5Nb2RhbFBhZ2VEZWxldGUucHJvcFR5cGVzID0ge1xyXG4gICAgbW9kYWxQYWdlQnRuQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcclxufVxyXG4qL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTW9kYWxQYWdlRGVsZXRlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxwYWdlLWRlbGV0ZS9tb2RhbFBhZ2UtZGVsZXRlLmpzeFxuLy8gbW9kdWxlIGlkID0gMTg1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17aWNvbjonL2ltYWdlcy9pY29ucy9kZWxldGUucG5nJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtZGVsZXRlL21vZGFscGFnZS1kZWxldGUtc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgcmFkaXVtID0gcmVxdWlyZSgncmFkaXVtJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi9zdHlsZXMnKTtcblxudmFyIElucHV0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKElucHV0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbnB1dChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IEJvb2xlYW4ocHJvcHMudmFsdWUpLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHByb3BzLnJlYWRPbmx5LFxuICAgICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnNbJ2NoZWNrYm94J10uY2hlY2tlZCA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGUudGFyZ2V0LmNoZWNrZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogdmFsdWUgfSk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5yZWFkT25seSAmJiB0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLnByb3BzLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dFN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLmlucHV0LCB0aGlzLnByb3BzLndpZHRoID8geyB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCB9IDoge30sIHRoaXMuc3RhdGUucmVhZE9ubHkgPyBzdHlsZXMucmVhZE9ubHkgOiB7fSk7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwcGVyIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsLCBodG1sRm9yOiB0aGlzLnByb3BzLm5hbWUsIHJlZjogJ2xhYmVsJyB9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnRpdGxlXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogaW5wdXRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRoaXMuc3RhdGUucmVhZE9ubHksXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5zdGF0ZS5yZWFkT25seVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0YPRgdGC0LDQvdC+0LLQuNGCINGE0L7QutGD0YEg0L3QsCDRjdC70LXQvNC10L3RgtGLXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2ZvY3VzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgICAgICAgdGhpcy5yZWZzWydjaGVja2JveCddLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPT0gcHJldlN0YXRlLnZhbHVlIHx8IG5leHRQcm9wcy5yZWFkT25seSAhPT0gcHJldlN0YXRlLnJlYWRPbmx5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSwgcmVhZE9ubHk6IG5leHRQcm9wcy5yZWFkT25seSB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIElucHV0O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuSW5wdXQucHJvcFR5cGVzID0ge1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgdmFsdWU6IGZhbHNlLFxuICAgIHRpdGxlOiAnJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSByYWRpdW0oSW5wdXQpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9pbnB1dC1jaGVja2JveC9pbnB1dC1jaGVja2JveC5qc3hcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2lucHV0OnsnOmZvY3VzJzp7YmFja2dyb3VuZENvbG9yOidsaWdodHBpbmsnfX0scmVhZE9ubHk6e2JhY2tncm91bmRDb2xvcjonI0YzRUZFRid9LHdyYXBwZXI6e21hcmdpbjonNXB4JyxkaXNwbGF5OidmbGV4Jyx3aWR0aDonOTUlJ30sbGFiZWw6e3dpZHRoOiczMCUnLG1hcmdpbjonNXB4J319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9pbnB1dC1jaGVja2JveC9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLkFMTF9QUklOVEFCTEVfS0VZUz1leHBvcnRzLkFMTF9LRVlTPWV4cG9ydHMuS2V5cz1leHBvcnRzLnNldEJpbmRpbmc9ZXhwb3J0cy5rZXlkb3duU2NvcGVkPWV4cG9ydHMuZGVmYXVsdD11bmRlZmluZWQ7dmFyIF9kZWNvcmF0b3JzPXJlcXVpcmUoJy4vZGVjb3JhdG9ycycpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdkZWZhdWx0Jyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjb3JhdG9ycykuZGVmYXVsdDt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsJ2tleWRvd25TY29wZWQnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBfZGVjb3JhdG9ycy5rZXlkb3duU2NvcGVkO319KTt2YXIgX3N0b3JlPXJlcXVpcmUoJy4vc3RvcmUnKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywnc2V0QmluZGluZycse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIF9zdG9yZS5zZXRCaW5kaW5nO319KTt2YXIgX2tleXM9cmVxdWlyZSgnLi9saWIva2V5cycpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdLZXlzJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cykuZGVmYXVsdDt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsJ0FMTF9LRVlTJyx7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gX2tleXMuQUxMX0tFWVM7fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCdBTExfUFJJTlRBQkxFX0tFWVMnLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiBfa2V5cy5BTExfUFJJTlRBQkxFX0tFWVM7fX0pO3JlcXVpcmUoJy4vbGliL2FycmF5LmZyb20nKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIF90eXBlb2YyPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMua2V5ZG93blNjb3BlZD11bmRlZmluZWQ7dmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKT09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iaj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihvYmopO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YyKG9iaik7fTsvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgZGVjb3JhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL3ZhciBfY2xhc3NfZGVjb3JhdG9yPXJlcXVpcmUoJy4vY2xhc3NfZGVjb3JhdG9yJyk7dmFyIF9jbGFzc19kZWNvcmF0b3IyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzX2RlY29yYXRvcik7dmFyIF9tZXRob2RfZGVjb3JhdG9yPXJlcXVpcmUoJy4vbWV0aG9kX2RlY29yYXRvcicpO3ZhciBfbWV0aG9kX2RlY29yYXRvcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWV0aG9kX2RlY29yYXRvcik7dmFyIF9tZXRob2RfZGVjb3JhdG9yX3Njb3BlZD1yZXF1aXJlKCcuL21ldGhvZF9kZWNvcmF0b3Jfc2NvcGVkJyk7dmFyIF9tZXRob2RfZGVjb3JhdG9yX3Njb3BlZDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWV0aG9kX2RlY29yYXRvcl9zY29wZWQpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9LyoqXG4gKiBub29wRGVjb3JhdG9yXG4gKlxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9IFJldHVybnMgYHVuZGVmaW5lZGAgc28gdGhhdCB0aGUgb3JpZ2luYWwgdW5kZWNvcmF0ZWQgaW5zdGFuY2UvbWV0aG9kIGlzIHVzZWRcbiAqL2Z1bmN0aW9uIG5vb3BEZWNvcmF0b3IoKXtyZXR1cm4gdW5kZWZpbmVkO30vKipcbiAqIF9kZWNvcmF0b3JcbiAqXG4gKiBAYWNjZXNzIHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZEZuIFRoZSBtZXRob2Qgd3JhcHBlciB0byBkZWxlZ2F0ZSB0bywgYmFzZWQgb24gd2hldGhlciB1c2VyIGhhcyBzcGVjaWZpZWQgYSBzY29wZWQgZGVjb3JhdG9yIG9yIG5vdFxuICogQHBhcmFtIHtBcnJheX0gLi4uYXJncyBSZW1haW5kZXIgb2YgYXJndW1lbnRzIHBhc3NlZCBpblxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBkZWNvcmF0ZWQgY2xhc3Mgb3IgbWV0aG9kXG4gKi9mdW5jdGlvbiBfZGVjb3JhdG9yKG1ldGhvZEZuKXtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4+MT9fbGVuLTE6MCksX2tleT0xO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleS0xXT1hcmd1bWVudHNbX2tleV07fS8vIGNoZWNrIHRoZSBmaXJzdCBhcmd1bWVudCB0byBzZWUgaWYgaXQncyBhIHVzZXItc3VwcGxpZWQga2V5Y29kZSBvciBhcnJheVxuLy8gb2Yga2V5Y29kZXMsIG9yIGlmIGl0J3MgdGhlIHdyYXBwZWQgY2xhc3Mgb3IgbWV0aG9kXG52YXIgdGVzdEFyZz1hcmdzWzBdO3ZhciBpc0FycmF5PUFycmF5LmlzQXJyYXkodGVzdEFyZyk7Ly8gaWYgdGhlIHRlc3QgYXJndW1lbnQgaXMgbm90IGFuIG9iamVjdCBvciBmdW5jdGlvbiwgaXQgaXMgdXNlci1zdXBwbGllZFxuLy8ga2V5Y29kZXMuIGVsc2UgdGhlcmUgYXJlIG5vIGFyZ3VtZW50cyBhbmQgaXQncyBqdXN0IHRoZSB3cmFwcGVkIGNsYXNzXG5pZihpc0FycmF5fHx+WydzdHJpbmcnLCdudW1iZXInLCdzeW1ib2wnXS5pbmRleE9mKHR5cGVvZiB0ZXN0QXJnPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZih0ZXN0QXJnKSkpe3ZhciBrZXlzPWlzQXJyYXk/dGVzdEFyZzphcmdzOy8vIHJldHVybiB0aGUgZGVjb3JhdG9yIGZ1bmN0aW9uLCB3aGljaCBvbiB0aGUgbmV4dCBjYWxsIHdpbGwgbG9vayBmb3Jcbi8vIHRoZSBwcmVzZW5jZSBvZiBhIG1ldGhvZCBuYW1lIHRvIGRldGVybWluZSBpZiB0aGlzIGlzIGEgd3JhcHBlZCBtZXRob2Rcbi8vIG9yIGNvbXBvbmVudFxucmV0dXJuIGZ1bmN0aW9uKHRhcmdldCxtZXRob2ROYW1lLGRlc2NyaXB0b3Ipe3JldHVybiBtZXRob2ROYW1lP21ldGhvZEZuKHt0YXJnZXQ6dGFyZ2V0LGRlc2NyaXB0b3I6ZGVzY3JpcHRvcixrZXlzOmtleXN9KTooMCxfY2xhc3NfZGVjb3JhdG9yMi5kZWZhdWx0KSh0YXJnZXQsa2V5cyk7fTt9ZWxzZXt2YXIgV3JhcHBlZENvbXBvbmVudD1hcmdzWzBdO3ZhciBtZXRob2ROYW1lPWFyZ3NbMV07Ly8gbWV0aG9kIGRlY29yYXRvcnMgd2l0aG91dCBrZXljb2RlICh3aGljaCkgYXJndW1lbnRzIGFyZSBub3QgYWxsb3dlZC5cbmlmKFdyYXBwZWRDb21wb25lbnQmJiFtZXRob2ROYW1lKXtyZXR1cm4gX2NsYXNzX2RlY29yYXRvcjIuZGVmYXVsdC5hcHBseSh1bmRlZmluZWQsYXJncyk7fWVsc2V7Y29uc29sZS53YXJuKG1ldGhvZE5hbWUrJzogTWV0aG9kIGRlY29yYXRvcnMgbXVzdCBoYXZlIGtleWNvZGUgYXJndW1lbnRzLCBzbyB0aGUgZGVjb3JhdG9yIGZvciB0aGlzIG1ldGhvZCB3aWxsIG5vdCBkbyBhbnl0aGluZycpO3JldHVybiBub29wRGVjb3JhdG9yO319fS8qKlxuICoga2V5ZG93blNjb3BlZFxuICpcbiAqIE1ldGhvZCBkZWNvcmF0b3IgdGhhdCB3aWxsIGxvb2sgZm9yIGNoYW5nZXMgdG8gaXRzIHRhcmdldGVkIGNvbXBvbmVudCdzXG4gKiBga2V5ZG93bmAgcHJvcHMgdG8gZGVjaWRlIHdoZW4gdG8gdHJpZ2dlciwgcmF0aGVyIHRoYW4gcmVzcG9uZGluZyBkaXJlY3RseVxuICogdG8ga2V5ZG93biBldmVudHMuIFRoaXMgbGV0cyB5b3Ugc3BlY2lmeSBhIEBrZXlkb3duIGRlY29yYXRlZCBjbGFzcyBoaWdoZXJcbiAqIHVwIGluIHRoZSB2aWV3IGhpZXJhcmNoeSBmb3IgbGFyZ2VyIHNjb3Bpbmcgb2Yga2V5ZG93biBldmVudHMsIG9yIGZvclxuICogcHJvZ3JhbW1hdGljYWxseSBzZW5kaW5nIGtleWRvd24gZXZlbnRzIGFzIHByb3BzIGludG8gdGhlIGNvbXBvbmVudHMgaW4gb3JkZXJcbiAqIHRvIHRyaWdnZXIgZGVjb3JhdGVkIG1ldGhvZHMgd2l0aCBtYXRjaGluZyBrZXlzLlxuICpcbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge0FycmF5fSAuLi5hcmdzICBBbGwgKG9yIG5vKSBhcmd1bWVudHMgcGFzc2VkIGluIGZyb20gZGVjb3JhdGlvblxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBkZWNvcmF0ZWQgY2xhc3Mgb3IgbWV0aG9kXG4gKi9mdW5jdGlvbiBrZXlkb3duU2NvcGVkKCl7Zm9yKHZhciBfbGVuMj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbjIpLF9rZXkyPTA7X2tleTI8X2xlbjI7X2tleTIrKyl7YXJnc1tfa2V5Ml09YXJndW1lbnRzW19rZXkyXTt9cmV0dXJuIF9kZWNvcmF0b3IuYXBwbHkodW5kZWZpbmVkLFtfbWV0aG9kX2RlY29yYXRvcl9zY29wZWQyLmRlZmF1bHRdLmNvbmNhdChhcmdzKSk7fS8qKlxuICoga2V5ZG93blxuICpcbiAqIFRoZSBtYWluIGRlY29yYXRvciBhbmQgZGVmYXVsdCBleHBvcnQsIGhhbmRsZXMgYm90aCBjbGFzc2VzIGFuZCBtZXRob2RzLlxuICpcbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge0FycmF5fSAuLi5hcmdzICBBbGwgKG9yIG5vKSBhcmd1bWVudHMgcGFzc2VkIGluIGZyb20gZGVjb3JhdGlvblxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBkZWNvcmF0ZWQgY2xhc3Mgb3IgbWV0aG9kXG4gKi9mdW5jdGlvbiBrZXlkb3duKCl7Zm9yKHZhciBfbGVuMz1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbjMpLF9rZXkzPTA7X2tleTM8X2xlbjM7X2tleTMrKyl7YXJnc1tfa2V5M109YXJndW1lbnRzW19rZXkzXTt9cmV0dXJuIF9kZWNvcmF0b3IuYXBwbHkodW5kZWZpbmVkLFtfbWV0aG9kX2RlY29yYXRvcjIuZGVmYXVsdF0uY29uY2F0KGFyZ3MpKTt9ZXhwb3J0cy5kZWZhdWx0PWtleWRvd247ZXhwb3J0cy5rZXlkb3duU2NvcGVkPWtleWRvd25TY29wZWQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWtleWRvd24vZGlzdC9kZWNvcmF0b3JzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxOTBcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3ZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTt2YXIgX3JlYWN0PXJlcXVpcmUoJ3JlYWN0Jyk7dmFyIF9yZWFjdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO3ZhciBfc3RvcmU9cmVxdWlyZSgnLi4vc3RvcmUnKTt2YXIgc3RvcmU9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3N0b3JlKTt2YXIgX2V2ZW50X2hhbmRsZXJzPXJlcXVpcmUoJy4uL2V2ZW50X2hhbmRsZXJzJyk7dmFyIF9rZXlzPXJlcXVpcmUoJy4uL2xpYi9rZXlzJyk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKXtpZihvYmomJm9iai5fX2VzTW9kdWxlKXtyZXR1cm4gb2JqO31lbHNle3ZhciBuZXdPYmo9e307aWYob2JqIT1udWxsKXtmb3IodmFyIGtleSBpbiBvYmope2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosa2V5KSluZXdPYmpba2V5XT1vYmpba2V5XTt9fW5ld09iai5kZWZhdWx0PW9iajtyZXR1cm4gbmV3T2JqO319ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYoKHR5cGVvZiBjYWxsPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2YoY2FsbCkpPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrKHR5cGVvZiBzdXBlckNsYXNzPT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2Yoc3VwZXJDbGFzcykpKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO30vKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgY29tcG9uZW50V3JhcHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLy8qKlxuICogY29tcG9uZW50V3JhcHBlclxuICpcbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gV3JhcHBlZENvbXBvbmVudCBSZWFjdCBjb21wb25lbnQgY2xhc3MgdG8gYmUgd3JhcHBlZFxuICogQHBhcmFtIHthcnJheX0gW2tleXNdIFRoZSBrZXkocykgYm91bmQgdG8gdGhlIGNsYXNzXG4gKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgZGVjb3JhdGVkIGNsYXNzXG4gKi9mdW5jdGlvbiBjb21wb25lbnRXcmFwcGVyKFdyYXBwZWRDb21wb25lbnQpe3ZhciBrZXlzPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTpfa2V5cy5BTExfS0VZUzt2YXIgS2V5Qm9hcmRIZWxwZXI9ZnVuY3Rpb24oX1JlYWN0JENvbXBvbmVudCl7X2luaGVyaXRzKEtleUJvYXJkSGVscGVyLF9SZWFjdCRDb21wb25lbnQpO2Z1bmN0aW9uIEtleUJvYXJkSGVscGVyKHByb3BzKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxLZXlCb2FyZEhlbHBlcik7dmFyIF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKEtleUJvYXJkSGVscGVyLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKEtleUJvYXJkSGVscGVyKSkuY2FsbCh0aGlzLHByb3BzKSk7X3RoaXMuc3RhdGU9e2V2ZW50Om51bGx9O3JldHVybiBfdGhpczt9X2NyZWF0ZUNsYXNzKEtleUJvYXJkSGVscGVyLFt7a2V5Oidjb21wb25lbnREaWRNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKXsoMCxfZXZlbnRfaGFuZGxlcnMub25Nb3VudCkodGhpcyk7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7KDAsX2V2ZW50X2hhbmRsZXJzLm9uVW5tb3VudCkodGhpcyk7fX0se2tleTonaGFuZGxlS2V5RG93bicsdmFsdWU6ZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCl7dmFyIF90aGlzMj10aGlzOy8vIHRvIHNpbXVsYXRlIGEga2V5cHJlc3MsIHNldCB0aGUgZXZlbnQgYW5kIHRoZW4gY2xlYXIgaXQgaW4gdGhlIGNhbGxiYWNrXG50aGlzLnNldFN0YXRlKHtldmVudDpldmVudH0sZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMyLnNldFN0YXRlKHtldmVudDpudWxsfSk7fSk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLHtrZXlkb3duOnRoaXMuc3RhdGV9KSk7fX1dKTtyZXR1cm4gS2V5Qm9hcmRIZWxwZXI7fShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtzdG9yZS5zZXRCaW5kaW5nKHtrZXlzOltdLmNvbmNhdChrZXlzKSxmbjpLZXlCb2FyZEhlbHBlci5wcm90b3R5cGUuaGFuZGxlS2V5RG93bix0YXJnZXQ6S2V5Qm9hcmRIZWxwZXIucHJvdG90eXBlfSk7cmV0dXJuIEtleUJvYXJkSGVscGVyO31leHBvcnRzLmRlZmF1bHQ9Y29tcG9uZW50V3JhcHBlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qta2V5ZG93bi9kaXN0L2RlY29yYXRvcnMvY2xhc3NfZGVjb3JhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9zbGljZWRUb0FycmF5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsaSl7dmFyIF9hcnI9W107dmFyIF9uPXRydWU7dmFyIF9kPWZhbHNlO3ZhciBfZT11bmRlZmluZWQ7dHJ5e2Zvcih2YXIgX2k9YXJyW1N5bWJvbC5pdGVyYXRvcl0oKSxfczshKF9uPShfcz1faS5uZXh0KCkpLmRvbmUpO19uPXRydWUpe19hcnIucHVzaChfcy52YWx1ZSk7aWYoaSYmX2Fyci5sZW5ndGg9PT1pKWJyZWFrO319Y2F0Y2goZXJyKXtfZD10cnVlO19lPWVycjt9ZmluYWxseXt0cnl7aWYoIV9uJiZfaVtcInJldHVyblwiXSlfaVtcInJldHVyblwiXSgpO31maW5hbGx5e2lmKF9kKXRocm93IF9lO319cmV0dXJuIF9hcnI7fXJldHVybiBmdW5jdGlvbihhcnIsaSl7aWYoQXJyYXkuaXNBcnJheShhcnIpKXtyZXR1cm4gYXJyO31lbHNlIGlmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSl7cmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLGkpO31lbHNle3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO319O30oKTtleHBvcnRzLl9yZXNldFN0b3JlPV9yZXNldFN0b3JlO2V4cG9ydHMuYWN0aXZhdGU9YWN0aXZhdGU7ZXhwb3J0cy5kZWxldGVJbnN0YW5jZT1kZWxldGVJbnN0YW5jZTtleHBvcnRzLmZpbmRCaW5kaW5nRm9yRXZlbnQ9ZmluZEJpbmRpbmdGb3JFdmVudDtleHBvcnRzLmdldEJpbmRpbmc9Z2V0QmluZGluZztleHBvcnRzLmdldEluc3RhbmNlcz1nZXRJbnN0YW5jZXM7ZXhwb3J0cy5pc0VtcHR5PWlzRW1wdHk7ZXhwb3J0cy5zZXRCaW5kaW5nPXNldEJpbmRpbmc7dmFyIF9tYXRjaF9rZXlzPXJlcXVpcmUoJy4vbGliL21hdGNoX2tleXMnKTt2YXIgX21hdGNoX2tleXMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoX2tleXMpO3ZhciBfcGFyc2Vfa2V5cz1yZXF1aXJlKCcuL2xpYi9wYXJzZV9rZXlzJyk7dmFyIF9wYXJzZV9rZXlzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJzZV9rZXlzKTt2YXIgX3V1aWQ9cmVxdWlyZSgnLi9saWIvdXVpZCcpO3ZhciBfdXVpZDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXVpZCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKXtpZihBcnJheS5pc0FycmF5KGFycikpe2Zvcih2YXIgaT0wLGFycjI9QXJyYXkoYXJyLmxlbmd0aCk7aTxhcnIubGVuZ3RoO2krKyl7YXJyMltpXT1hcnJbaV07fXJldHVybiBhcnIyO31lbHNle3JldHVybiBBcnJheS5mcm9tKGFycik7fX0vKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbW9kdWxlIHN0b3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi8vKipcbiAqIHByaXZhdGVcbiAqXG4gKi8vLyBkaWN0IGZvciBjbGFzcyBwcm90b3R5cGVzID0+IGJpbmRpbmdzXG52YXIgX2hhbmRsZXJzPW5ldyBNYXAoKTsvLyBhbGwgbW91bnRlZCBpbnN0YW5jZXMgdGhhdCBoYXZlIGtleWJpbmRpbmdzXG52YXIgX2luc3RhbmNlcz1uZXcgU2V0KCk7Ly8gZm9yIHRlc3RpbmdcbmZ1bmN0aW9uIF9yZXNldFN0b3JlKCl7X2hhbmRsZXJzLmNsZWFyKCk7X2luc3RhbmNlcy5jbGVhcigpO30vKipcbiAqIGFjdGl2YXRlXG4gKlxuICogQGFjY2VzcyBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnN0YW5jZSBJbnN0YW50aWF0ZWQgY2xhc3MgdGhhdCBleHRlbmRlZCBSZWFjdC5Db21wb25lbnQsIHRvIGJlIGZvY3VzZWQgdG8gcmVjZWl2ZSBrZXlkb3duIGV2ZW50c1xuICovZnVuY3Rpb24gYWN0aXZhdGUoaW5zdGFuY2VzKXt2YXIgaW5zdGFuY2VzQXJyYXk9W10uY29uY2F0KGluc3RhbmNlcyk7Ly8gaWYgbm8gY29tcG9uZW50cyB3ZXJlIGZvdW5kIGFzIGFuY2VzdG9ycyBvZiB0aGUgZXZlbnQgdGFyZ2V0LFxuLy8gZWZmZWN0aXZlbHkgZGVhY3RpdmF0ZSBrZXlkb3duIGhhbmRsaW5nIGJ5IGNhcHBpbmcgdGhlIHNldCBvZiBpbnN0YW5jZXNcbi8vIHdpdGggYG51bGxgLlxuaWYoIWluc3RhbmNlc0FycmF5Lmxlbmd0aCl7X2luc3RhbmNlcy5hZGQobnVsbCk7fWVsc2V7X2luc3RhbmNlcy5kZWxldGUobnVsbCk7Ly8gZGVsZXRpbmcgYW5kIHRoZW4gYWRkaW5nIHRoZSBpbnN0YW5jZShzKSBoYXMgdGhlIGVmZmVjdCBvZiBzb3J0aW5nIHRoZSBzZXRcbi8vIGFjY29yZGluZyB0byBpbnN0YW5jZSBhY3RpdmF0aW9uIChhc2NlbmRpbmcpXG5pbnN0YW5jZXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGluc3RhbmNlKXtfaW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7X2luc3RhbmNlcy5hZGQoaW5zdGFuY2UpO30pO319Oy8qKlxuICogZGVsZXRlSW5zdGFuY2VcbiAqXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCBJbnN0YW50aWF0ZWQgY2xhc3MgdGhhdCBleHRlbmRlZCBSZWFjdC5Db21wb25lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSB2YWx1ZSBzZXQuaGFzKCB0YXJnZXQgKSB3b3VsZCBoYXZlIHJldHVybmVkIHByaW9yIHRvIGRlbGV0aW9uXG4gKi9mdW5jdGlvbiBkZWxldGVJbnN0YW5jZSh0YXJnZXQpe19pbnN0YW5jZXMuZGVsZXRlKHRhcmdldCk7fTtmdW5jdGlvbiBmaW5kQmluZGluZ0ZvckV2ZW50KGV2ZW50KXtpZighX2luc3RhbmNlcy5oYXMobnVsbCkpe3ZhciBrZXlNYXRjaGVzRXZlbnQ9ZnVuY3Rpb24ga2V5TWF0Y2hlc0V2ZW50KGtleVNldCl7cmV0dXJuKDAsX21hdGNoX2tleXMyLmRlZmF1bHQpKHtrZXlTZXQ6a2V5U2V0LGV2ZW50OmV2ZW50fSk7fTsvLyBsb29wIHRocm91Z2ggaW5zdGFuY2VzIGluIHJldmVyc2UgYWN0aXZhdGlvbiBvcmRlciBzbyB0aGF0IG1vc3Rcbi8vIHJlY2VudGx5IGFjdGl2YXRlZCBpbnN0YW5jZSBnZXRzIGZpcnN0IGRpYnMgb24gZXZlbnRcbnZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uPXRydWU7dmFyIF9kaWRJdGVyYXRvckVycm9yPWZhbHNlO3ZhciBfaXRlcmF0b3JFcnJvcj11bmRlZmluZWQ7dHJ5e2Zvcih2YXIgX2l0ZXJhdG9yPVtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX2luc3RhbmNlcykpLnJldmVyc2UoKVtTeW1ib2wuaXRlcmF0b3JdKCksX3N0ZXA7IShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uPShfc3RlcD1faXRlcmF0b3IubmV4dCgpKS5kb25lKTtfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uPXRydWUpe3ZhciBpbnN0YW5jZT1fc3RlcC52YWx1ZTt2YXIgYmluZGluZ3M9Z2V0QmluZGluZyhpbnN0YW5jZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpO3ZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMj10cnVlO3ZhciBfZGlkSXRlcmF0b3JFcnJvcjI9ZmFsc2U7dmFyIF9pdGVyYXRvckVycm9yMj11bmRlZmluZWQ7dHJ5e2Zvcih2YXIgX2l0ZXJhdG9yMj1iaW5kaW5nc1tTeW1ib2wuaXRlcmF0b3JdKCksX3N0ZXAyOyEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjI9KF9zdGVwMj1faXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7X2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjI9dHJ1ZSl7dmFyIF9zdGVwMiR2YWx1ZT1fc2xpY2VkVG9BcnJheShfc3RlcDIudmFsdWUsMiksa2V5U2V0cz1fc3RlcDIkdmFsdWVbMF0sZm49X3N0ZXAyJHZhbHVlWzFdO2lmKGtleVNldHMuc29tZShrZXlNYXRjaGVzRXZlbnQpKXsvLyByZXR1cm4gd2hlbiBtYXRjaGluZyBrZXliaW5kaW5nIGlzIGZvdW5kIC0gaS5lLiBvbmx5IG9uZVxuLy8ga2V5Ym91bmQgY29tcG9uZW50IGNhbiByZXNwb25kIHRvIGEgZ2l2ZW4ga2V5IGNvZGUuIHRvIGdldCBhcm91bmQgdGhpcyxcbi8vIHNjb3BlIGEgY29tbW9uIGFuY2VzdG9yIGNvbXBvbmVudCBjbGFzcyB3aXRoIEBrZXlkb3duIGFuZCB1c2Vcbi8vIEBrZXlkb3duU2NvcGVkIHRvIGJpbmQgdGhlIGR1cGxpY2F0ZSBrZXlzIGluIHlvdXIgY2hpbGQgY29tcG9uZW50c1xuLy8gKG9yIGp1c3QgaW5zcGVjdCBuZXh0UHJvcHMua2V5ZG93bi5ldmVudCkuXG5yZXR1cm57Zm46Zm4saW5zdGFuY2U6aW5zdGFuY2V9O319fWNhdGNoKGVycil7X2RpZEl0ZXJhdG9yRXJyb3IyPXRydWU7X2l0ZXJhdG9yRXJyb3IyPWVycjt9ZmluYWxseXt0cnl7aWYoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yJiZfaXRlcmF0b3IyLnJldHVybil7X2l0ZXJhdG9yMi5yZXR1cm4oKTt9fWZpbmFsbHl7aWYoX2RpZEl0ZXJhdG9yRXJyb3IyKXt0aHJvdyBfaXRlcmF0b3JFcnJvcjI7fX19fX1jYXRjaChlcnIpe19kaWRJdGVyYXRvckVycm9yPXRydWU7X2l0ZXJhdG9yRXJyb3I9ZXJyO31maW5hbGx5e3RyeXtpZighX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiYmX2l0ZXJhdG9yLnJldHVybil7X2l0ZXJhdG9yLnJldHVybigpO319ZmluYWxseXtpZihfZGlkSXRlcmF0b3JFcnJvcil7dGhyb3cgX2l0ZXJhdG9yRXJyb3I7fX19fXJldHVybiBudWxsO307LyoqXG4gKiBnZXRCaW5kaW5nXG4gKlxuICogQGFjY2VzcyBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXQgQ2xhc3MgdXNlZCBhcyBrZXkgaW4gZGljdCBvZiBrZXkgYmluZGluZ3NcbiAqIEByZXR1cm4ge29iamVjdH0gVGhlIG9iamVjdCBjb250YWluaW5nIGJpbmRpbmdzIGZvciB0aGUgZ2l2ZW4gY2xhc3NcbiAqL2Z1bmN0aW9uIGdldEJpbmRpbmcoX3JlZil7dmFyIF9fcmVhY3RLZXlkb3duVVVJRD1fcmVmLl9fcmVhY3RLZXlkb3duVVVJRDtyZXR1cm4gX2hhbmRsZXJzLmdldChfX3JlYWN0S2V5ZG93blVVSUQpO307LyoqXG4gKiBnZXRJbnN0YW5jZXNcbiAqXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHJldHVybiB7c2V0fSBBbGwgc3RvcmVkIGluc3RhbmNlcyAoYWxsIG1vdW50ZWQgY29tcG9uZW50IGluc3RhbmNlcyB3aXRoIGtleWJpbmRpbmdzKVxuICovZnVuY3Rpb24gZ2V0SW5zdGFuY2VzKCl7cmV0dXJuIF9pbnN0YW5jZXM7fTsvKipcbiAqIGlzRW1wdHlcbiAqXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHJldHVybiB7bnVtYmVyfSBTaXplIG9mIHRoZSBzZXQgb2YgYWxsIHN0b3JlZCBpbnN0YW5jZXNcbiAqL2Z1bmN0aW9uIGlzRW1wdHkoKXtyZXR1cm4hX2luc3RhbmNlcy5zaXplO307LyoqXG4gKiBzZXRCaW5kaW5nXG4gKlxuICogQGFjY2VzcyBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzIEFsbCBhcmd1bWVudHMgbmVjZXNzYXJ5IHRvIHNldCB0aGUgYmluZGluZ1xuICogQHBhcmFtIHthcnJheX0gYXJncy5rZXlzIEtleSBjb2RlcyB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBmblxuICogQHBhcmFtIHtmdW5jdGlvbn0gYXJncy5mbiBUaGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gZ2l2ZW4ga2V5cyBhcmUgcHJlc3NlZFxuICogQHBhcmFtIHtvYmplY3R9IGFyZ3MudGFyZ2V0IFRoZSBkZWNvcmF0ZWQgY2xhc3NcbiAqL2Z1bmN0aW9uIHNldEJpbmRpbmcoX3JlZjIpe3ZhciBrZXlzPV9yZWYyLmtleXMsZm49X3JlZjIuZm4sdGFyZ2V0PV9yZWYyLnRhcmdldDt2YXIga2V5U2V0cz0oMCxfcGFyc2Vfa2V5czIuZGVmYXVsdCkoa2V5cyk7dmFyIF9fcmVhY3RLZXlkb3duVVVJRD10YXJnZXQuX19yZWFjdEtleWRvd25VVUlEO2lmKCFfX3JlYWN0S2V5ZG93blVVSUQpe3RhcmdldC5fX3JlYWN0S2V5ZG93blVVSUQ9KDAsX3V1aWQyLmRlZmF1bHQpKCk7X2hhbmRsZXJzLnNldCh0YXJnZXQuX19yZWFjdEtleWRvd25VVUlELG5ldyBNYXAoW1trZXlTZXRzLGZuXV0pKTt9ZWxzZXtfaGFuZGxlcnMuZ2V0KF9fcmVhY3RLZXlkb3duVVVJRCkuc2V0KGtleVNldHMsZm4pO319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1rZXlkb3duL2Rpc3Qvc3RvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDE5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgX2tleXM9cmVxdWlyZSgnLi9rZXlzJyk7dmFyIFBSSU5UQUJMRV9DSEFSQUNURVJTPScwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWn4hQCMkJV4mKigpLV8rPVtdXFxcXHt9fDtcXCc6XCIsLi88Pj/Coyc7dmFyIG1vZEtleXM9T2JqZWN0LmtleXMoX2tleXMubW9kaWZpZXJzKTtmdW5jdGlvbiBtYXRjaEtleXMoX3JlZil7dmFyIGtleVNldD1fcmVmLmtleVNldCxldmVudD1fcmVmLmV2ZW50O3ZhciBrZXk9a2V5U2V0LmtleSxfa2V5U2V0JG1vZGlmaWVycz1rZXlTZXQubW9kaWZpZXJzLG1vZGlmaWVycz1fa2V5U2V0JG1vZGlmaWVycz09PXVuZGVmaW5lZD9bXTpfa2V5U2V0JG1vZGlmaWVyczt2YXIga2V5c01hdGNoPXZvaWQgMDtrZXlzTWF0Y2g9a2V5PT09X2tleXMuQUxMX0tFWVM7aWYoa2V5PT09X2tleXMuQUxMX1BSSU5UQUJMRV9LRVlTKXtpZihldmVudC5rZXkpey8vIE1vZGVybiBicm93c2VycyBpbXBsZW1lbnQgYGtleWAsIHNvIGlmIGBrZXlgIGlzIGxlbmd0aCAxLCB3ZSBoYXZlIGEgbWF0Y2guIGUuZy4gJ2EnIGZvciB0aGVcbi8vIGEga2V5LCBvciAnMicgZm9yIHRoZSAyIGtleS4gQWxsIG90aGVyIG5vbi1wcmludGFibGUgY2hhcmFjdGVycyBoYXZlIG5hbWVzLCBlLmcuICdFbnRlcicgb3IgJ0JhY2tzcGFjZScuXG5rZXlzTWF0Y2g9ZXZlbnQua2V5Lmxlbmd0aD09PTE7fWVsc2V7Ly8gRm9yIGJyb3dzZXJzIHRoYXQgZG8gbm8gc3VwcG9ydCBgZXZlbnQua2V5YCwgd2UgdGVzdCBhZ2FpbnN0IGEgbGlzdCBvZiBjaGFyYWN0ZXJzXG52YXIgcHJlc3NlZENoYXI9U3RyaW5nLmZyb21DaGFyQ29kZShldmVudC5jaGFyQ29kZSk7a2V5c01hdGNoPVBSSU5UQUJMRV9DSEFSQUNURVJTLmluZGV4T2YocHJlc3NlZENoYXIpPj0wO319aWYoa2V5PT09ZXZlbnQud2hpY2gpe3ZhciBldnRNb2RLZXlzPW1vZEtleXMuZmlsdGVyKGZ1bmN0aW9uKG1vZEtleSl7cmV0dXJuIGV2ZW50W21vZEtleSsnS2V5J107fSkuc29ydCgpO2tleXNNYXRjaD1tb2RpZmllcnMubGVuZ3RoPT09ZXZ0TW9kS2V5cy5sZW5ndGgmJm1vZGlmaWVycy5ldmVyeShmdW5jdGlvbihtb2RLZXksaW5kZXgpe3JldHVybiBldnRNb2RLZXlzW2luZGV4XT09PW1vZEtleTt9KTt9cmV0dXJuIGtleXNNYXRjaDt9ZXhwb3J0cy5kZWZhdWx0PW1hdGNoS2V5cztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qta2V5ZG93bi9kaXN0L2xpYi9tYXRjaF9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7Ly8gVE9ETzogTmVlZCBiZXR0ZXIsIG1vcmUgY29tcGxldGUsIGFuZCBtb3JlIG1ldGhvZGljYWwga2V5IGRlZmluaXRpb25zXG52YXIgS2V5cz17YmFja3NwYWNlOjgsZGVsOjQ2LGRlbGV0ZTo0Nix0YWI6OSxlbnRlcjoxMywncmV0dXJuJzoxMyxlc2M6Mjcsc3BhY2U6MzIscGFnZVVwOjMzLHBhZ2VEb3duOjM0LGVuZDozNSxob21lOjM2LGxlZnQ6MzcsdXA6MzgscmlnaHQ6MzksZG93bjo0MCwnOyc6MTg2LCc9JzoxODcsJywnOjE4OCwnLSc6MTg5LCcuJzoxOTAsJy8nOjE5MSwnYCc6MTkyLCdbJzoyMTksJ1xcXFwnOjIyMCwnXSc6MjIxfTsvLyBBZGQgdXBwZXJjYXNlIHZlcnNpb25zIG9mIGtleXMgYWJvdmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5PYmplY3Qua2V5cyhLZXlzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7cmV0dXJuIEtleXNba2V5LnRvVXBwZXJDYXNlKCldPUtleXNba2V5XTt9KTsnMDEyMzQ1Njc4OScuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24obnVtLGluZGV4KXtyZXR1cm4gS2V5c1tudW1dPWluZGV4KzQ4O30pOydBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24obGV0dGVyLGluZGV4KXtLZXlzW2xldHRlcl09aW5kZXgrNjU7S2V5c1tsZXR0ZXIudG9Mb3dlckNhc2UoKV09aW5kZXgrNjU7fSk7Ly8gZm4ga2V5c1xuWzEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyXS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0saW5kZXgpe3JldHVybiBLZXlzWydmJytpbmRleF09MTExK2luZGV4O30pO3ZhciBtb2RpZmllcnM9ZXhwb3J0cy5tb2RpZmllcnM9e2NvbnRyb2w6J2N0cmwnLGN0cmw6J2N0cmwnLHNoaWZ0OidzaGlmdCcsbWV0YTonbWV0YScsY21kOidtZXRhJyxjb21tYW5kOidtZXRhJyxvcHRpb246J2FsdCcsYWx0OidhbHQnfTt2YXIgQUxMX0tFWVM9ZXhwb3J0cy5BTExfS0VZUz1TeW1ib2woJ0FMTF9LRVlTJyk7dmFyIEFMTF9QUklOVEFCTEVfS0VZUz1leHBvcnRzLkFMTF9QUklOVEFCTEVfS0VZUz1TeW1ib2woJ0FMTF9QUklOVEFCTEVfS0VZUycpO2V4cG9ydHMuZGVmYXVsdD1LZXlzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1rZXlkb3duL2Rpc3QvbGliL2tleXMuanNcbi8vIG1vZHVsZSBpZCA9IDE5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgX2tleXM9cmVxdWlyZSgnLi9rZXlzJyk7dmFyIF9rZXlzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fWZ1bmN0aW9uIHBhcnNlS2V5cyhrZXlzQXJyYXkpe3JldHVybiBrZXlzQXJyYXkubWFwKGZ1bmN0aW9uKGtleSl7dmFyIGtleVNldD17a2V5OmtleX07aWYodHlwZW9mIGtleT09PSdzdHJpbmcnKXt2YXIga2V5U3RyaW5nPWtleS50b0xvd2VyQ2FzZSgpLnRyaW0oKTt2YXIgbWF0Y2hlcz1rZXlTdHJpbmcuc3BsaXQoL1xccz9cXCtcXHM/Lyk7a2V5U2V0PW1hdGNoZXMubGVuZ3RoPT09MT97a2V5Ol9rZXlzMi5kZWZhdWx0W2tleVN0cmluZ119OntrZXk6X2tleXMyLmRlZmF1bHRbbWF0Y2hlcy5wb3AoKV0sbW9kaWZpZXJzOm1hdGNoZXMubWFwKGZ1bmN0aW9uKG1vZEtleSl7cmV0dXJuIF9rZXlzLm1vZGlmaWVyc1ttb2RLZXldO30pLnNvcnQoKX07fXJldHVybiBrZXlTZXQ7fSk7fWV4cG9ydHMuZGVmYXVsdD1wYXJzZUtleXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWtleWRvd24vZGlzdC9saWIvcGFyc2Vfa2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTk1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PXV1aWQ7Ly8gQ291bnRlciBiZWluZyBpbmNyZW1lbnRlZC4gSlMgaXMgc2luZ2xlLXRocmVhZGVkLCBzbyBpdCdsbCBKdXN0IFdvcmvihKIuXG52YXIgX19jb3VudGVyPTE7LyoqXG4gKiBSZXR1cm5zIGEgcHJvY2Vzcy13aWRlIHVuaXF1ZSBpZGVudGlmaWVyLlxuICovZnVuY3Rpb24gdXVpZCgpe3JldHVyblwidWlkLVwiK19fY291bnRlcisrO31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qta2V5ZG93bi9kaXN0L2xpYi91dWlkLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5vblVubW91bnQ9ZXhwb3J0cy5vbk1vdW50PXVuZGVmaW5lZDtleHBvcnRzLl9vbkNsaWNrPV9vbkNsaWNrO2V4cG9ydHMuX29uS2V5RG93bj1fb25LZXlEb3duO2V4cG9ydHMuX3Nob3VsZENvbnNpZGVyPV9zaG91bGRDb25zaWRlcjt2YXIgX2RvbV9oZWxwZXJzPXJlcXVpcmUoJy4vbGliL2RvbV9oZWxwZXJzJyk7dmFyIF9kb21faGVscGVyczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tX2hlbHBlcnMpO3ZhciBfbGlzdGVuZXJzPXJlcXVpcmUoJy4vbGliL2xpc3RlbmVycycpO3ZhciBfbGlzdGVuZXJzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXN0ZW5lcnMpO3ZhciBfc3RvcmU9cmVxdWlyZSgnLi9zdG9yZScpO3ZhciBzdG9yZT1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc3RvcmUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iail7aWYob2JqJiZvYmouX19lc01vZHVsZSl7cmV0dXJuIG9iajt9ZWxzZXt2YXIgbmV3T2JqPXt9O2lmKG9iaiE9bnVsbCl7Zm9yKHZhciBrZXkgaW4gb2JqKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLGtleSkpbmV3T2JqW2tleV09b2JqW2tleV07fX1uZXdPYmouZGVmYXVsdD1vYmo7cmV0dXJuIG5ld09iajt9fWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycil7aWYoQXJyYXkuaXNBcnJheShhcnIpKXtmb3IodmFyIGk9MCxhcnIyPUFycmF5KGFyci5sZW5ndGgpO2k8YXJyLmxlbmd0aDtpKyspe2FycjJbaV09YXJyW2ldO31yZXR1cm4gYXJyMjt9ZWxzZXtyZXR1cm4gQXJyYXkuZnJvbShhcnIpO319LyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi8vKipcbiAqIEBtb2R1bGUgZXZlbnRIYW5kbGVyc1xuICpcbiAqLy8qKlxuICogcHJpdmF0ZVxuICpcbiAqLy8qKlxuICogX29uQ2xpY2tcbiAqXG4gKiBAYWNjZXNzIHByaXZhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgY2xpY2sgZXZlbnQgb2JqZWN0XG4gKiBAcGFyYW0ge29iamVjdH0gZXZlbnQudGFyZ2V0IFRoZSBET00gbm9kZSBmcm9tIHRoZSBjbGljayBldmVudFxuICovZnVuY3Rpb24gX29uQ2xpY2soX3JlZil7dmFyIHRhcmdldD1fcmVmLnRhcmdldDtzdG9yZS5hY3RpdmF0ZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0b3JlLmdldEluc3RhbmNlcygpKSkucmVkdWNlKF9kb21faGVscGVyczIuZGVmYXVsdC5maW5kQ29udGFpbmVyTm9kZXModGFyZ2V0KSxbXSkuc29ydChfZG9tX2hlbHBlcnMyLmRlZmF1bHQuc29ydEJ5RE9NUG9zaXRpb24pLm1hcChmdW5jdGlvbihpdGVtKXtyZXR1cm4gaXRlbS5pbnN0YW5jZTt9KSk7fS8qKlxuICogX29uS2V5RG93bjogVGhlIGtleWRvd24gZXZlbnQgY2FsbGJhY2tcbiAqXG4gKiBAYWNjZXNzIHByaXZhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUga2V5ZG93biBldmVudCBvYmplY3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC53aGljaCBUaGUga2V5IGNvZGUgKHdoaWNoKSByZWNlaXZlZCBmcm9tIHRoZSBrZXlkb3duIGV2ZW50XG4gKi9mdW5jdGlvbiBfb25LZXlEb3duKGV2ZW50KXt2YXIgZm9yY2VDb25zaWRlcj1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06ZmFsc2U7aWYoZm9yY2VDb25zaWRlcnx8X3Nob3VsZENvbnNpZGVyKGV2ZW50KSl7dmFyIF9yZWYyPXN0b3JlLmZpbmRCaW5kaW5nRm9yRXZlbnQoZXZlbnQpfHx7fSxmbj1fcmVmMi5mbixpbnN0YW5jZT1fcmVmMi5pbnN0YW5jZTtpZihmbil7Zm4uY2FsbChpbnN0YW5jZSxldmVudCk7cmV0dXJuIHRydWU7fX1yZXR1cm4gZmFsc2U7fS8qKlxuICogX3Nob3VsZENvbnNpZGVyOiBDb25kaXRpb25zIGZvciBwcm9jZWVkaW5nIHdpdGgga2V5IGV2ZW50IGhhbmRsaW5nXG4gKlxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGtleWRvd24gZXZlbnQgb2JqZWN0XG4gKiBAcGFyYW0ge29iamVjdH0gZXZlbnQudGFyZ2V0IFRoZSBub2RlIG9yaWdpbiBvZiB0aGUgZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdG8gY29udGludWUgcHJvY2VzaW5nIHRoZSBrZXlkb3duIGV2ZW50XG4gKi9mdW5jdGlvbiBfc2hvdWxkQ29uc2lkZXIoX3JlZjMpe3ZhciBjdHJsS2V5PV9yZWYzLmN0cmxLZXksdGFyZ2V0PV9yZWYzLnRhcmdldDtyZXR1cm4gY3RybEtleXx8IX5bJ0lOUFVUJywnU0VMRUNUJywnVEVYVEFSRUEnXS5pbmRleE9mKHRhcmdldC50YWdOYW1lKSYmKCF0YXJnZXQuZ2V0QXR0cmlidXRlfHx0YXJnZXQuZ2V0QXR0cmlidXRlKCdyb2xlJykhPT0ndGV4dGJveCcpO30vKipcbiAqIHB1YmxpY1xuICpcbiAqLy8qKlxuICogb25Nb3VudFxuICpcbiAqIEBhY2Nlc3MgcHVibGljXG4gKi9mdW5jdGlvbiBvbk1vdW50KGluc3RhbmNlKXtzdG9yZS5hY3RpdmF0ZShpbnN0YW5jZSk7X2xpc3RlbmVyczIuZGVmYXVsdC5iaW5kS2V5cyhfb25LZXlEb3duKTtfbGlzdGVuZXJzMi5kZWZhdWx0LmJpbmRDbGlja3MoX29uQ2xpY2spO19kb21faGVscGVyczIuZGVmYXVsdC5iaW5kRm9jdXNhYmxlcyhpbnN0YW5jZSxzdG9yZS5hY3RpdmF0ZSk7fS8qKlxuICogb25Vbm1vdW50XG4gKlxuICogQGFjY2VzcyBwdWJsaWNcbiAqL2Z1bmN0aW9uIG9uVW5tb3VudChpbnN0YW5jZSl7c3RvcmUuZGVsZXRlSW5zdGFuY2UoaW5zdGFuY2UpO2lmKHN0b3JlLmlzRW1wdHkoKSl7X2xpc3RlbmVyczIuZGVmYXVsdC51bmJpbmRDbGlja3MoX29uQ2xpY2spO19saXN0ZW5lcnMyLmRlZmF1bHQudW5iaW5kS2V5cyhfb25LZXlEb3duKTt9fWV4cG9ydHMub25Nb3VudD1vbk1vdW50O2V4cG9ydHMub25Vbm1vdW50PW9uVW5tb3VudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qta2V5ZG93bi9kaXN0L2V2ZW50X2hhbmRsZXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9yZWFjdERvbT1yZXF1aXJlKCdyZWFjdC1kb20nKTt2YXIgX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O312YXIgZm9jdXNhYmxlU2VsZWN0b3I9J2FbaHJlZl0sIGJ1dHRvbiwgaW5wdXQsIG9iamVjdCwgc2VsZWN0LCB0ZXh0YXJlYSwgW3RhYmluZGV4XSc7LyoqXG4gKiBiaW5kRm9jdXNhYmxlczogRmluZCBhbnkgZm9jdXNhYmxlIGNoaWxkIGVsZW1lbnRzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgYW5kXG4gKiBhZGQgYW4gb25Gb2N1cyBoYW5kbGVyIHRvIGZvY3VzIG91ciBrZXlkb3duIGhhbmRsZXJzIG9uIHRoZSBwYXJlbnQgY29tcG9uZW50XG4gKiB3aGVuIHVzZXIga2V5cyBhcHBsaWVzIGZvY3VzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIE5PVEU6IE9uZSBsaW1pdGF0aW9uIG9mIHRoaXMgcmlnaHQgbm93IGlzIHRoYXQgaWYgeW91IHRhYiBvdXQgb2YgdGhlXG4gKiBjb21wb25lbnQsIF9mb2N1c2VkSW5zdGFuY2Ugd2lsbCBzdGlsbCBiZSBzZXQgdW50aWwgbmV4dCBjbGljayBvciBtb3VudCBvclxuICogY29udHJvbGxlZCBmb2N1cy5cbiAqXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IGluc3RhbmNlIFRoZSBrZXktYm91bmQgY29tcG9uZW50IGluc3RhbmNlXG4gKiBAcGFyYW0ge2NhbGxiYWNrfSBhY3RpdmF0ZU9uRm9jdXMgVGhlIGZuIHRvIGZpcmUgd2hlbiBlbGVtZW50IGlzIGZvY3VzZWRcbiAqLy8qKlxuICogQG1vZHVsZSBkb21IZWxwZXJzXG4gKlxuICovZnVuY3Rpb24gYmluZEZvY3VzYWJsZXMoaW5zdGFuY2UsYWN0aXZhdGVPbkZvY3VzKXtpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKXt0cnl7dmFyIG5vZGU9X3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKGluc3RhbmNlKTtpZihub2RlKXt2YXIgZm9jdXNhYmxlcz1ub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoZm9jdXNhYmxlU2VsZWN0b3IpO2lmKGZvY3VzYWJsZXMubGVuZ3RoKXt2YXIgb25Gb2N1cz1mdW5jdGlvbiBvbkZvY3VzKGVsZW1lbnQpe3ZhciBvbkZvY3VzUHJldj1lbGVtZW50Lm9uZm9jdXM7cmV0dXJuIGZ1bmN0aW9uKGV2ZW50KXthY3RpdmF0ZU9uRm9jdXMoaW5zdGFuY2UpO2lmKG9uRm9jdXNQcmV2KW9uRm9jdXNQcmV2LmNhbGwoZWxlbWVudCxldmVudCk7fTt9O0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZvY3VzYWJsZXMpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7cmV0dXJuIGVsZW1lbnQub25mb2N1cz1vbkZvY3VzKGVsZW1lbnQpO30pO319fWNhdGNoKGVycm9yKXsvLyBub29wLCBtb3N0bHkgc3VwcHJlc3NpbmcgZXJyb3IgaGVyZSBodHRwczovL2dpdGh1Yi5jb20vZ2xvcnRoby9yZWFjdC1rZXlkb3duL2lzc3Vlcy83NlxufX19LyoqXG4gKiBmaW5kQ29udGFpbmVyTm9kZXM6IENhbGxlZCBieSBvdXIgY2xpY2sgaGFuZGxlciB0byBmaW5kIGluc3RhbmNlcyB3aXRoIG5vZGVzXG4gKiB0aGF0IGFyZSBlcXVhbCB0byBvciB0aGF0IGNvbnRhaW4gdGhlIGNsaWNrIHRhcmdldC4gQW55IHRoYXQgcGFzcyB0aGlzIHRlc3RcbiAqIHdpbGwgYmUgcmVjaXBpZW50cyBvZiB0aGUgbmV4dCBrZXlkb3duIGV2ZW50LlxuICpcbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IFRoZSBjbGljayBldmVudC50YXJnZXQgRE9NIGVsZW1lbnRcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBSZWR1Y2VyIGZ1bmN0aW9uXG4gKi9mdW5jdGlvbiBmaW5kQ29udGFpbmVyTm9kZXModGFyZ2V0KXtyZXR1cm4gZnVuY3Rpb24obWVtbyxpbnN0YW5jZSl7dHJ5e3ZhciBub2RlPV9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShpbnN0YW5jZSk7aWYobm9kZSYmKG5vZGU9PT10YXJnZXR8fG5vZGUuY29udGFpbnModGFyZ2V0KSkpe21lbW8ucHVzaCh7aW5zdGFuY2U6aW5zdGFuY2Usbm9kZTpub2RlfSk7fX1maW5hbGx5e3JldHVybiBtZW1vO319O30vKipcbiAqIHNvcnRCeURPTVBvc2l0aW9uOiBDYWxsZWQgYnkgb3VyIGNsaWNrIGhhbmRsZXIgdG8gc29ydCBhIGxpc3Qgb2YgaW5zdGFuY2VzXG4gKiBhY2NvcmRpbmcgdG8gbGVhc3QgLT4gbW9zdCBuZXN0ZWQuIFRoaXMgaXMgc28gdGhhdCBpZiBtdWx0aXBsZSBrZXlib3VuZFxuICogaW5zdGFuY2VzIGhhdmUgbm9kZXMgdGhhdCBhcmUgYW5jZXN0b3JzIG9mIHRoZSBjbGljayB0YXJnZXQsIHRoZXkgd2lsbCBiZVxuICogc29ydGVkIHRvIGxldCB0aGUgaW5zdGFuY2UgY2xvc2VzdCB0byB0aGUgY2xpY2sgdGFyZ2V0IGdldCBmaXJzdCBkaWJzIG9uIHRoZVxuICogbmV4dCBrZXkgZG93biBldmVudC5cbiAqL2Z1bmN0aW9uIHNvcnRCeURPTVBvc2l0aW9uKGEsYil7cmV0dXJuIGEubm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiLm5vZGUpPT09MTA/MTotMTt9ZXhwb3J0cy5kZWZhdWx0PXtiaW5kRm9jdXNhYmxlczpiaW5kRm9jdXNhYmxlcyxmaW5kQ29udGFpbmVyTm9kZXM6ZmluZENvbnRhaW5lck5vZGVzLHNvcnRCeURPTVBvc2l0aW9uOnNvcnRCeURPTVBvc2l0aW9ufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qta2V5ZG93bi9kaXN0L2xpYi9kb21faGVscGVycy5qc1xuLy8gbW9kdWxlIGlkID0gMTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pOy8qKlxuICogQG1vZHVsZSBMaXN0ZW5lcnNcbiAqXG4gKi8vLyBmbGFnIGZvciB3aGV0aGVyIGNsaWNrIGxpc3RlbmVyIGhhcyBiZWVuIGJvdW5kIHRvIGRvY3VtZW50XG52YXIgX2NsaWNrc0JvdW5kPWZhbHNlOy8vIGZsYWcgZm9yIHdoZXRoZXIga2V5ZG93biBsaXN0ZW5lciBoYXMgYmVlbiBib3VuZCB0byBkb2N1bWVudFxudmFyIF9rZXlzQm91bmQ9ZmFsc2U7dmFyIExpc3RlbmVycz17LyoqXG4gICAqIF9iaW5kS2V5c1xuICAgKlxuICAgKiBAYWNjZXNzIHB1YmxpY1xuICAgKi9iaW5kS2V5czpmdW5jdGlvbiBiaW5kS2V5cyhjYWxsYmFjayl7aWYoIV9rZXlzQm91bmQpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLGNhbGxiYWNrKTtfa2V5c0JvdW5kPXRydWU7fX0sLyoqXG4gICAqIHVuYmluZEtleXNcbiAgICpcbiAgICogQGFjY2VzcyBwdWJsaWNcbiAgICovdW5iaW5kS2V5czpmdW5jdGlvbiB1bmJpbmRLZXlzKGNhbGxiYWNrKXtpZihfa2V5c0JvdW5kKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJyxjYWxsYmFjayk7X2tleXNCb3VuZD1mYWxzZTt9fSwvKipcbiAgICogYmluZENsaWNrc1xuICAgKlxuICAgKiBAYWNjZXNzIHB1YmxpY1xuICAgKi9iaW5kQ2xpY2tzOmZ1bmN0aW9uIGJpbmRDbGlja3MoY2FsbGJhY2spe2lmKCFfY2xpY2tzQm91bmQpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxjYWxsYmFjayx0cnVlKTtfY2xpY2tzQm91bmQ9dHJ1ZTt9fSwvKipcbiAgICogdW5iaW5kQ2xpY2tzXG4gICAqXG4gICAqIEBhY2Nlc3MgcHVibGljXG4gICAqL3VuYmluZENsaWNrczpmdW5jdGlvbiB1bmJpbmRDbGlja3MoY2FsbGJhY2spe2lmKF9jbGlja3NCb3VuZCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLGNhbGxiYWNrLHRydWUpO19jbGlja3NCb3VuZD1mYWxzZTt9fX07ZXhwb3J0cy5kZWZhdWx0PUxpc3RlbmVycztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qta2V5ZG93bi9kaXN0L2xpYi9saXN0ZW5lcnMuanNcbi8vIG1vZHVsZSBpZCA9IDE5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIF90eXBlb2YyPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJl90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcik9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo9PT1cInVuZGVmaW5lZFwiP1widW5kZWZpbmVkXCI6X3R5cGVvZjIob2JqKTt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iaj09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mMihvYmopO307LyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbW9kdWxlIG1ldGhvZFdyYXBwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi92YXIgX3N0b3JlPXJlcXVpcmUoJy4uL3N0b3JlJyk7dmFyIHN0b3JlPV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zdG9yZSk7dmFyIF9ldmVudF9oYW5kbGVycz1yZXF1aXJlKCcuLi9ldmVudF9oYW5kbGVycycpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iail7aWYob2JqJiZvYmouX19lc01vZHVsZSl7cmV0dXJuIG9iajt9ZWxzZXt2YXIgbmV3T2JqPXt9O2lmKG9iaiE9bnVsbCl7Zm9yKHZhciBrZXkgaW4gb2JqKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLGtleSkpbmV3T2JqW2tleV09b2JqW2tleV07fX1uZXdPYmouZGVmYXVsdD1vYmo7cmV0dXJuIG5ld09iajt9fS8qKlxuICogX2lzUmVhY3RLZXlEb3duXG4gKlxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIHBvc3NpYmx5IHN5bnRoZXRpYyBldmVudCBwYXNzZWQgYXMgYW4gYXJndW1lbnQgd2l0aFxuICogdGhlIG1ldGhvZCBpbnZvY2F0aW9uLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL2Z1bmN0aW9uIF9pc1JlYWN0S2V5RG93bihldmVudCl7cmV0dXJuIGV2ZW50JiYodHlwZW9mIGV2ZW50PT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihldmVudCkpPT09J29iamVjdCcmJmV2ZW50Lm5hdGl2ZUV2ZW50IGluc3RhbmNlb2Ygd2luZG93LktleWJvYXJkRXZlbnQmJmV2ZW50LnR5cGU9PT0na2V5ZG93bic7fS8qKlxuICogbWV0aG9kV3JhcHBlclxuICpcbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gYXJncyBBbGwgYXJndW1lbnRzIG5lY2Vzc2FyeSBmb3Igd3JhcHBpbmcgbWV0aG9kXG4gKiBAcGFyYW0ge29iamVjdH0gYXJncy50YXJnZXQgVGhlIGRlY29yYXRlZCBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IGFyZ3MuZGVzY3JpcHRvciBNZXRob2QgZGVzY3JpcHRvclxuICogQHBhcmFtIHthcnJheX0gYXJncy5rZXlzIFRoZSBhcnJheSBvZiBrZXlzIGJvdW5kIHRvIHRoZSBnaXZlbiBtZXRob2RcbiAqIEByZXR1cm4ge29iamVjdH0gVGhlIG1ldGhvZCBkZXNjcmlwdG9yXG4gKi9mdW5jdGlvbiBtZXRob2RXcmFwcGVyKF9yZWYpe3ZhciB0YXJnZXQ9X3JlZi50YXJnZXQsZGVzY3JpcHRvcj1fcmVmLmRlc2NyaXB0b3Isa2V5cz1fcmVmLmtleXM7dmFyIGZuPWRlc2NyaXB0b3IudmFsdWU7Ly8gaWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGNyZWF0ZWQgYSBiaW5kaW5nIGZvciB0aGlzIGNsYXNzICh2aWEgYW5vdGhlclxuLy8gZGVjb3JhdGVkIG1ldGhvZCksIHdyYXAgdGhlc2UgbGlmZWN5Y2xlIG1ldGhvZHMuXG5pZighc3RvcmUuZ2V0QmluZGluZyh0YXJnZXQpKXt2YXIgY29tcG9uZW50RGlkTW91bnQ9dGFyZ2V0LmNvbXBvbmVudERpZE1vdW50LGNvbXBvbmVudFdpbGxVbm1vdW50PXRhcmdldC5jb21wb25lbnRXaWxsVW5tb3VudDt0YXJnZXQuY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24oKXsoMCxfZXZlbnRfaGFuZGxlcnMub25Nb3VudCkodGhpcyk7aWYoY29tcG9uZW50RGlkTW91bnQpcmV0dXJuIGNvbXBvbmVudERpZE1vdW50LmNhbGwodGhpcyk7fTt0YXJnZXQuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXsoMCxfZXZlbnRfaGFuZGxlcnMub25Vbm1vdW50KSh0aGlzKTtpZihjb21wb25lbnRXaWxsVW5tb3VudClyZXR1cm4gY29tcG9uZW50V2lsbFVubW91bnQuY2FsbCh0aGlzKTt9O30vLyBhZGQgdGhpcyBiaW5kaW5nIG9mIGtleXMgYW5kIG1ldGhvZCB0byB0aGUgdGFyZ2V0J3MgYmluZGluZ3NcbnN0b3JlLnNldEJpbmRpbmcoe2tleXM6a2V5cyx0YXJnZXQ6dGFyZ2V0LGZuOmZufSk7ZGVzY3JpcHRvci52YWx1ZT1mdW5jdGlvbigpe2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO312YXIgbWF5YmVFdmVudD1hcmdzWzBdO2lmKF9pc1JlYWN0S2V5RG93bihtYXliZUV2ZW50KSl7Ly8gcHJveHkgbWV0aG9kIGluIG9yZGVyIHRvIHVzZSBAa2V5ZG93biBhcyBmaWx0ZXIgZm9yIGtleWRvd24gZXZlbnRzIGNvbWluZ1xuLy8gZnJvbSBhbiBhY3R1YWwgb25LZXlEb3duIGJpbmRpbmcgKGFzIGlkZW50aWZpZWQgYnkgcmVhY3QncyBhZGRpdGlvbiBvZlxuLy8gJ25hdGl2ZUV2ZW50JyArIHR5cGUgPT09ICdrZXlkb3duJylcbmlmKCFtYXliZUV2ZW50LmN0cmxLZXkpey8vIHdlIGFscmVhZHkgd2hpdGVsaXN0IHNob3J0Y3V0cyB3aXRoIGN0cmwgbW9kaWZpZXJzIHNvIGlmIHdlIHdlcmUgdG9cbi8vIGZpcmUgaXQgYWdhaW4gaGVyZSB0aGUgbWV0aG9kIHdvdWxkIHRyaWdnZXIgdHdpY2UuIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2xvcnRoby9yZWFjdC1rZXlkb3duL2lzc3Vlcy8zOFxucmV0dXJuKDAsX2V2ZW50X2hhbmRsZXJzLl9vbktleURvd24pKG1heWJlRXZlbnQsdHJ1ZSk7fX1lbHNlIGlmKCFtYXliZUV2ZW50fHwhKG1heWJlRXZlbnQgaW5zdGFuY2VvZiB3aW5kb3cuS2V5Ym9hcmRFdmVudCl8fG1heWJlRXZlbnQudHlwZSE9PSdrZXlkb3duJyl7Ly8gaWYgb3VyIGZpcnN0IGFyZ3VtZW50IGlzIGEga2V5ZG93biBldmVudCBpdCBpcyBiZWluZyBoYW5kbGVkIGJ5IG91clxuLy8gYmluZGluZyBzeXN0ZW0uIGlmIGl0J3MgYW55dGhpbmcgZWxzZSwganVzdCBwYXNzIHRocm91Z2guXG5yZXR1cm4gZm4uY2FsbC5hcHBseShmbixbdGhpc10uY29uY2F0KGFyZ3MpKTt9fTtyZXR1cm4gZGVzY3JpcHRvcjt9ZXhwb3J0cy5kZWZhdWx0PW1ldGhvZFdyYXBwZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWtleWRvd24vZGlzdC9kZWNvcmF0b3JzL21ldGhvZF9kZWNvcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDIwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgX21hdGNoX2tleXM9cmVxdWlyZSgnLi4vbGliL21hdGNoX2tleXMnKTt2YXIgX21hdGNoX2tleXMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoX2tleXMpO3ZhciBfcGFyc2Vfa2V5cz1yZXF1aXJlKCcuLi9saWIvcGFyc2Vfa2V5cycpO3ZhciBfcGFyc2Vfa2V5czI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyc2Vfa2V5cyk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O30vKipcbiAqIG1ldGhvZFdyYXBwZXJTY29wZWRcbiAqXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IGFyZ3MgQWxsIGFyZ3MgbmVjZXNzYXJ5IGZvciBkZWNvcmF0aW5nIHRoZSBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzLnRhcmdldCBUaGUgZGVjb3JhdGVkIG1ldGhvZCdzIGNsYXNzIG9iamVjdFxuICogQHBhcmFtIHtvYmplY3R9IGFyZ3MuZGVzY3JpcHRvciBUaGUgbWV0aG9kJ3MgZGVzY3JpcHRvciBvYmplY3RcbiAqIEBwYXJhbSB7YXJyYXl9IGFyZ3Mua2V5cyBUaGUga2V5IGNvZGVzIGJvdW5kIHRvIHRoZSBkZWNvcmF0ZWQgbWV0aG9kXG4gKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBtZXRob2QncyBkZXNjcmlwdG9yIG9iamVjdFxuICovLyoqXG4gKiBAbW9kdWxlIG1ldGhvZFdyYXBwZXJTY29wZWRcbiAqXG4gKi9mdW5jdGlvbiBtZXRob2RXcmFwcGVyU2NvcGVkKF9yZWYpe3ZhciB0YXJnZXQ9X3JlZi50YXJnZXQsZGVzY3JpcHRvcj1fcmVmLmRlc2NyaXB0b3Isa2V5cz1fcmVmLmtleXM7dmFyIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9dGFyZ2V0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM7dmFyIGZuPWRlc2NyaXB0b3IudmFsdWU7aWYoIWtleXMpe2NvbnNvbGUud2FybihmbisnOiBrZXlkb3duU2NvcGVkIHJlcXVpcmVzIG9uZSBvciBtb3JlIGtleXMnKTt9ZWxzZXsvKipcbiAgICAgKiBfc2hvdWxkVHJpZ2dlclxuICAgICAqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRoaXNQcm9wcyBFeHN0aW5nIHByb3BzIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRoaXNQcm9wcy5rZXlkb3duIFRoZSBuYW1lc3BhY2VkIHN0YXRlIGZyb20gdGhlIGhpZ2hlci1vcmRlclxuICAgICAqIGNvbXBvbmVudCAoY2xhc3NfZGVjb3JhdG9yKVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHMgVGhlIGluY29taW5nIHByb3BzIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wcy5rZXlkb3duIFRoZSBuYW1lc2NhcGVkIHN0YXRlIGZyb20gdGhlIGhpZ2hlci1vcmRlclxuICAgICAqIGNvbXBvbmVudCAoY2xhc3NfZGVjb3JhdG9yKVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGtleXMgVGhlIGtleXMgYm91bmQgdG8gdGhlIGRlY29yYXRlZCBtZXRob2RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGFsbCB0ZXN0cyBoYXZlIHBhc3NlZFxuICAgICAqL3ZhciBfc2hvdWxkVHJpZ2dlcj1mdW5jdGlvbiBfc2hvdWxkVHJpZ2dlcihrZXlkb3duVGhpcyxrZXlkb3duTmV4dCl7aWYoIShrZXlkb3duTmV4dCYma2V5ZG93bk5leHQuZXZlbnQmJiFrZXlkb3duVGhpcy5ldmVudCkpcmV0dXJuIGZhbHNlO3JldHVybiBrZXlTZXRzLnNvbWUoZnVuY3Rpb24oa2V5U2V0KXtyZXR1cm4oMCxfbWF0Y2hfa2V5czIuZGVmYXVsdCkoe2tleVNldDprZXlTZXQsZXZlbnQ6a2V5ZG93bk5leHQuZXZlbnR9KTt9KTt9Oy8vIHdyYXAgdGhlIGNvbXBvbmVudCdzIGxpZmVjeWNsZSBtZXRob2QgdG8gaW50ZXJjZXB0IGtleSBjb2RlcyBjb21pbmcgZG93blxuLy8gZnJvbSB0aGUgd3JhcHBlZC9zY29wZWQgY29tcG9uZW50IHVwIHRoZSB2aWV3IGhpZXJhcmNoeS4gaWYgbmV3IGtleWRvd25cbi8vIGV2ZW50IGhhcyBhcnJpdmVkIGFuZCB0aGUga2V5IGNvZGVzIG1hdGNoIHdoYXQgd2FzIHNwZWNpZmllZCBpbiB0aGVcbi8vIGRlY29yYXRvciwgY2FsbCB0aGUgd3JhcHBlZCBtZXRob2QuXG52YXIga2V5U2V0cz0oMCxfcGFyc2Vfa2V5czIuZGVmYXVsdCkoa2V5cyk7dGFyZ2V0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9ZnVuY3Rpb24obmV4dFByb3BzKXt2YXIga2V5ZG93bk5leHQ9bmV4dFByb3BzLmtleWRvd247dmFyIGtleWRvd25UaGlzPXRoaXMucHJvcHMua2V5ZG93bjtpZihfc2hvdWxkVHJpZ2dlcihrZXlkb3duVGhpcyxrZXlkb3duTmV4dCkpe3JldHVybiBmbi5jYWxsKHRoaXMsa2V5ZG93bk5leHQuZXZlbnQpO31mb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4+MT9fbGVuLTE6MCksX2tleT0xO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleS0xXT1hcmd1bWVudHNbX2tleV07fWlmKGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpcmV0dXJuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuY2FsbC5hcHBseShjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLFt0aGlzLG5leHRQcm9wc10uY29uY2F0KGFyZ3MpKTt9O31yZXR1cm4gZGVzY3JpcHRvcjt9ZXhwb3J0cy5kZWZhdWx0PW1ldGhvZFdyYXBwZXJTY29wZWQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWtleWRvd24vZGlzdC9kZWNvcmF0b3JzL21ldGhvZF9kZWNvcmF0b3Jfc2NvcGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnOy8vIFByb2R1Y3Rpb24gc3RlcHMgb2YgRUNNQS0yNjIsIEVkaXRpb24gNiwgMjIuMS4yLjFcbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tXG5pZighQXJyYXkuZnJvbSl7QXJyYXkuZnJvbT1mdW5jdGlvbigpe3ZhciB0b1N0cj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO3ZhciBpc0NhbGxhYmxlPWZ1bmN0aW9uIGlzQ2FsbGFibGUoZm4pe3JldHVybiB0eXBlb2YgZm49PT0nZnVuY3Rpb24nfHx0b1N0ci5jYWxsKGZuKT09PSdbb2JqZWN0IEZ1bmN0aW9uXSc7fTt2YXIgdG9JbnRlZ2VyPWZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSl7dmFyIG51bWJlcj1OdW1iZXIodmFsdWUpO2lmKGlzTmFOKG51bWJlcikpe3JldHVybiAwO31pZihudW1iZXI9PT0wfHwhaXNGaW5pdGUobnVtYmVyKSl7cmV0dXJuIG51bWJlcjt9cmV0dXJuKG51bWJlcj4wPzE6LTEpKk1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSk7fTt2YXIgbWF4U2FmZUludGVnZXI9TWF0aC5wb3coMiw1MyktMTt2YXIgdG9MZW5ndGg9ZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpe3ZhciBsZW49dG9JbnRlZ2VyKHZhbHVlKTtyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobGVuLDApLG1heFNhZmVJbnRlZ2VyKTt9Oy8vIFRoZSBsZW5ndGggcHJvcGVydHkgb2YgdGhlIGZyb20gbWV0aG9kIGlzIDEuXG5yZXR1cm4gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UvKiwgbWFwRm4sIHRoaXNBcmcgKi8pey8vIDEuIExldCBDIGJlIHRoZSB0aGlzIHZhbHVlLlxudmFyIEM9dGhpczsvLyAyLiBMZXQgaXRlbXMgYmUgVG9PYmplY3QoYXJyYXlMaWtlKS5cbnZhciBpdGVtcz1PYmplY3QoYXJyYXlMaWtlKTsvLyAzLiBSZXR1cm5JZkFicnVwdChpdGVtcykuXG5pZihhcnJheUxpa2U9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5mcm9tIHJlcXVpcmVzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IC0gbm90IG51bGwgb3IgdW5kZWZpbmVkXCIpO30vLyA0LiBJZiBtYXBmbiBpcyB1bmRlZmluZWQsIHRoZW4gbGV0IG1hcHBpbmcgYmUgZmFsc2UuXG52YXIgbWFwRm49YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIHVuZGVmaW5lZDt2YXIgVDtpZih0eXBlb2YgbWFwRm4hPT0ndW5kZWZpbmVkJyl7Ly8gNS4gZWxzZVxuLy8gNS4gYSBJZiBJc0NhbGxhYmxlKG1hcGZuKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuaWYoIWlzQ2FsbGFibGUobWFwRm4pKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO30vLyA1LiBiLiBJZiB0aGlzQXJnIHdhcyBzdXBwbGllZCwgbGV0IFQgYmUgdGhpc0FyZzsgZWxzZSBsZXQgVCBiZSB1bmRlZmluZWQuXG5pZihhcmd1bWVudHMubGVuZ3RoPjIpe1Q9YXJndW1lbnRzWzJdO319Ly8gMTAuIExldCBsZW5WYWx1ZSBiZSBHZXQoaXRlbXMsIFwibGVuZ3RoXCIpLlxuLy8gMTEuIExldCBsZW4gYmUgVG9MZW5ndGgobGVuVmFsdWUpLlxudmFyIGxlbj10b0xlbmd0aChpdGVtcy5sZW5ndGgpOy8vIDEzLiBJZiBJc0NvbnN0cnVjdG9yKEMpIGlzIHRydWUsIHRoZW5cbi8vIDEzLiBhLiBMZXQgQSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kIFxuLy8gb2YgQyB3aXRoIGFuIGFyZ3VtZW50IGxpc3QgY29udGFpbmluZyB0aGUgc2luZ2xlIGl0ZW0gbGVuLlxuLy8gMTQuIGEuIEVsc2UsIExldCBBIGJlIEFycmF5Q3JlYXRlKGxlbikuXG52YXIgQT1pc0NhbGxhYmxlKEMpP09iamVjdChuZXcgQyhsZW4pKTpuZXcgQXJyYXkobGVuKTsvLyAxNi4gTGV0IGsgYmUgMC5cbnZhciBrPTA7Ly8gMTcuIFJlcGVhdCwgd2hpbGUgayA8IGxlbuKApiAoYWxzbyBzdGVwcyBhIC0gaClcbnZhciBrVmFsdWU7d2hpbGUoazxsZW4pe2tWYWx1ZT1pdGVtc1trXTtpZihtYXBGbil7QVtrXT10eXBlb2YgVD09PSd1bmRlZmluZWQnP21hcEZuKGtWYWx1ZSxrKTptYXBGbi5jYWxsKFQsa1ZhbHVlLGspO31lbHNle0Fba109a1ZhbHVlO31rKz0xO30vLyAxOC4gTGV0IHB1dFN0YXR1cyBiZSBQdXQoQSwgXCJsZW5ndGhcIiwgbGVuLCB0cnVlKS5cbkEubGVuZ3RoPWxlbjsvLyAyMC4gUmV0dXJuIEEuXG5yZXR1cm4gQTt9O30oKTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWtleWRvd24vZGlzdC9saWIvYXJyYXkuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMjAyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17bWFpblRhYmxlOnt0YWJsZUxheW91dDonZml4ZWQnLHdpZHRoOictd2Via2l0LWNhbGMoMTAwJSArIDE2cHgpJyxib3JkZXJDb2xsYXBzZTonY29sbGFwc2UnLG1hcmdpbkJvdHRvbTonMjBweCd9LGhlYWRlclRhYmxlOnt0YWJsZUxheW91dDonZml4ZWQnLHdpZHRoOicxMDAlJyxib3JkZXJDb2xsYXBzZTonY29sbGFwc2UnfSxmb290ZXJUYWJsZTp7dGFibGVMYXlvdXQ6J2ZpeGVkJyx3aWR0aDonMTAwJScsYm9yZGVyQ29sbGFwc2U6J2NvbGxhcHNlJ30sdGg6e2JvcmRlckJvdHRvbTonMXB4IHNvbGlkIGJsYWNrJyxiYWNrZ3JvdW5kQ29sb3I6J2dyZXknLGhlaWdodDonMzBweCcsYm9yZGVyOicxcHggc29saWQgbGlnaHRncmF5JyxkaXNwbGF5Oid0YWJsZS1jZWxsJyxjb2xvcjonYmxhY2snLGJvbGRDb2xvcjoncmVkJ30sdGhIaWRkZW46e2JvcmRlckJvdHRvbTonMXB4IHNvbGlkIGJsYWNrJyxiYWNrZ3JvdW5kQ29sb3I6J2dyZXknLGhlaWdodDonMXB4Jyxib3JkZXI6JzFweCBzb2xpZCBsaWdodGdyYXknLGRpc3BsYXk6J3RhYmxlLWNlbGwnfSx0cjp7YmFja2dyb3VuZENvbG9yOid3aGl0ZSd9LGZvY3VzZWQ6e2JhY2tncm91bmRDb2xvcjonbGlnaHRibHVlJ30sdGQ6e2JvcmRlcjonMXB4IHNvbGlkIGxpZ2h0Z3JheScsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9LGljb25zOnthc2M6Jy9pbWFnZXMvaWNvbnMvc29ydC1hbHBoYS1hc2MucG5nJyxkZXNjOicvaW1hZ2VzL2ljb25zL3NvcnQtYWxwaGEtZGVzYy5wbmcnfSxpbWFnZTp7bWFyZ2luOicxcHgnfSx3cmFwcGVyOntoZWlnaHQ6J2luaGVyaXQnLG92ZXJmbG93OidhdXRvJyxtaW5IZWlnaHQ6JzEwMHB4J30sbWFpbjp7aGVpZ2h0Oidpbmhlcml0J30saGVhZGVyOntvdmVyZmxvdzonaGlkZGVuJ30sYm9vbFN1bWJvbDp7eWVzOnt2YWx1ZTonXFx1MjcxNCcsY29sb3I6J2dyZWVuJ30sbm86ey8vdmFsdWU6ICdcXHUyNzE2JyxcbmNvbG9yOm51bGx9LG51bGw6e3ZhbHVlOictJyxjb2xvcjpudWxsfX0sYm9vbENvbG91cjp7eWVzOm51bGwsbm86bnVsbH19O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXRhLWdyaWQvZGF0YS1ncmlkLXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjAzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci1zdHlsZXMnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgSUNPTiA9ICdwcmludCc7XG5cbnZhciBCdXR0b25SZWdpc3RlclByaW50ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvblJlZ2lzdGVyUHJpbnQsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25SZWdpc3RlclByaW50KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25SZWdpc3RlclByaW50KTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvblJlZ2lzdGVyUHJpbnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWdpc3RlclByaW50KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25SZWdpc3RlclByaW50LCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0blByaW50JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b25SZWdpc3RlclByaW50O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuLypcclxuQnV0dG9uUmVnaXN0ZXJQcmludC5wcm9wVHlwZXMgPSB7XHJcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXHJcbn1cclxuKi9cblxuQnV0dG9uUmVnaXN0ZXJQcmludC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHNob3c6IHRydWUsXG4gICAgdmFsdWU6ICdQcmludCdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVnaXN0ZXJQcmludDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1wcmludC9idXR0b24tcmVnaXN0ZXItcHJpbnQuanN4XG4vLyBtb2R1bGUgaWQgPSAyMDRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJQ09OID0gJ2F0dGFjaG1lbnQnO1xuXG52YXIgQnV0dG9uUGRmID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvblBkZiwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgLy8g0LrQvdC+0L/QutCwINCy0YvQt9C+0LLQsCDRhNCw0LnQu9CwINCy0LvQvtC00LXQvdC40Y8g0LIg0YTQvtGA0LzQsNGC0LUgUERGXG4gICAgZnVuY3Rpb24gQnV0dG9uUGRmKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25QZGYpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uUGRmLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uUGRmKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25QZGYsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2soKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5HZXRQZGYnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSA/IHRoaXMucHJvcHMudmFsdWUgOiAnUERGJyxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUNsaWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zW0lDT05dIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvblBkZjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkJ1dHRvblBkZi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHNob3c6IHRydWVcbn07XG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvblBkZjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1wZGYvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyMDVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJQ09OID0gJ2ZpbHRlcic7XG5cbnZhciBCdXR0b25SZWdpc3RlckZpbHRlciA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25SZWdpc3RlckZpbHRlciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgLy8g0LrQvdC+0L/QutCwINGB0L7Qt9C00LDQvdC40Y8g0LTQvtC60YPQvNC10L3RgtCwINCyINGA0LXQs9C40YHRgtGA0LDRhVxuICAgIGZ1bmN0aW9uIEJ1dHRvblJlZ2lzdGVyRmlsdGVyKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25SZWdpc3RlckZpbHRlcik7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCdXR0b25SZWdpc3RlckZpbHRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1dHRvblJlZ2lzdGVyRmlsdGVyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25SZWdpc3RlckZpbHRlciwgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub25DbGljaygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnRmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdGhpcy5wcm9wcy5zaG93LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUNsaWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zW0lDT05dIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvblJlZ2lzdGVyRmlsdGVyO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuLypcclxuQnV0dG9uUmVnaXN0ZXJGaWx0ZXIucHJvcFR5cGVzID0ge1xyXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxyXG59XHJcbiovXG5cbkJ1dHRvblJlZ2lzdGVyRmlsdGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZVxufTtcbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVnaXN0ZXJGaWx0ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZmlsdGVyL2J1dHRvbi1yZWdpc3Rlci1maWx0ZXIuanN4XG4vLyBtb2R1bGUgaWQgPSAyMDZcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJQ09OID0gJ3NlbGVjdCc7XG5cbnZhciBCdXR0b25TZWxlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQnV0dG9uU2VsZWN0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uU2VsZWN0KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25TZWxlY3QpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uU2VsZWN0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uU2VsZWN0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25TZWxlY3QsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2xpY2soJ3NlbGVjdCcpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcHMudmFsdWUgPyB0aGlzLnByb3BzLnZhbHVlIDogJ1ZhbGlkYSc7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5TZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b25TZWxlY3Q7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG4vKlxyXG5CdXR0b25SZWdpc3RlclByaW50LnByb3BUeXBlcyA9IHtcclxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcclxufVxyXG4qL1xuXG5CdXR0b25TZWxlY3QuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvblNlbGVjdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1zZWxlY3QvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyMDdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBNb2RhbFBhZ2UgPSByZXF1aXJlKCcuLy4uLy4uL21vZGFscGFnZS9tb2RhbFBhZ2UuanN4JyksXG4gICAgSUNPTiA9ICdtYWlsJztcblxudmFyIEJ1dHRvblJlZ2lzdGVyRW1haWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25SZWdpc3RlckVtYWlsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25SZWdpc3RlckVtYWlsKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25SZWdpc3RlckVtYWlsKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uUmVnaXN0ZXJFbWFpbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1dHRvblJlZ2lzdGVyRW1haWwpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzaG93TW9kYWw6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm1vZGFsUGFnZUNsaWNrID0gX3RoaXMubW9kYWxQYWdlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqINC+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPINC60LvQuNC6LCDQvtGC0LrRgNC+0LXRgiDQvNC+0LTQsNC70YzQvdC+0LUg0L7QutC90L5cclxuICAgICAqIEBwYXJhbSBlXHJcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvblJlZ2lzdGVyRW1haWwsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgICAgICAgIC8vINC10YHQu9C4INGC0YDQtdCx0YPQtdGC0YHRjyDQv9GA0LXQtNCy0LDRgNC40YLQtdC70YzQvdC+INC40YXQstC10YnQtdC90LjQtSwg0YLQviDQvtGC0LrRgNGL0LLQsNC10Lwg0LzQvtC00LDQu9GM0L3QvtC1INC+0LrQvdC+LCDQuNC90LDRh9C1INCy0YvQt9GL0LLQsNC10Lwg0LzQtdGC0L7QtCDQuNC3INC/0YDQvtC/0YHQvtCyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kb2NUeXBlSWQudG9Mb3dlckNhc2UoKSA9PT0gJ2FydicgfHwgdGhpcy5wcm9wcy5kb2NUeXBlSWQudG9Mb3dlckNhc2UoKSA9PT0gJ3RlYXRpcycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd01vZGFsOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsUGFnZUNsaWNrKCdPaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5FbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zW0lDT05dIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBNb2RhbFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlTmFtZTogJycgKyB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdGhpcy5zdGF0ZS5zaG93TW9kYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbE9iamVjdHM6IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ0thcyBzYWFkYSBlbWFpbCA/J1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvdCwINGB0L7QsdGL0YLQuNC1INC60LvQuNC60LAg0L3QsCDQutC90L7Qv9C60Lgg0LzQvtC20LDQu9GM0L3QvtCz0L4g0L7QutC90LBcclxuICAgICAgICAgKiBAcGFyYW0gYnRuRXZlbnRcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW9kYWxQYWdlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW9kYWxQYWdlQ2xpY2soYnRuRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChidG5FdmVudCA9PT0gJ09rJykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93TW9kYWw6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvblJlZ2lzdGVyRW1haWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qXHJcbkJ1dHRvblJlZ2lzdGVyUHJpbnQucHJvcFR5cGVzID0ge1xyXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxyXG59XHJcbiovXG5cbkJ1dHRvblJlZ2lzdGVyRW1haWwuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlLFxuICAgIHZhbHVlOiAnRW1haWwnLFxuICAgIGRvY1R5cGVJZDogJydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVnaXN0ZXJFbWFpbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1lbWFpbC9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDIwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLmpzeCcpLFxuICAgIElDT04gPSAncmVmcmVzaCc7XG5cbnZhciBCdXR0b25SZWZyZXNoID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvblJlZnJlc2gsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25SZWZyZXNoKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25SZWZyZXNoKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvblJlZnJlc2guX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWZyZXNoKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25SZWZyZXNoLCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnRuUmVmcmVzaCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnVXVlbmRhJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdGhpcy5wcm9wcy5zaG93LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUNsaWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zW0lDT05dIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvblJlZnJlc2g7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5CdXR0b25SZWZyZXNoLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZVxufTtcbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uUmVmcmVzaDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWZyZXNoL2luZGV4LmpzeFxuLy8gbW9kdWxlIGlkID0gMjA5XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xudmFyIERvY0NvbnRleHQgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2RvYy1jb250ZXh0LmpzJyk7XG52YXIgcHJlcGFyZURhdGEgPSByZXF1aXJlKCcuLy4uLy4uLy4uLy4uL2xpYnMvcHJlcGFpcmVGaWx0ZXJEYXRhJyk7XG52YXIgZ2V0VGV4dFZhbHVlID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL2dldFRleHRWYWx1ZScpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vZ3JpZC1maWx0ZXItc3R5bGVzJyk7XG5cbnZhciBHcmlkRmlsdGVyID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEdyaWRGaWx0ZXIsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIEdyaWRGaWx0ZXIocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyaWRGaWx0ZXIpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChHcmlkRmlsdGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR3JpZEZpbHRlcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGdyaWRDb25maWc6IHByb3BzLmdyaWRDb25maWcsIC8vIGdyaWQgY29uZmlnXG4gICAgICAgICAgICBkYXRhOiBwcm9wcy5kYXRhXG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gX3RoaXMuaGFuZGxlQ2hhbmdlLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5wcmVwYXJlRmlsdGVyRmllbGRzID0gX3RoaXMucHJlcGFyZUZpbHRlckZpZWxkcy5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMucmV0dXJuSW50ZXJ2YWwgPSBfdGhpcy5yZXR1cm5JbnRlcnZhbC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMucmV0dXJuVGV4dENvbXBvbmVudCA9IF90aGlzLnJldHVyblRleHRDb21wb25lbnQuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZVNlbGVjdENoYW5nZSA9IF90aGlzLmhhbmRsZVNlbGVjdENoYW5nZS5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICog0J7QsdGA0LDQsdC+0YLRh9C40Log0L3QsCDQuNC30LzQtdC90LXQvdC40Y8g0LjQvdC/0YPRgtC+0LJcclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoR3JpZEZpbHRlciwgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlQ2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmVGaWx0ZXJDb250ZW50KGUudGFyZ2V0Lm5hbWUsIGUudGFyZ2V0LnZhbHVlLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC90LAg0LjQt9C80LXQvdC10L3QuNGPINCy0YvQsdC+0YDQsCDRgdC10LvQtdC60YLQsFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVTZWxlY3RDaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VsZWN0Q2hhbmdlKGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2F2ZUZpbHRlckNvbnRlbnQoZS50YXJnZXQubmFtZSwgbnVsbCwgZS50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0YHQvtGF0YDQsNC90LjRgiDQt9C90LDRh9C10L3QuNC1INGE0LjQu9GM0YLRgNCwXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAgICAgKiBAcGFyYW0gc3FsTm8gLSDQuNGB0LrQu9GO0YfQtdC90LjQtSDQvdCwINGE0LjQu9GM0YLRgFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzYXZlRmlsdGVyQ29udGVudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlRmlsdGVyQ29udGVudChuYW1lLCB2YWx1ZSwgc3FsTm8pIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5wcm9wcy5kYXRhO1xuXG4gICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQuNC8INC90LAg0L3QsNC70LjRh9C40LUg0L/QvtC70LXQuSDQtNC70Y8g0YTQuNC70YzRgtGA0LDRhtC40LhcbiAgICAgICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gcHJlcGFyZURhdGEodGhpcy5wcm9wcy5ncmlkQ29uZmlnLCB0aGlzLnByb3BzLmRvY1R5cGVJZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLnByb3BzLmRhdGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBrYXNfc2lzYWxkYWIgPSAxO1xuICAgICAgICAgICAgLy8g0LjRidC10Lwg0LfQvdCw0YfQtdC90LjQtSBzcWxOb1xuICAgICAgICAgICAgaWYgKERvY0NvbnRleHQuZmlsdGVyW3RoaXMucHJvcHMuZG9jVHlwZUlkXSkge1xuICAgICAgICAgICAgICAgIHZhciBpZHggPSBEb2NDb250ZXh0LmZpbHRlclt0aGlzLnByb3BzLmRvY1R5cGVJZF0uZmluZEluZGV4KGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5pZCA9PT0gbmFtZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAga2FzX3Npc2FsZGFiID0gRG9jQ29udGV4dC5maWx0ZXJbdGhpcy5wcm9wcy5kb2NUeXBlSWRdW2lkeF0uc3FsTm87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDRgdC+0YXRgNCw0L3QuNC8INC30L3QsNGH0LXQvdC40LUg0YTQuNC70YzRgtGA0LBcblxuICAgICAgICAgICAgZGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAocm93LmlkID09PSBuYW1lKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcm93LnZhbHVlID0gIXNxbE5vID8gdmFsdWUgOiByb3cudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5zcWxObyA9IHZhbHVlID8ga2FzX3Npc2FsZGFiIDogc3FsTm87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByb3c7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgIGlzSW50ZXJ2YWxTdGFydCA9ICEhbmFtZS5tYXRjaCgvX3N0YXJ0LyksXG4gICAgICAgICAgICAgICAgaXNJbnRlcnZhbEVuZCA9ICEhbmFtZS5tYXRjaCgvX2VuZC8pO1xuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IG5hbWU7XG5cbiAgICAgICAgICAgIC8vINC90LDQtNC+INC90LDQudGC0Lgg0Y3Qu9C10LzQtdC90YIg0LzQsNGB0YHQuNCy0LAg0YEg0LTQsNC90L3Ri9C80Lgg0LTQu9GPINGN0YLQvtCz0L4g0LrQvtC80L/QvtC90LXQvdGC0LBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgaXNJbnRlcnZhbFN0YXJ0ID0gISFuYW1lLm1hdGNoKC9fc3RhcnQvKTtcbiAgICAgICAgICAgICAgICBpc0ludGVydmFsRW5kID0gISFuYW1lLm1hdGNoKC9fZW5kLyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNJbnRlcnZhbFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgcmVwbGFjZSBzdGFydCBmcm9tIGZpcmxkTmFtZVxuICAgICAgICAgICAgICAgICAgICBmaWVsZE5hbWUgPSBuYW1lLnJlcGxhY2UoL19zdGFydC9pLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzSW50ZXJ2YWxFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCByZXBsYWNlIGVuZCBmcm9tIGZpcmxkTmFtZVxuICAgICAgICAgICAgICAgICAgICBmaWVsZE5hbWUgPSBuYW1lLnJlcGxhY2UoL19lbmQvaSwgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkYXRhW2ldLmlkID09PSBmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzSW50ZXJ2YWxTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4XS5zdGFydCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4XVtmaWVsZE5hbWUgKyAnX3N0YXJ0J10gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleF0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzSW50ZXJ2YWxFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleF0uZW5kID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdW2ZpZWxkTmFtZSArICdfZW5kJ10gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleF0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleF0uc3FsTm8gPSBzcWxObyA/IHNxbE5vIDogMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g0YHQvtGF0YDQsNC90LjQvCDRhNC40LvRjNGC0YBcbiAgICAgICAgICAgIERvY0NvbnRleHQuZmlsdGVyW3RoaXMucHJvcHMuZG9jVHlwZUlkXSA9IGRhdGE7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZXIoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBwcmVwYXJlRGF0YSh0aGlzLnByb3BzLmdyaWRDb25maWcsIHRoaXMucHJvcHMuZG9jVHlwZUlkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZXIoZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINC10YHQu9C4INGD0LrQsNC30LDQvSDRjdC70LXQvNC10L3RgiAsINGC0L4g0YPRgdGC0LDQvdC+0LLQuNC8INC90LAg0L3QtdCz0L4g0YTQvtC60YPRgVxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZm9jdXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvY3VzRWxlbWVudCA9IHRoaXMucmVmc1t0aGlzLnByb3BzLmZvY3VzRWxlbWVudF07XG4gICAgICAgICAgICAgICAgaWYgKGZvY3VzRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBmb2N1c0VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICAvLyDRgdC+0LfQtNCw0YHRgiDQuNC3INC/0L7Qu9C10Lkg0LPRgNC40LTQsCDQutC+0LzQv9C+0L3QtdC90YLRiyDQtNC70Y8g0YTQvtGA0LzQuNGA0L7QstCw0L3QuNGPINGD0YHQu9C+0LLQuNC5INGE0LjQu9GM0YLRgNCw0YbQuNC4XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGRzZXQgfSxcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBhcmVGaWx0ZXJGaWVsZHMoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJlcGFyZUZpbHRlckZpZWxkcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlRmlsdGVyRmllbGRzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vINGC0L7Qu9GM0LrQviDQv9C+0LvRjywg0LrQvtGC0L7RgNGL0LUg0L7RgtC80LXRh9Cw0L3RiyDQutCw0Logc2hvdzp0cnVlINC40LvQuCDRj9Cy0L3QviDQutCwINGD0LrQsNC30LDQvdGLINC4INGC0LUsINGDINC60L7RgtC+0YvRhSDQvdC10YLRgyBoaWRlRmlsdGVyXG4gICAgICAgICAgICB2YXIgZmlsdGVyRmllbGRzID0gdGhpcy5wcm9wcy5ncmlkQ29uZmlnLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQuaWQgIT09ICdpZCcgJiYgIWZpZWxkLmhpZGVGaWx0ZXIgJiYgKCFmaWVsZC5maWx0ZXIgfHwgZmllbGQuZmlsdGVyID09ICdzaG93JykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyRmllbGRzLm1hcChmdW5jdGlvbiAocm93LCBpbmRleCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZm9ybVdpZGdldCwga2V5OiAnZmllbGRTZXQtJyArIHJvdy5pZCB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZm9ybVdpZGdldExhYmVsIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFRleHRWYWx1ZShyb3cubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZvcm1XaWRnZXRJbnB1dCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93LmludGVydmFsID8gX3RoaXMyLnJldHVybkludGVydmFsKHJvdykgOiBfdGhpczIucmV0dXJuVGV4dENvbXBvbmVudChyb3cpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JldHVyblRleHRDb21wb25lbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmV0dXJuVGV4dENvbXBvbmVudChyb3cpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5wcm9wcy5kYXRhO1xuXG4gICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQuNC8INC90LAg0L3QsNC70LjRh9C40LUg0L/QvtC70LXQuSDQtNC70Y8g0YTQuNC70YzRgtGA0LDRhtC40LhcbiAgICAgICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gcHJlcGFyZURhdGEodGhpcy5wcm9wcy5ncmlkQ29uZmlnLCB0aGlzLnByb3BzLmRvY1R5cGVJZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb21wb25lbnRUeXBlID0gcm93LnR5cGUgPyByb3cudHlwZSA6ICd0ZXh0JztcblxuICAgICAgICAgICAgLy8g0LjRiNC10Lwg0LTQtdGE0L7Qu9GC0L3QvtC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJvdy52YWx1ZSA/IHJvdy52YWx1ZSA6ICcnO1xuICAgICAgICAgICAgdmFyIGthc19zaXNhbGRhYiA9IDE7XG5cbiAgICAgICAgICAgIC8vINC40YnQtdC8INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvdC90L7QtSDQt9C90LDRh9C10L3QuNC1XG4gICAgICAgICAgICB2YXIgb2JqID0gZGF0YS5maW5kKGZ1bmN0aW9uIChkYXRhUm93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFSb3cuaWQgPT0gcm93LmlkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChvYmogJiYgJ3ZhbHVlJyBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9iai52YWx1ZSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyDQtdGB0YLRjCDQtNC10YTQvtC70YLQvdC+0LUg0LfQvdCw0YfQtdC90LjQtVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGRhdGFbaW5kZXhdW3Jvdy5pZF0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqLnZhbHVlID8gb2JqLnZhbHVlIDogdmFsdWU7XG4gICAgICAgICAgICAgICAga2FzX3Npc2FsZGFiID0gb2JqLnNxbE5vID8gb2JqLnNxbE5vIDogMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndyYXBwZXIgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNlbGVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBrYXNfc2lzYWxkYWIgfHwgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJvdy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3NxbE5vJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZVNlbGVjdENoYW5nZSB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAxIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRUZXh0VmFsdWUoJ1NJU0FMREFCJylcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogMCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VGV4dFZhbHVlKCdFSSBTSVNBTERBJylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHN0eWxlOiBzdHlsZXMuaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGNvbXBvbmVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRUZXh0VmFsdWUocm93Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiByb3cuaWQsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiByb3cudG9vbFRpcCA/IGdldFRleHRWYWx1ZShyb3cudG9vbFRpcCkgOiBnZXRUZXh0VmFsdWUocm93Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICByZWY6IHJvdy5pZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdGhpcy5wcm9wcy5kYXRhW3Jvdy5pZF0gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQstC10YDQvdC10YIg0LTQstCwINC40L3Qv9GD0YLQsCwg0LPQtNC1INCx0YPQtNGD0YIg0YXRgNCw0L3QuNGC0YHRjyDQt9C90LDRh9C10L3QuNGPINC00LvRjyDRgdC90LDRh9Cw0LvQsCDQuCDQutC+0L3RhtCwINC00LjQsNC/0LDQt9C+0L3QsFxyXG4gICAgICAgICAqIEBwYXJhbSByb3dcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmV0dXJuSW50ZXJ2YWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmV0dXJuSW50ZXJ2YWwocm93KSB7XG4gICAgICAgICAgICBpZiAocm93ICYmIHJvdy5pbnRlcnZhbCAmJiAhKCdzdGFydCcgaW4gcm93KSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJvdy52YWx1ZSA/IHJvdy52YWx1ZSA6IG51bGw7XG4gICAgICAgICAgICAgICAgcm93ID0gX2V4dGVuZHMoe30sIHJvdywgeyBzdGFydDogdmFsdWUgfSwgeyBlbmQ6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMucHJvcHMuZGF0YTtcbiAgICAgICAgICAgIHZhciBvYmogPSBkYXRhLmZpbmQoZnVuY3Rpb24gKGRhdGFSb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVJvdy5pZCA9PSByb3cuaWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHZhbHVlU3RhcnQgPSByb3cuaW50ZXJ2YWwgPyBvYmpbJ3N0YXJ0J10gOiBvYmoudmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWVFbmQgPSByb3cuaW50ZXJ2YWwgPyBvYmpbJ2VuZCddIDogb2JqLnZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50VHlwZSA9IHJvdy50eXBlID8gcm93LnR5cGUgOiAndGV4dCc7XG4gICAgICAgICAgICBpZiAodmFsdWVTdGFydCAmJiB2YWx1ZUVuZCkge1xuICAgICAgICAgICAgICAgIC8vINGB0L7RhdGA0LDQvdC40Lwg0LfQvdCw0YfQtdC90LjQtVxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUZpbHRlckNvbnRlbnQocm93Lm5hbWUsIHZhbHVlU3RhcnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUZpbHRlckNvbnRlbnQocm93Lm5hbWUsIHZhbHVlRW5kKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmludGVydmFsIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHN0eWxlOiBzdHlsZXMuaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGNvbXBvbmVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiByb3cubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcm93LmlkICsgJ19zdGFydCcsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiByb3cubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiByb3cuaWQgKyAnX3N0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlU3RhcnQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLnByb3BzLmRhdGFbcm93LmlkXVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJy0nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgc3R5bGU6IHN0eWxlcy5pbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogY29tcG9uZW50VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHJvdy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiByb3cuaWQgKyAnX2VuZCcsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiByb3cubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiByb3cuaWQgKyAnX2VuZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUVuZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHRoaXMucHJvcHMuZGF0YVtyb3cuaWRdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuXG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkobmV4dFByb3BzLmdyaWRDb25maWcpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3RhdGUuZ3JpZENvbmZpZykgfHwgSlNPTi5zdHJpbmdpZnkobmV4dFByb3BzLmRhdGEpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3RhdGUuZGF0YSkgfHwgcHJldlN0YXRlLmRhdGEubGVuZ3RoID09PSAwIHx8IHByZXZTdGF0ZS5kYXRhLmxlbmd0aCAhPT0gbmV4dFByb3BzLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZ3JpZENvbmZpZzogbmV4dFByb3BzLmdyaWRDb25maWcsIGRhdGE6IG5leHRQcm9wcy5kYXRhIH07XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gR3JpZEZpbHRlcjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkdyaWRGaWx0ZXIucHJvcFR5cGVzID0ge1xuICAgIGdyaWRDb25maWc6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGRhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRGaWx0ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2RhdGEtZ3JpZC9ncmlkLWZpbHRlci9ncmlkLWZpbHRlci5qc3hcbi8vIG1vZHVsZSBpZCA9IDIxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7dmFyIF9zZWxlY3Q7ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe2lmKGtleSBpbiBvYmope09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsd3JpdGFibGU6dHJ1ZX0pO31lbHNle29ialtrZXldPXZhbHVlO31yZXR1cm4gb2JqO31tb2R1bGUuZXhwb3J0cz17Zm9ybVdpZGdldDp7bWFyZ2luQm90dG9tOic1cHgnLGRpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J3Jvdyd9LGZvcm1XaWRnZXRMYWJlbDp7ZGlzcGxheTonZmxleCcsanVzdGlmeUNvbnRlbnQ6J2ZsZXgtZW5kJyx3aWR0aDonNDAlJyxtYXJnaW5SaWdodDonMTBweCd9LGZvcm1XaWRnZXRJbnB1dDp7d2lkdGg6JzEwMCUnLGJvcmRlclJhZGl1czonMnB4JyxwYWRkaW5nOiczcHgnLGJvcmRlcjonMHB4J30saW5wdXQ6e2JvcmRlclJhZGl1czonMnB4JyxwYWRkaW5nOic1cHgnLGRpc3BsYXk6J2lubGluZS1ibG9jayd9LHNlbGVjdDooX3NlbGVjdD17Ym9yZGVyUmFkaXVzOicycHgnLHBhZGRpbmc6JzVweCcsZGlzcGxheTonaW5saW5lLWJsb2NrJyx3aWR0aDonYXV0byd9LF9kZWZpbmVQcm9wZXJ0eShfc2VsZWN0LCdkaXNwbGF5JywnZmxleCcpLF9kZWZpbmVQcm9wZXJ0eShfc2VsZWN0LCdtYXJnaW5SaWdodCcsJzVweCcpLF9zZWxlY3QpLHdyYXBwZXI6e21hcmdpbjonNXB4JyxkaXNwbGF5OidmbGV4Jyx3aWR0aDonOTUlJ30sZmllbGRTZXQ6e2JvcmRlclJhZGl1czonMnB4JyxtYXJnaW46JzEwcHgnfSx1aTp7Ym9yZGVyUmFkaXVzOicycHgnLHBhZGRpbmc6JzVweCcsZGlzcGxheTonaW5saW5lLWJsb2NrJ30saW50ZXJ2YWw6e2Rpc3BsYXk6J2lubGluZS1mbGV4J319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9kYXRhLWdyaWQvZ3JpZC1maWx0ZXIvZ3JpZC1maWx0ZXItc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgcmFkaXVtID0gcmVxdWlyZSgncmFkaXVtJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi9pbnB1dC10ZXh0LXN0eWxlcycpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIElucHV0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKElucHV0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbnB1dChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlIHx8ICcnLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHByb3BzLnJlYWRPbmx5LFxuICAgICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgdmFsaWQ6IHByb3BzLnZhbGlkXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICAgICAga2V5OiAnb25DaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogZmllbGRWYWx1ZSB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMucHJvcHMubmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRQbGFjZUhvbGRlciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICBpbnB1dFN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLmlucHV0LCB0aGlzLnByb3BzLndpZHRoID8geyB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCB9IDoge30sIHRoaXMucHJvcHMuc3R5bGUgPyB0aGlzLnByb3BzLnN0eWxlIDoge30sIHRoaXMuc3RhdGUucmVhZE9ubHkgPyBzdHlsZXMucmVhZE9ubHkgOiB7fSk7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwcGVyIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsLCBodG1sRm9yOiB0aGlzLnByb3BzLm5hbWUsIHJlZjogJ2xhYmVsJyB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRUZXh0VmFsdWUodGhpcy5wcm9wcy50aXRsZSlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGlucHV0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0aGlzLnN0YXRlLnJlYWRPbmx5LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogdGhpcy5wcm9wcy5wYXR0ZXJuLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogaW5wdXRQbGFjZUhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIG1heExlbmd0aDogdGhpcy5wcm9wcy5tYXhMZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDRg9GB0YLQsNC90L7QstC40YIg0YTQvtC60YPRgSDQvdCwINGN0LvQtdC80LXQvdGC0YtcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9jdXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnNbJ2lucHV0J10uZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLnZhbHVlICE9PSBwcmV2U3RhdGUudmFsdWUgfHwgbmV4dFByb3BzLnJlYWRPbmx5ICE9PSBwcmV2U3RhdGUucmVhZE9ubHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbmV4dFByb3BzLnZhbHVlLCByZWFkT25seTogbmV4dFByb3BzLnJlYWRPbmx5IH07XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSW5wdXQ7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5JbnB1dC5wcm9wVHlwZXMgPSB7XG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBhdHRlcm46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbklucHV0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICByZWFkT25seTogZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHZhbGlkOiB0cnVlLFxuICAgIHZhbHVlOiAnJyxcbiAgICB0aXRsZTogJydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFkaXVtKElucHV0KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmpzeFxuLy8gbW9kdWxlIGlkID0gMjEyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17aW5wdXQ6e3dpZHRoOic3MCUnLG1hcmdpbjonNXB4IDJweCcsYm9yZGVyUmFkaXVzOiczcHgnLCc6Zm9jdXMnOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0cGluayd9LGJvcmRlcjonMXB4IHNvbGlkIGdyYXknLGhlaWdodDonMzBweCd9LHJlYWRPbmx5OntiYWNrZ3JvdW5kQ29sb3I6JyNGM0VGRUYnfSx3cmFwcGVyOnttYXJnaW46JzVweCcsZGlzcGxheTonZmxleCcsd2lkdGg6Jzk1JSd9LGxhYmVsOnt3aWR0aDonMzAlJyxtYXJnaW46JzVweCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjEzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi4vbW9kYWxQYWdlLmpzeCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzLmpzJyk7XG5cbnZhciBUZXh0QXJlYSA9IHJlcXVpcmUoJy4vLi4vLi4vdGV4dC1hcmVhL3RleHQtYXJlYS5qc3gnKTtcbnZhciBEYXRhR3JpZCA9IHJlcXVpcmUoJy4uLy4uL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4Jyk7XG5cbnZhciBNb2RhbFBhZ2VJbmZvID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKE1vZGFsUGFnZUluZm8sIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE1vZGFsUGFnZUluZm8ocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsUGFnZUluZm8pO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNb2RhbFBhZ2VJbmZvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW9kYWxQYWdlSW5mbykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNob3c6IF90aGlzLnByb3BzLnNob3dcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLy8gd2lsbCB1cGRhdGUgc3RhdGUgaWYgcHJvcHMgY2hhbmdlZFxuXG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWxQYWdlSW5mbywgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBHUklEX0NPTkZJRyA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnN0YW50cycpLnR1bGVtdXNlZC5ncmlkQ29uZmlnO1xuXG4gICAgICAgICAgICB2YXIgc3lzdGVtTWVzc2FnZSA9IHRoaXMucHJvcHMuc3lzdGVtTWVzc2FnZSA/IHRoaXMucHJvcHMuc3lzdGVtTWVzc2FnZSA6ICcnLFxuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLnByb3BzLnJlcG9ydCA/IHRoaXMucHJvcHMucmVwb3J0IDogJycsXG4gICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzID0gWydidG5PayddO1xuXG4gICAgICAgICAgICB2YXIgcmVwb3J0ID0gdGhpcy5sb2VUdWxlbXVzZWQoZGF0YSk7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICB7IHJlZjogJ21vZGFsUGFnZScsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMubW9kYWxQYWdlLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLnByb3BzLm1vZGFsUGFnZUJ0bkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICBtb2RhbFBhZ2VOYW1lOiAnVFxceEY2XFx4RjZcXHhGQ2xlc2FubmUgcmVwb3J0JyxcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzOiBtb2RhbE9iamVjdHNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ2NvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb24gfSksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcgJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRBcmVhLCB7IHRpdGxlOiAnUmVwb3J0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLnR1bGVtdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3JlcG9ydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndGV4dGFyZWEtcmVwb3J0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVwb3J0Lmtva2t1Vm90dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdncmlkLXJvdy1jb250YWluZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGFHcmlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZERhdGE6IHJlcG9ydC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRDb2x1bW5zOiBHUklEX0NPTkZJRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93VG9vbEJhcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZGF0YS1ncmlkJyB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbG9lVHVsZW11c2VkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvZVR1bGVtdXNlZChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgcmVwb3J0ID0ge1xuICAgICAgICAgICAgICAgIGtva2t1Vm90dGU6ICcnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFtdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgZXJyb3JzID0gMDtcbiAgICAgICAgICAgIC8vINC10YHQu9C4INC+0LTQuNC9INC+0LHRjNC10LrRglxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5kYXRhICYmIF90eXBlb2YoZGF0YS5kYXRhKSA9PSAnb2JqZWN0JyAmJiAhZGF0YS5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydC5kYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBkYXRhLnJlc3VsdCAmJiAhZGF0YS5lcnJvcl9jb2RlID8gJ09rJyA6ICdWaWdhJyxcbiAgICAgICAgICAgICAgICAgICAga2FzX3ZpZ2FuZTogZGF0YS5rYXNfdmlnYW5lID8gJ1ZpZ2EnIDogJ09rJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfY29kZTogZGF0YS5lcnJvcl9jb2RlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcl9tZXNzYWdlOiBkYXRhLmVycm9yX21lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHZpaXRlbnI6IGRhdGEudmlpdGVuciA/IGRhdGEudmlpdGVuciA6IG51bGxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5kYXRhICYmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZGF0YSkpID09ICdvYmplY3QnICYmIGRhdGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmRhdGEubWFwKGZ1bmN0aW9uIChyb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydC5kYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHJvdy5pZCA/IHJvdy5pZCA6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAga2FzX3ZpZ2FuZTogcm93Lmthc192aWdhbmUgPyAnVmlnYScgOiAnT2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByb3cucmVzdWx0ICYmICFyb3cuZXJyb3JfY29kZSA/ICdPaycgOiAnVmlnYScsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiByb3cuZXJyb3JfY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2U6IHJvdy5lcnJvcl9tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlpdGVucjogcm93LnZpaXRlbnIgPyByb3cudmlpdGVuciA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcm93LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVwb3J0Lmtva2t1Vm90dGUgPSAnVmVhZCBrb2trdSAnICsgZXJyb3JzICsgJywgUmVhZCBrb2trdTogJyArIHJlcG9ydC5kYXRhLmxlbmd0aCArICcsIFxceEQ1bm5lc3R1czogJyArIChyZXBvcnQuZGF0YS5sZW5ndGggLSBlcnJvcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcG9ydDtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLnNob3cgIT09IHByZXZTdGF0ZS5zaG93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2hvdzogbmV4dFByb3BzLnNob3cgfTtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNb2RhbFBhZ2VJbmZvO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuTW9kYWxQYWdlSW5mby5wcm9wVHlwZXMgPSB7XG4gICAgc3lzdGVtTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb2RhbFBhZ2VCdG5DbGljazogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kYWxQYWdlSW5mbztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFscGFnZS1yZXBvcnQvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyMTRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtpY29uOicvaW1hZ2VzL2ljb25zL2luZm8ucG5nJyxtb2RhbFBhZ2U6e2hlaWdodDonNzUlJ30sdHVsZW11czp7aGVpZ2h0OicyZW0nfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL21vZGFscGFnZS9tb2RhbHBhZ2UtcmVwb3J0L3N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjE1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vdGV4dC1hcmVhLXN0eWxlcycpO1xudmFyIHJhZGl1bSA9IHJlcXVpcmUoJ3JhZGl1bScpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIElucHV0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKElucHV0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbnB1dChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlIHx8ICcnLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQgfHwgdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICAgICAga2V5OiAnb25DaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBmaWVsZFZhbHVlIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMucHJvcHMubmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRQbGFjZUhvbGRlciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICBpbnB1dFN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLmlucHV0LCB0aGlzLnByb3BzLndpZHRoID8geyB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCB9IDoge30sIHRoaXMuc3RhdGUucmVhZE9ubHkgPyBzdHlsZXMucmVhZE9ubHkgOiB7fSwgdGhpcy5wcm9wcy5zdHlsZSA/IHRoaXMucHJvcHMuc3R5bGUgOiB7fSk7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwcGVyIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgeyBodG1sRm9yOiB0aGlzLnByb3BzLm5hbWUsIHJlZjogJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRUZXh0VmFsdWUodGhpcy5wcm9wcy50aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBpbnB1dFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0aGlzLnByb3BzLnJlYWRPbmx5LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGlucHV0UGxhY2VIb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHByZXZTdGF0ZS52YWx1ZSB8fCBuZXh0UHJvcHMucmVhZE9ubHkgIT09IHByZXZTdGF0ZS5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBuZXh0UHJvcHMudmFsdWUsIHJlYWRPbmx5OiBuZXh0UHJvcHMucmVhZE9ubHkgfTtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBJbnB1dDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbklucHV0LnByb3BUeXBlcyA9IHtcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2YWxpZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbklucHV0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICByZWFkT25seTogZmFsc2UsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHZhbGlkOiB0cnVlLFxuICAgIHRpdGxlOiAnJyxcbiAgICB2YWx1ZTogJydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFkaXVtKElucHV0KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvdGV4dC1hcmVhL3RleHQtYXJlYS5qc3hcbi8vIG1vZHVsZSBpZCA9IDIxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2lucHV0Ont3aWR0aDonMTAwJScsYm9yZGVyUmFkaXVzOiczcHgnLG92ZXJmbG93OidzY3JvbGwnLGhlaWdodDonZml0LWNvbnRlbnQnLCc6Zm9jdXMnOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0cGluayd9LGJvcmRlcjonMXB4IHNvbGlkIGdyYXknfSxmb2N1c2VkOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0Ymx1ZSd9LHJlYWRPbmx5OntiYWNrZ3JvdW5kQ29sb3I6JyNGM0VGRUYnfSx3cmFwcGVyOnttYXJnaW46JzVweCcsZGlzcGxheTonZmxleCcsd2lkdGg6Jzk4JScsZmxleERpcmVjdGlvbjonY29sdW1uJ30sbGFiZWw6e21hcmdpbjonNXB4J319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy90ZXh0LWFyZWEvdGV4dC1hcmVhLXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17ZG9jUm93OntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidyb3cgd3JhcCcvKlxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGJsdWUnXHJcbiAgICAgICAgKi99LGRvY0NvbHVtbjp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjonY29sdW1uJywvKlxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIHllbGxvdycsXHJcbiAgICAgICAgKi93aWR0aDonNTAlJ30sZG9jOntwb3NpdGlvbjoncmVsYXRpdmUnLGhlaWdodDonMTAwJScsZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjonY29sdW1uJy8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYnJvd24nXHJcbiAgICAgICAgKi99LGdyaWRDb250YWluZXI6e2Rpc3BsYXk6J2ZsZXgnLGZsZXhGbG93Oidyb3cgd3JhcCcsaGVpZ2h0Oic5NSUnfSxncmlkOnttYWluVGFibGU6e3RhYmxlTGF5b3V0OidmaXhlZCcscG9zaXRpb246J3JlbGF0aXZlJyx0ZDp7Ym9yZGVyOicxcHggc29saWQgbGlnaHRHcmV5JyxkaXNwbGF5Oid0YWJsZS1jZWxsJyxwYWRkaW5nTGVmdDonNXB4J30sbWluSGVpZ2h0OicyMDBweCcsbWFyZ2luQm90dG9tOicyMHB4J30saGVhZGVyVGFibGU6e3RhYmxlTGF5b3V0OidmaXhlZCd9fSxsaW1pdDp7d2lkdGg6JzIwJScsbWFyZ2luOic1cHggMnB4J30sb2s6e2JhY2tncm91bmRDb2xvcjonbGlnaHRncmVlbicsd2lkdGg6JzEwMCUnLHRleHRBbGlnbjoncmlnaHQnfSxlcnJvcjp7YmFja2dyb3VuZENvbG9yOidsaWdodGNvcmFsJyx3aWR0aDonMTAwJScsdGV4dEFsaWduOidyaWdodCd9LG5vdFZhbGlkOntiYWNrZ3JvdW5kQ29sb3I6J3llbGxvdycsd2lkdGg6JzEwMCUnLHRleHRBbGlnbjoncmlnaHQnfSx0b3RhbDp7d2lkdGg6J2F1dG8nfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2RvY3VtZW50cy9kb2N1bWVudHMtc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMThcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgX2ZldGNoRGF0YSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9mZXRjaERhdGEnKTtcbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi9kb2MtY29udGV4dC5qcycpO1xudmFyIE1lbnUgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvbWVudS10b29sYmFyL21lbnUtdG9vbGJhci5qc3gnKTtcbnZhciBEb2NSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbmZpZy9kb2NfcmlnaHRzJyk7XG52YXIgY2hlY2tSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2xpYnMvY2hlY2tSaWdodHMnKTtcbnZhciBMSUJTX1VSTCA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vY29uZmlnL2NvbnN0YW50cycpLkxJQlMuUE9TVF9MT0FEX0xJQlNfVVJMO1xudmFyIFVSTCA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vY29uZmlnL2NvbnN0YW50cycpLkRPQ1MuUE9TVF9MT0FEX0RPQ1NfVVJMO1xuXG52YXIgRm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvZm9ybS9mb3JtLmpzeCcpLFxuICAgIFRvb2xiYXJDb250YWluZXIgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvdG9vbGJhci1jb250YWluZXIvdG9vbGJhci1jb250YWluZXIuanN4JyksXG4gICAgRG9jVG9vbEJhciA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9kb2MtdG9vbGJhci9kb2MtdG9vbGJhci5qc3gnKSxcbiAgICBNb2RhbFBhZ2UgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFsUGFnZS5qc3gnKSxcbiAgICBNb2RhbFJlcG9ydCA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxwYWdlLXJlcG9ydC9pbmRleC5qc3gnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL2RvY3VtZW50LXN0eWxlcycpO1xuXG4vKipcclxuICog0JrQu9Cw0YHRgSDRgNC10LDQu9C40LfRg9C10YIg0LHQsNC30L7QstGL0Lkg0LTQvtC60YPQvNC10L3RgiAuXHJcbiAqL1xuXG52YXIgRG9jdW1lbnRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKERvY3VtZW50VGVtcGxhdGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRG9jdW1lbnRUZW1wbGF0ZShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRG9jdW1lbnRUZW1wbGF0ZSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERvY3VtZW50VGVtcGxhdGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEb2N1bWVudFRlbXBsYXRlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLmxpYnMgPSB7fTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBkb2NJZDogX3RoaXMucHJvcHMuZG9jSWQsIC8v0LXRgdC70LggSWQg0LTQvtC60YPQvNC10L3RgtCwINC90LUg0L/QtdGA0LXQtNCw0L0sINGC0L4g0YHQvtC30LTQsNC10Lwg0L3QvtCy0YvQuSDQtNC+0LpcbiAgICAgICAgICAgIGVkaXRlZDogX3RoaXMucHJvcHMuZG9jSWQgPT09IDAsXG4gICAgICAgICAgICByZWxvYWREYXRhOiAhT2JqZWN0LmtleXMocHJvcHMuaW5pdERhdGEpLmxlbmd0aCxcbiAgICAgICAgICAgIGdyaWRSb3dFZGl0OiBmYWxzZSxcbiAgICAgICAgICAgIGdyaWRSb3dFdmVudDogbnVsbCxcbiAgICAgICAgICAgIHdhcm5pbmc6ICcnLFxuICAgICAgICAgICAgd2FybmluZ1N0eWxlOiAnJyxcbiAgICAgICAgICAgIGdyaWRXYXJuaW5nOiAnJyxcbiAgICAgICAgICAgIGNoZWNrZWQ6IHRydWUsXG4gICAgICAgICAgICBsb2FkZWRMaWJzOiBmYWxzZSxcbiAgICAgICAgICAgIGxpYlBhcmFtczoge30sXG4gICAgICAgICAgICBsb2dzOiBbXSxcbiAgICAgICAgICAgIGlzRGlzYWJsZVNhdmU6IHByb3BzLmlzRGlzYWJsZVNhdmUsXG4gICAgICAgICAgICBkb2NEYXRhOiB7fSxcbiAgICAgICAgICAgIGlzUmVwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgIHR4dFJlcG9ydDogW11cbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5kb2NEYXRhID0gT2JqZWN0LmtleXMocHJvcHMuaW5pdERhdGEpLmxlbmd0aCA/IHByb3BzLmluaXREYXRhIDogeyBpZDogcHJvcHMuZG9jSWQgfTtcbiAgICAgICAgX3RoaXMuYmFja3VwID0ge307XG4gICAgICAgIF90aGlzLnJlcXVpcmVkRmllbGRzID0gW107XG4gICAgICAgIF90aGlzLnNlcnZlclZhbGlkYXRpb24gPSBbXTtcbiAgICAgICAgX3RoaXMuYnBtID0gW107XG4gICAgICAgIF90aGlzLnBhZ2VzID0gcHJvcHMucGFnZXM7XG4gICAgICAgIF90aGlzLmxvYWRpbmdMaWJzID0ge307XG5cbiAgICAgICAgX3RoaXMuX2JpbmQoJ2J0bkFkZENsaWNrJywgJ2J0bkVkaXRDbGljaycsICdidG5Mb2dvdXRDbGljaycsICd2YWxpZGF0aW9uJywgJ2hhbmRsZUlucHV0Q2hhbmdlJywgJ3ByZXBhcmVQYXJhbXNGb3JUb29sYmFyJywgJ2J0bkRlbGV0ZUNsaWNrJywgJ2J0blByaW50Q2xpY2snLCAnYnRuRW1haWxDbGljaycsICdidG5QZGZDbGljaycsICdidG5TYXZlQ2xpY2snLCAnYnRuQ2FuY2VsQ2xpY2snLCAnYnRuVGFza0NsaWNrJywgJ2ZldGNoRGF0YScsICdjcmVhdGVMaWJzJywgJ2xvYWRMaWJzJywgJ2hhc0xpYkluQ2FjaGUnLCAnYWRkUm93JywgJ2VkaXRSb3cnLCAnaGFuZGxlR3JpZEJ0bkNsaWNrJywgJ2hhbmRsZUdyaWRSb3dJbnB1dCcsICdoYW5kbGVHcmlkUm93JywgJ3ZhbGlkYXRlR3JpZFJvdycsICdtb2RhbFBhZ2VDbGljaycsICdoYW5kbGVHcmlkUm93Q2hhbmdlJywgJ2hhbmRsZVBhZ2VDbGljaycsICdtb2RhbFBhZ2VCdG5DbGljaycsICdidG5Mb2dzQ2xpY2snLCAnaGFuZGxlR3JpZENlbGxDbGljaycsICdzZXREb2N1bWVudE5hbWUnLCAnbW9kYWxSZXBvcnRlUGFnZUJ0bkNsaWNrJyk7XG5cbiAgICAgICAgX3RoaXMuZ3JpZFJvd0RhdGEgPSB7fTsgLy/QsdGD0LTQtdC8INGF0YDQsNC90LjRgtGMINGB0YLRgNC+0LrRgyDQs9GA0LjQtNCwXG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhEb2N1bWVudFRlbXBsYXRlLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAgICAgLy8g0YHQvtGF0YDQsNC90LjQvCDQv9C+0YHQu9C10LTQvdC10LUg0LfQvdCw0YfQtdC90LjQtSDQtNC+0LrQsCDRjdGC0L7Qs9C+INGC0LjQv9CwXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5kb2NJZCkge1xuICAgICAgICAgICAgICAgIERvY0NvbnRleHRbdGhpcy5wcm9wcy5kb2NUeXBlSWQudG9Mb3dlckNhc2UoKV0gPSB0aGlzLnN0YXRlLmRvY0lkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L/QuNGI0LXQvCDQuNGB0YXQvtC00L3Ri9C1INC00LDQvdC90YvQtSDQsiDRhdGA0LDQvdC40LvQuNGJ0LUsINGA0LXQs9C40YHRgtGA0LjRgNGD0LXQvCDQvtCx0YDQsNCx0L7RgtGH0LjQutC4INGB0L7QsdGL0YLQuNC5XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICAgLy8g0YHQvtGF0YDQsNC90LjQvCDQsiDQutC+0L3RgtC10LrRgdGC0LUg0YLQuNC/INC00L7QutGD0LzQtdC90YLQsCwg0YEg0LrQvtGC0L7RgNGL0Lwg0LzRiyDRgNCw0LHQvtGC0LDQtdGCXG4gICAgICAgICAgICBEb2NDb250ZXh0LmRvY1R5cGVJZCA9IHRoaXMucHJvcHMuZG9jVHlwZUlkO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWxvYWREYXRhKSB7XG4gICAgICAgICAgICAgICAgLy/QtNC10LvQsNC10Lwg0LfQsNC/0YDQvtGBINC90LAg0L/QvtC70YPRh9C10L3QuNC1INC00LDQvdC90YvRhVxuICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hEYXRhKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubGlicyA9IHRoaXMuY3JlYXRlTGlicygpOyAvL9GB0L7Qt9C00LDRgdGCINC+0LHRitC10LrRgiDQtNC70Y8g0YXRgNCw0L3QtdC90LjRjyDRgdC/0YDQsNCy0L7Rh9C90LjQutC+0LJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciBmb2N1c0VsZW1lbnQgPSB0aGlzLnJlZnNbdGhpcy5wcm9wcy5mb2N1c0VsZW1lbnRdO1xuICAgICAgICAgICAgICAgIGlmIChmb2N1c0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDQt9Cw0LTQsNGC0Ywg0LjQvNGPINGA0LXRgNC40YHRgtGA0LAg0L3QsCDRgdGC0YDQsNC90LjRhtGDXG4gICAgICAgICAgICB0aGlzLnNldERvY3VtZW50TmFtZSgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGlzSW5FZGl0TW9kZSA9IHRoaXMuc3RhdGUuZWRpdGVkO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5saWJzLmxlbmd0aCAmJiAhdGhpcy5zdGF0ZS5sb2FkZWRMaWJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtwdiA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jRGF0YSAmJiB0aGlzLmRvY0RhdGEua3B2KSB7XG4gICAgICAgICAgICAgICAgICAgIGtwdiA9IHRoaXMuZG9jRGF0YS5rcHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vINCz0YDRg9C30LjQvCDRgdC/0YDQsNCy0L7Rh9C90LjQutC4XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkTGlicyhudWxsLCBrcHYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgd2FybmluZ1N0eWxlID0gc3R5bGVzW3RoaXMuc3RhdGUud2FybmluZ1R5cGVdID8gc3R5bGVzW3RoaXMuc3RhdGUud2FybmluZ1R5cGVdIDogbnVsbDtcblxuICAgICAgICAgICAgdmFyIGRpYWxvZ1N0cmluZyA9IHRoaXMuc2VydmVyVmFsaWRhdGlvbi5sZW5ndGggPiAwID8gJ0Rva3VtZW50ICcgKyB0aGlzLnNlcnZlclZhbGlkYXRpb25bMF0ubmFtZSArICcgPSAnICsgdGhpcy5zZXJ2ZXJWYWxpZGF0aW9uWzBdLnZhbHVlICsgJyBqdWJhIG9sZW1hcy4gS2FzIGpcXHhFNHRrYT8nIDogJyc7XG4gICAgICAgICAgICB2YXIgYnRuUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGJ0blN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkxvZ2luOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuQWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCB7IHBhcmFtczogYnRuUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdtZW51JyxcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICAgICAgICAgICAgICByZWt2SWQ6IERvY0NvbnRleHQudXNlckRhdGEgPyBEb2NDb250ZXh0LnVzZXJEYXRhLmFzdXR1c0lkIDogMCxcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSA/IHRoaXMucHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEb2NUb29sQmFyKCksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgRm9ybSxcbiAgICAgICAgICAgICAgICAgICAgeyBwYWdlczogdGhpcy5wYWdlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2Zvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlUGFnZUNsaWNrOiB0aGlzLmhhbmRsZVBhZ2VDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBpc0luRWRpdE1vZGUgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIFRvb2xiYXJDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ3Rvb2xiYXItY29udGFpbmVyJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2RvYy10b29sYmFyLXdhcm5pbmcnLCBzdHlsZTogd2FybmluZ1N0eWxlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS53YXJuaW5nID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLndhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlbmRlcmVyID8gdGhpcy5wcm9wcy5yZW5kZXJlcih0aGlzKSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgTW9kYWxQYWdlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnNlcnZlclZhbGlkYXRpb24ubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdLb250cm9sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0czogWydidG5PaycsICdidG5DYW5jZWwnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsUGFnZUJ0bkNsaWNrLmJpbmQodGhpcykgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdjb250YWluZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMubW9kYWxWYWxpZGF0ZS5pY29uSW1hZ2UgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWxSZXBvcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdGhpcy5zdGF0ZS5pc1JlcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0OiB0aGlzLnN0YXRlLnR4dFJlcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlQnRuQ2xpY2s6IHRoaXMubW9kYWxSZXBvcnRlUGFnZUJ0bkNsaWNrIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0J7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60L3QvtC/0LrQuCDQlNC+0LHQsNCy0LjRgtGMXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkFkZENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkFkZENsaWNrKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8v0LHQtdC60LDQvyDQtNCw0L3QvdGL0YVcbiAgICAgICAgICAgIHRoaXMubWFrZUJhY2t1cCgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nICsgKHRoaXMucHJvcHMubW9kdWxlID8gdGhpcy5wcm9wcy5tb2R1bGUgOiBEb2NDb250ZXh0Lm1vZHVsZSkgKyAnLycgKyB0aGlzLnByb3BzLmRvY1R5cGVJZCArICcvMCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZG9jSWQ6IDAsIGVkaXRlZDogdHJ1ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmZldGNoRGF0YSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5mb2N1c0VsZW1lbnQgJiYgdGhpcy5yZWZzW3RoaXMucHJvcHMuZm9jdXNFbGVtZW50XSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVmc1t0aGlzLnByb3BzLmZvY3VzRWxlbWVudF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQutC90L7Qv9C60Lgg0YDQtdC00LDQutGC0LjRgNC+0LLQsNGC0YxcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuRWRpdENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkVkaXRDbGljaygpIHtcbiAgICAgICAgICAgIC8v0LIg0YDQtdC20LjQvCDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGVkOiB0cnVlLCByZWxvYWREYXRhOiB0cnVlIH0pO1xuICAgICAgICAgICAgLy/QsdC10LrQsNC/INC00LDQvdC90YvRhVxuICAgICAgICAgICAgdGhpcy5tYWtlQmFja3VwKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmZvY3VzRWxlbWVudCAmJiB0aGlzLnJlZnNbdGhpcy5wcm9wcy5mb2N1c0VsZW1lbnRdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZzW3RoaXMucHJvcHMuZm9jdXNFbGVtZW50XS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5EZWxldGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5EZWxldGVDbGljaygpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdidG5EZWxldGVDbGljaycpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5QcmludENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0blByaW50Q2xpY2soKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gJy9wcmludC8nICsgdGhpcy5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyBEb2NDb250ZXh0LnVzZXJEYXRhLnV1aWQgKyAnLycgKyB0aGlzLnN0YXRlLmRvY0lkO1xuICAgICAgICAgICAgd2luZG93Lm9wZW4oJycgKyB1cmwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5QZGZDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5QZGZDbGljaygpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSAnL3BkZi8nICsgdGhpcy5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyBEb2NDb250ZXh0LnVzZXJEYXRhLnV1aWQgKyAnLycgKyB0aGlzLnN0YXRlLmRvY0lkO1xuICAgICAgICAgICAgd2luZG93Lm9wZW4oJycgKyB1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60L3QvtC/0LrQuCDQvtGC0L/RgNCw0LLQutC4INC/0L7Rh9GC0YtcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuRW1haWxDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5FbWFpbENsaWNrKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vINC10YHQu9C4INC00L7QutGD0LzQtdC90YIg0YLQuNC/INGB0YfQtdGCINC40LvQuCDQuNC30LLQtdGJ0LXQvdC40LUsINGC0L4g0L7RgtC/0YDQsNCy0LjQvCDQvdCw0L/RgNGP0LzRg9GOLCDQuNC90LDRh9C1INC/0LXRgNC10LDQtNGA0LjRgdGD0LXQvCDQvdCwINC/0LjRgdGM0LzQvlxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZG9jVHlwZUlkLnRvTG93ZXJDYXNlKCkgPT0gJ2FydicgfHwgdGhpcy5wcm9wcy5kb2NUeXBlSWQudG9Mb3dlckNhc2UoKSA9PSAndGVhdGlzJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hEYXRhKCdQb3N0JywgJy9lbWFpbCcpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxvYWREYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnRW1haWwgc2FhZGV0dWQgZWR1a2FsdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdvaydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IHJlc3BvbnNlLmVycm9yX21lc3NhZ2UgPyByZXNwb25zZS5lcnJvcl9tZXNzYWdlIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9hZERhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdUZWtraXMgdmlnYSAnICsgZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyDRgdC+0YXRgNCw0L3QuNC8INC/0LDRgNCw0LzQtdGC0YDRiyDQtNC70Y8g0YTQvtGA0LzQuNGA0L7QstCw0L3QuNGPINCy0LvQvtC20LXQvdC40Y8g0LIg0LrQvtC90YLQtdC60YHRgtC1XG4gICAgICAgICAgICAgICAgRG9jQ29udGV4dFsnZW1haWwtcGFyYW1zJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY0lkOiB0aGlzLnN0YXRlLmRvY0lkLFxuICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IHRoaXMucHJvcHMuZG9jVHlwZUlkLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6ICdpZCcgLy8g0LjQtCAtINC00L7QutGD0LzQtdC90YIsIHdoZXJlIC1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nICsgKHRoaXMucHJvcHMubW9kdWxlID8gdGhpcy5wcm9wcy5tb2R1bGUgOiBEb2NDb250ZXh0Lm1vZHVsZSkgKyAnL2UtbWFpbC8wJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4INGB0L7RhdGA0LDQvdC40YLRjFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5TYXZlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuU2F2ZUNsaWNrKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGVkaXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybmluZzogJ1NhbHZlc3Rhbi4uLicsXG4gICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdub3RWYWxpZCdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmZldGNoRGF0YSgnUHV0JykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy9jYWxsIHRvIHNhdmVcbiAgICAgICAgICAgICAgICBfdGhpczQuZG9jRGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XG5cbiAgICAgICAgICAgICAgICBfdGhpczQuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICByZWxvYWREYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ1NhbHZlc3RhdHVkIGVkdWthbHQnLFxuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ29rJyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZG9jSWQ6IF90aGlzNC5kb2NEYXRhLmlkID8gX3RoaXM0LmRvY0RhdGEuaWQgOiAwXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyDRgdC+0YXRgNCw0L3QuNC8INCyINC60L7QvdGC0LXQutGB0YLQtSDQv9C+0YHQu9C10LTQvdC40LUg0LjQt9C80LXQvdC10L3QuNGPXG4gICAgICAgICAgICAgICAgICAgIERvY0NvbnRleHRbX3RoaXM0LnByb3BzLmRvY1R5cGVJZF0gPSBfdGhpczQuZG9jRGF0YS5pZDtcblxuICAgICAgICAgICAgICAgICAgICAvLyDQvtCx0L3QvtCy0LjQvCDRgdC/0YDQsNCy0L7Rh9C90LjQulxuICAgICAgICAgICAgICAgICAgICBpZiAoRG9jQ29udGV4dC5saWJzICYmIERvY0NvbnRleHQubGlic1tfdGhpczQucHJvcHMuZG9jVHlwZUlkLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQubG9hZExpYnMoX3RoaXM0LnByb3BzLmRvY1R5cGVJZC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vINC10YHQu9C4INC10YHRgtGMINCyINC60LXRiNC1ICwg0YLQviDRh9C40YLQuNC8XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaWIgPSBfdGhpczQucHJvcHMuZG9jVHlwZUlkLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKERvY0NvbnRleHQubGlicyAmJiBEb2NDb250ZXh0LmxpYnNbbGliXSAmJiBEb2NDb250ZXh0LmxpYnNbbGliXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEb2NDb250ZXh0LmxpYnNbbGliXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNC5wcm9wcy5yZWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbG9hZCAvIHJlZGlyZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gJy8nICsgKF90aGlzNC5wcm9wcy5tb2R1bGUgPyBfdGhpczQucHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUpICsgJy8nICsgX3RoaXM0LnByb3BzLmRvY1R5cGVJZCArICcvJyArIF90aGlzNC5kb2NEYXRhLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5wcm9wcy5oaXN0b3J5LnJlcGxhY2UoJy9yZWxvYWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnByb3BzLmhpc3RvcnkucmVwbGFjZShjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPINC60LvQuNC60LAg0LTRj9C7INC60L3QvtC/0LrQuCDQntGC0LrQsNC3INC+0YIg0YHQvtGF0YDQsNC90LXQvdC40Y9cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuQ2FuY2VsQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuQ2FuY2VsQ2xpY2soKSB7XG4gICAgICAgICAgICAvL9Cy0L7RgdGC0LDQvdC+0LLQuNC8INC/0YDQtdC20L3QtdC1INGB0L7RgdGC0L7Rj9C90LjQtVxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZG9jSWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVGcm9tQmFja3VwKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5nb0JhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8v0YDQtdC20LjQvCDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGVkOiBmYWxzZSwgd2FybmluZzogJycsIHdhcm5pbmdUeXBlOiBudWxsIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuVGFza0NsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0blRhc2tDbGljayh0YXNrTmFtZSwga3B2LCBncnVwcElkLCB0ZWtzdCwga29ndXMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgdGFzayA9IHRoaXMuYnBtLmZpbmQoZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzay5uYW1lID09PSB0YXNrTmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCF0YXNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdWaWdhLCB0YXNrICcgKyB0YXNrTmFtZSArICcgZWkgbGVpZG51ZCcsXG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnZXJyb3InXG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhcGkgPSAnL25ld0FwaS90YXNrLycgKyB0YXNrLnRhc2s7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3YXJuaW5nOiAnVMO2w7Z0YW4uLi4nLCB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJyB9KTtcblxuICAgICAgICAgICAgdGhpcy5mZXRjaERhdGEoJ1Bvc3QnLCBhcGksIGtwdiB8fCBncnVwcElkIHx8IHRla3N0IHx8IGtvZ3VzID8ge1xuICAgICAgICAgICAgICAgIHNlaXN1Z2E6IGtwdixcbiAgICAgICAgICAgICAgICBncnVwcElkOiBncnVwcElkLFxuICAgICAgICAgICAgICAgIHZpaXRlbnVtYmVyOiB0ZWtzdCxcbiAgICAgICAgICAgICAgICBrb2d1czoga29ndXNcbiAgICAgICAgICAgIH0gOiBudWxsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhUm93ID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgIHZhciBkYXRhTWVzc2FnZSA9IHJlc3BvbnNlLmRhdGEuZXJyb3JfbWVzc2FnZSA/IHJlc3BvbnNlLmRhdGEuZXJyb3JfbWVzc2FnZSA6ICcnO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRvY0lkID0gZGF0YVJvdy5kb2NJZDtcblxuICAgICAgICAgICAgICAgIGlmIChkb2NJZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnRWR1a2FsdCAnICsgZGF0YU1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ29rJ1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtvb3N0YXR1ZCB1dXMgZG9rLCB0ZWVtZSByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICcvJyArIChfdGhpczUucHJvcHMubW9kdWxlID8gX3RoaXM1LnByb3BzLm1vZHVsZSA6IERvY0NvbnRleHQubW9kdWxlKSArICcvJyArIF90aGlzNS5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyBfdGhpczUuc3RhdGUuZG9jSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnByb3BzLmhpc3RvcnkucmVwbGFjZSgnL3JlbG9hZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUucHJvcHMuaGlzdG9yeS5yZXBsYWNlKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YU1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdWaWdhLCAnICsgZGF0YU1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ2Vycm9yJ1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtvb3N0YXR1ZCB1dXMgZG9rLCB0ZWVtZSByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICcvJyArIChfdGhpczUucHJvcHMubW9kdWxlID8gX3RoaXM1LnByb3BzLm1vZHVsZSA6IERvY0NvbnRleHQubW9kdWxlKSArICcvJyArIF90aGlzNS5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyBfdGhpczUuc3RhdGUuZG9jSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnByb3BzLmhpc3RvcnkucmVwbGFjZSgnL3JlbG9hZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUucHJvcHMuaGlzdG9yeS5yZXBsYWNlKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0JLRi9C/0L7Qu9C90LjRgiDQt9Cw0L/RgNC+0YEg0Lgg0L/QvtC60LDQttC10YIg0LvQvtCz0LhcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuTG9nc0NsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkxvZ3NDbGljaygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgYXBpID0gJy9uZXdBcGkvbG9ncy8nO1xuXG4gICAgICAgICAgICB0aGlzLmZldGNoRGF0YSgnUG9zdCcsIGFwaSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVJvd3MgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIF90aGlzNi5zZXRTdGF0ZSh7IHNob3dMb2dzOiB0cnVlLCBsb2dzOiBkYXRhUm93cyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0KHQtNC10LvQsNC10YIg0LrQvtC/0LjRjiDRgtC10LrRg9GJ0LXQs9C+INGB0L7RgdGC0L7Rj9C90LjRjyDQtNCw0L3QvdGL0YVcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbWFrZUJhY2t1cCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlQmFja3VwKCkge1xuICAgICAgICAgICAgdGhpcy5iYWNrdXAgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmRvY0RhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0LLQvtGB0YLQsNC90L7QstC40YLRjCDRgtC10LrRg9GJ0LXQtSDRgdC+0YHRgtC+0Y/QvdC40LUg0LjQtyDQutC+0L/QuNC4XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Jlc3RvcmVGcm9tQmFja3VwJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RvcmVGcm9tQmFja3VwKCkge1xuICAgICAgICAgICAgdGhpcy5kb2NEYXRhID0gSlNPTi5wYXJzZSh0aGlzLmJhY2t1cCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LjQvdC/0YPRgtC+0LIuXHJcbiAgICAgICAgICogQHBhcmFtIGlucHV0TmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSBpbnB1dFZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUlucHV0Q2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGlucHV0TmFtZSwgaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgLy8g0L7QsdGA0LDQsdC+0YLRh9C40Log0LjQt9C80LXQvdC10L3QuNC5XG4gICAgICAgICAgICAvLyDQuNC30LzQtdC90LXQvdC40Y8g0LTQvtC/0YPRgdGC0LjQvNGLINGC0L7Qu9GM0LrQviDQsiDRgNC10LbQuNC80LUg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRj1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmVkaXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ25vdCBpbiBlZGl0ZSBtb2RlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRvY0RhdGFbaW5wdXROYW1lXSA9IGlucHV0VmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oYW5kbGVJbnB1dENoYW5nZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlSW5wdXRDaGFuZ2UoaW5wdXROYW1lLCBpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40LrQsCDQs9GA0LjQtNCwXHJcbiAgICAgICAgICogQHBhcmFtIGdyaWREYXRhXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUdyaWRDZWxsQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlR3JpZENlbGxDbGljayhhY3Rpb24sIGRvY0lkLCBpZHgsIGNvbHVtbklkLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9jRGF0YSAmJiB0aGlzLmRvY0RhdGEuZ3JpZERhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY0RhdGEuZ3JpZERhdGFbaWR4XVtjb2x1bW5JZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZG9jRGF0YTogdGhpcy5kb2NEYXRhIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8g0LXRgdC70Lgg0LXRgdGC0Ywg0YLRgNC40LPQs9C10YAsINCy0YvQt9C+0LLQtdC8INC10LPQvlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy50cmlnZ2VyKHRoaXMsIGlkeCwgY29sdW1uSWQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCy0YvQt9C+0LLQtdGCINC80LXRgtC+0LQg0LLQsNC70LjQtNCw0YbQuNC4INC00LDQvdC90YvRhSDRgdC/0YDQsNCy0L7Rh9C90LjQutCwICjQutC+0LTQsCkg0Lgg0LLQtdGA0L3QtdGCINGA0LXQt9GD0LvRjNGC0LDRgiDQv9GA0L7QstC10YDQutC4XHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndmFsaWRhdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0aW9uKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5lZGl0ZWQpIHJldHVybiAnJztcblxuICAgICAgICAgICAgdmFyIHdhcm5pbmcgPSAnJyxcbiAgICAgICAgICAgICAgICBub3RSZXF1aXJlZEZpZWxkcyA9IFtdLFxuICAgICAgICAgICAgICAgIC8vINC/0LjRiNC10Lwg0LIg0LzQsNGB0YHQuNCyINC/0L7Qu9GPINGBINC+0YLRgdGD0YLRgdGC0LLRg9GO0YnQuNC80Lgg0LTQsNC90L3Ri9C80LhcbiAgICAgICAgICAgIGV4cHJlc3Npb25GaWVsZHMgPSBbXSxcbiAgICAgICAgICAgICAgICAvLyDQv9C40YjQtdC8INCy0YvRgNCw0LbQtdC90LjQtVxuICAgICAgICAgICAgbm90TWluTWF4UnVsZSA9IFtdO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yZXF1aXJlZEZpZWxkcykge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1aXJlZEZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQubmFtZSAmJiBmaWVsZC5uYW1lIGluIF90aGlzNy5kb2NEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfdGhpczcuZG9jRGF0YVtmaWVsZC5uYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSAmJiBmaWVsZC50eXBlICE9PSAnQicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RSZXF1aXJlZEZpZWxkcy5wdXNoKGZpZWxkLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuc2VydmVyVmFsaWRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIHBhcmluZyB0byBzZXJ2ZXIgdG8gdmFsaWRhdGVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuZmV0Y2hEYXRhKCdQb3N0JywgJy9uZXdBcGkvdmFsaWRhdGUvJyArIGZpZWxkLnNlcnZlclZhbGlkYXRpb24gKyAnLycgKyB2YWx1ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jSWQgPSByZXNwb25zZS5kYXRhLmRhdGFbMF0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF93YXJuaW5nID0gX3RoaXM3LnN0YXRlLndhcm5pbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jSWQgJiYgZG9jSWQgIT09IF90aGlzNy5zdGF0ZS5kb2NJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL9C/0LXRgNC10LDQtNGA0LXRgdC+0LLQutCwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5zZXJ2ZXJWYWxpZGF0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogZG9jSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dhcm5pbmcgPSBfd2FybmluZyArICh2YWx1ZSArICcgKCcgKyBmaWVsZC5uYW1lICsgJykganViYSBvbGVtYXMnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3N2YWUgaW4gc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM3LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6IF93YXJuaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdub3RWYWxpZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L/RgNC+0LLQtdGA0LrQsCDQvdCwINC80LjQvSAuINC80LDQutGBINC30L3QsNGH0LXQvdC40Y9cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfHwgdmFsdWUgJiYgdmFsdWUgPiBwcm9wcy5tYXhcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja1ZhbHVlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbGxlZFZhbHVlRCA9IERhdGUucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQubWluICYmIGNvbnRyb2xsZWRWYWx1ZUQgPCBmaWVsZC5taW4gJiYgZmllbGQubWF4ICYmIGNvbnRyb2xsZWRWYWx1ZUQgPiBmaWVsZC5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbGxlZFZhbHVlTiA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLm1pbiAmJiBjb250cm9sbGVkVmFsdWVOID09PSAwIHx8IGZpZWxkLm1pbiAmJiBjb250cm9sbGVkVmFsdWVOIDwgZmllbGQubWluICYmIGZpZWxkLm1heCAmJiBjb250cm9sbGVkVmFsdWVOID4gZmllbGQubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90TWluTWF4UnVsZS5wdXNoKGZpZWxkLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQutCwINC90LAg0LLRi9GA0LDQttC10L3QuNC1XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXM3LmRvY0RhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBmaWVsZC5leHByZXNzaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBldmFsKGZpZWxkLmV4cHJlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25GaWVsZHMucHVzaChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQudHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQudHJpZ2dlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm90UmVxdWlyZWRGaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nID0gd2FybmluZyArICcgcHV1ZHViIHZhamFsaWt1ZCBhbmRtZWQgKCcgKyBub3RSZXF1aXJlZEZpZWxkcy5qb2luKCcsICcpICsgJykgJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobm90TWluTWF4UnVsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmcgPSB3YXJuaW5nID8gd2FybmluZyA6ICcnICsgJyBtaW4vbWF4IG9uIHZhbGUoJyArIG5vdE1pbk1heFJ1bGUuam9pbignLCAnKSArICcpICc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGV4cHJlc3Npb25GaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nID0gd2FybmluZyA/IHdhcm5pbmcgOiAnJyArICcgdmFsZSBhbmRtZWQgKCcgKyBleHByZXNzaW9uRmllbGRzLmpvaW4oJywgJykgKyAnKSAnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiB3YXJuaW5nLFxuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogd2FybmluZy5sZW5ndGggPyAnbm90VmFsaWQnIDogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gd2FybmluZzsgLy8g0LLQtdGA0L3QtdC8INC40LfQstC10YnQtdC90LjQtSDQvtCxINC40YLQvtCz0LDRhSDQstCw0LvQuNC00LDRhtC40LhcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCS0LXRgNC90LXRgiDQutC+0LzQv9C+0L3QtdGCIC0g0L/QsNC90LXQu9GMINC40L3RgdGC0YDRg9C80LXQvdGC0L7QsiDQtNC+0LrRg9C80LXQvdGC0LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7WE1MfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJEb2NUb29sQmFyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckRvY1Rvb2xCYXIoKSB7XG4gICAgICAgICAgICB2YXIgdG9vbGJhciA9IHRoaXMucHJlcGFyZVBhcmFtc0ZvclRvb2xiYXIoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b29sYmFyJywgdG9vbGJhcik7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBUb29sYmFyQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIHsgcmVmOiAndG9vbGJhckNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERvY1Rvb2xCYXIsIHsgcmVmOiAnZG9jLXRvb2xiYXInLFxuICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IHRoaXMucHJvcHMuZG9jVHlwZUlkLFxuICAgICAgICAgICAgICAgICAgICBicG06IHRoaXMuYnBtID8gdGhpcy5icG0gOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgbG9nczogdGhpcy5zdGF0ZS5sb2dzLFxuICAgICAgICAgICAgICAgICAgICBkb2NJZDogdGhpcy5zdGF0ZS5kb2NJZCxcbiAgICAgICAgICAgICAgICAgICAgZWRpdGVkOiB0aGlzLnN0YXRlLmVkaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZG9jU3RhdHVzOiB0aGlzLmRvY0RhdGEuZG9jX3N0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiB0aGlzLnZhbGlkYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGJ0bkFkZENsaWNrOiB0aGlzLmJ0bkFkZENsaWNrLFxuICAgICAgICAgICAgICAgICAgICBidG5FZGl0Q2xpY2s6IHRoaXMuYnRuRWRpdENsaWNrLFxuICAgICAgICAgICAgICAgICAgICBidG5DYW5jZWxDbGljazogdGhpcy5idG5DYW5jZWxDbGljayxcbiAgICAgICAgICAgICAgICAgICAgYnRuUHJpbnRDbGljazogdGhpcy5idG5QcmludENsaWNrLFxuICAgICAgICAgICAgICAgICAgICBidG5FbWFpbENsaWNrOiB0aGlzLmJ0bkVtYWlsQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIGJ0blNhdmVDbGljazogdGhpcy5idG5TYXZlQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIGJ0bkxvZ3NDbGljazogdGhpcy5idG5Mb2dzQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIGJ0blRhc2tDbGljazogdGhpcy5idG5UYXNrQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXJQYXJhbXM6IHRvb2xiYXJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICDRh9C40YLQsNC10Lwg0LTQsNC90L3Ri9C1INGB0L4g0YHRgtC+0YDQsCwg0YTQvtGA0LzQuNGA0YPQtdC8INC/0LDRgNCw0LzQtdGC0YDRiyDQtNC70Y8g0LrQvdC+0L/QvtC6INGD0L/RgNCw0LLQu9C10L3QuNGPLCDQuCDRgtGD0LTQsCDQuNGFINC+0YLQtNCw0LXQvFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7YnRuQWRkOiB7c2hvdzogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW59LCBidG5FZGl0OiB7c2hvdzogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW59LCBidG5EZWxldGU6IHtzaG93OiBib29sZWFuLCBkaXNhYmxlZDogYm9vbGVhbn0sIGJ0blByaW50OiB7c2hvdzogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW59fX1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJlcGFyZVBhcmFtc0ZvclRvb2xiYXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZVBhcmFtc0ZvclRvb2xiYXIoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndGhpcy5wcm9wcy5kb2NUeXBlSWQnLCB0aGlzLnByb3BzLmRvY1R5cGVJZCk7XG4gICAgICAgICAgICB2YXIgZG9jUmlnaHRzID0gRG9jUmlnaHRzW3RoaXMucHJvcHMuZG9jVHlwZUlkXSA/IERvY1JpZ2h0c1t0aGlzLnByb3BzLmRvY1R5cGVJZF0gOiBbXTtcbiAgICAgICAgICAgIHZhciB1c2VyUm9sZXMgPSBEb2NDb250ZXh0LnVzZXJEYXRhID8gRG9jQ29udGV4dC51c2VyRGF0YS5yb2xlcyA6IFtdO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJ0bkFkZDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBjaGVja1JpZ2h0cyh1c2VyUm9sZXMsIGRvY1JpZ2h0cywgJ2FkZCcpLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkVkaXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogY2hlY2tSaWdodHModXNlclJvbGVzLCBkb2NSaWdodHMsICdlZGl0JyksXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuU2F2ZToge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnN0YXRlLmVkaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuc3RhdGUuaXNEaXNhYmxlU2F2ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuRGVsZXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGNoZWNrUmlnaHRzKHVzZXJSb2xlcywgZG9jUmlnaHRzLCAnZGVsZXRlJyksXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuUHJpbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogY2hlY2tSaWdodHModXNlclJvbGVzLCBkb2NSaWdodHMsICdwcmludCcpLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0blN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkxvZ2luOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuQWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0blJla3Y6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0JLRi9C/0L7Qu9C90LjRgiDQt9Cw0L/RgNC+0YHRi1xyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmZXRjaERhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hEYXRhKHByb3RvY29sLCBhcGksIGFwaV9wYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgdXJsID0gYXBpID8gYXBpIDogVVJMICsgJy8nICsgdGhpcy5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyB0aGlzLnN0YXRlLmRvY0lkO1xuICAgICAgICAgICAgdmFyIG1ldGhvZCA9ICdmZXRjaERhdGFQb3N0JztcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgZG9jVHlwZUlkOiB0aGlzLnByb3BzLmRvY1R5cGVJZCA/IHRoaXMucHJvcHMuZG9jVHlwZUlkIDogRG9jQ29udGV4dC5kb2NUeXBlSWQsXG4gICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSA/IHRoaXMucHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUsXG4gICAgICAgICAgICAgICAgdXNlcklkOiBEb2NDb250ZXh0LnVzZXJEYXRhLnVzZXJJZCxcbiAgICAgICAgICAgICAgICB1dWlkOiBEb2NDb250ZXh0LnVzZXJEYXRhLnV1aWQsXG4gICAgICAgICAgICAgICAgZG9jSWQ6IHRoaXMuc3RhdGUuZG9jSWQsXG4gICAgICAgICAgICAgICAgY29udGV4dDogRG9jQ29udGV4dFthcGldID8gRG9jQ29udGV4dFthcGldIDogbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHByb3RvY29sKSB7XG4gICAgICAgICAgICAgICAgLy9yZXF1ZXN0IGNhbGwgbm90IGRlZmF1bHRcbiAgICAgICAgICAgICAgICBtZXRob2QgPSAnZmV0Y2hEYXRhJyArIHByb3RvY29sO1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcywgdGhpcy5kb2NEYXRhLCBhcGlfcGFyYW1zID8gYXBpX3BhcmFtcyA6IHt9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlZCwgcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhW21ldGhvZF0odXJsLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uID0gJy9sb2dpbic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9leGVjdXRlIHNlbGVjdCBjYWxsc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuYWN0aW9uICYmIHJlc3BvbnNlLmRhdGEuYWN0aW9uID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzOC5kb2NEYXRhID0gcmVzcG9uc2UuZGF0YS5kYXRhWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCBzdG9yZSByZXF1aXJlZCBmaWVsZHMgaW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGFbMF0ucmVxdWlyZWRGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM4LnJlcXVpcmVkRmllbGRzID0gcmVzcG9uc2UuZGF0YS5kYXRhWzBdLnJlcXVpcmVkRmllbGRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgc3RvcmUgYnBtIGluZm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5kYXRhWzBdLmJwbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jUmlnaHRzID0gRG9jUmlnaHRzW190aGlzOC5wcm9wcy5kb2NUeXBlSWRdID8gRG9jUmlnaHRzW190aGlzOC5wcm9wcy5kb2NUeXBlSWRdIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyUm9sZXMgPSBEb2NDb250ZXh0LnVzZXJEYXRhID8gRG9jQ29udGV4dC51c2VyRGF0YS5yb2xlcyA6IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINGC0L7Qu9GM0LrQviDQtNC+0YHRgtGD0L/QvdGL0LUg0YLQsNGB0LrQuCDQtNC+0LvQttC90Ysg0L/QvtC/0LDRgdGC0Ywg0LIg0YHQv9C40YHQvtC6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzOC5icG0gPSByZXNwb25zZS5kYXRhLmRhdGFbMF0uYnBtLmZpbHRlcihmdW5jdGlvbiAodGFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrUmlnaHRzKHVzZXJSb2xlcywgZG9jUmlnaHRzLCB0YXNrLnRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Nob3VsZCByZXR1cm4gZGF0YSBhbmQgY2FsbGVkIGZvciByZWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczguc2V0U3RhdGUoeyByZWxvYWREYXRhOiBmYWxzZSwgd2FybmluZzogJycsIHdhcm5pbmdUeXBlOiBudWxsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkKHJlc3BvbnNlLmRhdGEuZGF0YVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmFjdGlvbiAmJiByZXNwb25zZS5kYXRhLmFjdGlvbiA9PT0gJ3NhdmUnICYmIHJlc3BvbnNlLmRhdGEucmVzdWx0LmVycm9yX2NvZGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvcl90ZWF0aXMgPSByZXNwb25zZS5kYXRhLnJlc3VsdCAmJiByZXNwb25zZS5kYXRhLnJlc3VsdC5lcnJvcl9tZXNzYWdlID8gcmVzcG9uc2UuZGF0YS5yZXN1bHQuZXJyb3JfbWVzc2FnZSA6ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGluIHNhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczguc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnVGVra2lzIHZpZ2E6IHNhbHZlc3RhbWluZSBlYmFcXHhGNW5uZXN0dXMgJyArIGVycm9yX3RlYXRpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dFJlcG9ydDogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZXBvcnQ6ICEhKHJlc3BvbnNlLmRhdGEuZGF0YSAmJiByZXNwb25zZS5kYXRhLmRhdGEubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlZChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZldGNoIHZpZ2EgJywgcmVzcG9uc2UsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczguc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdUZWtraXMgdmlnYSAnICsgKHJlc3BvbnNlLmRhdGEuZXJyb3JfbWVzc2FnZSA/IHJlc3BvbnNlLmRhdGEuZXJyb3JfbWVzc2FnZSA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ2Vycm9yJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NhdGNoZWQgZmV0Y2ggZXJyb3IgJyArIGUpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczguc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ1Rla2tpcyB2aWdhICcgKyBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdlcnJvcidcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdGVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHQtdGB0L/QtdGH0LjRgiDQt9Cw0LPRgNGD0LfQutGDINC00LDQvdC90YvRhSDQtNC70Y8g0LHQuNCx0LvQuNC+0YLQtdC6XHJcbiAgICAgICAgICogbGliTmFtZSAtINC60L7QtCDRgdC/0YDQsNCy0L7Rh9C90LjQutCwXHJcbiAgICAgICAgICoga3B2IC0g0LTQsNGC0LAsINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOINGB0LXQs9C+0LTQvdGPXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xvYWRMaWJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRMaWJzKGxpYk5hbWUsIGtwdikge1xuICAgICAgICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBsaWJzQ291bnQgPSBsaWJOYW1lID8gMSA6IHRoaXMucHJvcHMubGlicy5sZW5ndGg7XG5cbiAgICAgICAgICAgIHZhciBsaWJzVG9Mb2FkID0gbGliTmFtZSA/IFtsaWJOYW1lXSA6IE9iamVjdC5rZXlzKHRoaXMubGlicyk7XG4gICAgICAgICAgICAvLyBzdGFydCBsb2FkaW5nXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGluZ0xpYnNbbGliTmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdMaWJzW2xpYk5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8g0YPQttC1INC40LTQtdGCINC30LDQs9GA0YPQt9C60LBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpYnNUb0xvYWQuZm9yRWFjaChmdW5jdGlvbiAobGliKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGFzU3FsV2hlcmUgPSBsaWIgaW4gX3RoaXM5LnN0YXRlLmxpYlBhcmFtcztcblxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7IC8vYWp1dGlzZWx0XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZTogX3RoaXM5LnByb3BzLm1vZHVsZSA/IF90aGlzOS5wcm9wcy5tb2R1bGUgOiBEb2NDb250ZXh0Lm1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBEb2NDb250ZXh0LnVzZXJEYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICB1dWlkOiBEb2NDb250ZXh0LnVzZXJEYXRhLnV1aWRcbiAgICAgICAgICAgICAgICB9LCBoYXNTcWxXaGVyZSA/IHtcbiAgICAgICAgICAgICAgICAgICAgc3FsOiBfdGhpczkuc3RhdGUubGliUGFyYW1zW2xpYl0sXG4gICAgICAgICAgICAgICAgICAgIGtwdjoga3B2ID8ga3B2IDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKVxuICAgICAgICAgICAgICAgIH0gOiB7fSk7XG5cbiAgICAgICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQuNC8INC90LDQu9C40YfQuNC1INC00LDQvdC90YvRhSDQsiDQutC10YjQtSwg0LXRgdC70Lgg0L3QtdGCLCDRgtC+INCz0YDRg9C30LjQvFxuICAgICAgICAgICAgICAgIGlmICghIV90aGlzOS5zdGF0ZS5saWJQYXJhbXNbbGliXSB8fCAhX3RoaXM5Lmhhc0xpYkluQ2FjaGUobGliKSkge1xuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhLmZldGNoRGF0YVBvc3QoTElCU19VUkwgKyAnLycgKyBsaWIsIHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiAnZGF0YScgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczkubGlic1tsaWJdID0gcmVzcG9uc2UuZGF0YS5yZXN1bHQucmVzdWx0LmRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIGxpYiBpbiBjYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvY0NvbnRleHQubGlic1tsaWJdID0gX3RoaXM5LmxpYnNbbGliXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYnNDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINC+0YLQvNC10YLQutCwINGH0YLQviDRgdC/0YDQsNCy0L7Rh9C90LjQuiDQt9Cw0LPRgNGD0LbQtdC9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM5LmxvYWRpbmdMaWJzW2xpYl0gPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGlic0NvdW50ICYmICFfdGhpczkuc3RhdGUubG9hZGVkTGlicykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FsbCBsaWJzIGxvYWRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM5LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZExpYnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnS8O1aWsgcMO8c2lhbmRtZWQgbGFhZGl0dWQgw7VubmVzdHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnb2snXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdsb2FkTGlicyBlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0LHQtdGA0LXQvCDQtNCw0L3QvdGL0LUg0LjQtyDQutC10YjQsFxuICAgICAgICAgICAgICAgICAgICBfdGhpczkubGlic1tsaWJdID0gRG9jQ29udGV4dC5saWJzW2xpYl0uZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrcHYgPSBfdGhpczkuZG9jRGF0YS52YWxpZCA/IF90aGlzOS5kb2NEYXRhLnZhbGlkIDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtwdiA9IF90aGlzOS5kb2NEYXRhLmtwdiA/IF90aGlzOS5kb2NEYXRhLmtwdiA6IGtwdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINC10YHQtNC4INCyINGB0L/RgNCw0LLQvtGH0L3QuNC60LUg0LXRgdGC0Ywg0LTQsNGC0LAg0Lgg0L7QvdCwINC90LUg0L/Rg9GB0YLQsNGPXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJvdy52YWxpZCB8fCBuZXcgRGF0ZShrcHYpIDw9IG5ldyBEYXRlKHJvdy52YWxpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM5LmxvYWRpbmdMaWJzW2xpYl0gPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBsaWJzQ291bnQtLTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpYnNDb3VudCAmJiAhX3RoaXM5LnN0YXRlLmxvYWRlZExpYnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxsIGxpYnMgbG9hZGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM5LnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWRMaWJzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdLw7VpayBww7xzaWFuZG1lZCBsYWFkaXR1ZCDDtW5uZXN0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnb2snXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChsaWJzQ291bnQgPD0gMSAmJiAhX3RoaXM5LnN0YXRlLmxvYWRlZExpYnMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9hbGwgbGlicyBsb2FkZWQ7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzOS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWRMaWJzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ0vDtWlrIHDDvHNpYW5kbWVkIGxhYWRpdHVkIMO1bm5lc3R1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ29rJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC/0YDQvtCy0LXRgNC40YIg0L3QsNC70LjRh9C40Lgg0LIg0LrQtdGI0LUg0LTQsNC90L3Ri9GFINC4INC10YHQu9C4INC90LXRgiwg0YLQviDQstC10YDQvdC10YIgZmFsc2VcclxuICAgICAgICAgKiBAcGFyYW0gbGliXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhc0xpYkluQ2FjaGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFzTGliSW5DYWNoZShsaWIpIHtcbiAgICAgICAgICAgIGlmICghRG9jQ29udGV4dC5saWJzKSB7XG4gICAgICAgICAgICAgICAgRG9jQ29udGV4dC5saWJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gIURvY0NvbnRleHQubGlic1tsaWJdIHx8IERvY0NvbnRleHQubGlic1tsaWJdLmxlbmd0aCA9PT0gMCA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCy0LXRgNC90LXRgiDQvtCx0YrQtdC60YIg0LHQuNCx0LvQuNC+0YLQtdC6INC00L7QutGD0LzQtdC90YLQsFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7fX1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3JlYXRlTGlicycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVMaWJzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgbGlicyA9IHt9O1xuICAgICAgICAgICAgdmFyIGxpYlBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5saWJzLmZvckVhY2goZnVuY3Rpb24gKGxpYikge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGxpYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobGliKSkgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9vYmplY3RcbiAgICAgICAgICAgICAgICAgICAgbGlic1tsaWIuaWRdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGxpYlBhcmFtc1tsaWIuaWRdID0gbGliLmZpbHRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsaWJzW2xpYl0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsaWJQYXJhbXM6IGxpYlBhcmFtcyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMTAubG9hZExpYnMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGxpYnM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQldGB0LvQuCDQtdGB0YLRjCDQsiDQv9GA0L7Qv9GB0LDRhSDQvNC10YLQvtC0INGB0L7Qt9C00LDQvdC40Y8g0YHRgtGA0L7QutC4INCz0YDQuNC00LAsINCy0YvQt9C+0LLQtdGCINC10LPQvlxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVHcmlkUm93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUdyaWRSb3coKSB7XG4gICAgICAgICAgICB2YXIgZ3JpZFJvdyA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNyZWF0ZUdyaWRSb3cpIHtcbiAgICAgICAgICAgICAgICBncmlkUm93ID0gdGhpcy5wcm9wcy5jcmVhdGVHcmlkUm93KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdyaWRSb3c7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDRgdC+0LHRi9GC0LjRjyDQutC70LjQutCwINC90LAg0LLQutC70LDQtNC60YMg0YHRgtGA0LDQvdC40YbRi1xyXG4gICAgICAgICAqIEBwYXJhbSBwYWdlXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZVBhZ2VDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVQYWdlQ2xpY2socGFnZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAocGFnZS5oYW5kbGVQYWdlQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBwYWdlLmhhbmRsZVBhZ2VDbGljayhwYWdlLmRvY1R5cGVJZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhZ2UuZG9jSWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICcvJyArIERvY0NvbnRleHQubW9kdWxlICsgJy8nICsgcGFnZS5kb2NUeXBlSWQgKyAnLycgKyBwYWdlLmRvY0lkO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5yZXBsYWNlKCcvcmVsb2FkJyk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMTEucHJvcHMuaGlzdG9yeS5yZXBsYWNlKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0YHQvtCx0YvRgtC40Lkg0LTQu9GPINC/0LDQvdC10LvQuCDQuNC90YHRgtGA0YPQvNC10L3RgtC+0LIg0LPRgNC40LTQsFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVHcmlkQnRuQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlR3JpZEJ0bkNsaWNrKGJ0bk5hbWUsIGFjdGl2ZVJvdywgaWQsIGRvY1R5cGVJZCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oYW5kbGVHcmlkQnRuQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAvLyDQtdGB0LvQuCDQtdGB0YLRjCDQvtCx0YDQsNCx0L7RgtGH0LjQuiwg0YLQviDQvtGC0LTQsNC10Lwg0YLRg9C00LAsINC40L3QsNGH0LUg0LLRi9C30YvQstCw0LXQvCDQvNC10YLQvtC0INC90LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDRgdGC0YDQvtC60LhcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUdyaWRCdG5DbGljayhidG5OYW1lLCBhY3RpdmVSb3csIGlkLCBkb2NUeXBlSWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGJ0bk5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhZGQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRSb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdsaXNhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZWRpdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRSb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtdXVkYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRSb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVSb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdrdXN0dXRhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlUm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWaWdhbmUgY2xpY2sgLiAnLCBidG5OYW1lLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogINGD0L/RgNCw0LLQu9C10L3QuNC1INC80L7QtNCw0LvRjNC90YvQvCDQvtC60L3QvtC8XHJcbiAgICAgICAgICogQHBhcmFtIGdyaWRFdmVudFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVHcmlkUm93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUdyaWRSb3coZ3JpZEV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZ3JpZFJvd0VkaXQ6IHRydWUsIGdyaWRSb3dFdmVudDogZ3JpZEV2ZW50IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0LTQvtCx0LDQstC40YIg0LIg0YHQvtGB0YLQvtGP0L3QuNC1INC90L7QstGD0Y4g0YHRgtGA0L7QutGDXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2FkZFJvdycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSb3coKSB7XG4gICAgICAgICAgICAvL9C10YHQu9C4INC90LUg0LfQsNC00LDQvSDQutC+0L3RhNC40LMg0LPRgNC40LTQsCwg0YLQviDQstC10YDQvdC10YIg0YTQsNC70YzRiFxuICAgICAgICAgICAgaWYgKCF0aGlzLmRvY0RhdGEuZ3JpZENvbmZpZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBncmlkQ29sdW1ucyA9IHRoaXMuZG9jRGF0YS5ncmlkQ29uZmlnLFxuICAgICAgICAgICAgICAgIG5ld1JvdyA9IHt9O1xuXG4gICAgICAgICAgICAvL9GB0L7Qt9C00LDQtNC40Lwg0L7QsdGK0LXQutGCIC0g0YHRgtGA0L7QutGDINCz0YDQuNC00LBcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JpZENvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBncmlkQ29sdW1uc1tpXS5pZDtcbiAgICAgICAgICAgICAgICBuZXdSb3dbZmllbGRdID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld1Jvdy5pZCA9ICdORVcnICsgTWF0aC5yYW5kb20oKTsgLy8g0LPQtdC90LXRgNC40Lwg0L3QvtCy0L7QtSDQuNC0XG5cbiAgICAgICAgICAgIHRoaXMuZ3JpZFJvd0RhdGEgPSBuZXdSb3c7XG5cbiAgICAgICAgICAgIC8vINC+0YLQutGA0L7QtdC8INC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QviDQtNC70Y8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRj1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdyaWRSb3dFZGl0OiB0cnVlLCBncmlkUm93RXZlbnQ6ICdhZGQnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7RgtC60YDQvtC10YIg0LDQutGC0LjQstC90YPRjiDRgdGC0YDQvtC60YMg0LTQu9GPINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y9cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZWRpdFJvdycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlZGl0Um93KCkge1xuICAgICAgICAgICAgdGhpcy5ncmlkUm93RGF0YSA9IHRoaXMuZG9jRGF0YS5ncmlkRGF0YVt0aGlzLnJlZnNbJ2RhdGEtZ3JpZCddLnN0YXRlLmFjdGl2ZVJvd107XG5cbiAgICAgICAgICAgIC8vINC+0YLQutGA0L7QtdC8INC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QviDQtNC70Y8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRj1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdyaWRSb3dFZGl0OiB0cnVlLCBncmlkUm93RXZlbnQ6ICdlZGl0JyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINGD0LTQsNC70LjRgiDQsNC60YLQuNCy0L3Rg9GOINGB0YLRgNC+0LrRg1xyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZWxldGVSb3cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUm93KCkge1xuICAgICAgICAgICAgdGhpcy5kb2NEYXRhLmdyaWREYXRhLnNwbGljZSh0aGlzLnJlZnNbJ2RhdGEtZ3JpZCddLnN0YXRlLmFjdGl2ZVJvdywgMSk7XG5cbiAgICAgICAgICAgIC8vINC/0LXRgNC10YDQsNGB0YfQtdGCINC40YLQvtCz0L7QslxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMucmVjYWxjRG9jKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yZWNhbGNEb2MoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uKCk7XG5cbiAgICAgICAgICAgIC8vINC40LfQvNC10L3QuNC8INGB0L7RgdGC0L7Rj9C90LjQtVxuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0J7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINGB0YLRgNC+0Log0LPRgNC40LTQsFxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUdyaWRSb3dJbnB1dCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVHcmlkUm93SW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZWEgPSB0aGlzLmRvY0RhdGEuZ3JpZENvbmZpZy5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgIGlmIChyb3cuaWQgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGNvbHVtblR5cGUgPSByZWEubGVuZ3RoICYmIHJlYVswXS50eXBlID8gcmVhWzBdLnR5cGUgOiAndGV4dCc7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoY29sdW1uVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRSb3dEYXRhW25hbWVdID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkUm93RGF0YVtuYW1lXSA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZFJvd0RhdGFbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVHcmlkUm93KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtGC0YHQu9C10LbQuNCy0LDQtdC8INC40LfQvNC10L3QtdC90LjRjyDQtNCw0L3QvdGL0YUg0L3QsCDRhNC+0YDQvNC1XHJcbiAgICAgICAgICogQHBhcmFtIG5hbWVcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlR3JpZFJvd0NoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVHcmlkUm93Q2hhbmdlKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmdyaWRSb3dEYXRhW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlR3JpZFJvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogd2lsbCBjaGVjayB2YWx1ZXMgb24gdGhlIGZvcm0gYW5kIHJldHVybiBzdHJpbmcgd2l0aCB3YXJuaW5nXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ZhbGlkYXRlR3JpZFJvdycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZUdyaWRSb3coKSB7XG4gICAgICAgICAgICB2YXIgd2FybmluZyA9ICcnO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ncmlkVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyA9IHRoaXMucHJvcHMuZ3JpZFZhbGlkYXRvcih0aGlzLmdyaWRSb3dEYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHdhcm5pbmcubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIC8vINC10YHRgtGMINC/0YDQvtCx0LvQtdC80YtcbiAgICAgICAgICAgICAgICB3YXJuaW5nID0gJ9Ce0YLRgdGD0YLRgdCy0YPRjtGCINC00LDQvdC90YvQtTonICsgd2FybmluZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNoZWNrZWQ6IHRydWUsIGdyaWRXYXJuaW5nOiB3YXJuaW5nIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7RgtGA0LDQsdC+0YLQsNC10LwgT2sg0LjQtyDQvNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsFxyXG4gICAgICAgICAqIEBwYXJhbSBidG5FdmVudFxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vZGFsUGFnZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vZGFsUGFnZUNsaWNrKGJ0bkV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBzaG93TW9kYWwgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGJ0bkV2ZW50ID09PSAnT2snIHx8IGJ0bkV2ZW50ID09PSAnT0snKSB7XG4gICAgICAgICAgICAgICAgLy8g0LjRidC10Lwg0L/QviDQuNC0INGB0YLRgNC+0LrRgyDQsiDQtNCw0L3QvdGL0YUg0LPRgNC40LTQsCwg0LXRgdC70Lgg0L3QtdGCLCDRgtC+INC00L7QsdCw0LLQuNC8INGB0YLRgNC+0LrRg1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb2NEYXRhLmdyaWREYXRhLmxlbmd0aCB8fCAhdGhpcy5kb2NEYXRhLmdyaWREYXRhLnNvbWUoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93LmlkID09PSBfdGhpczEyLmdyaWRSb3dEYXRhLmlkO1xuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vINCy0YHRgtCw0LLQutCwINC90L7QstC+0Lkg0YHRgtGA0L7QutC4XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jRGF0YS5ncmlkRGF0YS5zcGxpY2UoMCwgMCwgdGhpcy5ncmlkUm93RGF0YSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2NEYXRhLmdyaWREYXRhID0gdGhpcy5kb2NEYXRhLmdyaWREYXRhLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93LmlkID09PSBfdGhpczEyLmdyaWRSb3dEYXRhLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L3QsNGI0LvQuCwg0LfQsNC80LXRidCw0LXQvFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczEyLmdyaWRSb3dEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzaG93TW9kYWwgPSAhIXRoaXMuc3RhdGUud2FybmluZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMucmVjYWxjRG9jKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yZWNhbGNEb2MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBncmlkUm93RWRpdDogc2hvd01vZGFsIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNob3dNb2RhbDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2JpbmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZXRob2RzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMxM1ttZXRob2RdKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMTNbbWV0aG9kXSA9IF90aGlzMTNbbWV0aG9kXS5iaW5kKF90aGlzMTMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60L3QvtC/0LrQuCDQvNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsFxyXG4gICAgICAgICAqIEBwYXJhbSBidG5FdmVudFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb2RhbFBhZ2VCdG5DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb2RhbFBhZ2VCdG5DbGljayhidG5FdmVudCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMTQgPSB0aGlzO1xuXG4gICAgICAgICAgICAvL9C/0L7Qu9GD0YfQuNC8INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgICAgIHZhciBkb2NJZCA9IHRoaXMuc2VydmVyVmFsaWRhdGlvblswXS5yZXN1bHQ7XG5cbiAgICAgICAgICAgIC8vINC+0LHQvdGD0LvQuNC8INC40YLQvtCzINCy0LDQu9C40LTQsNGG0LjQuFxuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJWYWxpZGF0aW9uID0gW107XG5cbiAgICAgICAgICAgIGlmIChidG5FdmVudCA9PT0gJ09rJykge1xuICAgICAgICAgICAgICAgIC8vINGA0LXQtNCw0LnRgNC10LrRglxuICAgICAgICAgICAgICAgIC8vIGtvb3N0YXR1ZCB1dXMgZG9rLFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyArICh0aGlzLnByb3BzLm1vZHVsZSA/IHRoaXMucHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUpICsgJy8nICsgdGhpcy5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyBkb2NJZCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICcvJyArICh0aGlzLnByb3BzLm1vZHVsZSA/IHRoaXMucHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUpICsgJy8nICsgdGhpcy5wcm9wcy5kb2NUeXBlSWQgKyAnLycgKyBkb2NJZDtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucmVwbGFjZSgnL3JlbG9hZCcpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczE0LnByb3BzLmhpc3RvcnkucmVwbGFjZShjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy/Qv9C+0LjRgdC6INC90LDQt9Cy0LDQvdC40Y8g0YDQtdCz0LjRgdGC0YDQsFxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXREb2N1bWVudE5hbWUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RG9jdW1lbnROYW1lKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgZG9jVHlwZSA9IERvY0NvbnRleHRbJ21lbnUnXS5maW5kKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93Lmtvb2QgPT09IF90aGlzMTUucHJvcHMuZG9jVHlwZUlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZG9jVHlwZSkge1xuICAgICAgICAgICAgICAgIERvY0NvbnRleHQucGFnZU5hbWUgPSBkb2NUeXBlLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDRg9Cx0LXRgNC10YIg0L7QutC90L4g0YEg0L7RgtGH0LXRgtC+0LxcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW9kYWxSZXBvcnRlUGFnZUJ0bkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vZGFsUmVwb3J0ZVBhZ2VCdG5DbGljayhldmVudCkge1xuICAgICAgICAgICAgdmFyIGlzUmVwb3J0ID0gZXZlbnQgJiYgZXZlbnQgPT0gJ09rJyA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1JlcG9ydDogaXNSZXBvcnQgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRG9jdW1lbnRUZW1wbGF0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRG9jdW1lbnRUZW1wbGF0ZS5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdERhdGE6IFByb3BUeXBlcy5vYmplY3QsIC8v0KHQvtC00LXRgNC20LDQvdC40LUg0LTQvtC60YPQvNC10L3RgtCwXG4gICAgcmVxdWlyZWRGaWVsZHM6IFByb3BUeXBlcy5hcnJheSwgLy8g0L7QsdGP0LfQsNGC0LXQu9GM0L3Ri9C1INC/0L7Qu9GPXG4gICAgZWRpdGVkOiBQcm9wVHlwZXMuYm9vbCwgLy/RgNC10LbQuNC8INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y9cbiAgICBkb2NUeXBlSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCwgLy/RgtC40L8g0LTQvtC60YPQvNC10L3RgtCwXG4gICAgZG9jSWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCwgLy9pZCDQtNC+0LrRg9C80LXQvdGC0LBcbiAgICBsaWJzOiBQcm9wVHlwZXMuYXJyYXksIC8v0YHQv9C40YHQvtC6INCx0LjQsdC70LjQvtGC0LXQulxuICAgIHJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYywgLy/Rh9Cw0YHRgtC90YvQtSDQutC+0LzQv9C+0L3QtdGC0Ysg0LTQvtC60YPQvNC10L3RgtCwXG4gICAgcmVjYWxjRG9jOiBQcm9wVHlwZXMuZnVuYywgLy/Qv9C10YDQtdGA0LDRgdGH0LXRgiDRgdGD0LzQvCDQtNC+0LrRg9C80LXQvdGC0LBcbiAgICBmb2N1c0VsZW1lbnQ6IFByb3BUeXBlcy5zdHJpbmcgLy/QtdC70LXQvNC10L3RgiDQvdCwINC60L7RgtC+0YDRi9C5INCx0YPQtNC10YIg0L7RgtC00LDQvSDRhNC+0LrRg9GBINC/0YDQuCDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC4XG59O1xuXG5Eb2N1bWVudFRlbXBsYXRlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBpbml0RGF0YTogW10sXG4gICAgZG9jSWQ6IDAsXG4gICAgZWRpdGVkOiBmYWxzZSxcbiAgICByZXF1aXJlZEZpZWxkczogW10sXG4gICAgcGFnZXM6IFtdLFxuICAgIGxpYnM6IFtdLFxuICAgIGlzRGlzYWJsZVNhdmU6IGZhbHNlLFxuICAgIGlzR3JpZERhdGFTYXZlOiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudFRlbXBsYXRlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvZG9jcy9kb2N1bWVudFRlbXBsYXRlL2luZGV4LmpzeFxuLy8gbW9kdWxlIGlkID0gMjIzXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIFBhZ2VMYWJlbCA9IHJlcXVpcmUoJy4uL3BhZ2UtbGFiZWwvcGFnZS1sYWJlbC5qc3gnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL2Zvcm0tc3R5bGVzJyk7XG5cbnZhciBGb3JtID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEZvcm0sIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIEZvcm0ocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm0pO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGb3JtLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9ybSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVQYWdlQ2xpY2sgPSBfdGhpcy5oYW5kbGVQYWdlQ2xpY2suYmluZChfdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICog0J7QsdGA0LDQsdC+0YLRh9C40Log0LrQu9C40LrQsCDQstC60LvQsNC00LrQuFxyXG4gICAgICogQHBhcmFtIHBhZ2VcclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoRm9ybSwgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlUGFnZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVBhZ2VDbGljayhwYWdlKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmhhbmRsZVBhZ2VDbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlUGFnZUNsaWNrKHBhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBwYWdlcyA9IHRoaXMucHJvcHMucGFnZXM7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHBhZ2VzLmxlbmd0aCA/IHBhZ2VzLm1hcChmdW5jdGlvbiAocGFnZSwgaWR4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VMYWJlbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpZHgsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IGlkeCA9PSAwID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlUGFnZUNsaWNrOiBfdGhpczIuaGFuZGxlUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfdGhpczIucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdwYWdlLScgKyBpZHggfSk7XG4gICAgICAgICAgICAgICAgfSkgOiBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMucGFnZSB9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBGb3JtO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuRm9ybS5wcm9wVHlwZXMgPSB7XG4gICAgcGFnZXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVBhZ2VDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sXG59O1xuXG5Gb3JtLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UudmFsdWVPZigpLFxuICAgIHBhZ2VzOiBbXVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9mb3JtL2Zvcm0uanN4XG4vLyBtb2R1bGUgaWQgPSAyMjRcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi9wYWdlLWxhYmVsLXN0eWxlcycpO1xuXG52YXIgUGFnZUxhYmVsID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFBhZ2VMYWJlbCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUGFnZUxhYmVsKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdlTGFiZWwpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQYWdlTGFiZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQYWdlTGFiZWwpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhQYWdlTGFiZWwsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKCkge1xuICAgICAgICAgICAgLy8g0L7QsdGA0LDQsdC+0YLRh9C40Log0L3QsCDRgdC+0LHRi9GC0LjQtSDQutC70LjQuiwg0L/QvtC00LPRgNGD0LbQsNC10Lwg0YHQstGP0LfQsNC90L3Ri9C5INC00L7QutGD0LzQtdC90YJcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYWdlID0gdGhpcy5wcm9wcy5wYWdlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oYW5kbGVQYWdlQ2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZVBhZ2VDbGljayhwYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBwYWdlID0gdGhpcy5wcm9wcy5wYWdlLFxuICAgICAgICAgICAgICAgIHN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLnBhZ2VMYWJlbCwgdGhpcy5wcm9wcy5hY3RpdmUgPyB7IGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyB9IDoge30pO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5zdGF0ZS5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAncGFnZUxhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayB9LFxuICAgICAgICAgICAgICAgIHBhZ2UucGFnZU5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wcy5kaXNhYmxlZCAhPT0gcHJldlN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZCB9O1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBhZ2VMYWJlbDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cblBhZ2VMYWJlbC5wcm9wVHlwZXMgPSB7XG4gICAgaGFuZGxlUGFnZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwYWdlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2xcbn07XG5cblBhZ2VMYWJlbC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGFjdGl2ZTogdHJ1ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlTGFiZWw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL3BhZ2UtbGFiZWwvcGFnZS1sYWJlbC5qc3hcbi8vIG1vZHVsZSBpZCA9IDIyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e3BhZ2VMYWJlbDp7Ym9yZGVyOicxcHggc29saWQgbGlnaHRHcmV5Jyxib3JkZXJSYWRpdXM6JzNweCcsYm9yZGVyQm90dG9tOicxcHggc29saWQgd2hpdGUnLG1hcmdpbjonNXB4JyxtYXJnaW5MZWZ0OictN3B4JyxwYWRkaW5nOicycHggMTBweCAycHggMTBweCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvcGFnZS1sYWJlbC9wYWdlLWxhYmVsLXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjI2XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17cGFnZTp7LypcclxuICAgICAgICBib3JkZXI6JzFweCBzb2xpZCBibGFjaycsXHJcbiovYm9yZGVyUmFkaXVzOiczcHgnfSxpY29uczp7YWRkOidpbWFnZXMvaWNvbnMvYWRkLnBuZycsZWRpdDonaW1hZ2VzL2ljb25zL2VkaXQucG5nJyxkZWxldGU6J2ltYWdlcy9pY29ucy9kZWxldGUucG5nJyxmaWx0ZXI6J2ltYWdlcy9pY29ucy9maWx0ZXIucG5nJyxwcmludDonaW1hZ2VzL2ljb25zL3ByaW50LnBuZycsb2s6J2ltYWdlcy9pY29ucy9vay5wbmcnLGNhbmNlbDonaW1hZ2VzL2ljb25zL2NhbmNlbC5wbmcnfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2Zvcm0vZm9ybS1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbi8vY29uc3Qge3dpdGhSb3V0ZXJ9ID0gcmVxdWlyZSgncmVhY3Qtcm91dGVyLWRvbScpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIFRvb2xiYXJDb250YWluZXIgPSByZXF1aXJlKCcuLy4uL3Rvb2xiYXItY29udGFpbmVyL3Rvb2xiYXItY29udGFpbmVyLmpzeCcpLFxuICAgIEJ0bkFkZCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1hZGQvYnV0dG9uLXJlZ2lzdGVyLWFkZC5qc3gnKSxcbiAgICBCdG5FZGl0ID0gcmVxdWlyZSgnLi8uLi9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWVkaXQvYnV0dG9uLXJlZ2lzdGVyLWVkaXQuanN4JyksXG4gICAgQnRuU2F2ZSA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1zYXZlL2J1dHRvbi1yZWdpc3Rlci1zYXZlLmpzeCcpLFxuICAgIEJ0bkNhbmNlbCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1jYW5jZWwvYnV0dG9uLXJlZ2lzdGVyLWNhbmNlbC5qc3gnKSxcbiAgICBCdG5QcmludCA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1wcmludC9idXR0b24tcmVnaXN0ZXItcHJpbnQuanN4JyksXG4gICAgQnRuRW1haWwgPSByZXF1aXJlKCcuLy4uL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tZW1haWwvaW5kZXguanN4JyksXG4gICAgQnRuUGRmID0gcmVxdWlyZSgnLi8uLi9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXBkZi9pbmRleC5qc3gnKSxcbiAgICBCdG5Mb2dzID0gcmVxdWlyZSgnLi8uLi9zaG93LWxvZ3MvaW5kZXguanN4JyksXG4gICAgVGFza1dpZGdldCA9IHJlcXVpcmUoJy4vLi4vdGFzay13aWRnZXQvdGFzay13aWRnZXQuanN4Jyk7XG5cbnZhciBEb2NUb29sQmFyID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKERvY1Rvb2xCYXIsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIERvY1Rvb2xCYXIocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvY1Rvb2xCYXIpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEb2NUb29sQmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRG9jVG9vbEJhcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5idG5FZGl0Q2xpY2sgPSBfdGhpcy5idG5FZGl0Q2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmJ0bkFkZENsaWNrID0gX3RoaXMuYnRuQWRkQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmJ0blNhdmVDbGljayA9IF90aGlzLmJ0blNhdmVDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuYnRuQ2FuY2VsQ2xpY2sgPSBfdGhpcy5idG5DYW5jZWxDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuYnRuUHJpbnRDbGljayA9IF90aGlzLmJ0blByaW50Q2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmJ0blBkZkNsaWNrID0gX3RoaXMuYnRuUGRmQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmJ0bkVtYWlsQ2xpY2sgPSBfdGhpcy5idG5FbWFpbENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5idG5Mb2dzQ2xpY2sgPSBfdGhpcy5idG5Mb2dzQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmhhbmRsZUJ1dHRvblRhc2sgPSBfdGhpcy5oYW5kbGVCdXR0b25UYXNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVTZWxlY3RUYXNrID0gX3RoaXMuaGFuZGxlU2VsZWN0VGFzay5iaW5kKF90aGlzKTtcblxuICAgICAgICBfdGhpcy5kb2NJZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHByb3BzLmRvY0lkKSB7XG4gICAgICAgICAgICBfdGhpcy5kb2NJZCA9IHByb3BzLmRvY0lkO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZG9jU3RhdHVzOiBwcm9wcy5kb2NTdGF0dXNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhEb2NUb29sQmFyLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGlzRWRpdE1vZGUgPSB0aGlzLnByb3BzLmVkaXRlZCxcbiAgICAgICAgICAgICAgICBpc0RvY0Rpc2FibGVkID0gdGhpcy5wcm9wcy5kb2NTdGF0dXMgPT09IDIsXG4gICAgICAgICAgICAgICAgZG9jSWQgPSB0aGlzLmRvY0lkO1xuXG4gICAgICAgICAgICAvLyDQutC90L7Qv9C60Lgg0YDQtdC20LjQvNCwINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LTQvtC70LbQvdGLINC/0YDQvtC/0LDRgdGC0Ywg0LXRgdC70Lgg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQuCDQv9C+0LrQsNC30YvQstCw0YLRjCDQtdGB0LvQuCDRgNCw0LfRgNC10YjQtdC90L5cbiAgICAgICAgICAgIHZhciBrYXNfYWRkID0gdGhpcy5wcm9wcy50b29sYmFyUGFyYW1zID8gdGhpcy5wcm9wcy50b29sYmFyUGFyYW1zWydidG5BZGQnXS5zaG93IDogdHJ1ZTtcbiAgICAgICAgICAgIGlmIChrYXNfYWRkICYmIGlzRWRpdE1vZGUpIHtcbiAgICAgICAgICAgICAgICBrYXNfYWRkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIga2FzX2VkaXQgPSB0aGlzLnByb3BzLnRvb2xiYXJQYXJhbXMgPyB0aGlzLnByb3BzLnRvb2xiYXJQYXJhbXNbJ2J0bkVkaXQnXS5zaG93IDogdHJ1ZTtcbiAgICAgICAgICAgIGlmIChrYXNfZWRpdCAmJiBpc0VkaXRNb2RlKSB7XG4gICAgICAgICAgICAgICAga2FzX2VkaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRvb2xiYXJQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgYnRuQWRkOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGthc19hZGQsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBpc0VkaXRNb2RlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5FZGl0OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGthc19lZGl0LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogaXNEb2NEaXNhYmxlZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuUHJpbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5FbWFpbDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0blNhdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogaXNFZGl0TW9kZSAmJiAhaXNEb2NEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMudG9vbGJhclBhcmFtcyAmJiB0aGlzLnByb3BzLnRvb2xiYXJQYXJhbXNbJ2J0blNhdmUnXSA/IHRoaXMucHJvcHMudG9vbGJhclBhcmFtc1snYnRuU2F2ZSddLmRpc2FibGVkIDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkNhbmNlbDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBpc0VkaXRNb2RlICYmIGRvY0lkICE9PSAwLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBUb29sYmFyQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIHsgcmVmOiAndG9vbGJhckNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0bkFkZCwgeyByZWY6ICdidG5BZGQnLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmJ0bkFkZENsaWNrLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zWydidG5BZGQnXS5zaG93LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdG9vbGJhclBhcmFtc1snYnRuQWRkJ10uZGlzYWJsZWQgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdG5FZGl0LCB7IHJlZjogJ2J0bkVkaXQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ011dWRhJyxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5idG5FZGl0Q2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRvb2xiYXJQYXJhbXNbJ2J0bkVkaXQnXS5zaG93LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdG9vbGJhclBhcmFtc1snYnRuRWRpdCddLmRpc2FibGVkIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuU2F2ZSwgeyByZWY6ICdidG5TYXZlJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdTYWx2ZXN0YScsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuYnRuU2F2ZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zWydidG5TYXZlJ10uc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRvb2xiYXJQYXJhbXNbJ2J0blNhdmUnXS5kaXNhYmxlZCB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0bkNhbmNlbCwgeyByZWY6ICdidG5DYW5jZWwnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1TDvGhpc3RhJyxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5idG5DYW5jZWxDbGljayxcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdG9vbGJhclBhcmFtc1snYnRuQ2FuY2VsJ10uc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRvb2xiYXJQYXJhbXNbJ2J0bkNhbmNlbCddLmRpc2FibGVkIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuUHJpbnQsIHsgcmVmOiAnYnRuUHJpbnQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1Ryw7xraycsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuYnRuUHJpbnRDbGljayxcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdG9vbGJhclBhcmFtc1snYnRuUHJpbnQnXS5zaG93LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdG9vbGJhclBhcmFtc1snYnRuUHJpbnQnXS5kaXNhYmxlZCB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0bkVtYWlsLCB7IHJlZjogJ2J0bkVtYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgZG9jVHlwZUlkOiB0aGlzLnByb3BzLmRvY1R5cGVJZCxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5idG5FbWFpbENsaWNrLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0b29sYmFyUGFyYW1zWydidG5FbWFpbCddLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0b29sYmFyUGFyYW1zWydidG5FbWFpbCddLmRpc2FibGVkIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuTG9ncywgeyByZWY6ICdidG5Mb2dzJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5wcm9wcy5sb2dzLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmJ0bkxvZ3NDbGljayxcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogIWlzRWRpdE1vZGUgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5icG0ubGVuZ3RoICYmICFpc0RvY0Rpc2FibGVkICYmICFpc0VkaXRNb2RlID8gUmVhY3QuY3JlYXRlRWxlbWVudChUYXNrV2lkZ2V0LCB7IHJlZjogJ3Rhc2tXaWRnZXQnLFxuICAgICAgICAgICAgICAgICAgICB0YXNrTGlzdDogdGhpcy5wcm9wcy5icG0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVNlbGVjdFRhc2s6IHRoaXMuaGFuZGxlU2VsZWN0VGFzayxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQnV0dG9uVGFzazogdGhpcy5oYW5kbGVCdXR0b25UYXNrXG4gICAgICAgICAgICAgICAgfSkgOiBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0JLRi9C30L7QstC10YIg0LzQtdGC0L7QtCDQv9C10YDQtdGF0L7QtNCwINC90LAg0L3QvtCy0YvQuSDQtNC+0LrRg9C80LXQvdGCXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkFkZENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkFkZENsaWNrKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuYnRuQWRkQ2xpY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmJ0bkFkZENsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ21ldGhvZCBhZGQgbm90IGV4aXN0cyBpbiBwcm9wcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60L3QvtC/0LrQuCBFZGl0XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkVkaXRDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5FZGl0Q2xpY2soKSB7XG4gICAgICAgICAgICAvLyDQv9C10YDQtdCy0L7QtNC40Lwg0LTQvtC60YPQvNC10L3RgiDQsiDRgNC10LbQuNC8INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8sINGB0L7RhdGA0LDQvdC10L0gPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3BzLmRvY1N0YXR1cyB8fCB0aGlzLnByb3BzLmRvY1N0YXR1cyA8IDIpIHtcbiAgICAgICAgICAgICAgICAvL3RoaXMuZG9jSWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnL3JhYW1hLycgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuYnRuRWRpdENsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuYnRuRWRpdENsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbWV0aG9kIGVkaXQgbm90IGV4aXN0cyBpbiBwcm9wcycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuUHJpbnRDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5QcmludENsaWNrKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuYnRuUHJpbnRDbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuYnRuUHJpbnRDbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5QZGZDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5QZGZDbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmJ0blBkZkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5idG5QZGZDbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60L3QvtC/0LrQuCBlbWFpbFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5FbWFpbENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkVtYWlsQ2xpY2soKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5idG5FbWFpbENsaWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5idG5FbWFpbENsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4IFNhdmVcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuU2F2ZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0blNhdmVDbGljaygpIHtcbiAgICAgICAgICAgIC8vINCy0LDQu9C40LTQsNGC0L7RgFxuICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25NZXNzYWdlID0gdGhpcy5wcm9wcy52YWxpZGF0b3IgPyB0aGlzLnByb3BzLnZhbGlkYXRvcigpIDogJycsXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IHRoaXMucHJvcHMudmFsaWRhdG9yID8gIXZhbGlkYXRpb25NZXNzYWdlIDogdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAvLyDQtdGB0LvQuCDQv9GA0L7RiNC70Lgg0LLQsNC70LjQtNCw0YbQuNGOLCDRgtC+INGB0L7RhdGA0LDQvdC10Y/QvFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmJ0blNhdmVDbGljaykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmJ0blNhdmVDbGljaygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ21ldGhvZCBzYXZlIG5vdCBleGlzdHMgaW4gcHJvcHMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb2N1bWVudCBpcyBub3QgdmFsaWQnLCBpc1ZhbGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDRgdC+0LHRi9GC0LjRjyDQutC70LjQutCwINC00LvRjyDQutC90L7Qv9C60Lgg0J7RgtC60LDQt1xyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdidG5DYW5jZWxDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5DYW5jZWxDbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmJ0bkNhbmNlbENsaWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5idG5DYW5jZWxDbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdtZXRob2QgY2FuY2VsIG5vdCBleGlzdHMgaW4gcHJvcHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuTG9nc0NsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkxvZ3NDbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmJ0bkxvZ3NDbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuYnRuTG9nc0NsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUJ1dHRvblRhc2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQnV0dG9uVGFzayh0YXNrTmFtZSwga3B2LCBncnVwcElkLCB0ZWtzdCwga29ndXMpIHtcbiAgICAgICAgICAgIC8vINC40YjQtdC8INGC0LDRgdC60YNcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGhpcy5wcm9wcy5icG0uZmluZChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5uYW1lID09PSB0YXNrTmFtZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIC8vINC80LXRgtC+0LQg0LLRi9C30YvQstCw0LXRgtGB0Y8g0L/RgNC4INCy0YvQsdC+0YDQtSDQt9Cw0LTQsNGH0LhcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5idG5UYXNrQ2xpY2sodGFzay5uYW1lLCBrcHYsIGdydXBwSWQsIHRla3N0LCBrb2d1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZVNlbGVjdFRhc2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU2VsZWN0VGFzayhlKSB7XG4gICAgICAgICAgICAvLyDQvNC10YLQvtC0INCy0YvQt9GL0LLQsNC10YLRgdGPINC/0YDQuCDQstGL0LHQvtGA0LUg0LfQsNC00LDRh9C4XG4gICAgICAgICAgICB2YXIgdGFza1ZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5idG5UYXNrQ2xpY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5idG5UYXNrQ2xpY2sodGFza1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEb2NUb29sQmFyO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuRG9jVG9vbEJhci5wcm9wVHlwZXMgPSB7XG4gICAgYnBtOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgZWRpdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkb2NTdGF0dXM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgdmFsaWRhdG9yOiBQcm9wVHlwZXMuZnVuY1xufTtcblxuRG9jVG9vbEJhci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgYnBtOiBbXSxcbiAgICBlZGl0ZWQ6IGZhbHNlLFxuICAgIGRvY1N0YXR1czogMFxufTtcblxuLy9tb2R1bGUuZXhwb3J0cyA9IHdpdGhSb3V0ZXIoRG9jVG9vbEJhcik7XG5tb2R1bGUuZXhwb3J0cyA9IERvY1Rvb2xCYXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2RvYy10b29sYmFyL2RvYy10b29sYmFyLmpzeFxuLy8gbW9kdWxlIGlkID0gMjI4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci1zdHlsZXMnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgSUNPTiA9ICdzYXZlJztcblxudmFyIEJ1dHRvblJlZ2lzdGVyU2F2ZSA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25SZWdpc3RlclNhdmUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIC8vINC60L3QvtC/0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC00L7QutGD0LzQtdC90YLQsCDQsiDRgNC10LPQuNGB0YLRgNCw0YVcbiAgICBmdW5jdGlvbiBCdXR0b25SZWdpc3RlclNhdmUocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvblJlZ2lzdGVyU2F2ZSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvblJlZ2lzdGVyU2F2ZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1dHRvblJlZ2lzdGVyU2F2ZSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvblJlZ2lzdGVyU2F2ZSwgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgICAgICAgICAgLy8g0LTQuNGB0LXQudCx0LvQuNC8INC60L3QvtC/0LrRg1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRpc2FibGVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQ2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNhYmxlZDogbmV4dFByb3BzLmRpc2FibGVkIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0blNhdmUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ1NhdmUnLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnN0YXRlLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuaGFuZGxlQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbnNbSUNPTl0gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQnV0dG9uUmVnaXN0ZXJTYXZlO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuQnV0dG9uUmVnaXN0ZXJTYXZlLnByb3BUeXBlcyA9IHtcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuQnV0dG9uUmVnaXN0ZXJTYXZlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b25SZWdpc3RlclNhdmU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItc2F2ZS9idXR0b24tcmVnaXN0ZXItc2F2ZS5qc3hcbi8vIG1vZHVsZSBpZCA9IDIyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLmpzeCcpLFxuICAgIElDT04gPSAnY2FuY2VsJztcblxudmFyIEJ1dHRvblJlZ2lzdGVyQ2FuY2VsID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvblJlZ2lzdGVyQ2FuY2VsLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uUmVnaXN0ZXJDYW5jZWwocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvblJlZ2lzdGVyQ2FuY2VsKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uUmVnaXN0ZXJDYW5jZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWdpc3RlckNhbmNlbCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvblJlZ2lzdGVyQ2FuY2VsLCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZCB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5DYW5jZWwnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ0NhbmNlbCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuc3RhdGUuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b25SZWdpc3RlckNhbmNlbDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkJ1dHRvblJlZ2lzdGVyQ2FuY2VsLnByb3BUeXBlcyA9IHtcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuQnV0dG9uUmVnaXN0ZXJDYW5jZWwuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvblJlZ2lzdGVyQ2FuY2VsO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWNhbmNlbC9idXR0b24tcmVnaXN0ZXItY2FuY2VsLmpzeFxuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyksXG4gICAgRGF0YUdyaWQgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4JyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgQnRuSW5mbyA9IHJlcXVpcmUoJy4vLi4vYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1pbmZvL2luZGV4LmpzeCcpLFxuICAgIE1vZGFsUGFnZSA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxQYWdlLmpzeCcpO1xuXG52YXIgR1JJRF9DT05GSUcgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbmZpZy9jb25zdGFudHMnKS5sb2dzLmdyaWRDb25maWc7XG5cbnZhciBTaG93TG9ncyA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhTaG93TG9ncywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2hvd0xvZ3MocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNob3dMb2dzKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2hvd0xvZ3MuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTaG93TG9ncykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNob3c6ICEhX3RoaXMucHJvcHMuZGF0YS5sZW5ndGhcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5tb2RhbFBhZ2VDbGljayA9IF90aGlzLm1vZGFsUGFnZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNob3dMb2dzLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnNob3cgPyB0aGlzLm1vZGFsUGFnZSgpIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5Mb2dzJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdMb2dnaWQnLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5idXR0b24uaWNvbiB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2soKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb2RhbFBhZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW9kYWxQYWdlKCkge1xuICAgICAgICAgICAgdmFyIG1vZGFsT2JqZWN0cyA9IFsnYnRuT2snXTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgTW9kYWxQYWdlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzOiBtb2RhbE9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ21vZGFscGFnZS1ncmlkJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlQnRuQ2xpY2s6IHRoaXMubW9kYWxQYWdlQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdMb2dnaWQnIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5idG5JbmZvIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuSW5mbywgeyByZWY6ICdidG5JbmZvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogJ2xvZ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUgfSlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ2dyaWQtcm93LWNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhR3JpZCwgeyBncmlkRGF0YTogdGhpcy5wcm9wcy5kYXRhLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkQ29sdW1uczogR1JJRF9DT05GSUcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93VG9vbEJhcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdkYXRhLWdyaWQnIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW9kYWxQYWdlQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW9kYWxQYWdlQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ09rJykge1xuXG4gICAgICAgICAgICAgICAgLy8g0L/QvtC60LDQt9Cw0YLRjCDQvdC+0LLQvtC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvdzogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2hvd0xvZ3M7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5TaG93TG9ncy5wcm9wVHlwZXMgPSB7XG4gICAgc2hvdzogUHJvcFR5cGVzLmJvb2xcbn07XG5cblNob3dMb2dzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBzaG93OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNob3dMb2dzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zaG93LWxvZ3MvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyMzFcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXt3cmFwcGVyOnttYXJnaW46JzVweCcsZGlzcGxheTonZmxleCcsd2lkdGg6Jzk1JSd9LGJ1dHRvbjp7aWNvbjonL2ltYWdlcy9pY29ucy9pbmZvLnBuZycsd2lkdGg6JzEwJSd9LGJ0bkluZm86e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J3Jvdy1yZXZlcnNlJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zaG93LWxvZ3Mvc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgZ2V0Tm93ID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9saWJzL2dldE5vdycpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBCdXR0b24gPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWV4ZWN1dGUvYnV0dG9uLXJlZ2lzdGVyLWV4ZWN1dGUuanN4JyksXG4gICAgQnV0dG9uT3BlbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXIuanN4JyksXG4gICAgU2VsZWN0ID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LmpzeCcpLFxuICAgIElucHV0RGF0ZSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtZGF0ZS9pbnB1dC1kYXRlLmpzeCcpLFxuICAgIElucHV0VGV4dCA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmpzeCcpLFxuICAgIElucHV0TnVtYmVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy9pbnB1dC1udW1iZXIvaW5wdXQtbnVtYmVyLmpzeCcpLFxuICAgIE1vZGFsUGFnZSA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxQYWdlLmpzeCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vdGFzay13aWRnZXQtc3R5bGVzJyk7XG52YXIgRG9jQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vLi4vZG9jLWNvbnRleHQuanMnKTtcblxudmFyIFRhc2tXaWRnZXQgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoVGFza1dpZGdldCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gVGFza1dpZGdldChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFza1dpZGdldCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhc2tXaWRnZXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYXNrV2lkZ2V0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdGFza0xpc3Q6IHByb3BzLnRhc2tMaXN0IHx8IFtdLFxuICAgICAgICAgICAgYWN0dWFsVGFzazogcHJvcHMudGFza0xpc3RbMF0ubmFtZSxcbiAgICAgICAgICAgIHNob3dMaXN0OiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dNb2RhbDogZmFsc2UsXG4gICAgICAgICAgICBzaG93RGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHRpdGxlRGF0ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3dWaWl0ZW51bWJlcjogZmFsc2UsXG4gICAgICAgICAgICB0aXRsZVZpaXRlbnVtYmVyOiBudWxsLFxuICAgICAgICAgICAgc2hvd1lrc3VzOiBwcm9wcy5rYXNTaG93WWtzdXMsXG4gICAgICAgICAgICB0aXRsZVlrc3VzOiBudWxsLFxuICAgICAgICAgICAgc2hvd0tvZ3VzOiBwcm9wcy5rYXNTaG93S29ndXMsXG4gICAgICAgICAgICB0aXRsZUtvZ3VzOiBudWxsLFxuICAgICAgICAgICAgdmlpdGVudW1iZXI6IG51bGwsXG4gICAgICAgICAgICB5a3N1czogMCxcbiAgICAgICAgICAgIGtvZ3VzOiBEb2NDb250ZXh0Lm1rSmFhayA/IERvY0NvbnRleHQubWtKYWFrIDogMCxcbiAgICAgICAgICAgIHNlaXN1Z2E6IGdldE5vdygpXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZVNlbGVjdFRhc2sgPSBfdGhpcy5oYW5kbGVTZWxlY3RUYXNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVCdXR0b25UYXNrID0gX3RoaXMuaGFuZGxlQnV0dG9uVGFzay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlQnV0dG9uT3BlbkNsaWNrID0gX3RoaXMuaGFuZGxlQnV0dG9uT3BlbkNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5tb2RhbFBhZ2VDbGljayA9IF90aGlzLm1vZGFsUGFnZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVJbnB1dENoYW5nZSA9IF90aGlzLmhhbmRsZUlucHV0Q2hhbmdlLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRhc2tXaWRnZXQsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnRhc2tMaXN0KSByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCk7XG5cbiAgICAgICAgICAgIHZhciB0YXNrcyA9IHRoaXMuc3RhdGUudGFza0xpc3QubWFwKGZ1bmN0aW9uICh0YXNrLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGlkOiBpbmRleCsrLCBuYW1lOiAnICcsIGtvb2Q6IHRhc2submFtZSB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB0YXNrSWQgPSB0YXNrcy5maW5kSW5kZXgoZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzay5uYW1lID09IF90aGlzMi5zdGF0ZS5hY3R1YWxUYXNrO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwcGVyIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwcGVyIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2J1dHRvblRhc2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQnV0dG9uVGFzayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5hY3R1YWxUYXNrXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uT3Blbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2J1dHRvbk9wZW5MaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUJ1dHRvbk9wZW5DbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3YnIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd0xpc3QgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyBuYW1lOiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLnNlbGVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRhc2tzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAna29vZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5hY3R1YWxUYXNrIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLnN0YXRlLmFjdHVhbFRhc2ssXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdzZWxlY3QtbmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVTZWxlY3RUYXNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlIH0pIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zaG93TW9kYWwgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgTW9kYWxQYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdUZWdldnVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0czogWydidG5PaycsICdidG5DYW5jZWwnXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdLYXMga1xceEU0aXZhdGEgJyArIHRoaXMuc3RhdGUuYWN0dWFsVGFzayArICcgPycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNob3dEYXRlID8gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dERhdGUsIHsgdGl0bGU6IHRoaXMuc3RhdGUudGl0bGVEYXRlID8gdGhpcy5zdGF0ZS50aXRsZURhdGUgOiAnU2Vpc3VnYSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzZWlzdWdhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5zZWlzdWdhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtwdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlIH0pIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd1lrc3VzID8gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdGl0bGU6IHRoaXMuc3RhdGUudGl0bGVZa3N1cyA/IHRoaXMuc3RhdGUudGl0bGVZa3N1cyA6IFwiw5xrc3VzOlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd5a3N1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGliczogJ2xhcHNlX2dydXBwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBEb2NDb250ZXh0LmxpYnMubGFwc2VfZ3J1cHAgPyBEb2NDb250ZXh0LmxpYnMubGFwc2VfZ3J1cHAgOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdzZWxlY3QtbGFwc2VfZ3J1cHAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxJZDogJ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS55a3N1cyB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd1ZpaXRlbnVtYmVyID8gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZVZpaXRlbnVtYmVyID8gdGhpcy5zdGF0ZS50aXRsZVZpaXRlbnVtYmVyIDogXCJWaWl0ZW51bWJlcjpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndmlpdGVudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LXZpaXRlbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52aWl0ZW51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd0tvZ3VzID8gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dE51bWJlciwgeyB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZUtvZ3VzID8gdGhpcy5zdGF0ZS50aXRsZUtvZ3VzIDogJ1bDpMOkcnR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2tvZ3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHRoaXMuc3RhdGUua29ndXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtvZ3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBEb2NDb250ZXh0Lm1rSmFhayA/IERvY0NvbnRleHQubWtKYWFrIDogOTk5OTk5OTk5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlIH0pIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vZGFsUGFnZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vZGFsUGFnZUNsaWNrKGJ0bkV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd01vZGFsOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGlmIChidG5FdmVudCA9PT0gJ09rJykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQnV0dG9uVGFzayh0aGlzLnN0YXRlLmFjdHVhbFRhc2ssIHRoaXMuc3RhdGUuc2Vpc3VnYSwgdGhpcy5zdGF0ZS55a3N1cywgdGhpcy5zdGF0ZS52aWl0ZW51bWJlciwgdGhpcy5zdGF0ZS5rb2d1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUJ1dHRvbk9wZW5DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVCdXR0b25PcGVuQ2xpY2soKSB7XG4gICAgICAgICAgICB2YXIgaXNTaG93ID0gIXRoaXMuc3RhdGUuc2hvd0xpc3Q7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0xpc3Q6IGlzU2hvdyB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlU2VsZWN0VGFzaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3RUYXNrKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaXNTaG93ID0gIXRoaXMuc3RhdGUuc2hvd0xpc3Q7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRoaXMuc3RhdGUudGFza0xpc3QuZmluZChmdW5jdGlvbiAodGFzaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLm5hbWUgPT0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpc1Nob3dEYXRlID0gdGFzayAmJiB0YXNrLmhhc093blByb3BlcnR5KCdoaWRlRGF0ZScpID8gIXRhc2suaGlkZURhdGUgOiB0cnVlO1xuICAgICAgICAgICAgdmFyIHNob3dZa3N1cyA9IHRhc2sgJiYgdGFzay5oYXNPd25Qcm9wZXJ0eSgnc2hvd1lrc3VzJykgPyB0YXNrLnNob3dZa3N1cyA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHNob3dWaWl0ZW51bWJlciA9IHRhc2sgJiYgdGFzay5oYXNPd25Qcm9wZXJ0eSgnc2hvd1ZpaXRlbnVtYmVyJykgPyB0YXNrLnNob3dWaWl0ZW51bWJlciA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHNob3dLb2d1cyA9IHRhc2sgJiYgdGFzay5oYXNPd25Qcm9wZXJ0eSgnc2hvd0tvZ3VzJykgPyB0YXNrLnNob3dLb2d1cyA6IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzaG93TGlzdDogaXNTaG93LFxuICAgICAgICAgICAgICAgIGFjdHVhbFRhc2s6IHZhbHVlLFxuICAgICAgICAgICAgICAgIHNob3dEYXRlOiBpc1Nob3dEYXRlLFxuICAgICAgICAgICAgICAgIHRpdGxlRGF0ZTogdGFzay50aXRsZURhdGUgPyB0YXNrLnRpdGxlRGF0ZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2hvd1lrc3VzOiBzaG93WWtzdXMsXG4gICAgICAgICAgICAgICAgc2hvd1ZpaXRlbnVtYmVyOiBzaG93VmlpdGVudW1iZXIsXG4gICAgICAgICAgICAgICAgdGl0bGVWaWl0ZW51bWJlcjogdGFzay50aXRsZVZpaXRlbnVtYmVyID8gdGFzay50aXRsZVZpaXRlbnVtYmVyIDogbnVsbCxcbiAgICAgICAgICAgICAgICBzaG93S29ndXM6IHNob3dLb2d1cyxcbiAgICAgICAgICAgICAgICB0aXRsZUtvZ3VzOiB0YXNrLnRpdGxlS29ndXMgPyB0YXNrLnRpdGxlS29ndXMgOiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlQnV0dG9uVGFzaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVCdXR0b25UYXNrKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBzaG93WWtzdXMgPSB0aGlzLnN0YXRlLnNob3dZa3N1cztcbiAgICAgICAgICAgIHZhciBzaG93VmlpdGVudW1iZXIgPSB0aGlzLnN0YXRlLnNob3dWaWl0ZW51bWJlcjtcbiAgICAgICAgICAgIHZhciBzaG93S29ndXMgPSB0aGlzLnN0YXRlLnNob3dLb2d1cztcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGhpcy5zdGF0ZS50YXNrTGlzdC5maW5kKGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2submFtZSA9PSBfdGhpczMuc3RhdGUuYWN0dWFsVGFzaztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGlzU2hvd0RhdGUgPSB0YXNrICYmIHRhc2suaGFzT3duUHJvcGVydHkoJ2hpZGVEYXRlJykgPyAhdGFzay5oaWRlRGF0ZSA6IHRydWU7XG4gICAgICAgICAgICB2YXIgaXNTaG93VmlpdGVudW1iZXIgPSB0YXNrICYmIHRhc2suaGFzT3duUHJvcGVydHkoJ3Nob3dWaWl0ZW51bWJlcicpID8gdGFzay5zaG93VmlpdGVudW1iZXIgOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpc1Nob3dLb2d1cyA9IHRhc2sgJiYgdGFzay5oYXNPd25Qcm9wZXJ0eSgnc2hvd0tvZ3VzJykgPyB0YXNrLnNob3dLb2d1cyA6IGZhbHNlO1xuXG4gICAgICAgICAgICBzaG93WWtzdXMgPSB0YXNrICYmIHRhc2suaGFzT3duUHJvcGVydHkoJ3Nob3dZa3N1cycpID8gdGFzay5zaG93WWtzdXMgOiBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2hvd01vZGFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dZa3N1czogc2hvd1lrc3VzLFxuICAgICAgICAgICAgICAgIHNob3dEYXRlOiBpc1Nob3dEYXRlLFxuICAgICAgICAgICAgICAgIHNob3dLb2d1czogaXNTaG93S29ndXMsXG4gICAgICAgICAgICAgICAgc2hvd1ZpaXRlbnVtYmVyOiBpc1Nob3dWaWl0ZW51bWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3dpbGwgc2F2ZSB2YWx1ZVxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVJbnB1dENoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHN0YXRlVmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgc2Vpc3VnYTogdGhpcy5zdGF0ZS5zZWlzdWdhLFxuICAgICAgICAgICAgICAgIHlrc3VzOiB0aGlzLnN0YXRlLnlrc3VzLFxuICAgICAgICAgICAgICAgIHZpaXRlbnVtYmVyOiB0aGlzLnN0YXRlLnZpaXRlbnVtYmVyLFxuICAgICAgICAgICAgICAgIGtvZ3VzOiB0aGlzLnN0YXRlLmtvZ3VzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdGVWYWx1ZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUYXNrV2lkZ2V0O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxuVGFza1dpZGdldC5wcm9wVHlwZXMgPSB7XG4gICAgdGFza0xpc3Q6IFByb3BUeXBlcy5hcnJheSxcbiAgICBoYW5kbGVCdXR0b25UYXNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVNlbGVjdFRhc2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAga2FzU2hvd1lrc3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBrYXNTaG93S29ndXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGthc1Nob3dWaWl0ZW51bWJlcjogUHJvcFR5cGVzLmJvb2xcbn07XG5cblRhc2tXaWRnZXQuZGVmYXVsdFByb3BzID0ge1xuICAgIHRhc2tMaXN0OiBbXSxcbiAgICBrYXNTaG93WWtzdXM6IGZhbHNlLFxuICAgIGthc1Nob3dLb2d1czogZmFsc2UsXG4gICAga2FzU2hvd1ZpaXRlbnVtYmVyOiBmYWxzZVxufTtcbm1vZHVsZS5leHBvcnRzID0gVGFza1dpZGdldDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvdGFzay13aWRnZXQvdGFzay13aWRnZXQuanN4XG4vLyBtb2R1bGUgaWQgPSAyMzNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7Ly8gd2lsbCByZXR1cm4gZGF0ZSBpbiBmb3JtYXQgJ1lZWVktTU0tREQnXG5tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBub3c9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOm5ldyBEYXRlKCk7cmV0dXJuIG5vdy50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLDEwKTt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbGlicy9nZXROb3cuanNcbi8vIG1vZHVsZSBpZCA9IDIzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLmpzeCcpLFxuICAgIElDT04gPSAnZXhlY3V0ZSc7XG5cbnZhciBCdXR0b25SZWdpc3RlckV4ZWN1dGUgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQnV0dG9uUmVnaXN0ZXJFeGVjdXRlLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uUmVnaXN0ZXJFeGVjdXRlKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdXR0b25SZWdpc3RlckV4ZWN1dGUpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCdXR0b25SZWdpc3RlckV4ZWN1dGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWdpc3RlckV4ZWN1dGUpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25SZWdpc3RlckV4ZWN1dGUsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnRuRXhlY3V0ZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0aGlzLnByb3BzLnNob3csXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zW0lDT05dIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvblJlZ2lzdGVyRXhlY3V0ZTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkJ1dHRvblJlZ2lzdGVyRXhlY3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG5CdXR0b25SZWdpc3RlckV4ZWN1dGUuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvblJlZ2lzdGVyRXhlY3V0ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci1leGVjdXRlL2J1dHRvbi1yZWdpc3Rlci1leGVjdXRlLmpzeFxuLy8gbW9kdWxlIGlkID0gMjM1XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xudmFyIHJhZGl1bSA9IHJlcXVpcmUoJ3JhZGl1bScpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vaW5wdXQtZGF0ZS1zdHlsZXMnKTtcblxudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcbnZhciBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG5cbnZhciBJbnB1dERhdGUgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoSW5wdXREYXRlLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbnB1dERhdGUocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElucHV0RGF0ZSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKElucHV0RGF0ZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0RGF0ZSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSB8fCAnJyxcbiAgICAgICAgICAgIHJlYWRPbmx5OiBwcm9wcy5yZWFkT25seVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5vbkNoYW5nZSA9IF90aGlzLm9uQ2hhbmdlLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiDRg9GB0YLQsNC90L7QstC40YIg0YTQvtC60YPRgSDQvdCwINGN0LvQtdC80LXQvdGC0YtcclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoSW5wdXREYXRlLCBbe1xuICAgICAgICBrZXk6ICdmb2N1cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMucmVmc1snaW5wdXQnXS5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2lsbCB1cGRhdGUgc3RhdGUgaWYgcHJvcHMgY2hhbmdlZFxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbkNoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlKGZpZWxkVmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAoZmllbGRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8g0LXRgdC70Lgg0LfQvdCw0YfQtdC90LjQtSDQvdGD0LssINGC0L4g0L/Rg9GB0YLRjCDQsdGD0LTQtdGCIG51bFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsaWRhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogZmllbGRWYWx1ZSB9KTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vINC10YHQu9C4INC30LDQtNCw0L0g0L7QsdGA0LDQsdC+0YLRh9C40LosINCy0LXRgNC90LXQvCDQtdCz0L5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLnByb3BzLm5hbWUsIGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dFBsYWNlSG9sZGVyID0gdGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCB0aGlzLnByb3BzLnRpdGxlLFxuICAgICAgICAgICAgICAgIGlucHV0U3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuaW5wdXQsIHRoaXMucHJvcHMud2lkdGggPyB7IHdpZHRoOiB0aGlzLnByb3BzLndpZHRoIH0gOiB7fSwgdGhpcy5zdGF0ZS5yZWFkT25seSA/IHN0eWxlcy5yZWFkT25seSA6IHt9LCB0aGlzLnByb3BzLnN0eWxlcyA/IHRoaXMucHJvcHMuc3R5bGVzIDoge30pO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud3JhcHBlciB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5sYWJlbCwgaHRtbEZvcjogdGhpcy5wcm9wcy5uYW1lLCByZWY6ICdsYWJlbCcgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0VGV4dFZhbHVlKHRoaXMucHJvcHMudGl0bGUpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogaW5wdXRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdGhpcy5zdGF0ZS5yZWFkT25seSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMucHJvcHMudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBpbnB1dFBsYWNlSG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICBtaW46IHRoaXMucHJvcHMubWluLFxuICAgICAgICAgICAgICAgICAgICBtYXg6IHRoaXMucHJvcHMubWF4LFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndmFsaWRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGUodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQutCwINC90LAg0LzQuNC9ICwg0LzQsNGFXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5taW4gJiYgdGhpcy5wcm9wcy5tYXggJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZVZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRhdGVWYWx1ZSA+IHRoaXMucHJvcHMubWluICYmIGRhdGVWYWx1ZSA8IHRoaXMucHJvcHMubWF4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHByZXZTdGF0ZS52YWx1ZSB8fCBuZXh0UHJvcHMucmVhZE9ubHkgIT09IHByZXZTdGF0ZS5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBuZXh0UHJvcHMudmFsdWUsIHJlYWRPbmx5OiBuZXh0UHJvcHMucmVhZE9ubHkgfTtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBJbnB1dERhdGU7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5JbnB1dERhdGUucHJvcFR5cGVzID0ge1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtaW46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWF4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHBhdHRlcm46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgd2lkdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbklucHV0RGF0ZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICB2YWx1ZTogU3RyaW5nKGN1cnJlbnREYXRlKSxcbiAgICB0aXRsZTogJydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFkaXVtKElucHV0RGF0ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2lucHV0LWRhdGUvaW5wdXQtZGF0ZS5qc3hcbi8vIG1vZHVsZSBpZCA9IDIzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2lucHV0Ont3aWR0aDonNzAlJyxib3JkZXJSYWRpdXM6JzNweCcsbWFyZ2luOic1cHggMnB4JywnOmZvY3VzJzp7YmFja2dyb3VuZENvbG9yOidsaWdodHBpbmsnfSxib3JkZXI6JzFweCBzb2xpZCBncmF5JyxoZWlnaHQ6JzMwcHgnfSxmb2N1c2VkOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0Ymx1ZSd9LHJlYWRPbmx5OntiYWNrZ3JvdW5kQ29sb3I6JyNGM0VGRUYnfSx3cmFwcGVyOnttYXJnaW46JzVweCcsZGlzcGxheTonZmxleCcsd2lkdGg6Jzk1JSd9LGxhYmVsOnt3aWR0aDonMzAlJyxtYXJnaW46JzVweCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtZGF0ZS9pbnB1dC1kYXRlLXN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjM3XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHN0eWxlcyA9IHJlcXVpcmUoJy4vaW5wdXQtbnVtYmVyLXN0eWxlcycpO1xudmFyIHJhZGl1bSA9IHJlcXVpcmUoJ3JhZGl1bScpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIElucHV0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKElucHV0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBJbnB1dChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnB1dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHByb3BzLnJlYWRPbmx5LFxuICAgICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgdmFsaWQ6IHByb3BzLnZhbGlkXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyB3aWxsIHVwZGF0ZSBzdGF0ZSBpZiBwcm9wcyBjaGFuZ2VkXG5cblxuICAgIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICAgICAga2V5OiAnb25DaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogZmllbGRWYWx1ZSB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMucHJvcHMubmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRQbGFjZUhvbGRlciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgIGlucHV0U3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuaW5wdXQsIHRoaXMucHJvcHMuc3R5bGUgPyB0aGlzLnByb3BzLnN0eWxlIDoge30sIHRoaXMucHJvcHMud2lkdGggPyB7IHdpZHRoOiB0aGlzLnByb3BzLndpZHRoIH0gOiB7fSwgdGhpcy5zdGF0ZS5yZWFkT25seSA/IHN0eWxlcy5yZWFkT25seSA6IHt9KSxcbiAgICAgICAgICAgICAgICBpbnB1dE1pblZhbHVlID0gdGhpcy5wcm9wcy5taW4sXG4gICAgICAgICAgICAgICAgaW5wdXRNYXhWYWx1ZSA9IHRoaXMucHJvcHMubWF4O1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud3JhcHBlciB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5sYWJlbCwgaHRtbEZvcjogdGhpcy5wcm9wcy5uYW1lLCByZWY6ICdsYWJlbCcgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0VGV4dFZhbHVlKHRoaXMucHJvcHMudGl0bGUpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogdGhpcy5wcm9wcy50eXBlID8gdGhpcy5wcm9wcy50eXBlIDogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGlucHV0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0aGlzLnN0YXRlLnJlYWRPbmx5LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGlucHV0UGxhY2VIb2xkZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICBtaW46IGlucHV0TWluVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG1heDogaW5wdXRNYXhWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ1xcXFxkKyhcXFxcLlxcXFxkezJ9KT8nLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiAnMC4wMScsXG5cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINGD0YHRgtCw0L3QvtCy0LjRgiDRhNC+0LrRg9GBINC90LAg0Y3Qu9C10LzQtdC90YLRi1xyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmb2N1cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMucmVmc1snaW5wdXQnXS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHByZXZTdGF0ZS52YWx1ZSB8fCBuZXh0UHJvcHMucmVhZE9ubHkgIT09IHByZXZTdGF0ZS5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBuZXh0UHJvcHMudmFsdWUsIHJlYWRPbmx5OiBuZXh0UHJvcHMucmVhZE9ubHkgfTtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBJbnB1dDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbklucHV0LnByb3BUeXBlcyA9IHtcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2YWxpZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGF0dGVybjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtaW46IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbWF4OiBQcm9wVHlwZXMubnVtYmVyXG59O1xuXG5JbnB1dC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICBtaW46IC05OTk5OTk5OTksXG4gICAgbWF4OiA5OTk5OTk5OTlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmFkaXVtKElucHV0KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtbnVtYmVyL2lucHV0LW51bWJlci5qc3hcbi8vIG1vZHVsZSBpZCA9IDIzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2lucHV0Ont3aWR0aDonNzAlJyxtYXJnaW46JzVweCAycHgnLGJvcmRlclJhZGl1czonM3B4JywnOmZvY3VzJzp7YmFja2dyb3VuZENvbG9yOidsaWdodHBpbmsnfSxib3JkZXI6JzFweCBzb2xpZCBncmF5JyxoZWlnaHQ6JzMwcHgnfSxmb2N1c2VkOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0Ymx1ZSd9LHJlYWRPbmx5OntiYWNrZ3JvdW5kQ29sb3I6JyNGM0VGRUYnfSx3cmFwcGVyOnttYXJnaW46JzVweCcsZGlzcGxheTonZmxleCcsd2lkdGg6Jzk1JSd9LGxhYmVsOnt3aWR0aDonMzAlJyxtYXJnaW46JzVweCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvaW5wdXQtbnVtYmVyL2lucHV0LW51bWJlci1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDIzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e3dyYXBwZXI6e2Rpc3BsYXk6J2lubGluZS1mbGV4J30sYnV0dG9tT3Blbjp7ZGlzcGxheTonZmxleCd9LHNlbGVjdDp7d2lkdGg6J2F1dG8nLHBvc2l0aW9uOidhYnNvbHV0ZScsaGVpZ2h0OiczMHB4J319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy90YXNrLXdpZGdldC90YXNrLXdpZGdldC1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2RvY1Jvdzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjoncm93Jy8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmx1ZSdcclxuICAgICAgICAqL30sZG9jQ29sdW1uOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nLC8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgeWVsbG93JyxcclxuICAgICAgICAqL3dpZHRoOic1MCUnfSxkb2M6e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbicvKlxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGJyb3duJ1xyXG4gICAgICAgICovfSxvazp7YmFja2dyb3VuZENvbG9yOidsaWdodGdyZWVuJyx3aWR0aDonMTAwJScsdGV4dEFsaWduOidyaWdodCd9LGVycm9yOntiYWNrZ3JvdW5kQ29sb3I6J2xpZ2h0Y29yYWwnLHdpZHRoOicxMDAlJyx0ZXh0QWxpZ246J3JpZ2h0J30sbm90VmFsaWQ6e2JhY2tncm91bmRDb2xvcjoneWVsbG93Jyx3aWR0aDonMTAwJScsdGV4dEFsaWduOidyaWdodCd9LG1vZGFsVmFsaWRhdGU6e2ljb25JbWFnZTonL2ltYWdlcy9pY29ucy9pbmZvLnBuZyd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvZG9jdW1lbnRUZW1wbGF0ZS9kb2N1bWVudC1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcycpO1xudmFyIExvYWRpbmcgPSBmdW5jdGlvbiBMb2FkaW5nKHByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2luZG93IH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICBwcm9wcy5sYWJlbFxuICAgICAgICApXG4gICAgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9hZGluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvbG9hZGluZy9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDI0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2xhYmVsOnt3aWR0aDonYXV0byd9LHdpbmRvdzp7ZGlzcGxheTonZmxleCcsanVzdGlmeUNvbnRlbnQ6J2NlbnRlcicsYWxpZ25JdGVtczonY2VudGVyJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9sb2FkaW5nL3N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIERvY3VtZW50VGVtcGxhdGUgPSByZXF1aXJlKCcuLy4uLy4uL2RvY3VtZW50VGVtcGxhdGUvaW5kZXguanN4JyksXG4gICAgSW5wdXRUZXh0ID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQuanN4JyksXG4gICAgRGF0YUdyaWQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4JyksXG4gICAgVGV4dEFyZWEgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3RleHQtYXJlYS90ZXh0LWFyZWEuanN4JyksXG4gICAgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxQYWdlLmpzeCcpLFxuICAgIFNlbGVjdCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvc2VsZWN0L3NlbGVjdC5qc3gnKSxcbiAgICBDaGVja0JveCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtY2hlY2tib3gvaW5wdXQtY2hlY2tib3guanN4JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi9zdHlsZXMnKTtcblxudmFyIExJQl9PQkpTID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9jb25maWcvY29uc3RhbnRzJykuUkVLVi5MSUJfT0JKUztcblxuLyoqXHJcbiAqINCa0LvQsNGB0YEg0YDQtdCw0LvQuNC30YPQtdGCINC00L7QutGD0LzQtdC90YIg0YHQv9GA0LDQstC+0YfQvdC40LrQsCDQv9GA0LjQt9C90LDQutC+0LIuXHJcbiAqL1xuXG52YXIgUmVrdiA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhSZWt2LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBSZWt2KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWt2KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVrdi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJla3YpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBkb2NJZDogcHJvcHMuZG9jSWQgPyBwcm9wcy5kb2NJZCA6IE51bWJlcihwcm9wcy5tYXRjaC5wYXJhbXMuZG9jSWQpLFxuICAgICAgICAgICAgbG9hZGVkRGF0YTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucmVuZGVyZXIgPSBfdGhpcy5yZW5kZXJlci5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuY3JlYXRlR3JpZFJvdyA9IF90aGlzLmNyZWF0ZUdyaWRSb3cuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVrdiwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERvY3VtZW50VGVtcGxhdGUsIHsgZG9jSWQ6IHRoaXMuc3RhdGUuZG9jSWQsXG4gICAgICAgICAgICAgICAgcmVmOiAnZG9jdW1lbnQnLFxuICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogJ1JFS1YnLFxuICAgICAgICAgICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHRoaXMucHJvcHMubW9kdWxlLFxuICAgICAgICAgICAgICAgIGxpYnM6IExJQl9PQkpTLFxuICAgICAgICAgICAgICAgIGluaXREYXRhOiB0aGlzLnByb3BzLmluaXREYXRhLFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiB0aGlzLnJlbmRlcmVyLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUdyaWRSb3c6IHRoaXMuY3JlYXRlR3JpZFJvd1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCc0LXRgtC+0LQg0LLQtdGA0L3QtdGCINC60LDRgdGC0L7QvNC90YvQuSDQutC+0LzQv9C+0L3QtdC90YJcclxuICAgICAgICAgKiBAcGFyYW0gc2VsZlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJlcihzZWxmKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYuZG9jRGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGdyaWREYXRhID0gc2VsZi5kb2NEYXRhLmdyaWREYXRhLFxuICAgICAgICAgICAgICAgIGdyaWRDb2x1bW5zID0gc2VsZi5kb2NEYXRhLmdyaWRDb25maWc7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2MgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ1JlZ2tvb2Q6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmVna29vZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1yZWdrb29kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLnJlZ2tvb2QgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdLQk0ga29vZDogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrYm1rb29kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtibWtvb2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFzZWxmLnN0YXRlLmVkaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEua2Jta29vZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdOaW1ldHVzOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ25pbWV0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtbmltZXR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5uaW1ldHVzIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHRpdGxlOiAnVFxceEU0aXMuIG5pbWV0dXM6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbXV1ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1tdXVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLm11dWQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdGl0bGU6ICdBc3V0dXNlIGxpaWs6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdsaWlrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlbGYubGlic1snYXN1dHVzZV9saWlrJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLmxpaWsgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHNlbGYuZG9jRGF0YS5saWlrIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnbGlpaycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsSWQ6ICdrb29kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0QXJlYSwgeyB0aXRsZTogJ0FhZHJlc3M6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWFkcmVzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICd0ZXh0YXJlYS1hYWRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5hYWRyZXNzIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFzZWxmLnN0YXRlLmVkaXRlZCB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdKdWhhdGFqYTogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdqdWh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWp1aHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFzZWxmLnN0YXRlLmVkaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuanVodCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ1JhYW1hdHVwaWRhamE6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmFhbWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtcmFhbWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFzZWxmLnN0YXRlLmVkaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEucmFhbWEgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdFbWFpbDogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1lbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5lbWFpbCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ09tbml2YSBzYWxhc1xceEY1bmE6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZWFydmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWVhcnZlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5lYXJ2ZWQgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdFLWFydmUgYXN1dHVzZSByZWcua29vZDogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdlYXJ2ZV9yZWdrb29kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWVhcnZlX3JlZ2tvb2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFzZWxmLnN0YXRlLmVkaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuZWFydmVfcmVna29vZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ1NFQiBlLWFydmUgYWE6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3NlYl9lYXJ2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtc2ViX2VhcnZlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuc2ViX2VhcnZlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHRpdGxlOiAnU0VCIGthc3V0YWphIHR1bm51czogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2ViJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1zZWJfcGFyb29sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuc2ViIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHRpdGxlOiAnU1dFRCBlLWFydmUgYWE6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3N3ZWRfZWFydmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LXN3ZWQtZWFydmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5zd2VkX2VhcnZlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHRpdGxlOiAnU1dFRCBrYXN1dGFqYSB0dW5udXM6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3N3ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LXN3ZWRfcGFyb29sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuc3dlZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGFHcmlkLCB7IHNvdXJjZTogJ2RldGFpbHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZERhdGE6IGdyaWREYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnM6IGdyaWRDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Rvb2xCYXI6IHNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlR3JpZFJvdzogdGhpcy5oYW5kbGVHcmlkUm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlR3JpZEJ0bkNsaWNrOiBzZWxmLmhhbmRsZUdyaWRCdG5DbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmdyaWQuaGVhZGVyVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdkYXRhLWdyaWQnIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRSb3dFZGl0ID8gdGhpcy5jcmVhdGVHcmlkUm93KHNlbGYpIDogbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCh0L7Qt9C00LDRgdGCINC60L7QvNC/0L7QvdC10YIg0YHRgtGA0L7QutC4INCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7WE1MfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVHcmlkUm93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUdyaWRSb3coc2VsZikge1xuXG4gICAgICAgICAgICB2YXIgcm93ID0gc2VsZi5ncmlkUm93RGF0YSA/IHNlbGYuZ3JpZFJvd0RhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZU1lc3NhZ2UgPSAnJyxcbiAgICAgICAgICAgICAgICAvLyBzZWxmLnN0YXRlLndhcm5pbmdcbiAgICAgICAgICAgIGJ1dHRvbk9rUmVhZE9ubHkgPSB2YWxpZGF0ZU1lc3NhZ2UubGVuZ3RoID4gMCB8fCAhc2VsZi5zdGF0ZS5jaGVja2VkLFxuICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0cyA9IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ107XG5cbiAgICAgICAgICAgIGlmIChidXR0b25Pa1JlYWRPbmx5KSB7XG4gICAgICAgICAgICAgICAgLy8g0YPQsdC10YDQtdC8INC60L3QvtC/0LrRgyDQntC6XG4gICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFyb3cpIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsKTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICcubW9kYWxQYWdlJyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzOiBtb2RhbE9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdtb2RhbHBhZ2UtZ3JpZC1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiBzZWxmLm1vZGFsUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlTmFtZTogJ1JlYSBsaXNhbWluZSAvIHBhcmFuZGFtaW5lJyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ2dyaWQtcm93LWNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUuZ3JpZFdhcm5pbmcubGVuZ3RoID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRXYXJuaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ051bWJlcjogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FydmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LmFydmUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dJbnB1dCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHRpdGxlOiAnTmltZXR1czogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ25pbWV0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93Lm5pbWV0dXMgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dJbnB1dCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCB7IHRpdGxlOiAnVFxceEZDXFx4RkNwOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna2Fzc2FwYW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogW3sgaWQ6IDAsIG5pbWV0dXM6ICdLYXNzYScgfSwgeyBpZDogMSwgbmltZXR1czogJ1BhbmsnIH0sIHsgaWQ6IDIsIG5pbWV0dXM6ICdUUCcgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByb3cua2Fzc2FwYW5rIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdrYXNzYXBhbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsSWQ6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyB0aXRsZTogJ0tvbnRvOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna29udG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzZWxmLmxpYnNbJ2tvbnRvZCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LmtvbnRvIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdrb250bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxJZDogJ2tvb2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVHcmlkUm93Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDaGVja0JveCwgeyB0aXRsZTogJ0thcyBwXFx4RjVoaWxpbmU/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2RlZmF1bHRfJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEJvb2xlYW4oc2VsZi5kb2NEYXRhLmRlZmF1bHRfKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnY2hlY2tib3hfZGVmYXVsdF8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFJla3Y7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5SZWt2LnByb3BUeXBlcyA9IHtcbiAgICBkb2NJZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBpbml0RGF0YTogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuUmVrdi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgaW5pdERhdGE6IHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJla3Y7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL3Jla3YvZG9jdW1lbnQvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyNDdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtkb2NSb3c6e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J3JvdycvKlxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGJsdWUnXHJcbiAgICAgICAgKi99LGRvY0NvbHVtbjp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjonY29sdW1uJywvKlxyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIHllbGxvdycsXHJcbiAgICAgICAgKi93aWR0aDonNTAlJ30sZG9jOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nLypcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBicm93bidcclxuICAgICAgICAqL30sZ3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJSd9LGhlYWRlclRhYmxlOnt3aWR0aDonMTAwJSd9LGdyaWRDb250YWluZXI6e3dpZHRoOicxMDAlJ319LGdyaWRSb3c6ey8qXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmxhY2snLFxyXG4gICAgICAgICovYmFja2dyb3VuZENvbG9yOid3aGl0ZScscG9zaXRpb246J3JlbGF0aXZlJyxtYXJnaW46JzEwJSAzMCUgMTAlIDMwJScsd2lkdGg6J2F1dG8nLG9wYWNpdHk6JzEnLHRvcDonMTAwcHgnfSxidG5FZGl0Ont3aWR0aDonbWluLWNvbnRlbnQnfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL3Jla3YvZG9jdW1lbnQvc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDhcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRG9jdW1lbnRzID0gcmVxdWlyZSgnLi8uLi9kb2N1bWVudHMvZG9jdW1lbnRzLmpzeCcpO1xudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyk7XG52YXIgRE9DX1RZUEVfSUQgPSAnVEFPVExVU19MT0dJTic7XG52YXIgVE9PTEJBUl9QUk9QUyA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vY29uZmlnL2NvbnN0YW50cycpLlRFQVRJUy50b29sYmFyUHJvcHM7XG5cbi8qKlxyXG4gKiDQmtC70LDRgdGBINGA0LXQsNC70LjQt9GD0LXRgiDQtNC+0LrRg9C80LXQvdGCINGB0L/RgNCw0LLQvtGH0L3QuNC60LAg0L/RgNC40LfQvdCw0LrQvtCyLlxyXG4gKi9cblxudmFyIFJlZ2lzdGVyID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFJlZ2lzdGVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBSZWdpc3Rlcihwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVnaXN0ZXIpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVnaXN0ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZWdpc3RlcikpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVnaXN0ZXIsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudHMsIHsgaW5pdERhdGE6IHRoaXMucHJvcHMuaW5pdERhdGEsXG4gICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5ID8gdGhpcy5wcm9wcy5oaXN0b3J5IDogbnVsbCxcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHRoaXMucHJvcHMubW9kdWxlLFxuICAgICAgICAgICAgICAgIHJlZjogJ3JlZ2lzdGVyJyxcbiAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IERPQ19UWVBFX0lELFxuICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMsXG4gICAgICAgICAgICAgICAgdG9vbGJhclByb3BzOiBUT09MQkFSX1BST1BTLFxuICAgICAgICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXJlciB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBSZWdpc3Rlcjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVnaXN0ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL3Rhb3RsdXNfbG9naW4vaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyNDlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtncmlkOnttYWluVGFibGU6e3dpZHRoOicxMDAlJyx0ZDp7Ym9yZGVyOicxcHggc29saWQgbGlnaHRHcmV5JyxkaXNwbGF5Oid0YWJsZS1jZWxsJyxwYWRkaW5nTGVmdDonNXB4J319LGhlYWRlclRhYmxlOnt3aWR0aDonMTAwJSd9LGdyaWRDb250YWluZXI6e3dpZHRoOicxMDAlJ319fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvdGFvdGx1c19sb2dpbi9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBEb2N1bWVudFRlbXBsYXRlID0gcmVxdWlyZSgnLi8uLi8uLi9kb2N1bWVudFRlbXBsYXRlL2luZGV4LmpzeCcpLFxuICAgIElucHV0VGV4dCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmpzeCcpLFxuICAgIElucHV0RGF0ZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtZGF0ZS9pbnB1dC1kYXRlLmpzeCcpLFxuICAgIFRleHRBcmVhID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy90ZXh0LWFyZWEvdGV4dC1hcmVhLmpzeCcpLFxuICAgIExvYWRpbmcgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbXBvbmVudHMvbG9hZGluZy9pbmRleC5qc3gnKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyk7XG5cbi8qKlxyXG4gKiDQmtC70LDRgdGBINGA0LXQsNC70LjQt9GD0LXRgiDQtNC+0LrRg9C80LXQvdGCINGB0L/RgNCw0LLQvtGH0L3QuNC60LAg0L/RgNC40LfQvdCw0LrQvtCyLlxyXG4gKi9cblxudmFyIFRhb3RsdXNMb2dpbiA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhUYW90bHVzTG9naW4sIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFRhb3RsdXNMb2dpbihwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFvdGx1c0xvZ2luKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGFvdGx1c0xvZ2luLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFvdGx1c0xvZ2luKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZG9jSWQ6IHByb3BzLmRvY0lkID8gcHJvcHMuZG9jSWQgOiBOdW1iZXIocHJvcHMubWF0Y2gucGFyYW1zLmRvY0lkKSxcbiAgICAgICAgICAgIGxvYWRlZERhdGE6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJlbmRlcmVyID0gX3RoaXMucmVuZGVyZXIuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFvdGx1c0xvZ2luLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRUZW1wbGF0ZSwgeyBkb2NJZDogdGhpcy5zdGF0ZS5kb2NJZCxcbiAgICAgICAgICAgICAgICByZWY6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgZG9jVHlwZUlkOiAnVEFPVExVU19MT0dJTicsXG4gICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSxcbiAgICAgICAgICAgICAgICBpbml0RGF0YTogdGhpcy5wcm9wcy5pbml0RGF0YSxcbiAgICAgICAgICAgICAgICB1c2VyRGF0YTogdGhpcy5wcm9wcy51c2VyRGF0YSxcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICAgICAgICBmb2N1c0VsZW1lbnQ6ICdpbnB1dC1rYXN1dGFqYScsXG4gICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog0JzQtdGC0L7QtCDQstC10YDQvdC10YIg0LrQsNGB0YLQvtC80L3Ri9C5INC60L7QvNC/0L7QvdC10L3RglxyXG4gICAgICAgICAqIEBwYXJhbSBzZWxmXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcmVyKHNlbGYpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5kb2NEYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8g0L3QtSDQt9Cw0LPRgNGD0LbQtdC90Ysg0LTQsNC90L3Ri9C1XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywgeyBsYWJlbDogJ0xhYWRpbWluZS4uLicgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dERhdGUsIHsgdGl0bGU6ICdLdXVwXFx4RTRldjonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrcHYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEua3B2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtwdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdLYXN1dGFqYSBuaW1pICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2thc3V0YWphJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1rYXN1dGFqYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5rYXN1dGFqYSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ05pbWknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICduaW1pJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1uaW1pJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEubmltaSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ0FhZHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhYWRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1hYWRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLmFhZHJlc3MgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdFLW1haWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtZW1haWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuZW1haWwgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdUZWxlZm9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC10ZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS50ZWwgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0QXJlYSwgeyB0aXRsZTogJ011dWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ211dWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndGV4dGFyZWEtbXV1ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEubXV1ZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhc2VsZi5zdGF0ZS5lZGl0ZWQgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRhb3RsdXNMb2dpbjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cblRhb3RsdXNMb2dpbi5wcm9wVHlwZXMgPSB7XG4gICAgZG9jSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaW5pdERhdGE6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblRhb3RsdXNMb2dpbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgaW5pdERhdGE6IHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhb3RsdXNMb2dpbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvdGFvdGx1c19sb2dpbi9kb2N1bWVudC9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDI1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2RvY1Jvdzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjoncm93J30sZG9jQ29sdW1uOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nLHdpZHRoOic1MCUnfSxkb2M6e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbid9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvdGFvdGx1c19sb2dpbi9kb2N1bWVudC9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBEb2N1bWVudFRlbXBsYXRlID0gcmVxdWlyZSgnLi8uLi8uLi9kb2N1bWVudFRlbXBsYXRlL2luZGV4LmpzeCcpLFxuICAgIFRleHRBcmVhID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy90ZXh0LWFyZWEvdGV4dC1hcmVhLmpzeCcpLFxuICAgIExvYWRpbmcgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbXBvbmVudHMvbG9hZGluZy9pbmRleC5qc3gnKTtcbnZhciBEYXRhR3JpZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvZGF0YS1ncmlkL2RhdGEtZ3JpZC5qc3gnKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyk7XG5cbi8qKlxyXG4gKiDQmtC70LDRgdGBINGA0LXQsNC70LjQt9GD0LXRgiDQtNC+0LrRg9C80LXQvdGCINGB0L/RgNCw0LLQvtGH0L3QuNC60LAg0L/RgNC40LfQvdCw0LrQvtCyLlxyXG4gKi9cblxudmFyIE9iamVrdCA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhPYmpla3QsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIE9iamVrdChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT2JqZWt0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoT2JqZWt0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWt0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZG9jSWQ6IHByb3BzLmRvY0lkID8gcHJvcHMuZG9jSWQgOiBOdW1iZXIocHJvcHMubWF0Y2gucGFyYW1zLmRvY0lkKSxcbiAgICAgICAgICAgIGxvYWRlZERhdGE6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJlbmRlcmVyID0gX3RoaXMucmVuZGVyZXIuYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoT2JqZWt0LCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRUZW1wbGF0ZSwgeyBkb2NJZDogdGhpcy5zdGF0ZS5kb2NJZCxcbiAgICAgICAgICAgICAgICByZWY6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgZG9jVHlwZUlkOiAnT0JKRUtUJyxcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHRoaXMucHJvcHMubW9kdWxlLFxuICAgICAgICAgICAgICAgIGluaXREYXRhOiB0aGlzLnByb3BzLmluaXREYXRhLFxuICAgICAgICAgICAgICAgIHVzZXJEYXRhOiB0aGlzLnByb3BzLnVzZXJEYXRhLFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiB0aGlzLnJlbmRlcmVyLFxuICAgICAgICAgICAgICAgIGZvY3VzRWxlbWVudDogJ2lucHV0LWFhZHJlc3MnLFxuICAgICAgICAgICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCc0LXRgtC+0LQg0LLQtdGA0L3QtdGCINC60LDRgdGC0L7QvNC90YvQuSDQutC+0LzQv9C+0L3QtdC90YJcclxuICAgICAgICAgKiBAcGFyYW0gc2VsZlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJlcihzZWxmKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYuZG9jRGF0YSkge1xuICAgICAgICAgICAgICAgIC8vINC90LUg0LfQsNCz0YDRg9C20LXQvdGLINC00LDQvdC90YvQtVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvYyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExvYWRpbmcsIHsgbGFiZWw6ICdMYWFkaW1pbmUuLi4nIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGdyaWRVc2VyRGF0YSA9IHNlbGYuZG9jRGF0YS5ncmlkRGF0YSxcbiAgICAgICAgICAgICAgICBncmlkVXNlckNvbHVtbnMgPSBzZWxmLmRvY0RhdGEuZ3JpZENvbmZpZztcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvYyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGV4dEFyZWEsIHsgdGl0bGU6ICdBYWRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhYWRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ3RleHRhcmVhLWFhZHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLmFhZHJlc3MgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIXNlbGYuc3RhdGUuZWRpdGVkIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRBcmVhLCB7IHRpdGxlOiAnTXV1ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbXV1ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICd0ZXh0YXJlYS1tdXVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5tdXVkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFzZWxmLnN0YXRlLmVkaXRlZCB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCBudWxsKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnbGFiZWwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnT2JqZWt0aSBrYXN1dGFqYWQnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YUdyaWQsIHsgc291cmNlOiAndXNlcmlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREYXRhOiBncmlkVXNlckRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkQ29sdW1uczogZ3JpZFVzZXJDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Rvb2xCYXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmdyaWQuaGVhZGVyVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6ICd1c2VyaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndXNlcmlkLWRhdGEtZ3JpZCcgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE9iamVrdDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbk9iamVrdC5wcm9wVHlwZXMgPSB7XG4gICAgZG9jSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaW5pdERhdGE6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbk9iamVrdC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgaW5pdERhdGE6IHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVrdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3Mvb2JqZWt0L2RvY3VtZW50L2luZGV4LmpzeFxuLy8gbW9kdWxlIGlkID0gMjYwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17ZG9jUm93OntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidyb3cnfSxkb2NDb2x1bW46e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbicsd2lkdGg6JzUwJSd9LGRvYzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjonY29sdW1uJ30sZ3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJScsdGQ6e2JvcmRlcjonMXB4IHNvbGlkIGxpZ2h0R3JleScsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9fSxoZWFkZXJUYWJsZTp7d2lkdGg6JzEwMCUnfSxncmlkQ29udGFpbmVyOnt3aWR0aDonMTAwJSd9fX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL29iamVrdC9kb2N1bWVudC9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBEb2N1bWVudHMgPSByZXF1aXJlKCcuLy4uL2RvY3VtZW50cy9kb2N1bWVudHMuanN4Jyk7XG52YXIgc3R5bGVzID0gcmVxdWlyZSgnLi9zdHlsZXMnKTtcblxuLyoqXHJcbiAqINCa0LvQsNGB0YEg0YDQtdCw0LvQuNC30YPQtdGCINC00L7QutGD0LzQtdC90YIg0YHQv9GA0LDQstC+0YfQvdC40LrQsCDQv9GA0LjQt9C90LDQutC+0LIuXHJcbiAqL1xuXG52YXIgT2JqZWN0cyA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhPYmplY3RzLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBPYmplY3RzKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPYmplY3RzKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9iamVjdHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3RzKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhPYmplY3RzLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIERPQ19UWVBFX0lEID0gdGhpcy5wcm9wcy5tb2R1bGUgPT0gJ2thc3V0YWphJyA/ICdJU0lLVV9PQkpFS1QnIDogJ09CSkVLVCc7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudHMsIHtcbiAgICAgICAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnkgPyB0aGlzLnByb3BzLmhpc3RvcnkgOiBudWxsLFxuICAgICAgICAgICAgICAgIG1vZHVsZTogdGhpcy5wcm9wcy5tb2R1bGUsXG4gICAgICAgICAgICAgICAgcmVmOiAncmVnaXN0ZXInLFxuICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogRE9DX1RZUEVfSUQsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcyxcbiAgICAgICAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyZXIgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcmVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gT2JqZWN0cztcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0cztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3Mvb2JqZWt0L2luZGV4LmpzeFxuLy8gbW9kdWxlIGlkID0gMjYyXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17Z3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJScsdGQ6e2JvcmRlcjonMXB4IHNvbGlkIGxpZ2h0R3JleScsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9fSxoZWFkZXJUYWJsZTp7d2lkdGg6JzEwMCUnfSxncmlkQ29udGFpbmVyOnt3aWR0aDonMTAwJSd9fX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL29iamVrdC9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBEb2N1bWVudFRlbXBsYXRlID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnRUZW1wbGF0ZS9pbmRleC5qc3gnKSxcbiAgICBJbnB1dFRleHQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2lucHV0LXRleHQvaW5wdXQtdGV4dC5qc3gnKSxcbiAgICBJbnB1dERhdGUgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2lucHV0LWRhdGUvaW5wdXQtZGF0ZS5qc3gnKSxcbiAgICBJbnB1dE51bWJlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtbnVtYmVyL2lucHV0LW51bWJlci5qc3gnKSxcbiAgICBTZWxlY3QgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuanN4JyksXG4gICAgU2VsZWN0RGF0YSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvc2VsZWN0LWRhdGEvc2VsZWN0LWRhdGEuanN4JyksXG4gICAgVGV4dEFyZWEgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3RleHQtYXJlYS90ZXh0LWFyZWEuanN4JyksXG4gICAgRGF0YUdyaWQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4JyksXG4gICAgcmVsYXRlZERvY3VtZW50cyA9IHJlcXVpcmUoJy4uLy4uLy4uL21peGluL3JlbGF0ZWREb2N1bWVudHMuanN4JyksXG4gICAgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxQYWdlLmpzeCcpLFxuICAgIEJ1dHRvbkVkaXQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZWRpdC9idXR0b24tcmVnaXN0ZXItZWRpdC5qc3gnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcycpO1xudmFyIGdldFRleHRWYWx1ZSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vLi4vbGlicy9nZXRUZXh0VmFsdWUnKTtcblxudmFyIFJvdW5kID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL3JvdW5kX3RvXzInKTtcbnZhciBMb2FkaW5nID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9jb21wb25lbnRzL2xvYWRpbmcvaW5kZXguanN4Jyk7XG5cbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9kb2MtY29udGV4dCcpO1xudmFyIExJQl9PQkpTID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9jb25maWcvY29uc3RhbnRzJykuTEVQSU5HLkxJQl9PQkpTO1xuXG52YXIgTGVwaW5nID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExlcGluZywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTGVwaW5nKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMZXBpbmcpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMZXBpbmcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMZXBpbmcpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsb2FkZWREYXRhOiBmYWxzZSxcbiAgICAgICAgICAgIG1vZHVsZTogcHJvcHMubW9kdWxlID8gcHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUsXG4gICAgICAgICAgICBkb2NJZDogcHJvcHMuZG9jSWQgPyBwcm9wcy5kb2NJZCA6IE51bWJlcihwcm9wcy5tYXRjaC5wYXJhbXMuZG9jSWQpXG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuY3JlYXRlR3JpZFJvdyA9IF90aGlzLmNyZWF0ZUdyaWRSb3cuYmluZChfdGhpcyk7XG5cbiAgICAgICAgX3RoaXMucmVuZGVyZXIgPSBfdGhpcy5yZW5kZXJlci5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZ3JpZFZhbGlkYXRlRmllbGRzID0gX3RoaXMuZ3JpZFZhbGlkYXRlRmllbGRzLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5idG5FZGl0QXN1dHVzQ2xpY2sgPSBfdGhpcy5idG5FZGl0QXN1dHVzQ2xpY2suYmluZChfdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMZXBpbmcsIFt7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudFRlbXBsYXRlLCB7IGRvY0lkOiB0aGlzLnN0YXRlLmRvY0lkLFxuICAgICAgICAgICAgICAgIHJlZjogJ2RvY3VtZW50JyxcbiAgICAgICAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgICAgICAgZG9jVHlwZUlkOiAnTEVQSU5HJyxcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHRoaXMucHJvcHMubW9kdWxlLFxuICAgICAgICAgICAgICAgIGluaXREYXRhOiB0aGlzLnByb3BzLmluaXREYXRhID8gdGhpcy5wcm9wcy5pbml0RGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHJlbG9hZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsaWJzOiBMSUJfT0JKUyxcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICAgICAgICBjcmVhdGVHcmlkUm93OiB0aGlzLmNyZWF0ZUdyaWRSb3csXG4gICAgICAgICAgICAgICAgZ3JpZFZhbGlkYXRvcjogdGhpcy5ncmlkVmFsaWRhdGVGaWVsZHMsXG4gICAgICAgICAgICAgICAgZm9jdXNFbGVtZW50OiAnaW5wdXQtbnVtYmVyJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKtCS0LXRgNC90LXRgiDQutCw0YHRgtC+0LzQvdGL0LUg0LrQvtC80L/QvtC90LXQvdGC0Ysg0LTQvtC60YPQvNC10L3RgtCwXHJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcmVyKHNlbGYpIHtcbiAgICAgICAgICAgIGlmICghc2VsZiB8fCAhc2VsZi5kb2NEYXRhIHx8ICFzZWxmLmRvY0RhdGEua3B2IHx8ICFzZWxmLmxpYnNbJ29iamVrdCddKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywgeyBsYWJlbDogJ0xhYWRpbWluZS4uLicgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaXNFZGl0TW9kZSA9IHNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgIGdyaWREYXRhID0gc2VsZi5kb2NEYXRhLmdyaWREYXRhLFxuICAgICAgICAgICAgICAgIGdyaWRDb2x1bW5zID0gc2VsZi5kb2NEYXRhLmdyaWRDb25maWcsXG4gICAgICAgICAgICAgICAgbW9vZHVEYXRhID0gc2VsZi5kb2NEYXRhLm1vb2R1LFxuICAgICAgICAgICAgICAgIG1vb2R1Q29sdW1ucyA9IHNlbGYuZG9jRGF0YS5tb29kdUNvbmZpZztcblxuICAgICAgICAgICAgLy8g0YTQuNC70YzRgtGA0YPQtdC8INC+0LHRjNC10LrRgtGLLCDRgtC+0LvRjNC60L4g0LLQu9Cw0LTQtdC70LXRhlxuICAgICAgICAgICAgdmFyIG9iamVjdHMgPSBzZWxmLmxpYnNbJ29iamVrdCddLmZpbHRlcihmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iai5hc3V0dXNfaWQgPT0gc2VsZi5kb2NEYXRhLmFzdXR1c2lkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vINC10YHQu9C4INC90LXRgiDRg9GB0LvRg9CzLCDQtNC+0LHQsNCy0LjQvCDQuNGFXG4gICAgICAgICAgICBpZiAoIWdyaWREYXRhLmxlbmd0aCAmJiBzZWxmLmxpYnNbJ25vbWVuY2xhdHVyZSddLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNlbGYubGlic1snbm9tZW5jbGF0dXJlJ10uZm9yRWFjaChmdW5jdGlvbiAobm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWREYXRhLnB1c2goeyBpZDogMCwgbm9taWQ6IG5vbS5pZCwga29ndXM6IDAsIGhpbmQ6IG5vbS5oaW5kLCBrb29kOiBub20ua29vZCwgbmltZXR1czogbm9tLm5pbWV0dXMgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2MgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgcmVmOiAnaW5wdXQtbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdOdW1iZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5udW1iZXIgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dERhdGUsIHsgdGl0bGU6ICdLdXVwXFx4RTRldicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrcHYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLmtwdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQta3B2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0RGF0ZSwgeyB0aXRsZTogJ1RcXHhFNGh0YWVnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3RhaHRhZWcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLnRhaHRhZWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LXRhaHRhZWcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIWlzRWRpdE1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCB7IHRpdGxlOiAnS29ydGVlcmlvbWFuaWsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYXN1dHVzaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWJzOiAnYXN1dHVzZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLmFzdXR1c2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzZWxmLmxpYnNbJ2FzdXR1c2VkJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU3RyaW5nKHNlbGYuZG9jRGF0YS5hc3V0dXMpIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAnaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdzZWxlY3QtYXN1dHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFpc0VkaXRNb2RlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jQ29udGV4dC5tb2R1bGUgIT09ICdrYXN1dGFqYScgPyBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbkVkaXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnRuRWRpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnTXV1ZGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmJ0bkVkaXRBc3V0dXNDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogIWlzRWRpdE1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuYnRuRWRpdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCB7IHRpdGxlOiAnT2JqZWt0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ29iamVrdGlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGliczogJ29iamVrdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEub2JqZWt0aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU3RyaW5nKHNlbGYuZG9jRGF0YS5vYmpla3QpIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAnaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdzZWxlY3Qtb2JqZWsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIWlzRWRpdE1vZGUgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0QXJlYSwgeyB0aXRsZTogJ01cXHhFNHJrdXNlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ211dWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ3RleHRhcmVhLW11dWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEubXV1ZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIWlzRWRpdE1vZGUgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhR3JpZCwgeyBzb3VyY2U6ICdkZXRhaWxzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkRGF0YTogZ3JpZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnM6IGdyaWRDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUb29sQmFyOiBpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUdyaWRSb3c6IHRoaXMuaGFuZGxlR3JpZFJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVHcmlkQnRuQ2xpY2s6IHNlbGYuaGFuZGxlR3JpZEJ0bkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmdyaWQuaGVhZGVyVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZGF0YS1ncmlkJyB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRSb3dFZGl0ID8gdGhpcy5jcmVhdGVHcmlkUm93KHNlbGYpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnbGFiZWwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VGV4dFZhbHVlKCdNw7XDtWR1IGFuZG1lZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YUdyaWQsIHsgc291cmNlOiAnbW9vZHUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREYXRhOiBtb29kdURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnM6IG1vb2R1Q29sdW1ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93VG9vbEJhcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5ncmlkLmhlYWRlclRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogJ2FuZG1lZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnbW9vZHUtZ3JpZCcgfSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQodC+0LfQtNCw0YHRgiDQutC+0LzQv9C+0L3QtdGCINGB0YLRgNC+0LrQuCDQs9GA0LjQtNCwXHJcbiAgICAgICAgICogQHJldHVybnMge1hNTH1cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3JlYXRlR3JpZFJvdycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVHcmlkUm93KHNlbGYpIHtcblxuICAgICAgICAgICAgdmFyIHJvdyA9IHNlbGYuZ3JpZFJvd0RhdGEgPyBzZWxmLmdyaWRSb3dEYXRhIDoge30sXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVNZXNzYWdlID0gJycsXG4gICAgICAgICAgICAgICAgLy8gc2VsZi5zdGF0ZS53YXJuaW5nXG4gICAgICAgICAgICBidXR0b25Pa1JlYWRPbmx5ID0gdmFsaWRhdGVNZXNzYWdlLmxlbmd0aCA+IDAgfHwgIXNlbGYuc3RhdGUuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBtb2RhbE9iamVjdHMgPSBbJ2J0bk9rJywgJ2J0bkNhbmNlbCddO1xuXG4gICAgICAgICAgICBpZiAoYnV0dG9uT2tSZWFkT25seSkge1xuICAgICAgICAgICAgICAgIC8vINGD0LHQtdGA0LXQvCDQutC90L7Qv9C60YMg0J7QulxuICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0cy5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghcm93KSByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCk7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnLm1vZGFsUGFnZScgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBNb2RhbFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0czogbW9kYWxPYmplY3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnbW9kYWxwYWdlLWdyaWQtcm93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbFBhZ2VCdG5DbGljazogc2VsZi5tb2RhbFBhZ2VDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdSZWEgbGlzYW1pbmUgLyBwYXJhbmRhbWluZScgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdncmlkLXJvdy1jb250YWluZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRXYXJuaW5nLmxlbmd0aCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5ncmlkV2FybmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb250YW50IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCB7IHRpdGxlOiAnVGVlbnVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdub21pZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWJzOiAnbm9tZW5jbGF0dXJlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlbGYubGlic1snbm9tZW5jbGF0dXJlJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93Lm5vbWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAnaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnbm9taWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5zZWxlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1RlZW51c2Uga29vZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVHcmlkUm93Q2hhbmdlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29udGFudCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TnVtYmVyLCB7IHRpdGxlOiAnS29ndXMgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrb2d1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHJvdy5rb2d1cyA/IHJvdy5rb2d1cyA6IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZERhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAna29ndXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ1swLTldezEwfScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVHcmlkUm93SW5wdXQgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb250YW50IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXROdW1iZXIsIHsgdGl0bGU6ICdIaW5kICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaGluZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHJvdy5oaW5kID8gcm93LmhpbmQgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmREYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2hpbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ1swLTldezEwfScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVHcmlkUm93SW5wdXQgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCy0LDQu9C40LTQsNGC0L7RgCDQtNC70Y8g0YHRgtGA0L7QutC4INCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdncmlkVmFsaWRhdGVGaWVsZHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JpZFZhbGlkYXRlRmllbGRzKCkge1xuICAgICAgICAgICAgdmFyIHdhcm5pbmcgPSAnJztcbiAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzLnJlZnNbJ2RvY3VtZW50J107XG4gICAgICAgICAgICBpZiAoZG9jICYmIGRvYy5ncmlkUm93RGF0YSkge1xuXG4gICAgICAgICAgICAgICAgLy8g0YLQvtC70YzQutC+INC/0L7RgdC70LUg0L/RgNC+0LLQtdGA0LrQuCDRhNC+0YDQvNGLINC90LAg0LLQsNC70LjQtNC90L7RgdGC0YxcbiAgICAgICAgICAgICAgICBpZiAoZG9jLmdyaWRSb3dEYXRhICYmICFkb2MuZ3JpZFJvd0RhdGFbJ25vbWlkJ10pIHdhcm5pbmcgPSB3YXJuaW5nICsgJyDQmtC+0LQg0L7Qv9C10YDQsNGG0LjQuCc7XG4gICAgICAgICAgICAgICAgaWYgKCFkb2MuZ3JpZFJvd0RhdGFbJ2tvZ3VzJ10pIHdhcm5pbmcgPSB3YXJuaW5nICsgJyDQmtC+0LvQuNGH0LXRgdGC0LLQvic7XG4gICAgICAgICAgICAgICAgaWYgKCFkb2MuZ3JpZFJvd0RhdGFbJ2hpbmQnXSkgd2FybmluZyA9IHdhcm5pbmcgKyAnINCh0YPQvNC80LAnO1xuXG4gICAgICAgICAgICAgICAgLy8g0L3QsNC40LzQtdC90L7QstCw0L3QuNC1INGD0YHQu9GD0LPQuCDQuCDQutC+0LRcbiAgICAgICAgICAgICAgICBpZiAoZG9jLmdyaWRSb3dEYXRhICYmIGRvYy5ncmlkUm93RGF0YVsnbm9taWQnXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVlbnVzID0gRG9jQ29udGV4dC5saWJzWydub21lbmNsYXR1cmUnXS5maWx0ZXIoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5pZCA9PSBkb2MuZ3JpZFJvd0RhdGFbJ25vbWlkJ107XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVlbnVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ2tvb2QnXSA9IHRlZW51c1swXS5rb29kID8gdGVlbnVzWzBdLmtvb2QgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jLmdyaWRSb3dEYXRhWyduaW1ldHVzJ10gPSB0ZWVudXNbMF0ubmltZXR1cyA/IHRlZW51c1swXS5uaW1ldHVzIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3YXJuaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0L7QsdGA0LDQsdC+0YLRh9C40Log0YHQvtCx0YvRgtC40Y8g0LrQu9C40YHQutCwINC90LAg0LrQvdC+0L/QutC1INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LrQvtC90YLRgC3QsNCz0LXQvdGC0LBcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuRWRpdEFzdXR1c0NsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkVkaXRBc3V0dXNDbGljaygpIHtcbiAgICAgICAgICAgIHZhciBkb2NBc3V0dXNJZCA9IHRoaXMucmVmc1snZG9jdW1lbnQnXS5kb2NEYXRhLmFzdXR1c2lkO1xuXG4gICAgICAgICAgICAvLyDQvtGB0YPRidC10YHRgtCy0LjRgiDQv9C10YDQtdGF0L7QtCDQvdCwINC60LDRgNGC0L7Rh9C60YMg0LrQvtC90YLRgC3QsNCz0LXQvdGC0LBcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyArIHRoaXMucHJvcHMubW9kdWxlICsgJy9hc3V0dXNlZC8nICsgZG9jQXN1dHVzSWQpO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExlcGluZztcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkxlcGluZy5wcm9wVHlwZXMgPSB7XG4gICAgZG9jSWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaW5pdERhdGE6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdXNlckRhdGE6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbkxlcGluZy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcGFyYW1zOiB7IGRvY0lkOiAwIH0sXG4gICAgaW5pdERhdGE6IHt9LFxuICAgIHVzZXJEYXRhOiB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMZXBpbmc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2xlcGluZy9kb2N1bWVudC9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDI2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERvY0NvbnRleHQgPSByZXF1aXJlKCcuLi8uLi9kb2MtY29udGV4dCcpO1xuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xudmFyIGZldGNoRGF0YSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9mZXRjaERhdGEnKTtcbnZhciBQT1NUX0xPQURfTElCU19VUkwgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbmZpZy9jb25zdGFudHMnKS5MSUJTLlBPU1RfTE9BRF9MSUJTX1VSTDtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL3NlbGVjdC1kYXRhLXN0eWxlcycpLFxuICAgIERhdGFHcmlkID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy9kYXRhLWdyaWQvZGF0YS1ncmlkLmpzeCcpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJbnB1dFRleHQgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL2lucHV0LXRleHQvaW5wdXQtdGV4dC5qc3gnKSxcbiAgICBNb2RhbFBhZ2UgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFsUGFnZS5qc3gnKTtcblxudmFyIFNlbGVjdERhdGEgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoU2VsZWN0RGF0YSwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2VsZWN0RGF0YShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0RGF0YSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNlbGVjdERhdGEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZWxlY3REYXRhKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLCAvKiDQstC+0LfQstGA0LDRidCw0LXQvNC+0LUg0LfQvdCw0YfQtdC90LjQtSwg0L3QsNC/0YDQuNC80LXRgCBpZCovXG4gICAgICAgICAgICBmaWVsZFZhbHVlOiBwcm9wcy5kZWZhdWx0VmFsdWUsIC8q0LLQuNC00LjQvNC+0LUg0LfQvdCw0YfQtdC90LjQtSwg0L3QsNC/0YDQuNC80LXRgCBrb29kINC40LvQuCBuYW1lINC/0L4g0YPQutCw0LfQsNC90L3QvtC80YMg0LIgY29sbElkICovXG4gICAgICAgICAgICByZWFkT25seTogcHJvcHMucmVhZE9ubHksXG4gICAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICBlZGl0ZWQ6IHByb3BzLmVkaXRlZCxcbiAgICAgICAgICAgIGdyaWREYXRhOiBbXSxcbiAgICAgICAgICAgIGdyaWRDb25maWc6IHByb3BzLmNvbmZpZyxcbiAgICAgICAgICAgIGdyaWRBY3RpdmVSb3c6IDAsXG4gICAgICAgICAgICBzaG93OiBfdGhpcy5wcm9wcy5zaG93LFxuICAgICAgICAgICAgbGltaXQ6ICcxMCdcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgPSBfdGhpcy5oYW5kbGVJbnB1dENoYW5nZS5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlR3JpZENsaWNrID0gX3RoaXMuaGFuZGxlR3JpZENsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5tb2RhbFBhZ2VDbGljayA9IF90aGlzLm1vZGFsUGFnZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5sb2FkTGlicyA9IF90aGlzLmxvYWRMaWJzLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5oYW5kbGVHcmlkQnRuQ2xpY2sgPSBfdGhpcy5oYW5kbGVHcmlkQnRuQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2VsZWN0RGF0YSwgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZExpYnMoJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSAmJiBwcmV2U3RhdGUudmFsdWUgIT09IHRoaXMuc3RhdGUudmFsdWUgJiYgIXRoaXMuc3RhdGUuZmllbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZExpYnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdpbGwgdXBkYXRlIHN0YXRlIGlmIHByb3BzIGNoYW5nZWRcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBpc0VkaXRlTW9kZSA9ICF0aGlzLnN0YXRlLnJlYWRPbmx5LFxuICAgICAgICAgICAgICAgIGJ0blN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLmJ1dHRvbiwgeyBkaXNwbGF5OiBpc0VkaXRlTW9kZSA/ICdpbmxpbmUnIDogJ25vbmUnIH0pO1xuXG4gICAgICAgICAgICB2YXIgaXNSZWFkT25seSA9IHRoaXMucHJvcHMucmVhZE9ubHk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zaG93KSB7XG4gICAgICAgICAgICAgICAgaXNSZWFkT25seSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud3JhcHBlciB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHJlZjogJ2lucHV0TmFtZScsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnByb3BzLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmZpZWxkVmFsdWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBpc1JlYWRPbmx5LFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgeyB2YWx1ZTogJ3YnLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5TaG93JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGJ0blN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvdyA/IHRoaXMubW9kYWxQYWdlKCkgOiBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb2RhbFBhZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW9kYWxQYWdlKCkge1xuICAgICAgICAgICAgdmFyIG1vZGFsT2JqZWN0cyA9IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ107XG4gICAgICAgICAgICB2YXIgbGltaXRJbnB1dFN0eWxlID0gc3R5bGVzLmxpbWl0SW5wdXQ7XG5cbiAgICAgICAgICAgIHZhciB0b29sYmFyUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGJ0bkFkZDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ0bkVkaXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBidG5EZWxldGU6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnRuUHJpbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBNb2RhbFBhZ2UsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtb2RhbE9iamVjdHM6IG1vZGFsT2JqZWN0cyxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnbW9kYWxwYWdlLWdyaWQnLFxuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtb2RhbFBhZ2VCdG5DbGljazogdGhpcy5tb2RhbFBhZ2VDbGljayxcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlTmFtZTogJ1ZhbGkgcmVhJyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ2dyaWQtcm93LWNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgcmVmOiAnaW5wdXQtZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT3RzaW5ndSBwYXJhbWV0cmlkOicsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ3JpZEZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5maWVsZFZhbHVlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRoaXMucHJvcHMucmVhZE9ubHkgfHwgIXRoaXMuc3RhdGUuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlIH0pLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGFHcmlkLCB7IGdyaWREYXRhOiB0aGlzLnN0YXRlLmdyaWREYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnM6IHRoaXMuc3RhdGUuZ3JpZENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlR3JpZENsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlR3JpZEJ0bkNsaWNrOiB0aGlzLmhhbmRsZUdyaWRCdG5DbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUb29sQmFyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhclBhcmFtczogdG9vbGJhclBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2RhdGEtZ3JpZCcgfSksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHJlZjogJ2lucHV0LWxpbWl0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTGltaWl0OicsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbGltaXRJbnB1dFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2xpbWl0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmxpbWl0IHx8ICcxMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQvtCx0YDQsNCx0L7RgtGH0LjQuiDRgdC+0LHRi9GC0LjRjyDQuNC30LzQtdC90LjRjyDQt9C90LDRh9C10L3QuNGPINCyINGC0LXQutGB0YLQvtCy0L7QvCAo0L/QvtC40YHQutC+0LLQvtC8KSDQv9C+0LvQtVxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVJbnB1dENoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnJlYWRPbmx5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigncmVhZG9ubHkgJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2dyaWRGaWx0ZXInKSB7XG4gICAgICAgICAgICAgICAgLy8g0L7QsdC90L7QstC40Lwg0YHRgtC10LnRglxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogMCwgZmllbGRWYWx1ZTogdmFsdWUsIHNob3c6IHRydWUgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL9Cy0YvQv9C+0LvQvdC40Lwg0LfQsNC/0YDQvtGBXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIubG9hZExpYnModmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogMCwgZmllbGRWYWx1ZTogdmFsdWUsIHNob3c6IGZhbHNlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy/QstGL0L/QvtC70L3QuNC8INC30LDQv9GA0L7RgVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmxvYWRMaWJzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdsaW1pdCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbGltaXQ6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb2RhbFBhZ2VDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb2RhbFBhZ2VDbGljayhldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50ID09PSAnT2snKSB7XG4gICAgICAgICAgICAgICAgLy8g0L3QsNC00L4g0L3QsNC50YLQuCDQsNC60YLQuNCy0L3Rg9GOINGB0YLRgNC+0LrRg1xuXG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kRmllbGQgPSB0aGlzLnByb3BzLmJvdW5kVG9HcmlkID8gdGhpcy5wcm9wcy5ib3VuZFRvR3JpZCA6ICduYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgLy9ncmlkIGZpbGVkIG5hbWVcbiAgICAgICAgICAgICAgICBib3VuZFRvRGF0YSA9IHRoaXMucHJvcHMuYm91bmRUb0RhdGEgPyB0aGlzLnByb3BzLmJvdW5kVG9EYXRhIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIC8vSW5wdXREZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICBib3VuZEZpZWxkRGF0YSA9IHRoaXMucHJvcHMubmFtZTsgLy9pbnB1dE5hbWUgPSBmaWVsZG5hbWVcblxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVSb3cgPSB0aGlzLnN0YXRlLmdyaWRBY3RpdmVSb3csXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5zdGF0ZS5ncmlkRGF0YVthY3RpdmVSb3ddWydpZCddLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID0gdGhpcy5zdGF0ZS5ncmlkRGF0YVthY3RpdmVSb3ddW2JvdW5kRmllbGRdO1xuICAgICAgICAgICAgICAgIC8vINC/0L7Qu9GD0YfQuNGC0Ywg0LTQsNC90L3Ri9C1INC/0L7Qu9C10Lkg0Lgg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0YHQvtGB0YLQvtGP0L3QuNC1INC00LvRjyDQstC40LTQttC10YLQsFxuXG4gICAgICAgICAgICAgICAgLy8g0L/QvtC60LDQt9Cw0YLRjCDQvdC+0LLQvtC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHZhbHVlLCBmaWVsZFZhbHVlOiBmaWVsZFZhbHVlLCBzaG93OiBmYWxzZSB9KTtcblxuICAgICAgICAgICAgICAgIC8vINCy0LXRgNC90YPRgtGMINC30L3QsNGH0LXQvdC40LUg0L3QsNCy0LXRgNGFXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGJvdW5kRmllbGREYXRhLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGV4dCB2YWx1ZSBvZiBpbnB1dFxuICAgICAgICAgICAgICAgICAgICBpZiAoYm91bmRUb0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoYm91bmRUb0RhdGEsIGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy/QtdGB0LvQuCDQv9GA0LjQstGP0LfQsNC90L4g0LTRgNGD0LPQvtC1INC/0L7Qu9C1XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNvbGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMucHJvcHMuY29sbE5hbWUsIGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyDQstC+0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INGB0YLQsNGA0YvQtSDQt9C90LDRh9C10L3QuNGPINC40Lcg0L/RgNC+0L/RgdC+0LIsINC30LDQstGA0YvQstGL0LDQtdC8INC+0LrQvdC+XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlOiB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSwgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlR3JpZENsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUdyaWRDbGljayhldmVudCwgdmFsdWUsIGFjdGl2ZVJvdykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdyaWRBY3RpdmVSb3c6IGFjdGl2ZVJvdywgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsb2FkTGlicycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTGlicyhmaWVsZFZhbHVlLCBrcHYpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgbGliID0gdGhpcy5wcm9wcy5saWJOYW1lO1xuICAgICAgICAgICAgdmFyIHNxbFdoZXJlID0gJyc7XG4gICAgICAgICAgICB2YXIgbGltaXQgPSB0aGlzLnN0YXRlLmxpbWl0ID8gdGhpcy5zdGF0ZS5saW1pdCA6IDEwMDtcbiAgICAgICAgICAgIHZhciBpc1NlYWNoQnlJZCA9IHRoaXMuc3RhdGUudmFsdWUgJiYgIWZpZWxkVmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnNxbEZpZWxkcyAmJiB0aGlzLnByb3BzLnNxbEZpZWxkcy5sZW5ndGggJiYgZmllbGRWYWx1ZSAmJiBmaWVsZFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNxbEZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNPciA9IHNxbFdoZXJlLmxlbmd0aCA+IDAgPyAnIG9yICcgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgc3FsV2hlcmUgPSBzcWxXaGVyZS5jb25jYXQoJyAnICsgaXNPciArICcgZW5jb2RlKCcgKyBmaWVsZCArICc6OmJ5dGVhLCBcXCdlc2NhcGVcXCcpIGlsaWtlIFxcJyUnICsgZmllbGRWYWx1ZS50cmltKCkgKyAnJVxcJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNTZWFjaEJ5SWQpIHtcbiAgICAgICAgICAgICAgICAvLyB3aWxsIHNlYWNoIGJ5IGlkXG4gICAgICAgICAgICAgICAgc3FsV2hlcmUgPSAnaWQgPSAnICsgdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3FsV2hlcmUgPSAnd2hlcmUgJyArIHNxbFdoZXJlO1xuXG4gICAgICAgICAgICB2YXIgbGliUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7IHV1aWQ6IERvY0NvbnRleHQudXNlckRhdGEudXVpZCB9LCBzcWxXaGVyZS5sZW5ndGggPyB7XG4gICAgICAgICAgICAgICAgc3FsOiBzcWxXaGVyZSxcbiAgICAgICAgICAgICAgICBsaW1pdDogbGltaXQsXG4gICAgICAgICAgICAgICAga3B2OiBrcHYgPyBrcHYgOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApXG4gICAgICAgICAgICB9IDoge30pO1xuXG4gICAgICAgICAgICBpZiAoc3FsV2hlcmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZldGNoRGF0YS5mZXRjaERhdGFQb3N0KFBPU1RfTE9BRF9MSUJTX1VSTCArICcvJyArIGxpYiwgbGliUGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JpZERhdGEgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRDb25maWcgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgJ2RhdGEnIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkRGF0YSA9IHJlc3BvbnNlLmRhdGEucmVzdWx0LnJlc3VsdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbmZpZyA9IHJlc3BvbnNlLmRhdGEucmVzdWx0LnJlc3VsdC5ncmlkQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyaWREYXRhICYmIGdyaWREYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NlYWNoQnlJZCAmJiAhX3RoaXMzLnN0YXRlLnNob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDRgtC+0LvRjNC60L4g0L7QtNC90LAg0LfQsNC/0LjRgdGMLiDQk9GA0LjQtCDQvdC1INC90YPQttC10L1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFZhbHVlOiBncmlkRGF0YVswXVtfdGhpczMucHJvcHMuYm91bmRUb0dyaWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZ3JpZERhdGFbMF1bJ2lkJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREYXRhOiBncmlkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbmZpZzogZ3JpZENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuc2V0U3RhdGUoeyBncmlkRGF0YTogZ3JpZERhdGEsIGdyaWRDb25maWc6IGdyaWRDb25maWcsIHNob3c6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbG9hZExpYnMgZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUdyaWRCdG5DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVHcmlkQnRuQ2xpY2soYnRuTmFtZSwgYWN0aXZlUm93LCBpZCwgZG9jVHlwZUlkKSB7XG4gICAgICAgICAgICAvLyDQt9Cw0LrRgNGL0LLQsNC10Lwg0LzQvtC00LDQu9GM0L3QvtC1INC+0LrQvdC+INC/0L7QuNGB0LrQsCDQuCDQv9C10YDQtdGF0L7QtNC40Lwg0L3QsCDQvdC+0LLRg9GOINC30LDQv9C40YHRjCDRgdC/0YDQsNCy0L7Rh9C90LjQutCwXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvdzogZmFsc2UgfSk7XG4gICAgICAgICAgICB2YXIgZG9jSWQgPSB0aGlzLnN0YXRlLmdyaWREYXRhW2FjdGl2ZVJvd11bJ2lkJ107XG4gICAgICAgICAgICBzd2l0Y2ggKGJ0bk5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiTXV1ZGFcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nICsgRG9jQ29udGV4dC5tb2R1bGUgKyAnLycgKyB0aGlzLnByb3BzLmxpYk5hbWUgKyAnLycgKyBkb2NJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlZGl0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyArIERvY0NvbnRleHQubW9kdWxlICsgJy8nICsgdGhpcy5wcm9wcy5saWJOYW1lICsgJy8nICsgZG9jSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWRkXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyArIERvY0NvbnRleHQubW9kdWxlICsgJy8nICsgdGhpcy5wcm9wcy5saWJOYW1lICsgJy8wJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWaWdhbmUgY2xpY2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3BzLnZhbHVlICE9PSBwcmV2U3RhdGUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbmV4dFByb3BzLnZhbHVlIH07XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2VsZWN0RGF0YTtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cblNlbGVjdERhdGEucHJvcFR5cGVzID0ge1xuICAgIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29sbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzaG93OiBQcm9wVHlwZXMuYm9vbFxufTtcblxuU2VsZWN0RGF0YS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBidG5EZWxldGU6IGZhbHNlLFxuICAgIHZhbHVlOiAwLFxuICAgIGNvbGxJZDogJ2lkJyxcbiAgICB0aXRsZTogJycsXG4gICAgc2hvdzogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RGF0YTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvc2VsZWN0LWRhdGEvc2VsZWN0LWRhdGEuanN4XG4vLyBtb2R1bGUgaWQgPSAyNjVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXt3cmFwcGVyOnttYXJnaW46JzVweCcsbWFyZ2luTGVmdDonMjBweCcsZGlzcGxheTonZmxleCcsd2lkdGg6Jzk1JSd9LGlucHV0Ont3aWR0aDonNzUlJyxtYXJnaW5MZWZ0OicxNXB4Jyxib3JkZXJSYWRpdXM6JzNweCcsaGVpZ2h0OiczMHB4J30saGlkZTp7ZGlzcGxheTonbm9uZSd9LHNlbGVjdDp7d2lkdGg6JzYwJScsbWFyZ2luTGVmdDonMTVweCd9LHJlYWRPbmx5OntiYWNrZ3JvdW5kQ29sb3I6JyNGM0VGRUYnfSxsYWJlbDp7d2lkdGg6JzQwJScsbWFyZ2luOic1cHgnfSxidXR0b246e3dpZHRoOicxMCUnfSxsaW1pdElucHV0Ont3aWR0aDonMTAlJ319O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9zZWxlY3QtZGF0YS9zZWxlY3QtZGF0YS1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWxhdGVkRG9jdW1lbnRzID0gZnVuY3Rpb24gcmVsYXRlZERvY3VtZW50cyhzZWxmKSB7XG4gICAgLy8g0YTQvtGA0LzQuNGA0YPQtdC8INC30LDQstC40YHQuNC80L7RgdGC0LhcbiAgICB2YXIgcGFnZXMgPSBzZWxmLnBhZ2VzO1xuICAgIHZhciByZWxhdGVkRG9jdW1lbnRzID0gc2VsZi5kb2NEYXRhLnJlbGF0aW9ucyA/IHNlbGYuZG9jRGF0YS5yZWxhdGlvbnMgOiBbXTtcbiAgICBpZiAoc2VsZi5wYWdlcyAmJiBzZWxmLnBhZ2VzLmxlbmd0aCAmJiAoIXNlbGYuZG9jRGF0YS5pZCB8fCBzZWxmLmRvY0RhdGEuaWQgPT09IDApKSB7XG4gICAgICAgIC8vINGB0L7Qt9C00LDQtdC8INC90L7QstGL0Lkg0LTQvtC6XG4gICAgICAgIHBhZ2VzID0gW3NlbGYucGFnZXNbMF1dO1xuICAgICAgICByZWxhdGVkRG9jdW1lbnRzID0gW107XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0ZWREb2N1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZWxhdGVkRG9jdW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgaWYgKGRvYy5pZCkge1xuICAgICAgICAgICAgICAgIC8vINC/0YDQvtCy0LXRgNC40Lwg0L3QsCDRg9C90LjQutCw0LvRjNC90L7RgdGC0Ywg0YHQv9C40YHQutCwINC00L7QutGD0LzQtdC90YLQvtCyXG4gICAgICAgICAgICAgICAgdmFyIGlzRXhpc3RzID0gcGFnZXMuZmluZChmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhZ2UuZG9jSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlLmRvY0lkID09IGRvYy5pZCAmJiBwYWdlLmRvY1R5cGVJZCA9PSBkb2MuZG9jX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0LIg0LzQsNGB0YHQuNCy0LUg0L3QtdGCLCDQtNC+0LHQsNCy0LjQvCDRgdGB0YvQu9C60YMg0L3QsCDQtNC+0LrRg9C80LXQvdGCXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2goeyBkb2NUeXBlSWQ6IGRvYy5kb2NfdHlwZSwgZG9jSWQ6IGRvYy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VOYW1lOiBkb2MubmFtZSArIChkb2MubnVtYmVyID8gJyBucjonICsgZG9jLm51bWJlciA6ICcgaWQ6JyArIGRvYy5pZCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2VsZi5wYWdlcyA9IHBhZ2VzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWxhdGVkRG9jdW1lbnRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvbWl4aW4vcmVsYXRlZERvY3VtZW50cy5qc3hcbi8vIG1vZHVsZSBpZCA9IDI2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2RvY1Jvdzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjoncm93Jy8qXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGJsdWUnXHJcbiovfSxkb2NDb2x1bW46e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbicsLypcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgeWVsbG93JyxcclxuKi93aWR0aDonNTAlJ30sZG9jOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nLypcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYnJvd24nXHJcbiovfSxzdW1tYTp7d2lkdGg6J2F1dG8nfSxncmlkOnttYWluVGFibGU6e3dpZHRoOicxMDAlJ30saGVhZGVyVGFibGU6e3dpZHRoOicxMDAlJ30sZ3JpZENvbnRhaW5lcjp7d2lkdGg6JzEwMCUnfX0sZ3JpZFJvdzp7LypcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmxhY2snLFxyXG4qL2JhY2tncm91bmRDb2xvcjond2hpdGUnLHBvc2l0aW9uOidyZWxhdGl2ZScsbWFyZ2luOicxMCUgMzAlIDEwJSAzMCUnLHdpZHRoOidhdXRvJyxvcGFjaXR5OicxJyx0b3A6JzEwMHB4J30sYnRuRWRpdDp7d2lkdGg6J21pbi1jb250ZW50J30sY29udGFudDp7d2lkdGg6J2F1dG8nfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2xlcGluZy9kb2N1bWVudC9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJcInVzZSBzdHJpY3RcIjt2YXIgcm91bmRUb1R3bz1mdW5jdGlvbiByb3VuZFRvVHdvKG51bSl7cmV0dXJuKyhNYXRoLnJvdW5kKG51bStcImUrMlwiKStcImUtMlwiKTt9O21vZHVsZS5leHBvcnRzPXJvdW5kVG9Ud287XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9saWJzL3JvdW5kX3RvXzIuanNcbi8vIG1vZHVsZSBpZCA9IDI2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBEb2N1bWVudFJlZ2lzdGVyID0gcmVxdWlyZSgnLi8uLi9kb2N1bWVudHMvZG9jdW1lbnRzLmpzeCcpO1xudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGVzJyk7XG52YXIgVG9vbGJhckNvbnRhaW5lciA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy90b29sYmFyLWNvbnRhaW5lci90b29sYmFyLWNvbnRhaW5lci5qc3gnKTtcbnZhciBCdG5BcnZlc3RhID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tdGFzay9pbmRleC5qc3gnKTtcbnZhciBET0NfVFlQRV9JRCA9ICdMRVBJTkcnO1xuXG52YXIgY2hlY2tSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2xpYnMvY2hlY2tSaWdodHMnKTtcbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi9kb2MtY29udGV4dC5qcycpO1xuXG52YXIgRG9jUmlnaHRzID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9jb25maWcvZG9jX3JpZ2h0cycpO1xuXG4vKipcclxuICog0JrQu9Cw0YHRgSDRgNC10LDQu9C40LfRg9C10YIg0LTQvtC60YPQvNC10L3RgiDRgdC/0YDQsNCy0L7Rh9C90LjQutCwINC/0YDQuNC30L3QsNC60L7Qsi5cclxuICovXG5cbnZhciBEb2N1bWVudHMgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoRG9jdW1lbnRzLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBEb2N1bWVudHMocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvY3VtZW50cyk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERvY3VtZW50cy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERvY3VtZW50cykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5yZW5kZXJlciA9IF90aGlzLnJlbmRlcmVyLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5vbkNsaWNrSGFuZGxlciA9IF90aGlzLm9uQ2xpY2tIYW5kbGVyLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRG9jdW1lbnRzLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIERPQ19UWVBFX0lEID0gdGhpcy5wcm9wcy5tb2R1bGUgPT0gJ2thc3V0YWphJyA/ICdJU0lLVV9MRVBJTkcnIDogJ0xFUElORyc7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRSZWdpc3RlciwgeyBpbml0RGF0YTogdGhpcy5wcm9wcy5pbml0RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5ID8gdGhpcy5wcm9wcy5oaXN0b3J5IDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAncmVnaXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IERPQ19UWVBFX0lELFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyZXIgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcmVyKHNlbGYpIHtcbiAgICAgICAgICAgIGlmICghc2VsZikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZG9jUmlnaHRzID0gRG9jUmlnaHRzW0RPQ19UWVBFX0lEXSA/IERvY1JpZ2h0c1tET0NfVFlQRV9JRF0gOiBbXTtcbiAgICAgICAgICAgIHZhciB1c2VyUm9sZXMgPSBEb2NDb250ZXh0LnVzZXJEYXRhID8gRG9jQ29udGV4dC51c2VyRGF0YS5yb2xlcyA6IFtdO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBUb29sYmFyQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgY2hlY2tSaWdodHModXNlclJvbGVzLCBkb2NSaWdodHMsICdhcnZlZCcpID8gUmVhY3QuY3JlYXRlRWxlbWVudChCdG5BcnZlc3RhLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnS29vc3RhIGFydmVkJyxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnRuLWtvb3N0YUFydmVkJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAna2V5LWtvb3N0YUFydmVkJ1xuICAgICAgICAgICAgICAgIH0pIDogbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaGFuZGxlciDQtNC70Y8g0YHQvtCx0YvRgtC40Y8g0LrQu9C40Log0L3QsCDQutC90L7Qv9C60LDRhSDQv9Cw0L3QtdC70LhcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb25DbGlja0hhbmRsZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGlja0hhbmRsZXIoZXZlbnQsIHNlaXN1Z2EpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgaWRzID0gbmV3IFNldCgpOyAvLyDRgdGO0LTQsCDQv9C40YjQtdC8INC40LQg0YHRh9C10YLQvtC8LCDQutC+0YLQvtGA0YvQtSDQv9C+0LQg0L7QsdGA0LDQsdC+0YLQutGDXG4gICAgICAgICAgICB2YXIgRG9jID0gdGhpcy5yZWZzWydyZWdpc3RlciddO1xuXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgLy8g0LHRg9C00LXRgiDRgdGE0L7RgNC80LjRgNC+0LLQsNC9INGE0LDQudC7INC00LvRjyDQvtGC0L/RgNCw0LLQutC4INCyINCx0LDQvdC6IFNXRURcbiAgICAgICAgICAgIERvYy5ncmlkRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAocm93LnNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZHMuYWRkKHJvdy5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyDQutC+0L3QstC10YDRgtCw0YbQuNGPINCyINC80LDRgdGB0LjQslxuICAgICAgICAgICAgaWRzID0gQXJyYXkuZnJvbShpZHMpO1xuXG4gICAgICAgICAgICBpZiAoIWlkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnTWl0dGUgw7xodGVnaSBsZXBpbmcgdmFsaXR1ZCcsIC8vINGB0YLRgNC+0LrQsCDQuNC30LLQtdGJ0LXQvdC40LlcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdub3RWYWxpZCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgRG9jLmZldGNoRGF0YSgnY2FsYy9rb29zdGFBcnZlZCcsIHsgZG9jczogaWRzLCBzZWlzdWdhOiBzZWlzdWdhIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ3Rhc2sgc2FhZGV0dWQgdFxceEU0aXRtaXNlbGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHsgd2FybmluZzogJycgKyBtZXNzYWdlLCB3YXJuaW5nVHlwZTogJ29rJyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR1bGVtdXNlZCA9IGRhdGEuZGF0YS5yZXN1bHQudHVsZW11c2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L7RgtC60YDRi9Cy0LDQtdC8INC+0YLRh9C10YJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGlzUmVwb3J0OiB0cnVlLCB0eHRSZXBvcnQ6IHR1bGVtdXNlZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycm9yX21lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoeyB3YXJuaW5nOiAnVGVra2lzIHZpZ2E6ICcgKyBkYXRhLmVycm9yX21lc3NhZ2UsIHdhcm5pbmdUeXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnS29ra3UgYXJ2ZXN0YXR1ZCA6ICcgKyBkYXRhLnJlc3VsdCArICcsICcgKyBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRG9jdW1lbnRzO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2xlcGluZy9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDI3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2dyaWQ6e21haW5UYWJsZTp7d2lkdGg6JzEwMCUnLHRkOntib3JkZXI6JzFweCBzb2xpZCBsaWdodEdyZXknLGRpc3BsYXk6J3RhYmxlLWNlbGwnLHBhZGRpbmdMZWZ0Oic1cHgnfX0saGVhZGVyVGFibGU6e3dpZHRoOicxMDAlJ30sZ3JpZENvbnRhaW5lcjp7d2lkdGg6JzEwMCUnfX0sZG9jOntoZWlnaHQ6JzEwMCUnfSx0b3RhbDp7d2lkdGg6J2F1dG8nfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2xlcGluZy9zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgZ2V0Tm93ID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL2dldE5vdycpO1xuXG52YXIgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi8uLi8uLi9tb2RhbHBhZ2UvbW9kYWxQYWdlLmpzeCcpO1xuXG52YXIgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJbnB1dERhdGUgPSByZXF1aXJlKCcuLi8uLi9pbnB1dC1kYXRlL2lucHV0LWRhdGUuanN4JyksXG4gICAgSW5wdXROdW1iZXIgPSByZXF1aXJlKCcuLi8uLi9pbnB1dC1udW1iZXIvaW5wdXQtbnVtYmVyLmpzeCcpLFxuICAgIElDT04gPSAnZXhlY3V0ZSc7XG52YXIgZ2V0VGV4dFZhbHVlID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL2dldFRleHRWYWx1ZScpO1xuXG52YXIgQnV0dG9uVGFzayA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25UYXNrLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uVGFzayhwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uVGFzayk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvblRhc2suX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25UYXNrKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvd01vZGFsOiBmYWxzZSxcbiAgICAgICAgICAgIHNlaXN1Z2E6IGdldE5vdygpLFxuICAgICAgICAgICAga29ndXM6IDAsXG4gICAgICAgICAgICBrYXNfa29uZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBfdGhpcy5oYW5kbGVDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMubW9kYWxQYWdlQ2xpY2sgPSBfdGhpcy5tb2RhbFBhZ2VDbGljay5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgPSBfdGhpcy5oYW5kbGVJbnB1dENoYW5nZS5iaW5kKF90aGlzKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25UYXNrLCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd01vZGFsOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2V0VGV4dFZhbHVlKHRoaXMucHJvcHMudmFsdWUgPyB0aGlzLnByb3BzLnZhbHVlIDogJ1TDpGl0bWluZScpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5UYXNrJyB8fCB0aGlzLnByb3BzLnJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuYnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHJlZjogJ2ltYWdlJywgc3JjOiBzdHlsZXMuaWNvbnNbSUNPTl0gfSlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd01vZGFsID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgTW9kYWxQYWdlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbFBhZ2VCdG5DbGljazogdGhpcy5tb2RhbFBhZ2VDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0czogWydidG5PaycsICdidG5DYW5jZWwnXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnS2FzIGtcXHhFNGl2YXRhIFwiJyArIHZhbHVlICsgJ1wiID8nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNob3dEYXRlID8gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dERhdGUsIHsgdGl0bGU6ICdTZWlzdWdhICcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna3B2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnNlaXN1Z2EsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1rcHYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgfSkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNob3dLb2d1cyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXROdW1iZXIsIHsgdGl0bGU6IHRoaXMucHJvcHMudGl0bGUgPyB0aGlzLnByb3BzLnRpdGxlIDogJ1bDpMOkcnR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna29ndXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE51bWJlcih0aGlzLnN0YXRlLmtvZ3VzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtvZ3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlIH0pIDogbnVsbFxuICAgICAgICAgICAgICAgICkgOiBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb2RhbFBhZ2VDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb2RhbFBhZ2VDbGljayhidG5FdmVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dNb2RhbDogZmFsc2UgfSk7XG4gICAgICAgICAgICBpZiAoYnRuRXZlbnQgPT09ICdPaycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2sodGhpcy5wcm9wcy52YWx1ZSwgdGhpcy5wcm9wcy5zaG93S29ndXMgPyB0aGlzLnN0YXRlLmtvZ3VzIDogdGhpcy5zdGF0ZS5zZWlzdWdhLCB0aGlzLnN0YXRlLmthc19rb25kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vd2lsbCBzYXZlIHZhbHVlXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUlucHV0Q2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdrcHYnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2Vpc3VnYTogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tvZ3VzJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGtvZ3VzOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAna2FzX2tvbmQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsga2FzX2tvbmQ6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvblRhc2s7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5CdXR0b25UYXNrLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZSxcbiAgICBzaG93RGF0ZTogdHJ1ZSxcbiAgICBzaG93S29ndXM6IGZhbHNlLFxuICAgIHNob3dLb25kOiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b25UYXNrO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXRhc2svaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyNzJcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgRG9jdW1lbnRUZW1wbGF0ZSA9IHJlcXVpcmUoJy4uLy4uL2RvY3VtZW50VGVtcGxhdGUvaW5kZXguanN4JyksXG4gICAgSW5wdXRUZXh0ID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9pbnB1dC10ZXh0L2lucHV0LXRleHQuanN4JyksXG4gICAgSW5wdXREYXRlID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9pbnB1dC1kYXRlL2lucHV0LWRhdGUuanN4JyksXG4gICAgSW5wdXROdW1iZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2lucHV0LW51bWJlci9pbnB1dC1udW1iZXIuanN4JyksXG4gICAgU2VsZWN0ID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LmpzeCcpLFxuICAgIFRleHRBcmVhID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy90ZXh0LWFyZWEvdGV4dC1hcmVhLmpzeCcpLFxuICAgIERhdGFHcmlkID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9kYXRhLWdyaWQvZGF0YS1ncmlkLmpzeCcpLFxuICAgIHJlbGF0ZWREb2N1bWVudHMgPSByZXF1aXJlKCcuLi8uLi8uLi9taXhpbi9yZWxhdGVkRG9jdW1lbnRzLmpzeCcpLFxuICAgIE1vZGFsUGFnZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvbW9kYWxwYWdlL21vZGFsUGFnZS5qc3gnKSxcbiAgICBCdXR0b25FZGl0ID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXJlZ2lzdGVyLWVkaXQvYnV0dG9uLXJlZ2lzdGVyLWVkaXQuanN4JyksXG4gICAgc3R5bGVzID0gcmVxdWlyZSgnLi9hcnZlLnN0eWxlcycpO1xudmFyIFJvdW5kID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL3JvdW5kX3RvXzInKTtcbnZhciBMb2FkaW5nID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9jb21wb25lbnRzL2xvYWRpbmcvaW5kZXguanN4Jyk7XG52YXIgZ2V0VGV4dFZhbHVlID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL2dldFRleHRWYWx1ZScpO1xuXG52YXIgRG9jQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vZG9jLWNvbnRleHQnKTtcbnZhciBMSUJfT0JKUyA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnN0YW50cycpLkFSVi5MSUJfT0JKUztcbnZhciBEb2NSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uLy4uL2NvbmZpZy9kb2NfcmlnaHRzJyk7XG52YXIgY2hlY2tSaWdodHMgPSByZXF1aXJlKCcuLy4uLy4uLy4uLy4uL2xpYnMvY2hlY2tSaWdodHMnKTtcblxudmFyIEFydmUgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQXJ2ZSwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQXJ2ZShwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXJ2ZSk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEFydmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBcnZlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZGVkRGF0YTogZmFsc2UsXG4gICAgICAgICAgICBtb2R1bGU6IHByb3BzLm1vZHVsZSA/IHByb3BzLm1vZHVsZSA6IERvY0NvbnRleHQubW9kdWxlLFxuICAgICAgICAgICAgbGFwc0lkOiBudWxsLFxuICAgICAgICAgICAgZG9jSWQ6IHByb3BzLmRvY0lkID8gcHJvcHMuZG9jSWQgOiBOdW1iZXIocHJvcHMubWF0Y2gucGFyYW1zLmRvY0lkKVxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLmNyZWF0ZUdyaWRSb3cgPSBfdGhpcy5jcmVhdGVHcmlkUm93LmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5yZWNhbGNEb2NTdW1tYSA9IF90aGlzLnJlY2FsY0RvY1N1bW1hLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIF90aGlzLnJlbmRlcmVyID0gX3RoaXMucmVuZGVyZXIuYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLmdyaWRWYWxpZGF0ZUZpZWxkcyA9IF90aGlzLmdyaWRWYWxpZGF0ZUZpZWxkcy5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuYnRuRWRpdEFzdXR1c0NsaWNrID0gX3RoaXMuYnRuRWRpdEFzdXR1c0NsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5wYWdlcyA9IFt7IHBhZ2VOYW1lOiAnQXJ2ZScsIGRvY1R5cGVJZDogJ0FSVicgfV07XG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhBcnZlLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRUZW1wbGF0ZSwgeyBkb2NJZDogdGhpcy5zdGF0ZS5kb2NJZCxcbiAgICAgICAgICAgICAgICByZWY6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogJ0FSVicsXG4gICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnN0YXRlLm1vZHVsZSxcbiAgICAgICAgICAgICAgICBpbml0RGF0YTogdGhpcy5wcm9wcy5pbml0RGF0YSA/IHRoaXMucHJvcHMuaW5pdERhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICByZWxvYWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbGliczogTElCX09CSlMsXG4gICAgICAgICAgICAgICAgcGFnZXM6IHRoaXMucGFnZXMsXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgICAgICAgY3JlYXRlR3JpZFJvdzogdGhpcy5jcmVhdGVHcmlkUm93LFxuICAgICAgICAgICAgICAgIGdyaWRWYWxpZGF0b3I6IHRoaXMuZ3JpZFZhbGlkYXRlRmllbGRzLFxuICAgICAgICAgICAgICAgIHJlY2FsY0RvYzogdGhpcy5yZWNhbGNEb2NTdW1tYSxcbiAgICAgICAgICAgICAgICBmb2N1c0VsZW1lbnQ6ICdpbnB1dC1udW1iZXInXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAq0JLQtdGA0L3QtdGCINC60LDRgdGC0L7QvNC90YvQtSDQutC+0LzQv9C+0L3QtdC90YLRiyDQtNC+0LrRg9C80LXQvdGC0LBcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyZXIoc2VsZikge1xuICAgICAgICAgICAgaWYgKCFzZWxmIHx8ICFzZWxmLmRvY0RhdGEgfHwgIXNlbGYuZG9jRGF0YS5rcHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2MgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nLCB7IGxhYmVsOiAnTGFhZGltaW5lLi4uJyB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpc0VkaXRNb2RlID0gc2VsZi5zdGF0ZS5lZGl0ZWQsXG4gICAgICAgICAgICAgICAgZ3JpZERhdGEgPSBzZWxmLmRvY0RhdGEuZ3JpZERhdGEsXG4gICAgICAgICAgICAgICAgZ3JpZENvbHVtbnMgPSBzZWxmLmRvY0RhdGEuZ3JpZENvbmZpZyxcbiAgICAgICAgICAgICAgICBncmlkQXJ2VGFzdURhdGEgPSBzZWxmLmRvY0RhdGEucXVlcnlBcnZUYXN1LFxuICAgICAgICAgICAgICAgIGdyaWRUYXN1ZENvbHVtbnMgPSBzZWxmLmRvY0RhdGEuZ3JpZFRhc3VkQ29uZmlnO1xuXG4gICAgICAgICAgICAvLyDRhNC+0YDQvNC40YDRg9C10Lwg0LfQsNCy0LjRgdC40LzQvtGB0YLQuFxuICAgICAgICAgICAgaWYgKHNlbGYuZG9jRGF0YS5yZWxhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZWxhdGVkRG9jdW1lbnRzKHNlbGYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDQv9GA0LDQstCwINC90LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQutCw0YDRgtC+0YfQutC4INC60L7QvdGC0YDQsNCz0LXQvdGC0LBcbiAgICAgICAgICAgIHZhciBkb2NSaWdodHMgPSBEb2NSaWdodHNbJ0FTVVRVU0VEJ10gPyBEb2NSaWdodHNbJ0FTVVRVU0VEJ10gOiBbXTtcbiAgICAgICAgICAgIHZhciB1c2VyUm9sZXMgPSBEb2NDb250ZXh0LnVzZXJEYXRhID8gRG9jQ29udGV4dC51c2VyRGF0YS5yb2xlcyA6IFtdO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHJlZjogJ2lucHV0LW51bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEubnVtYmVyIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIWlzRWRpdE1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXREYXRlLCB7IHRpdGxlOiAnS3V1cFxceEU0ZXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna3B2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5rcHYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtwdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dERhdGUsIHsgdGl0bGU6ICdUXFx4RTRodGFlZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0YWh0YWVnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS50YWh0YWVnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC10YWh0YWVnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyB0aXRsZTogJ01ha3NqYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYnM6ICdhc3V0dXNlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhc3V0dXNpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlbGYubGlic1snYXN1dHVzZWQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5hc3V0dXNpZCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHNlbGYuZG9jRGF0YS5hc3V0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsSWQ6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUmlnaHRzKHVzZXJSb2xlcywgZG9jUmlnaHRzLCAnZWRpdCcpID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25FZGl0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkVkaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ011dWRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5idG5FZGl0QXN1dHVzQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6ICFpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmJ0bkVkaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ0xpc2EnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbGlzYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEubGlzYSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtbGlzYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dFRleHQsIHsgdGl0bGU6ICdWaWl0ZW51bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd2aWl0ZW5yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS52aWl0ZW5yIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC12aWl0ZW51bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCB7IHRpdGxlOiAnQXJ2ZWxkdXMgYXJ2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhYV9pZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYnM6ICdhYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEuYWEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlbGYubGlic1snYWEnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBTdHJpbmcoc2VsZi5kb2NEYXRhLmFhKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxJZDogJ2tvb2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdzZWxlY3QtYWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIWlzRWRpdE1vZGUgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0QXJlYSwgeyB0aXRsZTogJ01cXHhFNHJrdXNlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ211dWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ3RleHRhcmVhLW11dWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEubXV1ZCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogIWlzRWRpdE1vZGUgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhR3JpZCwgeyBzb3VyY2U6ICdkZXRhaWxzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkRGF0YTogZ3JpZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnM6IGdyaWRDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUb29sQmFyOiBpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUdyaWRSb3c6IHRoaXMuaGFuZGxlR3JpZFJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVHcmlkQnRuQ2xpY2s6IHNlbGYuaGFuZGxlR3JpZEJ0bkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmdyaWQuaGVhZGVyVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZGF0YS1ncmlkJyB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TnVtYmVyLCB7IHRpdGxlOiAnU3VtbWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdW1tYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtc3VtbWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIoc2VsZi5kb2NEYXRhLnN1bW1hKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuc3VtbWFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dE51bWJlciwgeyB0aXRsZTogJ0tcXHhFNGliZW1ha3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrYm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2lucHV0LWtibScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5zdW1tYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHNlbGYuZG9jRGF0YS5rYm0pIHx8IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dE51bWJlciwgeyB0aXRsZTogJ0pcXHhFNFxceEU0aycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2N1cnJlbmN5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnamFhaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtamFhaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5zdW1tYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHNlbGYuZG9jRGF0YS5qYWFrKSB8fCAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRSb3dFZGl0ID8gdGhpcy5jcmVhdGVHcmlkUm93KHNlbGYpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcmVmOiAnbGFiZWwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VGV4dFZhbHVlKCdUYXN1ZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YUdyaWQsIHsgc291cmNlOiAndGFzdWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREYXRhOiBncmlkQXJ2VGFzdURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbHVtbnM6IGdyaWRUYXN1ZENvbHVtbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Rvb2xCYXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUdyaWRCdG5DbGljazogc2VsZi5oYW5kbGVHcmlkQnRuQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jVHlwZUlkOiAnc21rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmdyaWQuaGVhZGVyVGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndGFzdWQtZGF0YS1ncmlkJyB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCh0L7Qt9C00LDRgdGCINC60L7QvNC/0L7QvdC10YIg0YHRgtGA0L7QutC4INCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7WE1MfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVHcmlkUm93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUdyaWRSb3coc2VsZikge1xuXG4gICAgICAgICAgICB2YXIgcm93ID0gc2VsZi5ncmlkUm93RGF0YSA/IHNlbGYuZ3JpZFJvd0RhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZU1lc3NhZ2UgPSAnJyxcbiAgICAgICAgICAgICAgICAvLyBzZWxmLnN0YXRlLndhcm5pbmdcbiAgICAgICAgICAgIGJ1dHRvbk9rUmVhZE9ubHkgPSB2YWxpZGF0ZU1lc3NhZ2UubGVuZ3RoID4gMCB8fCAhc2VsZi5zdGF0ZS5jaGVja2VkLFxuICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0cyA9IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ107XG5cbiAgICAgICAgICAgIGlmIChidXR0b25Pa1JlYWRPbmx5KSB7XG4gICAgICAgICAgICAgICAgLy8g0YPQsdC10YDQtdC8INC60L3QvtC/0LrRgyDQntC6XG4gICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFyb3cpIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsKTtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICcubW9kYWxQYWdlJyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzOiBtb2RhbE9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdtb2RhbHBhZ2UtZ3JpZC1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiBzZWxmLm1vZGFsUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBzdHlsZXMuZ3JpZFJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZU5hbWU6ICdSZWEgbGlzYW1pbmUgLyBwYXJhbmRhbWluZScgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyByZWY6ICdncmlkLXJvdy1jb250YWluZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRXYXJuaW5nLmxlbmd0aCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5ncmlkV2FybmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdGl0bGU6ICdUZWVudXM6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ25vbWlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGliczogJ25vbWVuY2xhdHVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlbGYubGlic1snbm9tZW5jbGF0dXJlJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJvdy5ub21pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAnaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdub21pZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnVGVlbnVzZSBrb29kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlR3JpZFJvd0NoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXROdW1iZXIsIHsgdGl0bGU6ICdLb2d1czonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna29ndXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHJvdy5rb2d1cyA/IHJvdy5rb2d1cyA6IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZERhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdrb2d1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46ICdbMC05XXsxMH0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVHcmlkUm93SW5wdXQgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TnVtYmVyLCB7IHRpdGxlOiAnSGluZDonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaGluZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIocm93LmhpbmQgPyByb3cuaGluZCA6IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZERhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdoaW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ1swLTldezEwfScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dJbnB1dCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXROdW1iZXIsIHsgdGl0bGU6ICdLYm0tdGE6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2tibXRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE51bWJlcihyb3cuc3VtbWEgPyByb3cuc3VtbWEgLSByb3cua2JtIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2tibXRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ1swLTldezEwfScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TnVtYmVyLCB7IHRpdGxlOiAnS2JtOicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrYm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKHJvdy5rYm0gPyByb3cua2JtIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2tibScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46ICdbMC05XXsxMH0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkJsdXI6IHNlbGYuaGFuZGxlR3JpZFJvd0lucHV0IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dE51bWJlciwgeyB0aXRsZTogJ1N1bW1hOicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTdW1tYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIocm93LnN1bW1hID8gcm93LnN1bW1hIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ3N1bW1hJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ1swLTldezEwfScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dJbnB1dCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCB7IHRpdGxlOiAnVHVubnVzOicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0dW5udXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzZWxmLmxpYnNbJ3R1bm51cyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LnR1bm51cyB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndHVubnVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAna29vZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyB0aXRsZTogJ1Byb2pla3Q6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Byb2onLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzZWxmLmxpYnNbJ3Byb2plY3QnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJvdy5wcm9qIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdwcm9qZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAna29vZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBzZWxmLmhhbmRsZUdyaWRSb3dDaGFuZ2UgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRBcmVhLCB7IHRpdGxlOiAnTVxceEU0cmt1c2VkOicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtdXVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZ3JpZHJvdy10ZXh0YXJlYS1tdXVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlR3JpZFJvd0NoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJvdy5tdXVkIHx8ICcnIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCy0LDQu9C40LTQsNGC0L7RgCDQtNC70Y8g0YHRgtGA0L7QutC4INCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdncmlkVmFsaWRhdGVGaWVsZHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JpZFZhbGlkYXRlRmllbGRzKCkge1xuICAgICAgICAgICAgdmFyIHdhcm5pbmcgPSAnJztcbiAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzLnJlZnNbJ2RvY3VtZW50J107XG4gICAgICAgICAgICBpZiAoZG9jICYmIGRvYy5ncmlkUm93RGF0YSkge1xuXG4gICAgICAgICAgICAgICAgLy8g0YLQvtC70YzQutC+INC/0L7RgdC70LUg0L/RgNC+0LLQtdGA0LrQuCDRhNC+0YDQvNGLINC90LAg0LLQsNC70LjQtNC90L7RgdGC0YxcbiAgICAgICAgICAgICAgICBpZiAoZG9jLmdyaWRSb3dEYXRhICYmICFkb2MuZ3JpZFJvd0RhdGFbJ25vbWlkJ10pIHdhcm5pbmcgPSB3YXJuaW5nICsgJyDQmtC+0LQg0L7Qv9C10YDQsNGG0LjQuCc7XG4gICAgICAgICAgICAgICAgaWYgKCFkb2MuZ3JpZFJvd0RhdGFbJ2tvZ3VzJ10pIHdhcm5pbmcgPSB3YXJuaW5nICsgJyDQmtC+0LvQuNGH0LXRgdGC0LLQvic7XG4gICAgICAgICAgICAgICAgaWYgKCFkb2MuZ3JpZFJvd0RhdGFbJ3N1bW1hJ10pIHdhcm5pbmcgPSB3YXJuaW5nICsgJyDQodGD0LzQvNCwJztcblxuICAgICAgICAgICAgICAgIHRoaXMucmVjYWxjUm93U3VtbSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjYWxjRG9jU3VtbWEoJ3N1bW1hJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2FybmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC/0LXRgNC10YDQsNGB0YfQtdGCINGB0YPQvNC80Ysg0YHRgtGA0L7QutC4INC4INGA0LDRgdGH0LXRgiDQvdCw0LvQvtCz0LBcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVjYWxjUm93U3VtbScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNhbGNSb3dTdW1tKCkge1xuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXMucmVmc1snZG9jdW1lbnQnXTtcblxuICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhkb2MuZ3JpZFJvd0RhdGEpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8v0L/QvtC00YHRgtCw0LLQuNC8INC90LDQuNC80LXQvdC+0LLQsNC90LjQtSDRg9GB0LvQvtCz0YNcblxuICAgICAgICAgICAgdmFyIHZhdCA9IDA7XG4gICAgICAgICAgICB2YXIgbm9tSGluZCA9IDA7XG4gICAgICAgICAgICBpZiAoZG9jLmdyaWRSb3dEYXRhWydub21pZCddKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vbURhdGFOYW1lID0gZG9jLmxpYnNbJ25vbWVuY2xhdHVyZSddLmZpbmQoZnVuY3Rpb24gKGxpYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKGxpYi5pZCkgPT09IE51bWJlcihkb2MuZ3JpZFJvd0RhdGFbJ25vbWlkJ10pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vbURhdGFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5ncmlkUm93RGF0YVsnaGluZCddID0gbm9tRGF0YU5hbWUuaGluZCAmJiAhZG9jLmdyaWRSb3dEYXRhWydoaW5kJ10gPyBub21EYXRhTmFtZS5oaW5kIDogZG9jLmdyaWRSb3dEYXRhWydoaW5kJ107XG4gICAgICAgICAgICAgICAgICAgIHZhdCA9IG5vbURhdGFOYW1lLnZhdCA/IE51bWJlcihub21EYXRhTmFtZS52YXQpIC8gMTAwIDogMDtcbiAgICAgICAgICAgICAgICAgICAgbm9tSGluZCA9IG5vbURhdGFOYW1lLmhpbmQ7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5ncmlkUm93RGF0YVsna29vZCddID0gbm9tRGF0YU5hbWUua29vZCA/IG5vbURhdGFOYW1lLmtvb2QgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ25pbWV0dXMnXSA9IG5vbURhdGFOYW1lLm5pbWV0dXMgPyBub21EYXRhTmFtZS5uaW1ldHVzIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZG9jLmdyaWRSb3dEYXRhWyd1aGlrJ10gPSBub21EYXRhTmFtZS51aGlrID8gbm9tRGF0YU5hbWUudWhpayA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5ncmlkUm93RGF0YVsna29udG8nXSA9IG5vbURhdGFOYW1lLmtvbnRvID8gbm9tRGF0YU5hbWUua29udG8gOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ3R1bm51cyddID0gbm9tRGF0YU5hbWUudHVubnVzID8gbm9tRGF0YU5hbWUudHVubnVzIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZG9jLmdyaWRSb3dEYXRhWydwcm9qJ10gPSBub21EYXRhTmFtZS5wcm9qID8gbm9tRGF0YU5hbWUucHJvaiA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5ncmlkUm93RGF0YVsna29vZDEnXSA9IG5vbURhdGFOYW1lLnRlZ2V2ID8gbm9tRGF0YU5hbWUudGVnZXYgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ2tvb2QyJ10gPSBub21EYXRhTmFtZS5hbGxpa2FzID8gbm9tRGF0YU5hbWUuYWxsaWthcyA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5ncmlkUm93RGF0YVsna29vZDUnXSA9IG5vbURhdGFOYW1lLmFydGlra2VsID8gbm9tRGF0YU5hbWUuYXJ0aWtrZWwgOiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9jLmdyaWRSb3dEYXRhWydrb2d1cyddID0gTnVtYmVyKGRvYy5ncmlkUm93RGF0YS5rb2d1cyk7XG4gICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ3Nvb2R1c3R1cyddID0gZG9jLmdyaWRSb3dEYXRhWydzb29kdXN0dXMnXSA/IE51bWJlcihkb2MuZ3JpZFJvd0RhdGEuc29vZHVzdHVzKSA6IDA7XG4gICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ2hpbmQnXSA9IG5vbUhpbmQgJiYgZG9jLmdyaWRSb3dEYXRhWydzb29kdXN0dXMnXSA/IE51bWJlcihub21IaW5kKSAtIGRvYy5ncmlkUm93RGF0YVsnc29vZHVzdHVzJ10gOiBOdW1iZXIoZG9jLmdyaWRSb3dEYXRhLmhpbmQpO1xuICAgICAgICAgICAgZG9jLmdyaWRSb3dEYXRhWydrYm10YSddID0gUm91bmQoTnVtYmVyKGRvYy5ncmlkUm93RGF0YVsna29ndXMnXSkgKiBOdW1iZXIoZG9jLmdyaWRSb3dEYXRhWydoaW5kJ10pKTtcbiAgICAgICAgICAgIGRvYy5ncmlkUm93RGF0YVsna2JtJ10gPSBSb3VuZChOdW1iZXIoZG9jLmdyaWRSb3dEYXRhWydrYm10YSddKSAqIHZhdCk7XG4gICAgICAgICAgICBkb2MuZ3JpZFJvd0RhdGFbJ3N1bW1hJ10gPSBSb3VuZChOdW1iZXIoZG9jLmdyaWRSb3dEYXRhWydrYm10YSddKSArIE51bWJlcihkb2MuZ3JpZFJvd0RhdGFbJ2tibSddKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQn9C10YDQtdGA0LDRgdGH0LXRgiDQuNGC0L7Qs9C+0LLRi9GFINGB0YPQvNC8INC00L7QutGD0LzQtdC90YLQsFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNhbGNEb2NTdW1tYScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNhbGNEb2NTdW1tYSgpIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzLnJlZnNbJ2RvY3VtZW50J107XG5cbiAgICAgICAgICAgIGRvYy5kb2NEYXRhWydzdW1tYSddID0gMDtcbiAgICAgICAgICAgIGRvYy5kb2NEYXRhWydrYm0nXSA9IDA7XG4gICAgICAgICAgICBkb2MuZG9jRGF0YS5ncmlkRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICBkb2MuZG9jRGF0YVsnc3VtbWEnXSA9IE51bWJlcihkb2MuZG9jRGF0YVsnc3VtbWEnXSkgKyBOdW1iZXIocm93WydzdW1tYSddKTtcbiAgICAgICAgICAgICAgICBkb2MuZG9jRGF0YVsna2JtJ10gPSBOdW1iZXIoZG9jLmRvY0RhdGFbJ2tibSddKSArIE51bWJlcihyb3dbJ2tibSddKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jLmRvY0RhdGFbJ3N1bW1hJ10gPSBSb3VuZChkb2MuZG9jRGF0YVsnc3VtbWEnXSk7XG4gICAgICAgICAgICBkb2MuZG9jRGF0YVsna2JtJ10gPSBSb3VuZChkb2MuZG9jRGF0YVsna2JtJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0L7QsdGA0LDQsdC+0YLRh9C40Log0YHQvtCx0YvRgtC40Y8g0LrQu9C40YHQutCwINC90LAg0LrQvdC+0L/QutC1INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LrQvtC90YLRgC3QsNCz0LXQvdGC0LBcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnRuRWRpdEFzdXR1c0NsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ0bkVkaXRBc3V0dXNDbGljaygpIHtcbiAgICAgICAgICAgIHZhciBkb2NBc3V0dXNJZCA9IHRoaXMucmVmc1snZG9jdW1lbnQnXS5kb2NEYXRhLmFzdXR1c2lkO1xuXG4gICAgICAgICAgICAvLyDQvtGB0YPRidC10YHRgtCy0LjRgiDQv9C10YDQtdGF0L7QtCDQvdCwINC60LDRgNGC0L7Rh9C60YMg0LrQvtC90YLRgC3QsNCz0LXQvdGC0LBcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyArIERvY0NvbnRleHQubW9kdWxlICsgJy9hc3V0dXNlZC8nICsgZG9jQXN1dHVzSWQpO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFydmU7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5BcnZlLnByb3BUeXBlcyA9IHtcbiAgICBkb2NJZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBpbml0RGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB1c2VyRGF0YTogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuQXJ2ZS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcGFyYW1zOiB7IGRvY0lkOiAwIH0sXG4gICAgaW5pdERhdGE6IHt9LFxuICAgIHVzZXJEYXRhOiB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcnZlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvZG9jcy9hcnYvZG9jdW1lbnQvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyNzNcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO21vZHVsZS5leHBvcnRzPXtkb2NSb3c6e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J3JvdycvKlxyXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBibHVlJ1xyXG4qL30sZG9jQ29sdW1uOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nLC8qXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIHllbGxvdycsXHJcbiovd2lkdGg6JzUwJSd9LGRvYzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjonY29sdW1uJy8qXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGJyb3duJ1xyXG4qL30sc3VtbWE6e3dpZHRoOidhdXRvJ30sZ3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJSd9LGhlYWRlclRhYmxlOnt3aWR0aDonMTAwJSd9LGdyaWRDb250YWluZXI6e3dpZHRoOicxMDAlJ319LGdyaWRSb3c6e2JhY2tncm91bmRDb2xvcjond2hpdGUnLHBvc2l0aW9uOidyZWxhdGl2ZScsbWFyZ2luOicxMCUgMzAlIDEwJSAzMCUnLHdpZHRoOic3NTBweCcsb3BhY2l0eTonMScsYWxpZ25TZWxmOidjZW50ZXInfSxidG5FZGl0Ont3aWR0aDonbWluLWNvbnRlbnQnfX07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL2Fydi9kb2N1bWVudC9hcnZlLnN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjc0XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIERvY3VtZW50UmVnaXN0ZXIgPSByZXF1aXJlKCcuLy4uL2RvY3VtZW50cy9kb2N1bWVudHMuanN4Jyk7XG52YXIgVG9vbGJhckNvbnRhaW5lciA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy90b29sYmFyLWNvbnRhaW5lci90b29sYmFyLWNvbnRhaW5lci5qc3gnKTtcbnZhciBCdG5TZXR0aW5ncyA9IHJlcXVpcmUoJy4vLi4vLi4vY29tcG9uZW50cy9idXR0b24tcmVnaXN0ZXIvYnV0dG9uLXNldHRpbmdzL2luZGV4LmpzeCcpO1xudmFyIEJ0blByaW50ID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItcHJpbnQvYnV0dG9uLXJlZ2lzdGVyLXByaW50LmpzeCcpO1xudmFyIEJ0bkVtYWlsID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tZW1haWwvaW5kZXguanN4Jyk7XG52YXIgQnRuRWFydmUgPSByZXF1aXJlKCcuLy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1lYXJ2ZS9pbmRleC5qc3gnKTtcbnZhciBJbnB1dE51bWJlciA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtbnVtYmVyL2lucHV0LW51bWJlci5qc3gnKTtcbnZhciBCdG5BcnZlc3RhID0gcmVxdWlyZSgnLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tdGFzay9pbmRleC5qc3gnKTtcblxudmFyIGdldFN1bSA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vbGlicy9nZXRTdW0nKTtcblxudmFyIHN0eWxlcyA9IHJlcXVpcmUoJy4vYXJ2LXJlZ2lzdGVyLXN0eWxlcycpO1xuXG52YXIgRG9jQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vLi4vZG9jLWNvbnRleHQuanMnKTtcbnZhciBFVkVOVFMgPSByZXF1aXJlKCcuLy4uLy4uLy4uL2NvbmZpZy9jb25zdGFudHMnKS5BUlYuRVZFTlRTO1xuXG4vKipcclxuICog0JrQu9Cw0YHRgSDRgNC10LDQu9C40LfRg9C10YIg0LTQvtC60YPQvNC10L3RgiDRgdC/0YDQsNCy0L7Rh9C90LjQutCwINC/0YDQuNC30L3QsNC60L7Qsi5cclxuICovXG5cbnZhciBEb2N1bWVudHMgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoRG9jdW1lbnRzLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBEb2N1bWVudHMocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvY3VtZW50cyk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERvY3VtZW50cy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERvY3VtZW50cykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5vbkNsaWNrSGFuZGxlciA9IF90aGlzLm9uQ2xpY2tIYW5kbGVyLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5yZW5kZXJlciA9IF90aGlzLnJlbmRlcmVyLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHN1bW1hOiAwLFxuICAgICAgICAgICAgamFhazogMCxcbiAgICAgICAgICAgIHJlYWQ6IDBcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKERvY3VtZW50cywgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBET0NfVFlQRV9JRCA9IHRoaXMucHJvcHMubW9kdWxlID09ICdrYXN1dGFqYScgPyAnSVNJS1VfQVJWJyA6ICdBUlYnO1xuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRSZWdpc3RlciwgeyBpbml0RGF0YTogdGhpcy5wcm9wcy5pbml0RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5ID8gdGhpcy5wcm9wcy5oaXN0b3J5IDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAncmVnaXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IERPQ19UWVBFX0lELFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyZXIgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dE51bWJlciwgeyB0aXRsZTogJ1JlYWQga29ra3U6JyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3JlYWRfa29ra3UnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLnRvdGFsLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1yZWFkJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE51bWJlcih0aGlzLnN0YXRlLnJlYWQpIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXROdW1iZXIsIHsgdGl0bGU6ICdTdW1tYSBrb2trdTonLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc3VtbWFfa29ra3UnLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLnRvdGFsLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdpbnB1dC1zdW1tYScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIodGhpcy5zdGF0ZS5zdW1tYSkudG9GaXhlZCgyKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TnVtYmVyLCB7IHRpdGxlOiAnSlxceEU0XFx4RTRrIGtva2t1OicsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdqYWFrX2tva2t1JyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy50b3RhbCxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQtamFhaycsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIodGhpcy5zdGF0ZS5qYWFrKS50b0ZpeGVkKDIpIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJlcihzZWxmKSB7XG4gICAgICAgICAgICB2YXIgRE9DX1RZUEVfSUQgPSB0aGlzLnByb3BzLm1vZHVsZSA9PSAna2FzdXRhamEnID8gJ0lTSUtVX0FSVicgOiAnQVJWJztcblxuICAgICAgICAgICAgdmFyIHN1bW1hID0gc2VsZi5ncmlkRGF0YSA/IGdldFN1bShzZWxmLmdyaWREYXRhLCAnc3VtbWEnKSA6IDA7XG4gICAgICAgICAgICB2YXIgamFhayA9IHNlbGYuZ3JpZERhdGEgPyBnZXRTdW0oc2VsZi5ncmlkRGF0YSwgJ2phYWsnKSA6IDA7XG4gICAgICAgICAgICBpZiAoc3VtbWEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc3VtbWE6IHN1bW1hLCByZWFkOiBzZWxmLmdyaWREYXRhLmxlbmd0aCwgamFhazogamFhayB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgVG9vbGJhckNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuRWFydmUsIHtcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgZG9jVHlwZUlkOiBET0NfVFlQRV9JRCxcbiAgICAgICAgICAgICAgICAgICAgcGhyYXNlOiAnS2FzIGxhYWRpZGEgWE1MIChTV0VEKSBmYWlsPycsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkVhcnZlU3dlZFhNTCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBFVkVOVFNbNl0ubmFtZVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuRWFydmUsIHtcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgZG9jVHlwZUlkOiBET0NfVFlQRV9JRCxcbiAgICAgICAgICAgICAgICAgICAgcGhyYXNlOiAnS2FzIGxhYWRpZGEgWE1MIChTRUIpIGZhaWw/JyxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnRuRWFydmVTZWJYTUwnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogRVZFTlRTWzVdLm5hbWVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0bkVhcnZlLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGlja0hhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogRE9DX1RZUEVfSUQsXG4gICAgICAgICAgICAgICAgICAgIHBocmFzZTogJ0thcyBsYWFkaWRhIFhNTCBmYWlsPycsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0bkVhcnZlWE1MJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEVWRU5UU1s0XS5uYW1lXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdG5FYXJ2ZSwge1xuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2tIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IERPQ19UWVBFX0lELFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5FYXJ2ZU9tbml2YScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBFVkVOVFNbM10ubmFtZVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnRuRW1haWwsIHtcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5vbkNsaWNrSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgZG9jVHlwZUlkOiBET0NfVFlQRV9JRCxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiAnYnRuRW1haWwnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogRVZFTlRTWzJdLm5hbWVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ0blByaW50LCB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGlja0hhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogRE9DX1RZUEVfSUQsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0blByaW50JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEVWRU5UU1sxXS5uYW1lXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdG5TZXR0aW5ncywge1xuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5OiBzZWxmLnByb3BzLmhpc3RvcnkgPyBzZWxmLnByb3BzLmhpc3RvcnkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBkb2NUeXBlSWQ6IERPQ19UWVBFX0lELFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2tIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5TZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBFVkVOVFNbMF0ubmFtZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9oYW5kbGVyINC00LvRjyDRgdC+0LHRi9GC0LjRjyDQutC70LjQuiDQvdCwINC60L3QvtC/0LrQsNGFINC/0LDQvdC10LvQuFxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbkNsaWNrSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsaWNrSGFuZGxlcihldmVudCwgc2Vpc3VnYSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBpZHMgPSBuZXcgU2V0KCk7IC8vINGB0Y7QtNCwINC/0LjRiNC10Lwg0LjQtCDRgdGH0LXRgtC+0LwsINC60L7RgtC+0YDRi9C1INC/0L7QtCDQvtCx0YDQsNCx0L7RgtC60YNcblxuICAgICAgICAgICAgdmFyIERvYyA9IHRoaXMucmVmc1sncmVnaXN0ZXInXTtcblxuICAgICAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRVZFTlRTWzBdLm5hbWU6XG4gICAgICAgICAgICAgICAgICAgIC8v0LTQtdC70LDQtdC8INGA0LXQtNCw0LnRgNC10LrRgiDQvdCwINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycgKyB0aGlzLnByb3BzLm1vZHVsZSArICcvY29uZmlnLycgKyBEb2NDb250ZXh0LnVzZXJEYXRhLmFzdXR1c0lkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFVkVOVFNbMV0ubmFtZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJpbnRcblxuICAgICAgICAgICAgICAgICAgICAvLyDQsdGD0LTQtdGCINCy0YvQstC10LTQtdC90L4g0L3QsCDQv9C10YfQsNGC0Ywg0LLRi9Cx0YDQsNC90L3Ri9C1INC4INGC0L7Qu9GM0LrQviDQtNC70Y8g0L/QtdGH0LDRgtC4INGB0YfQtdGC0LBcbiAgICAgICAgICAgICAgICAgICAgRG9jLmdyaWREYXRhLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5zZWxlY3QgJiYgcm93Lmthc19wYWJlcmlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0LLRi9Cx0YDQsNC90L4g0LTQu9GPINC/0LXRh9Cw0YLQuFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5hZGQocm93LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vINC60L7QvdCy0LXRgNGC0LDRhtC40Y8g0LIg0LzQsNGB0YHQuNCyXG4gICAgICAgICAgICAgICAgICAgIGlkcyA9IEFycmF5LmZyb20oaWRzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ0xlaWRzaW4gJyArIGlkcy5sZW5ndGggKyAnIGFydmVpZCBwcmludGltaXNla3MnLCAvLyDRgdGC0YDQvtC60LAg0LjQt9Cy0LXRidC10L3QuNC5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdvaydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9tdWx0aXBsZV9wcmludC8nICsgRE9DX1RZUEVfSUQgKyAnLycgKyBEb2NDb250ZXh0LnVzZXJEYXRhLnV1aWQgKyAnLycgKyBpZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbignJyArIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdNaXR0ZSDDvGh0ZWdpIGFydmUgbGVpZG51bScsIC8vINGB0YLRgNC+0LrQsCDQuNC30LLQtdGJ0LXQvdC40LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVWRU5UU1syXS5uYW1lOlxuICAgICAgICAgICAgICAgICAgICAvL2VtYWlsc1xuXG4gICAgICAgICAgICAgICAgICAgIC8vINCx0YPQtNC10YIg0L7RgtC/0YDQsNCy0LvQtdC90L4g0L3QsCDQv9C+0YfRgtGDICDQstGL0LHRgNCw0L3QvdGL0LUg0Lgg0YLQvtC70YzQutC+INC00LvRjyDRjdC7LtC/0L7Rh9GC0Ysg0YHRh9C10YLQsFxuICAgICAgICAgICAgICAgICAgICBEb2MuZ3JpZERhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93LnNlbGVjdCAmJiByb3cua2FzX2VtYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0LLRi9Cx0YDQsNC90L4g0LTQu9GPINC/0LXRh9Cw0YLQuFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5hZGQocm93LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0LrQvtC90LLQtdGA0YLQsNGG0LjRjyDQsiDQvNCw0YHRgdC40LJcbiAgICAgICAgICAgICAgICAgICAgaWRzID0gQXJyYXkuZnJvbShpZHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnTWl0dGUgw7xodGVnaSBhcnZlIGxlaWRudW0nLCAvLyDRgdGC0YDQvtC60LAg0LjQt9Cy0LXRidC10L3QuNC5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdub3RWYWxpZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L7RgtC/0YDQsNCy0LvRj9C10Lwg0LfQsNC/0YDQvtGBINC90LAg0LLRi9C/0L7Qu9C90LXQvdC40LVcblxuICAgICAgICAgICAgICAgICAgICAgICAgRG9jLmZldGNoRGF0YSgnZW1haWwnLCBpZHMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHsgd2FybmluZzogJ0tva2t1IHNhYWRldHVkIGFydmVpZCBlbWFpbGdhOiAnICsgZGF0YS5yZXN1bHQsIHdhcm5pbmdUeXBlOiAnb2snIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2VtYWlsIGVycm9yJywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7IHdhcm5pbmc6ICdUZWtraXMgdmlnYTogJyArIGRhdGEuZXJyb3JfbWVzc2FnZSwgd2FybmluZ1R5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZW1haWwgZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHsgd2FybmluZzogJ1Rla2tpcyB2aWdhOiAnICsgZXJyb3IsIHdhcm5pbmdUeXBlOiAnZXJyb3InIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgRVZFTlRTWzNdLm5hbWU6XG4gICAgICAgICAgICAgICAgICAgIC8vZS1hcnZlZFxuXG4gICAgICAgICAgICAgICAgICAgIC8vINCx0YPQtNC10YIg0L7RgtC/0YDQsNCy0LvQtdC90L4g0L3QsCDQv9C+0YfRgtGDICDQstGL0LHRgNCw0L3QvdGL0LUg0Lgg0YLQvtC70YzQutC+INC00LvRjyDRjdC7LtC/0L7Rh9GC0Ysg0YHRh9C10YLQsFxuICAgICAgICAgICAgICAgICAgICBEb2MuZ3JpZERhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93LnNlbGVjdCAmJiByb3cua2FzX2VhcnZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCy0YvQsdGA0LDQvdC+INC00LvRjyDQv9C10YfQsNGC0LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMuYWRkKHJvdy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyDQutC+0L3QstC10YDRgtCw0YbQuNGPINCyINC80LDRgdGB0LjQslxuICAgICAgICAgICAgICAgICAgICBpZHMgPSBBcnJheS5mcm9tKGlkcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdNaXR0ZSDDvGh0ZWdpIGFydmUgbGVpZG51bScsIC8vINGB0YLRgNC+0LrQsCDQuNC30LLQtdGJ0LXQvdC40LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQvtGC0L/RgNCw0LLQu9GP0LXQvCDQt9Cw0L/RgNC+0YEg0L3QsCDQstGL0L/QvtC70L3QtdC90LjQtVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBEb2MuZmV0Y2hEYXRhKCdlLWFydmVkJywgaWRzKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgJ3Jlc3VsdCcgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoeyB3YXJuaW5nOiAnS29ra3Ugc2FhZGV0dWQgYXJ2ZWlkICA6ICcgKyBkYXRhLnJlc3VsdCwgd2FybmluZ1R5cGU6ICdvaycgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yX21lc3NhZ2UgPSAnVGVra2lzIHZpZ2EnICsgKGRhdGEgJiYgJ2Vycm9yX21lc3NhZ2UnIGluIGRhdGEuZXJyb3JfbWVzc2FnZSAmJiBkYXRhLmVycm9yX21lc3NhZ2UpID8gZGF0YS5lcnJvcl9tZXNzYWdlIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7IHdhcm5pbmc6ICcnICsgZXJyb3JfbWVzc2FnZSwgd2FybmluZ1R5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvcl9tZXNzYWdlID0gJ1Rla2tpcyB2aWdhJyArIGVyci5UeXBlRXJyb3IgPyBlcnIuVHlwZUVycm9yIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHsgd2FybmluZzogJycgKyBlcnJvcl9tZXNzYWdlLCB3YXJuaW5nVHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFVkVOVFNbNF0ubmFtZTpcbiAgICAgICAgICAgICAgICAgICAgLy9lLWFydmVkIChYTUwpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0LHRg9C00LXRgiDQvtGC0L/RgNCw0LLQu9C10L3QviDQvdCwINC/0L7Rh9GC0YMgINCy0YvQsdGA0LDQvdC90YvQtSDQuCDRgtC+0LvRjNC60L4g0LTQu9GPINGN0Lsu0L/QvtGH0YLRiyDRgdGH0LXRgtCwXG4gICAgICAgICAgICAgICAgICAgIERvYy5ncmlkRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3cuc2VsZWN0ICYmIHJvdy5rYXNfZWFydmVkICYmIE51bWJlcihyb3cuc3VtbWEpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCy0YvQsdGA0LDQvdC+INC00LvRjyDQv9C10YfQsNGC0LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMuYWRkKHJvdy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyDQutC+0L3QstC10YDRgtCw0YbQuNGPINCyINC80LDRgdGB0LjQslxuICAgICAgICAgICAgICAgICAgICBpZHMgPSBBcnJheS5mcm9tKGlkcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdNaXR0ZSDDvGh0ZWdpIGFydmUgbGVpZG51bScsIC8vINGB0YLRgNC+0LrQsCDQuNC30LLQtdGJ0LXQvdC40LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQvtGC0L/RgNCw0LLQu9GP0LXQvCDQt9Cw0L/RgNC+0YEg0L3QsCDQstGL0L/QvtC70L3QtdC90LjQtVxuICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnTGVpZHNpbiAnICsgaWRzLmxlbmd0aCArICcgYXJ2ZWlkJywgLy8g0YHRgtGA0L7QutCwINC40LfQstC10YnQtdC90LjQuVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnb2snXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF91cmwgPSAnL2UtYXJ2ZWQvJyArIERvY0NvbnRleHQudXNlckRhdGEudXVpZCArICcvJyArIGlkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKCcnICsgX3VybCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVWRU5UU1s1XS5uYW1lOlxuICAgICAgICAgICAgICAgICAgICAvL2UtYXJ2ZWQgU0VCIChYTUwpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0LHRg9C00LXRgiDRgdGE0L7RgNC80LjRgNC+0LLQsNC9INGE0LDQudC7INC00LvRjyDQvtGC0L/RgNCw0LLQutC4INCyINCx0LDQvdC6INCh0JXQkVxuICAgICAgICAgICAgICAgICAgICBEb2MuZ3JpZERhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93Lmthc19lYXJ2ZWQgJiYgcm93LnBhbmsgJiYgcm93LnBhbmsgPT0gJ1NFQicgJiYgcm93LnNlbGVjdCAmJiBOdW1iZXIocm93LnN1bW1hKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQstGL0LHRgNCw0L3QviDQtNC70Y8g0L/QtdGH0LDRgtC4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzLmFkZChyb3cuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8g0LrQvtC90LLQtdGA0YLQsNGG0LjRjyDQsiDQvNCw0YHRgdC40LJcbiAgICAgICAgICAgICAgICAgICAgaWRzID0gQXJyYXkuZnJvbShpZHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnTWl0dGUgw7xodGVnaSBhcnZlIGxlaWRudW0nLCAvLyDRgdGC0YDQvtC60LAg0LjQt9Cy0LXRidC10L3QuNC5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ1R5cGU6ICdub3RWYWxpZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L7RgtC/0YDQsNCy0LvRj9C10Lwg0LfQsNC/0YDQvtGBINC90LAg0LLRi9C/0L7Qu9C90LXQvdC40LVcbiAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ0xlaWRzaW4gJyArIGlkcy5sZW5ndGggKyAnIGFydmVpZCcsIC8vINGB0YLRgNC+0LrQsCDQuNC30LLQtdGJ0LXQvdC40LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ29rJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdXJsMiA9ICcvZS1hcnZlZC9zZWIvJyArIERvY0NvbnRleHQudXNlckRhdGEudXVpZCArICcvJyArIGlkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKCcnICsgX3VybDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRVZFTlRTWzZdLm5hbWU6XG4gICAgICAgICAgICAgICAgICAgIC8vZS1hcnZlZCBTd2VkIChYTUwpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0LHRg9C00LXRgiDRgdGE0L7RgNC80LjRgNC+0LLQsNC9INGE0LDQudC7INC00LvRjyDQvtGC0L/RgNCw0LLQutC4INCyINCx0LDQvdC6IFNXRURcbiAgICAgICAgICAgICAgICAgICAgRG9jLmdyaWREYXRhLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5rYXNfZWFydmVkICYmIHJvdy5zZWxlY3QgJiYgcm93LnBhbmsgJiYgcm93LnBhbmsgPT0gJ1NXRUQnICYmIE51bWJlcihyb3cuc3VtbWEpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICYmIHJvdy5rYXNfc3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCy0YvQsdGA0LDQvdC+INC00LvRjyDQv9C10YfQsNGC0LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMuYWRkKHJvdy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyDQutC+0L3QstC10YDRgtCw0YbQuNGPINCyINC80LDRgdGB0LjQslxuICAgICAgICAgICAgICAgICAgICBpZHMgPSBBcnJheS5mcm9tKGlkcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEb2Muc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6ICdNaXR0ZSDDvGh0ZWdpIGFydmUgbGVpZG51bScsIC8vINGB0YLRgNC+0LrQsCDQuNC30LLQtdGJ0LXQvdC40LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQvtGC0L/RgNCw0LLQu9GP0LXQvCDQt9Cw0L/RgNC+0YEg0L3QsCDQstGL0L/QvtC70L3QtdC90LjQtVxuICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiAnTGVpZHNpbiAnICsgaWRzLmxlbmd0aCArICcgYXJ2ZWlkJywgLy8g0YHRgtGA0L7QutCwINC40LfQstC10YnQtdC90LjQuVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnb2snXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF91cmwzID0gJy9lLWFydmVkL3N3ZWQvJyArIERvY0NvbnRleHQudXNlckRhdGEudXVpZCArICcvJyArIGlkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKCcnICsgX3VybDMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRVZFTlRTWzddLm5hbWU6XG4gICAgICAgICAgICAgICAgICAgIC8v0YHQv9C40YHQsNC90LjQtSDQvNCw0LvQvtCy0LXRgNC+0Y/RgtC90YvRhVxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAvLyDQsdGD0LTQtdGCINGB0YTQvtGA0LzQuNGA0L7QstCw0L0g0YTQsNC50Lsg0LTQu9GPINC+0YLQv9GA0LDQstC60Lgg0LIg0LHQsNC90LogU1dFRFxuICAgICAgICAgICAgICAgICAgICBEb2MuZ3JpZERhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93LmViYXRvZW5hb2xpc2VkID09ICdKYWgnICYmIE51bWJlcihyb3cuamFhaykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJiYgcm93Lmthc19zd2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0LLRi9Cx0YDQsNC90L4g0LTQu9GPINC/0LXRh9Cw0YLQuFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5hZGQocm93LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vINC60L7QvdCy0LXRgNGC0LDRhtC40Y8g0LIg0LzQsNGB0YHQuNCyXG4gICAgICAgICAgICAgICAgICAgIGlkcyA9IEFycmF5LmZyb20oaWRzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ01pdHRlIMO8aHRlZ2kgYXJ2ZSBsZWlkbnVtJywgLy8g0YHRgtGA0L7QutCwINC40LfQstC10YnQtdC90LjQuVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdUeXBlOiAnbm90VmFsaWQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIERvYy5mZXRjaERhdGEoJ2NhbGMvZWJhdG9lbmFvbGlzZWQnLCB7IGRvY3M6IGlkcywgc2Vpc3VnYTogc2Vpc3VnYSB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAndGFzayBzYWFkZXR1ZCB0XFx4RTRpdG1pc2VsZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7IHdhcm5pbmc6ICcnICsgbWVzc2FnZSwgd2FybmluZ1R5cGU6ICdvaycgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR1bGVtdXNlZCA9IGRhdGEuZGF0YS5yZXN1bHQudHVsZW11c2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQvtGC0LrRgNGL0LLQsNC10Lwg0L7RgtGH0LXRglxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyBpc1JlcG9ydDogdHJ1ZSwgdHh0UmVwb3J0OiB0dWxlbXVzZWQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3JfbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jLnNldFN0YXRlKHsgd2FybmluZzogJ1Rla2tpcyB2aWdhOiAnICsgZGF0YS5lcnJvcl9tZXNzYWdlLCB3YXJuaW5nVHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvYy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZzogJ0tva2t1IGFydmVzdGF0dWQgOiAnICsgZGF0YS5yZXN1bHQgKyAnLCAnICsgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nVHlwZTogJ25vdFZhbGlkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERvY3VtZW50cztcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnRzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvZG9jcy9hcnYvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyNzVcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgc3R5bGVzID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLXN0eWxlcycpLFxuICAgIEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2J1dHRvbi1yZWdpc3Rlci5qc3gnKSxcbiAgICBJQ09OID0gJ3NldHRpbmdzJztcblxudmFyIEJ1dHRvblNldHRpbmdzID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJ1dHRvblNldHRpbmdzLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uU2V0dGluZ3MocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvblNldHRpbmdzKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQnV0dG9uU2V0dGluZ3MuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25TZXR0aW5ncykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvblNldHRpbmdzLCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogJ2J0blNldHRpbmdzJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5idXR0b24sXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgcmVmOiAnaW1hZ2UnLCBzcmM6IHN0eWxlcy5pY29uc1tJQ09OXSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b25TZXR0aW5ncztcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkJ1dHRvblNldHRpbmdzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2hvdzogdHJ1ZSxcbiAgICB2YWx1ZTogJ1NldHRpbmdzJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b25TZXR0aW5ncztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2NvbXBvbmVudHMvYnV0dG9uLXJlZ2lzdGVyL2J1dHRvbi1zZXR0aW5ncy9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDI3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuLi9idXR0b24tcmVnaXN0ZXItc3R5bGVzJyksXG4gICAgQnV0dG9uID0gcmVxdWlyZSgnLi4vYnV0dG9uLXJlZ2lzdGVyLmpzeCcpLFxuICAgIE1vZGFsUGFnZSA9IHJlcXVpcmUoJy4vLi4vLi4vbW9kYWxwYWdlL21vZGFsUGFnZS5qc3gnKSxcbiAgICBJQ09OID0gJ21haWwnO1xuXG52YXIgQnV0dG9uUmVnaXN0ZXJFbWFpbCA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhCdXR0b25SZWdpc3RlckVtYWlsLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyDQutC90L7Qv9C60LAg0YHQvtC30LTQsNC90LjRjyDQtNC+0LrRg9C80LXQvdGC0LAg0LIg0YDQtdCz0LjRgdGC0YDQsNGFXG4gICAgZnVuY3Rpb24gQnV0dG9uUmVnaXN0ZXJFbWFpbChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uUmVnaXN0ZXJFbWFpbCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1dHRvblJlZ2lzdGVyRW1haWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdXR0b25SZWdpc3RlckVtYWlsKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvd01vZGFsOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5tb2RhbFBhZ2VDbGljayA9IF90aGlzLm1vZGFsUGFnZUNsaWNrLmJpbmQoX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDRgdC+0LHRi9GC0LjRjyDQutC70LjQuiwg0L7RgtC60YDQvtC10YIg0LzQvtC00LDQu9GM0L3QvtC1INC+0LrQvdC+XHJcbiAgICAgKiBAcGFyYW0gZVxyXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhCdXR0b25SZWdpc3RlckVtYWlsLCBbe1xuICAgICAgICBrZXk6ICdoYW5kbGVDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDbGljayhlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd01vZGFsOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBwaHJhc2UgPSB0aGlzLnByb3BzLnBocmFzZSA/IHRoaXMucHJvcHMucGhyYXNlIDogJ0thcyBzYWFkYSBFLUFydmUgPyc7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdidG5FbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMucHJvcHMuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5oYW5kbGVDbGljayhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgeyByZWY6ICdpbWFnZScsIHNyYzogc3R5bGVzLmljb25zW0lDT05dIH0pXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBNb2RhbFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiB0aGlzLm1vZGFsUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlTmFtZTogJycgKyB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdGhpcy5zdGF0ZS5zaG93TW9kYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbE9iamVjdHM6IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGhyYXNlXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINC+0LHRgNCw0LHQvtGC0YfQuNC6INC90LAg0YHQvtCx0YvRgtC40LUg0LrQu9C40LrQsCDQvdCwINC60L3QvtC/0LrQuCDQvNC+0LbQsNC70YzQvdC+0LPQviDQvtC60L3QsFxyXG4gICAgICAgICAqIEBwYXJhbSBidG5FdmVudFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb2RhbFBhZ2VDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb2RhbFBhZ2VDbGljayhidG5FdmVudCkge1xuICAgICAgICAgICAgaWYgKGJ0bkV2ZW50ID09PSAnT2snKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dNb2RhbDogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQnV0dG9uUmVnaXN0ZXJFbWFpbDtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbi8qXHJcbkJ1dHRvblJlZ2lzdGVyUHJpbnQucHJvcFR5cGVzID0ge1xyXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxyXG59XHJcbiovXG5cbkJ1dHRvblJlZ2lzdGVyRW1haWwuZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzaG93OiB0cnVlLFxuICAgIHZhbHVlOiAnRW1haWwnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvblJlZ2lzdGVyRW1haWw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tZWFydmUvaW5kZXguanN4XG4vLyBtb2R1bGUgaWQgPSAyNzdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiXCJ1c2Ugc3RyaWN0XCI7Ly8gd2lsbCBjYWxjdWxhdGUgc3VtIG9mIHNvbWUgZmllbGRcbnZhciBnZXRTdW09ZnVuY3Rpb24gZ2V0U3VtKGRhdGEsY29sdW1uRmllbGQpe3ZhciB0b3RhbD0wO2lmKGRhdGEmJmRhdGEubGVuZ3RoJiZkYXRhWzBdW2NvbHVtbkZpZWxkXSl7ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7cmV0dXJuIHRvdGFsPXRvdGFsK051bWJlcihyb3dbY29sdW1uRmllbGRdKTt9KTt9cmV0dXJuIHRvdGFsLnRvRml4ZWQoMik7fTttb2R1bGUuZXhwb3J0cz1nZXRTdW07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9saWJzL2dldFN1bS5qc1xuLy8gbW9kdWxlIGlkID0gMjc4XG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17Z3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJScsdGQ6e2JvcmRlcjonMXB4IHNvbGlkIGxpZ2h0R3JleScsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9fSxoZWFkZXJUYWJsZTp7d2lkdGg6JzEwMCUnfSxncmlkQ29udGFpbmVyOnt3aWR0aDonMTAwJSd9fSxkb2M6e2hlaWdodDonMTAwJSd9LHRvdGFsOnt3aWR0aDonYXV0byd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvYXJ2L2Fydi1yZWdpc3Rlci1zdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBEb2N1bWVudFRlbXBsYXRlID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnRUZW1wbGF0ZS9pbmRleC5qc3gnKSxcbiAgICBJbnB1dFRleHQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2lucHV0LXRleHQvaW5wdXQtdGV4dC5qc3gnKSxcbiAgICBJbnB1dERhdGUgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2lucHV0LWRhdGUvaW5wdXQtZGF0ZS5qc3gnKSxcbiAgICBJbnB1dE51bWJlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvaW5wdXQtbnVtYmVyL2lucHV0LW51bWJlci5qc3gnKSxcbiAgICBTZWxlY3QgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuanN4JyksXG4gICAgU2VsZWN0RGF0YSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvc2VsZWN0LWRhdGEvc2VsZWN0LWRhdGEuanN4JyksXG4gICAgVGV4dEFyZWEgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3RleHQtYXJlYS90ZXh0LWFyZWEuanN4JyksXG4gICAgRGF0YUdyaWQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2RhdGEtZ3JpZC9kYXRhLWdyaWQuanN4JyksXG4gICAgcmVsYXRlZERvY3VtZW50cyA9IHJlcXVpcmUoJy4uLy4uLy4uL21peGluL3JlbGF0ZWREb2N1bWVudHMuanN4JyksXG4gICAgTW9kYWxQYWdlID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy9tb2RhbHBhZ2UvbW9kYWxQYWdlLmpzeCcpLFxuICAgIEJ1dHRvbkVkaXQgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL2J1dHRvbi1yZWdpc3Rlci9idXR0b24tcmVnaXN0ZXItZWRpdC9idXR0b24tcmVnaXN0ZXItZWRpdC5qc3gnKSxcbiAgICBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcycpO1xudmFyIFJvdW5kID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9saWJzL3JvdW5kX3RvXzInKTtcbnZhciBMb2FkaW5nID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9jb21wb25lbnRzL2xvYWRpbmcvaW5kZXguanN4Jyk7XG5cbnZhciBEb2NDb250ZXh0ID0gcmVxdWlyZSgnLi8uLi8uLi8uLi9kb2MtY29udGV4dCcpO1xudmFyIExJQl9PQkpTID0gcmVxdWlyZSgnLi8uLi8uLi8uLi8uLi9jb25maWcvY29uc3RhbnRzJykuQU5ETUVELkxJQl9PQkpTO1xuXG52YXIgTGVwaW5nID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExlcGluZywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTGVwaW5nKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMZXBpbmcpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChMZXBpbmcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMZXBpbmcpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsb2FkZWREYXRhOiBmYWxzZSxcbiAgICAgICAgICAgIG1vZHVsZTogcHJvcHMubW9kdWxlID8gcHJvcHMubW9kdWxlIDogRG9jQ29udGV4dC5tb2R1bGUsXG4gICAgICAgICAgICBkb2NJZDogcHJvcHMuZG9jSWQgPyBwcm9wcy5kb2NJZCA6IE51bWJlcihwcm9wcy5tYXRjaC5wYXJhbXMuZG9jSWQpXG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuY3JlYXRlR3JpZFJvdyA9IF90aGlzLmNyZWF0ZUdyaWRSb3cuYmluZChfdGhpcyk7XG5cbiAgICAgICAgX3RoaXMucmVuZGVyZXIgPSBfdGhpcy5yZW5kZXJlci5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuZ3JpZFZhbGlkYXRlRmllbGRzID0gX3RoaXMuZ3JpZFZhbGlkYXRlRmllbGRzLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5idG5FZGl0QXN1dHVzQ2xpY2sgPSBfdGhpcy5idG5FZGl0QXN1dHVzQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIF90aGlzLnBhZ2VzID0gW3sgcGFnZU5hbWU6ICdBbmRtZWQnLCBkb2NUeXBlSWQ6ICdBTkRNRUQnIH1dO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTGVwaW5nLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRG9jdW1lbnRUZW1wbGF0ZSwgeyBkb2NJZDogdGhpcy5zdGF0ZS5kb2NJZCxcbiAgICAgICAgICAgICAgICByZWY6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogJ0FORE1FRCcsXG4gICAgICAgICAgICAgICAgbW9kdWxlOiB0aGlzLnByb3BzLm1vZHVsZSxcbiAgICAgICAgICAgICAgICBpbml0RGF0YTogdGhpcy5wcm9wcy5pbml0RGF0YSA/IHRoaXMucHJvcHMuaW5pdERhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICByZWxvYWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFnZXM6IHRoaXMucGFnZXMsXG4gICAgICAgICAgICAgICAgbGliczogTElCX09CSlMsXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgICAgICAgY3JlYXRlR3JpZFJvdzogdGhpcy5jcmVhdGVHcmlkUm93LFxuICAgICAgICAgICAgICAgIGdyaWRWYWxpZGF0b3I6IHRoaXMuZ3JpZFZhbGlkYXRlRmllbGRzLFxuICAgICAgICAgICAgICAgIGZvY3VzRWxlbWVudDogJ2lucHV0LWtwdidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICrQktC10YDQvdC10YIg0LrQsNGB0YLQvtC80L3Ri9C1INC60L7QvNC/0L7QvdC10L3RgtGLINC00L7QutGD0LzQtdC90YLQsFxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXJlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJlcihzZWxmKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYgfHwgIXNlbGYuZG9jRGF0YSB8fCAhc2VsZi5kb2NEYXRhLmtwdiB8fCBzZWxmLmxpYnNbJ2xlcGluZyddLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywgeyBsYWJlbDogJ0xhYWRpbWluZS4uLicgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDRhNC+0YDQvNC40YDRg9C10Lwg0LfQsNCy0LjRgdC40LzQvtGB0YLQuFxuICAgICAgICAgICAgaWYgKHNlbGYuZG9jRGF0YS5yZWxhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZWxhdGVkRG9jdW1lbnRzKHNlbGYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaXNFZGl0TW9kZSA9IHNlbGYuc3RhdGUuZWRpdGVkLFxuICAgICAgICAgICAgICAgIGdyaWREYXRhID0gc2VsZi5kb2NEYXRhLmdyaWREYXRhLFxuICAgICAgICAgICAgICAgIGdyaWRDb2x1bW5zID0gc2VsZi5kb2NEYXRhLmdyaWRDb25maWc7XG5cbiAgICAgICAgICAgIC8vINGE0LjQu9GM0YLRgNGD0LXQvCDQtNC+0LPQvtCy0L7RgNGLLCDRgtC+0LvRjNC60L4g0LLQu9Cw0LTQtdC70LXRhlxuICAgICAgICAgICAgdmFyIGxlcGluZ3VkID0gc2VsZi5saWJzWydsZXBpbmcnXS5maWx0ZXIoZnVuY3Rpb24gKGxlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBsZXBpbmcudXNlcl9pZCA9PSBEb2NDb250ZXh0LnVzZXJEYXRhLnVzZXJJZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyDQtdGB0LvQuCDQtNC+0LPQvtCy0L7RgCDRgtC+0LvRjNC60L4g0L7QtNC40L0sINGC0L4g0YHRgtCw0LLQuNC8INC10LPQviDRgdGA0LDQt9GDXG4gICAgICAgICAgICBpZiAobGVwaW5ndWQubGVuZ3RoID09IDEgJiYgIXNlbGYuZG9jRGF0YS5sZXBpbmdpZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuZG9jRGF0YS5sZXBpbmdpZCA9IGxlcGluZ3VkWzBdLmlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDQtdGB0LvQuCDRg9C60LDQt9Cw0L0g0LTQvtCz0L7QstC+0YBcbiAgICAgICAgICAgIGlmIChzZWxmLmRvY0RhdGEubGVwaW5naWQpIHtcbiAgICAgICAgICAgICAgICBsZXBpbmd1ZC5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy5pZCA9PSBzZWxmLmRvY0RhdGEubGVwaW5naWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZG9jRGF0YS5hc3V0dXMgPSByb3cuYXN1dHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kb2NEYXRhLm9iamVrdCA9IHJvdy5uaW1ldHVzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZERhdGEubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQv9C40YjQtdC8INGD0YHQu9GD0LPQuFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINC10YHQu9C4INC90LXRgiDRg9GB0LvRg9CzLCDQtNC+0LHQsNCy0LjQvCDQuNGFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93Lm5vbXMuZm9yRWFjaChmdW5jdGlvbiAobm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub21pZDogbm9tLm5vbV9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvZ3VzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWVsX2tvZ3VzOiBub20uZWVsX2tvZ3VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGluZDogbm9tLmhpbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrb29kOiBub20ua29vZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pbWV0dXM6IG5vbS5uaW1ldHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2MgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dERhdGUsIHsgdGl0bGU6ICdLdXVwXFx4RTRldicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrcHYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5kb2NEYXRhLmtwdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnaW5wdXQta3B2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAhc2VsZi5kb2NEYXRhLmlkID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdGl0bGU6ICdMZXBpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbGVwaW5naWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWJzOiAnbGVwaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5sZXBpbmdpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbGVwaW5ndWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU3RyaW5nKHNlbGYuZG9jRGF0YS5vYmpla3QpIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogc2VsZi5oYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbElkOiAnaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdzZWxlY3QtbGVwaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFpc0VkaXRNb2RlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyByZWY6ICdpbnB1dC1hc3V0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0tvcnRlcmlvbWFuaWsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYXN1dHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5hc3V0dXMgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRUZXh0LCB7IHJlZjogJ2lucHV0LW9iamVrdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT2JqZWt0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ29iamVrdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLmRvY0RhdGEub2JqZWt0IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRBcmVhLCB7IHRpdGxlOiAnTVxceEU0cmt1c2VkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbXV1ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAndGV4dGFyZWEtbXV1ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYuZG9jRGF0YS5tdXVkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAhaXNFZGl0TW9kZSB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGFHcmlkLCB7IHNvdXJjZTogJ2RldGFpbHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWREYXRhOiBncmlkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkQ29sdW1uczogZ3JpZENvbHVtbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Rvb2xCYXI6IGlzRWRpdE1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlR3JpZFJvdzogdGhpcy5oYW5kbGVHcmlkUm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUdyaWRCdG5DbGljazogc2VsZi5oYW5kbGVHcmlkQnRuQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6ICFpc0VkaXRNb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuZ3JpZC5oZWFkZXJUYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdkYXRhLWdyaWQnIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUuZ3JpZFJvd0VkaXQgPyB0aGlzLmNyZWF0ZUdyaWRSb3coc2VsZikgOiBudWxsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqINCh0L7Qt9C00LDRgdGCINC60L7QvNC/0L7QvdC10YIg0YHRgtGA0L7QutC4INCz0YDQuNC00LBcclxuICAgICAgICAgKiBAcmV0dXJucyB7WE1MfVxyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVHcmlkUm93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUdyaWRSb3coc2VsZikge1xuXG4gICAgICAgICAgICB2YXIgcm93ID0gc2VsZi5ncmlkUm93RGF0YSA/IHNlbGYuZ3JpZFJvd0RhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZU1lc3NhZ2UgPSAnJyxcbiAgICAgICAgICAgICAgICAvLyBzZWxmLnN0YXRlLndhcm5pbmdcbiAgICAgICAgICAgIGJ1dHRvbk9rUmVhZE9ubHkgPSB2YWxpZGF0ZU1lc3NhZ2UubGVuZ3RoID4gMCB8fCAhc2VsZi5zdGF0ZS5jaGVja2VkLFxuICAgICAgICAgICAgICAgIG1vZGFsT2JqZWN0cyA9IFsnYnRuT2snLCAnYnRuQ2FuY2VsJ107XG5cbiAgICAgICAgICAgIGlmIChidXR0b25Pa1JlYWRPbmx5KSB7XG4gICAgICAgICAgICAgICAgLy8g0YPQsdC10YDQtdC8INC60L3QvtC/0LrRgyDQntC6XG4gICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFyb3cpIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsKTtcblxuICAgICAgICAgICAgdmFyIGdyaWRSb3dJbnB1dFN0eWxlID0gc3R5bGVzLmdyaWRSb3dJbnB1dDtcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICcubW9kYWxQYWdlJyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIE1vZGFsUGFnZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxPYmplY3RzOiBtb2RhbE9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdtb2RhbHBhZ2UtZ3JpZC1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsUGFnZUJ0bkNsaWNrOiBzZWxmLm1vZGFsUGFnZUNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxQYWdlTmFtZTogJ1JlYSBsaXNhbWluZSAvIHBhcmFuZGFtaW5lJyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJlZjogJ2dyaWQtcm93LWNvbnRhaW5lcicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUuZ3JpZFdhcm5pbmcubGVuZ3RoID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLmdyaWRXYXJuaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0VGV4dCwgeyB0aXRsZTogJ1RlZW51cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbm9taWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93Lm5pbWV0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogZ3JpZFJvd0lucHV0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICdub21pZCcgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jUm93IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NDb2x1bW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dE51bWJlciwgeyB0aXRsZTogJ0tvZ3VzICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAna29ndXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE51bWJlcihyb3cua29ndXMgPyByb3cua29ndXMgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmREYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ2tvZ3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46ICdbMC05XXsxMH0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGdyaWRSb3dJbnB1dFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHNlbGYuaGFuZGxlR3JpZFJvd0lucHV0IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY1JvdyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZG9jQ29sdW1uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXROdW1iZXIsIHsgdGl0bGU6ICdFZWxtaXNlIGtvZ3VzICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZWVsX2tvZ3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIocm93LmVlbF9rb2d1cyA/IHJvdy5lZWxfa29ndXMgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGdyaWRSb3dJbnB1dFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAnZWVsX2tvZ3VzJyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb2NSb3cgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvY0NvbHVtbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TnVtYmVyLCB7IHRpdGxlOiAnVmFoZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndmFoZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LmtvZ3VzID8gTnVtYmVyKHJvdy5rb2d1cykgLSBOdW1iZXIocm93LmVlbF9rb2d1cyA/IHJvdy5lZWxfa29ndXMgOiAwKSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBncmlkUm93SW5wdXRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogJ3ZhaGUnIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZU1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiDQstCw0LvQuNC00LDRgtC+0YAg0LTQu9GPINGB0YLRgNC+0LrQuCDQs9GA0LjQtNCwXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ3JpZFZhbGlkYXRlRmllbGRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdyaWRWYWxpZGF0ZUZpZWxkcygpIHtcbiAgICAgICAgICAgIHZhciB3YXJuaW5nID0gJyc7XG4gICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5yZWZzWydkb2N1bWVudCddO1xuICAgICAgICAgICAgaWYgKGRvYyAmJiBkb2MuZ3JpZFJvd0RhdGEpIHtcblxuICAgICAgICAgICAgICAgIC8vINGC0L7Qu9GM0LrQviDQv9C+0YHQu9C1INC/0YDQvtCy0LXRgNC60Lgg0YTQvtGA0LzRiyDQvdCwINCy0LDQu9C40LTQvdC+0YHRgtGMXG5cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGlmIChkb2MuZ3JpZFJvd0RhdGEgJiYgIWRvYy5ncmlkUm93RGF0YVsnbm9taWQnXSkgd2FybmluZyA9IHdhcm5pbmcgKyAnINCa0L7QtCDQvtC/0LXRgNCw0YbQuNC4JztcbiAgICAgICAgICAgICAgICBpZiAoIWRvYy5ncmlkUm93RGF0YVsna29ndXMnXSkgd2FybmluZyA9IHdhcm5pbmcgKyAnIEtvZ3VzJztcbiAgICAgICAgICAgICAgICBpZiAoIWRvYy5ncmlkUm93RGF0YVsnbm9taWQnXSkgd2FybmluZyA9IHdhcm5pbmcgKyAnIFRlZW51cyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2FybmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINC+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPINC60LvQuNGB0LrQsCDQvdCwINC60L3QvtC/0LrQtSDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC60L7QvdGC0YAt0LDQs9C10L3RgtCwXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2J0bkVkaXRBc3V0dXNDbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5FZGl0QXN1dHVzQ2xpY2soKSB7XG4gICAgICAgICAgICB2YXIgZG9jQXN1dHVzSWQgPSB0aGlzLnJlZnNbJ2RvY3VtZW50J10uZG9jRGF0YS5hc3V0dXNpZDtcblxuICAgICAgICAgICAgLy8g0L7RgdGD0YnQtdGB0YLQstC40YIg0L/QtdGA0LXRhdC+0LQg0L3QsCDQutCw0YDRgtC+0YfQutGDINC60L7QvdGC0YAt0LDQs9C10L3RgtCwXG4gICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycgKyB0aGlzLnByb3BzLm1vZHVsZSArICcvYXN1dHVzZWQvJyArIGRvY0FzdXR1c0lkKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMZXBpbmc7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5MZXBpbmcucHJvcFR5cGVzID0ge1xuICAgIGRvY0lkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGluaXREYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHVzZXJEYXRhOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5MZXBpbmcuZGVmYXVsdFByb3BzID0ge1xuICAgIHBhcmFtczogeyBkb2NJZDogMCB9LFxuICAgIGluaXREYXRhOiB7fSxcbiAgICB1c2VyRGF0YToge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGVwaW5nO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZnJvbnRlbmQvZG9jcy9tb29kdS9kb2N1bWVudC9pbmRleC5qc3hcbi8vIG1vZHVsZSBpZCA9IDI4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCIndXNlIHN0cmljdCc7bW9kdWxlLmV4cG9ydHM9e2RvY1Jvdzp7ZGlzcGxheTonZmxleCcsZmxleERpcmVjdGlvbjoncm93Jy8qXHJcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGJsdWUnXHJcbiovfSxkb2NDb2x1bW46e2Rpc3BsYXk6J2ZsZXgnLGZsZXhEaXJlY3Rpb246J2NvbHVtbicsLypcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgeWVsbG93JyxcclxuKi93aWR0aDonNTAlJ30sZG9jOntkaXNwbGF5OidmbGV4JyxmbGV4RGlyZWN0aW9uOidjb2x1bW4nLypcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYnJvd24nXHJcbiovfSxzdW1tYTp7d2lkdGg6J2F1dG8nfSxncmlkOnttYWluVGFibGU6e3dpZHRoOicxMDAlJ30saGVhZGVyVGFibGU6e3dpZHRoOicxMDAlJ30sZ3JpZENvbnRhaW5lcjp7d2lkdGg6JzEwMCUnfX0sZ3JpZFJvdzp7LypcclxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmxhY2snLFxyXG4qL2JhY2tncm91bmRDb2xvcjond2hpdGUnLHBvc2l0aW9uOidyZWxhdGl2ZScsbWFyZ2luOicxMCUgMzAlIDEwJSAzMCUnLHdpZHRoOidhdXRvJyxvcGFjaXR5OicxJyx0b3A6JzEwMHB4J30sZ3JpZFJvd0lucHV0Ont3aWR0aDonYXV0bycsbWFyZ2luOic1cHggMTBweCd9LGJ0bkVkaXQ6e3dpZHRoOidtaW4tY29udGVudCd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvbW9vZHUvZG9jdW1lbnQvc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyODlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRG9jdW1lbnRSZWdpc3RlciA9IHJlcXVpcmUoJy4vLi4vZG9jdW1lbnRzL2RvY3VtZW50cy5qc3gnKTtcbnZhciBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcycpO1xuXG4vKipcclxuICog0JrQu9Cw0YHRgSDRgNC10LDQu9C40LfRg9C10YIg0LTQvtC60YPQvNC10L3RgiDRgdC/0YDQsNCy0L7Rh9C90LjQutCwINC/0YDQuNC30L3QsNC60L7Qsi5cclxuICovXG5cbnZhciBEb2N1bWVudHMgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoRG9jdW1lbnRzLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBEb2N1bWVudHMocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvY3VtZW50cyk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERvY3VtZW50cy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERvY3VtZW50cykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5yZW5kZXJlciA9IF90aGlzLnJlbmRlcmVyLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRG9jdW1lbnRzLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIERPQ19UWVBFX0lEID0gdGhpcy5wcm9wcy5tb2R1bGUgPT0gJ2thc3V0YWphJyA/ICdJU0lLVV9BTkRNRUQnIDogJ0FORE1FRCc7XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEb2N1bWVudFJlZ2lzdGVyLCB7IGluaXREYXRhOiB0aGlzLnByb3BzLmluaXREYXRhLFxuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnkgPyB0aGlzLnByb3BzLmhpc3RvcnkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IHRoaXMucHJvcHMubW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICByZWY6ICdyZWdpc3RlcicsXG4gICAgICAgICAgICAgICAgICAgIGRvY1R5cGVJZDogRE9DX1RZUEVfSUQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXJlciB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyZXIoc2VsZikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRG9jdW1lbnRzO1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9mcm9udGVuZC9kb2NzL21vb2R1L2luZGV4LmpzeFxuLy8gbW9kdWxlIGlkID0gMjkwXG4vLyBtb2R1bGUgY2h1bmtzID0gNSIsIid1c2Ugc3RyaWN0Jzttb2R1bGUuZXhwb3J0cz17Z3JpZDp7bWFpblRhYmxlOnt3aWR0aDonMTAwJScsdGQ6e2JvcmRlcjonMXB4IHNvbGlkIGxpZ2h0R3JleScsZGlzcGxheTondGFibGUtY2VsbCcscGFkZGluZ0xlZnQ6JzVweCd9fSxoZWFkZXJUYWJsZTp7d2lkdGg6JzEwMCUnfSxncmlkQ29udGFpbmVyOnt3aWR0aDonMTAwJSd9fSxkb2M6e2hlaWdodDonMTAwJSd9LHRvdGFsOnt3aWR0aDonYXV0byd9fTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Zyb250ZW5kL2RvY3MvbW9vZHUvc3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyOTFcbi8vIG1vZHVsZSBjaHVua3MgPSA1Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSkE7QUFDQTs7Ozs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ0hBO0FBQ0E7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNsQkE7Ozs7OztBQ0FBO0FBQ0E7Ozs7OztBQ0RBOzs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNWQTtBQUNBOzs7Ozs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDMUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ1JBO0FBQ0E7Ozs7OztBQ0RBOzs7Ozs7QUNBQTtBQUNBOzs7Ozs7QUNEQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSkE7QUFDQTs7Ozs7O0FDREE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTs7Ozs7O0FDRkE7QUFDQTs7Ozs7O0FDREE7QUFDQTs7Ozs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDdkRBO0FBQ0E7Ozs7OztBQ0RBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDaEhBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3RXQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUMvSUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ05BOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ1RBO0FBQ0E7QUFDQTs7Ozs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0xBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNkQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xEQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDN0RBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDN0ZBO0FBQ0E7Ozs7OztBQ0RBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDdkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNqRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNqS0E7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUMzTkE7QUFDQTtBQUNBOzs7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN2T0E7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDL0NBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNKQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNOQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTs7Ozs7O0FDRkE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2hGQTs7Ozs7OztBQ0FBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNKQTtBQUNBO0FBQ0E7Ozs7OztBQ0ZBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7Ozs7OztBQ0RBOzs7Ozs7QUNBQTtBQUNBOzs7Ozs7QUNEQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7QUFDQTs7Ozs7O0FDREE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNKQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSEE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNIQTtBQUNBO0FBQ0E7Ozs7OztBQ0ZBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDVkE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0pBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSEE7Ozs7OztBQ0FBO0FBQ0E7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNOQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0hBO0FBQ0E7Ozs7OztBQ0RBO0FBQ0E7QUFDQTs7Ozs7O0FDRkE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTtBQUNBOzs7Ozs7QUNEQTtBQUNBOzs7Ozs7QUNEQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3pOQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN2TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNyTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDbExBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzNHQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSEE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTs7Ozs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDOTVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3puQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzFFQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDbkhBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0hBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDcEJBO0FBQ0E7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDeFdBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3ZIQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN4SkE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2hIQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDeHlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDekZBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2pTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuSEE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuUEE7QUFDQTs7Ozs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDaEpBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDOUhBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDZkE7Ozs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25ZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuREE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN4S0E7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDMUlBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNqREE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDdlpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3RXQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNSQTs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDbElBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25qQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25aQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDOUdBO0FBQ0E7Ozs7OztBQ0RBOzs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDM1lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDMURBOzs7Iiwic291cmNlUm9vdCI6IiJ9